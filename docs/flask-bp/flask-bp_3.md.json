["```py\n$ mkdir -p ~/src/snap && cd ~/src/snap\n$ mkvirtualenv snap -i flask\n\n```", "```py\napplication\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 run.py\n\u2514\u2500\u2500 users\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 models.py\n    \u2514\u2500\u2500 views.py\n\n```", "```py\n$ pip install flask-sqlalchemy\n\n```", "```py\n$ sqlite3 snap.db  # hit control-D to escape out of the interactive SQL console if necessary.\n\n```", "```py\nfrom flask import Flask\nfrom flask.ext.sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\n\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///../snap.db'\ndb = SQLAlchemy(app)\n\n```", "```py\n$  python\n>>>from application import db\n>>>db.create_all()\n\n```", "```py\nfrom application import db\n\nclass User(db.Model):\n # model attributes\n pass\n\n```", "```py\nclass User(db.Model):\n\n id = db.Column(db.Integer, primary_key=True)\n email = db.Column(db.String(255), unique=True)\n username = db.Column(db.String(40), unique=True)\n\n```", "```py\n$ (snap) python\n>>>from application.users.models import User\n>>>new_user = User(email=\"me@example.com\", username=\"me\")\n>>>new_user.email\n'me@example.com'\n>>>new_user.username\n'me'\n\n```", "```py\n>>>from application import db\n>>>db.session.add(new_user)\n>>>db.session.commit()\n\n```", "```py\n>>>print(new_user.id)\n1\n\n```", "```py\n>>>new_user.email = 'new@example.com'\n>>>db.session.add(new_user)\n>>>db.session.commit()\n>>>print(new_user.email)\nu'new@example.com'\n\n```", "```py\n$ sqlite3 snap.db\nSQLite version 3.8.5 2014-08-15 22:37:57\nEnter \".help\" for usage hints.\nsqlite> .tables\nuser\nsqlite> .schema user\nCREATE TABLE user (\n id INTEGER NOT NULL,\n email VARCHAR(255),\n username VARCHAR(40),\n PRIMARY KEY (id),\n UNIQUE (email),\n UNIQUE (username)\n);\nsqlite> select * from user;\n1|new@example.com|me\n\n```", "```py\nclass User(db.Model):\n\n id = db.Column(db.Integer, primary_key=True)\n email = db.Column(db.String(255), unique=True)\n username = db.Column(db.String(40), unique=True)\n\ndef is_odd_id(self):\n return (self.id % 2 != 0)\n\n```", "```py\n$ (snap)  python\nPython 2.7.10 (default, Jul 13 2015, 23:27:37)\n[GCC 4.2.1 Compatible Apple LLVM 6.1.0 (clang-602.0.53)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>fromapplication.users.models import User\n>>>test = User(email='method@example.com', username='method_test')\n>>>from application import db\n>>>db.session.add(test)\n>>>db.session.commit()\n>>> test.id\n2\n>>>test.is_odd_id()\nFalse\n\n```", "```py\nimport datetime\nfrom application import db\n\nclass User(db.Model):\n\n # The primary key for each user record.\n id = db.Column(db.Integer, primary_key=True)\n\n # The unique email for each user record.\n email = db.Column(db.String(255), unique=True)\n\n # The unique username for each record.\n username = db.Column(db.String(40), unique=True)\n\n # The hashed password for the user\n password = db.Column(db.String(60))\n\n#  The date/time that the user account was created on.\n created_on = db.Column(db.DateTime, \n default=datetime.datetime.utcnow)\n\n def __repr__(self):\n return '<User {!r}>'.format(self.username)\n\n def is_authenticated(self):\n \"\"\"All our registered users are authenticated.\"\"\"\n return True\n\n def is_active(self):\n \"\"\"All our users are active.\"\"\"\n return True\n\n def is_anonymous(self):\n \"\"\"We don)::f):lf):\"\"\"users are authenticated.\"\"\"\n return False\n\n def get_id(self):\n \"\"\"Get the user ID as a Unicode string.\"\"\"\n return unicode(self.id)\n\n```", "```py\n$ (snap) pip install flask-login flask-bcrypt\n\n```", "```py\nfrom flask import Flask\nfrom flask.ext.sqlalchemy import SQLAlchemy\nfrom flask.ext.login import LoginManager\nfrom flask.ext.bcrypt import Bcrypt\n\napp = Flask(__name__)\n\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///../snap.db'\ndb = SQLAlchemy(app)\n\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nflask_bcrypt = Bcrypt(app)\n\nfrom application.users import models as user_models\nfrom application.users.views import users\n\n```", "```py\nfrom flask import Flask\nfrom flask.ext.sqlalchemy import SQLAlchemy\nfrom flask.ext.login LoginManager\nfrom flask.ext.bcrypt import Bcrypt\n\napp = Flask(__name__)\n\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///../snap.db'\ndb = SQLAlchemy(app)\n\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nflask_bcrypt = Bcrypt(app)\n\nfrom application.users import models as user_models\nfrom application.users.views import users\n\n@login_manager.user_loader\ndef load_user(user_id):\n return application.user_models.query.get(int(user_id))\n\n```", "```py\n$ pip install flask-wtf\n\n```", "```py\nfrom flask import Blueprint\n\nfrom flask.ext.wtf import Form\nfrom wtforms import StringField, PasswordField\nfrom wtforms.validators import DataRequired, Length\n\nusers = Blueprint('users', __name__, template_folder='templates')\n\nclassLoginForm(Form):\n \"\"\"\n Represents the basic Login form elements & validators.\n \"\"\"\n\n username = StringField('username', validators=[DataRequired()])\n password = PasswordField('password', validators=[DataRequired(),\n Length(min=6)])\n\n```", "```py\n<!doctype html>\n<html>\n  <head>\n    <title>Snaps</title>\n  </head>\n\n  <body>\n    <h1>Snaps</h1>\n\n    {% for message in get_flashed_messages() %}\n    <div class=\"flash\">{{ message }}</div>\n    {% endfor %}\n\n    {% if not current_user.is_authenticated() %}\n    <a href=\"{{ url_for('users.login') }}\">login</a>\n    {% else %}\n    <a href=\"{{ url_for('users.logout') }}\">logout</a>\n    {% endif %}\n\n    <div class=\"content\">\n    {% block content %}{% endblock %}\n    </div>\n  </body>\n</html>\n```", "```py\n{% extends \"layout.html\" %}\n\n{% block content %}\n\n<form action=\"{{ url_for('users.login')}}\" method=\"post\">\n  {{ form.hidden_tag() }}\n  {{ form.id }}\n  <div>{{ form.username.label }}: {{ form.username }}</div>\n  {% if form.username.errors %}\n  <ul class=\"errors\">{% for error in form.username.errors %}<li>{{ error }}</li>{% endfor %}</ul>\n  {% endif %}\n\n  <div>{{ form.password.label }}: {{ form.password }}</div>\n  {% if form.password.errors %}\n  <ul class=\"errors\">{% for error in form.password.errors %}<li>{{ error }}</li>{% endfor %}</ul>\n  {% endif %}\n\n  <div><input type=\"submit\" value=\"Login\"></div>\n</form>\n\n{% endblock %}\n```", "```py\nfrom flask import (Blueprint, flash, render_template, url_for, redirect, g)\nfrom flask.ext.login import login_user, logout_user, current_user\n\nfrom flask.ext.wtf import Form\nfrom wtforms import StringField, PasswordField\nfrom wtforms.validators import DataRequired, Length\n\nfrom models import User\nfrom application import flask_bcrypt\n\nusers = Blueprint('users', __name__, template_folder='templates')\n\nclass LoginForm(Form):\n \"\"\"\n Represents the basic Login form elements & validators.\n \"\"\"\n\n username = StringField('username', \nvalidators=[DataRequired()])\npassword = PasswordField('password', \nvalidators=[DataRequired(),Length(min=6)])\n\n@users.route('/login', methods=['GET', 'POST'])\ndef login():\n \"\"\"\nBasic user login functionality.\n\n If the user is already logged in, we\nredirect the user to the default snaps index page.\n\n If the user is not already logged in and we have\nform data that was submitted via POST request, we\ncall the validate_on_submit() method of the Flask-WTF\n Form object to ensure that the POST data matches what\nwe are expecting. If the data validates, we login the\nuser given the form data that was provided and then\nredirect them to the default snaps index page.\n\n Note: Some of this may be simplified by moving the actual User\nloading and password checking into a custom Flask-WTF validator\nfor the LoginForm, but we avoid that for the moment, here.\n \"\"\"\n\ncurrent_user.is_authenticated():\n return redirect(url_for('snaps.listing))\n\n form = LoginForm()\n if form.validate_on_submit():\n\n user = User.query.filter_by(\n username=form.username.data).first()\n\n if not user:\n flash(\"No such user exists.\")\n returnrender_template('users/login.html', form=form)\n\n if(not flask_bcrypt.check_password_hash(user.password,\n form.password.data)):\n\n flash(\"Invalid password.\")\n returnrender_template('users/login.html', form=form)\n\n login_user(user, remember=True)\n flash(\"Success!  You're logged in.\")\n returnredirect(url_for(\"snaps.listing\"))\n\n return render_template('users/login.html', form=form)\n\n@users.route('/logout', methods=['GET'])\ndef logout():\n logout_user()\n return redirect(url_for(('snaps.listing'))\n\n```", "```py\nimport datetime\nfrom application import db, flask_bcrypt\nfrom sqlalchemy.ext.hybrid import hybrid_property\n\nclass User(db.Model):\n\n # \u2026\n\n # The hashed password for the user\n _password = db.Column('password', db.String(60))\n\n # \u2026\n @hybrid_property\n def password(self):\n \"\"\"The bcrypt'ed password of the given user.\"\"\"\n\nreturn self._password\n\n @password.setter\n def password(self, password):\n \"\"\"Bcrypt the password on assignment.\"\"\"\n\n self._password = flask_bcrypt.generate_password_hash(\n password)\n\n # \u2026\n\n```", "```py\n>>>from application.users.models import User\n>>>user = User(username='test', password='mypassword', email='test@example.com')\n>>>user.password\n'$2a$12$O6oHgytOVz1hrUyoknlgqeG7TiVS7M.ogRPv4YJgAJyVeUIV8ad2i'\n>>>from application import db\n>>>db.session.add(user)\n>>>db.session.commit()\n\n```", "```py\nfrom flask import Flask\nfromflask.ext.sqlalchemy import SQLAlchemy\nfromflask.ext.login import LoginManager\nfromflask.ext.bcrypt import Bcrypt\n\napp = Flask(__name__)\n\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///../snap.db'\napp.config['SECRET_KEY'] = \"-80:,bPrVzTXp*zXZ0[9T/ZT=1ej08\"\n# \u2026\n\n```", "```py\nfrom flask import Flask\nfrom flask.ext.sqlalchemy import SQLAlchemy\nfrom flask.ext.login import LoginManager\nfrom flask.ext.bcrypt import Bcrypt\n\napp = Flask(__name__)\n\n# \u2026\nfrom application.users.views import users\napp.register_blueprint(users, url_prefix='/users')\n\n# \u2026\n\n```", "```py\nfrom application import create_app\n\napp = create_app(config='settings')\napp.run(debug=True)\n\n```", "```py\n$ python run.py\n\n```", "```py\nimport datetime\nimport hashlib\nfrom application import db\n\nclass Snap(db.Model):\n\n # The primary key for each snap record.\n id = db.Column(db.Integer, primary_key=True)\n\n # The name of the file; does not need to be unique.\n name = db.Column(db.String(128))\n\n # The extension of the file; used for proper syntax \n # highlighting\n extension = db.Column(db.String(12))\n\n # The actual content of the snap\n content = db.Column(db.Text())\n\n # The unique, un-guessable ID of the file\n hash_key = db.Column(db.String(40), unique=True)\n\n #  The date/time that the snap was created on.\n created_on = db.Column(db.DateTime, \n default=datetime.datetime.utcnow,index=True)\n\n # The user this snap belongs to\n user_id = db.Column(db.Integer, db.ForeignKey('user.id'))\n\n user = db.relationship('User', backref=db.backref(\n 'snaps', lazy='dynamic'))\n\n def __init__(self, user_id, name, content, extension):\n \"\"\"\n Initialize the snap object with the required attributes.\n \"\"\"\n\n self.user_id = user_id\n self.name = name\n self.content = content\n self.extension = extension\n\nself.created_on = datetime.datetime.utcnow()\n\n # This could be made more secure by combining the \n # application SECRET_KEYin the hash as a salt.\n self.hash_key = hashlib.sha1(self.content + str(self.created_on)).hexdigest()\n\n def __repr__(self):\n return '<Snap {!r}>'.format(self.id)\n\n```", "```py\ndefcontent_hash(context):\n # This could be made more secure by combining the\n # application SECRET_KEY in the hash as a salt.\n content = context.current_parameters['content']\n created_on = context.current_parameters['created_on']\n return hashlib.sha1(content + str(created_on)).hexdigest()\n\n```", "```py\n# The unique, un-guessable ID of the file\nhash_key = db.Column(db.String(40), unique=True, \n default=content_hash)\n\n```", "```py\nfrom flask import Blueprint\nfrom flask.ext.login import login_required\n\nfrom .models import Snap\n\nsnaps = Blueprint('snaps', __name__, template_folder='templates')\n\n@snaps.route('/', methods=['GET'])\ndef listing():\n\"\"\"List all snaps; most recent first.\"\"\"\n\n@snaps.route('/add', methods=['GET', 'POST'])\n@login_required\ndef add():\n \"\"\"Add a new snap.\"\"\"\n\n```", "```py\nfrom flask.ext.wtf import Form\nfrom wtforms import StringField\nfrom wtforms.widgets import TextArea\nfrom wtforms.validators import DataRequired\n\nclass SnapForm(Form):\n \"\"\"Form for creating new snaps.\"\"\"\n\n name = StringField('name', validators=[DataRequired()])\n extension = StringField('extension', \n validators=[DataRequired()])\n content = StringField('content', widget=TextArea(),\n validators=[DataRequired()])\n\n```", "```py\nfrom flask import Blueprint, render_template, url_for, redirect, current_app, flash\nfrom flask.ext.login import login_required, current_user\nfrom sqlalchemy import exc\n\nfrom .models import Snap\nfrom application import db\n\n# \u2026\n\n@snaps.route('/add', methods=['GET', 'POST'])\n@login_required\ndef add():\n \"\"\"Add a new snap.\"\"\"\n\n form = SnapForm()\n\n if form.validate_on_submit():\n user_id = current_user.id\n\n snap = Snap(user_id=user_id, name=form.name.data,\n content=form.content.data, \n extension=form.extension.data)\n db.session.add(snap)\n\ntry:\n db.session.commit()\n except exc.SQLAlchemyError:\n current_app.exception(\"Could not save new snap!\")\n flash(\"Something went wrong while posting your snap!\")\n\n else:\n return render_template('snaps/add.html', form=form)\n\n return redirect(url_for('snaps.listing'))\n\n```", "```py\n{% extends \"layout.html\" %}\n\n{% block content %}\n<form action=\"{{ url_for('snaps.add')}}\" method=\"post\">\n\n  {{ form.hidden_tag() }}\n  {{ form.id }}\n\n  <div class=\"row\">\n    <div>{{ form.name.label() }}: {{ form.name }}</div>\n    {% if form.name.errors %}\n    <ul class=\"errors\">{% for error in form.name.errors %}<li>{{ error }}</li>{% endfor %}</ul>\n    {% endif %}\n\n    <div>{{ form.extension.label() }}: {{ form.extension }}</div>\n    {% if form.extension.errors %}\n    <ul class=\"errors\">{% for error in form.extension.errors %}<li>{{ error }}</li>{% endfor %}</ul>\n    {% endif %}\n  </div>\n\n  <div class=\"row\">\n    <div>{{ form.content.label() }}: {{ form.content }}</div>\n    {% if form.content.errors %}\n    <ul class=\"errors\">{% for error in form.content.errors %}<li>{{ error }}</li>{% endfor %}</ul>\n    {% endif %}\n  </div>\n\n  <div><input type=\"submit\" value=\"Snap\"></div>\n</form>\n\n{% endblock %}\n```", "```py\n@snaps.route('/', methods=['GET'])\ndef listing():\n \"\"\"List all snaps; most recent first.\"\"\"\n snaps = Snap.query.order_by(\n Snap.created_on.desc()).limit(20).all()\n return render_template('snaps/index.html', snaps=snaps)\n\n```", "```py\n{% extends \"layout.html\" %}\n\n{% block content %}\n<div class=\"new-snap\">\n  <p><a href=\"{{url_for('snaps.add')}}\">New Snap</a></p>\n</div>\n\n{% for snap in snaps %}\n<div class=\"snap\">\n  <span class=\"author\">{{snap.user.username}}</span>, published on <span class=\"date\">{{snap.created_on}}</span>\n  <pre><code>{{snap.content}}</code></pre>\n</div>\n{% endfor %}\n\n{% endblock %}\n```", "```py\nfrom flask import Flask\nfrom flask.ext.sqlalchemy import SQLAlchemy\nfrom flask.ext.login import LoginManager\nfrom flask.ext.bcrypt import Bcrypt\n\n# \u2026\n\nfrom application.users import models as user_models\nfrom application.users.views import users\nfrom application.snaps.views import snaps\n\napp.register_blueprint(users, url_prefix='/users')\napp.register_blueprint(snaps, url_prefix='')\n\n@login_manager.user_loader\nde fload_user(user_id):\n return user_models.User.query.get(int(user_id))\n\n```", "```py\nfrom application import db\ndb.create_all()\n\n```", "```py\n$ python database.py\n\n```", "```py\n$ python run.py\n\n```", "```py\n$ python\n>>>from application import db\n>>>from application.users.models import User\n>>>user = User(name='test', email='test@example.com', password='foobar')\n>>>db.session.add(user)\n>>>db.session.commit(user)\n\n```"]