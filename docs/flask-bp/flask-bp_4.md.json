["```py\n$ mkdir -p ~/src/socializer && cd ~/src/socializer\n$ mkvirtualenv socializer\n$ pip install flask flask-sqlalchemy flask-bcrypt flask-login flask-wtf blinker pytest-flask\n\n```", "```py\n├── application\n│   ├── __init__.py\n│   └── users\n│       ├── __init__.py\n│       ├── models.py\n│       └── views.py\n└── run.py\n└── database.py\n\n```", "```py\nfrom flask import Flask\n\ndef create_app(config=None):\n app = Flask(__name__)\n\n if config is not None:\n app.config.from_object(config)\n\n return app\n\n```", "```py\nfrom flask import current_app as app\n\n```", "```py\nfrom application import create_app\n\napp = create_app()\napp.run(debug=True)\n\n```", "```py\n$ python run.py\n\n```", "```py\n$ python –m run\n\n```", "```py\nfrom myapp import create_app\nimport unittest\n\nclass AppTestCase(unittest.TestCase):\n\n def setUp(self):\n app = create_app()  # Could also pass custom settings.\n app.config['TESTING'] = True\n self.app = app\n\n # Whatever DB initialization is required\n\n def tearDown(self):\n # If anything needs to be cleaned up after a test.\n Pass\n\n def test_app_configuration(self):\n self.assertTrue(self.app.config['TESTING'])\n # Other relevant assertions\n\nif __name__ == '__main__':\n unittest.main()\n\n```", "```py\nimport pytest\nfrom application import create_app\n\n@pytest.fixture\ndef app():\n app = create_app()\n return app\n\n```", "```py\nimport flask\n\ndef test_app(app):\n assert isinstance(app, flask.Flask)\n\n```", "```py\n$ py.test\n=============== test session starts ================\nplatform darwin -- Python 2.7.8 -- py-1.4.26 -- pytest-2.7.0\nrootdir: /path/to/socializer, inifile:\nplugins: flask\ncollected 1 items\n\ntests/test_application.py .\n\n============= 1 passed in 0.02 seconds =============\n\n```", "```py\nfrom flask import Flask\nfrom flask.ext.sqlalchemy import SQLAlchemy\nfrom flask.ext.bcrypt import Bcrypt\n\n# Initialize the db extension, but without configuring\n# it with an application instance.\ndb = SQLAlchemy()\n\n# The same for the Bcrypt extension\nflask_bcrypt = Bcrypt()\n\ndef create_app(config=None):\n app = Flask(__name__)\n\n if config is not None:\n app.config.from_object(config)\n\n # Initialize any extensions and bind blueprints to the\n # application instance here.\n db.init_app(app)\n flask_bcrypt.init_app(app)\n\n return app\n\n```", "```py\nimport datetime\nfrom application import db, flask_bcrypt\nfrom sqlalchemy.ext.hybrid import hybrid_property\n\n__all__ = ['followers', 'User']\n\n# We use the explicit SQLAlchemy mappers for declaring the\n# followers table, since it does not require any of the features\n# that the declarative base model brings to the table.\n#\n# The `follower_id` is the entry that represents a user who\n# *follows* a `user_id`.\nfollowers = db.Table(\n 'followers',\n db.Column('follower_id', db.Integer, db.ForeignKey('user.id'),\n primary_key=True),\n db.Column('user_id', db.Integer, db.ForeignKey('user.id'),\n primary_key=True))\n\nclass User(db.Model):\n\n # The primary key for each user record.\n id = db.Column(db.Integer, primary_key=True)\n\n # The unique email for each user record.\n email = db.Column(db.String(255), unique=True)\n\n # The unique username for each record.\n username = db.Column(db.String(40), unique=True)\n\n # The hashed password for the user\n _password = db.Column('password', db.String(60))\n #  The date/time that the user account was created on.\n created_on = db.Column(db.DateTime,\n default=datetime.datetime.utcnow)\n\n followed = db.relationship('User',\n secondary=followers,\n primaryjoin=(id==followers.c.follower_id ),\n secondaryjoin=(id==followers.c.user_id),\n backref=db.backref('followers', lazy='dynamic'),\n lazy='dynamic')\n\n @hybrid_property\n def password(self):\n \"\"\"The bcrypt'ed password of the given user.\"\"\"\n\n return self._password\n\n @password.setter\n def password(self, password):\n \"\"\"Bcrypt the password on assignment.\"\"\"\n\n self._password = flask_bcrypt.generate_password_hash(\n password)\n\n def __repr__(self):\n return '<User %r>' % self.username\n\n def is_authenticated(self):\n \"\"\"All our registered users are authenticated.\"\"\"\n return True\n\n def is_active(self):\n \"\"\"All our users are active.\"\"\"\n return True\n\n def is_anonymous(self):\n \"\"\"We don't have anonymous users; always False\"\"\"\n return False\n def get_id(self):\n \"\"\"Get the user ID.\"\"\"\n return unicode(self.id)\n\n```", "```py\n followed = db.relationship('User',\n secondary=followers,\n primaryjoin=(id==followers.c.follower_id ),\n secondaryjoin=(id==followers.c.user_id),\n backref=db.backref('followers', lazy='dynamic'),\n lazy='dynamic')\n\n```", "```py\ndef unfollow(self, user):\n \"\"\"\n Unfollow the given user.\n\n Return `False` if the user was not already following the user.\n Otherwise, remove the user from the followed list and return\n the current object so that it may then be committed to the \n session.\n \"\"\"\n\n if not self.is_following(user):\n return False\n\n self.followed.remove(user)\n return self\n\ndef follow(self, user):\n \"\"\"\n Follow the given user.\n Return `False` if the user was already following the user.\n \"\"\"\n\n if self.is_following(user):\n return False\n\n self.followed.append(user)\n return self\n\ndef is_following(self, user):\n \"\"\"\n Returns boolean `True` if the current user is following the\n given `user`, and `False` otherwise.\n \"\"\"\n followed = self.followed.filter(followers.c.user_id == user.id)\n return followed.count() > 0\n\n```", "```py\nfrom application import db\nimport datetime\n\n__all__ = ['Post']\n\nclass Post(db.Model):\n\n # The unique primary key for each post created.\n id = db.Column(db.Integer, primary_key=True)\n # The free-form text-based content of each post.\n content = db.Column(db.Text())\n\n #  The date/time that the post was created on.\n created_on = db.Column(db.DateTime(),\n default=datetime.datetime.utcnow, index=True)\n\n # The user ID that created this post.\n user_id = db.Column(db.Integer(), db.ForeignKey('user.id'))\n\n def __repr__(self):\n return '<Post %r>' % self.body\n\n```", "```py\ndef newsfeed(self):\n \"\"\"\n Return all posts from users followed by the current user,\n in descending chronological order.\n\n \"\"\"\n\n join_condition = followers.c.user_id == Post.user_id\n filter_condition = followers.c.follower_id == self.id\n ordering = Post.created_on.desc()\n\n return Post.query.join(followers,\n (join_condition)).filter(\n filter_condition).order_by(ordering)\n\n```", "```py\nSQLALCHEMY_DATABASE_URI = 'sqlite:////tmp/test_app.db'\nDEBUG = True\nTESTING = True\n\n```", "```py\nimport pytest\nimport os\nfrom application import create_app, db as database\n\nDB_LOCATION = '/tmp/test_app.db'\n\n@pytest.fixture(scope='session')\ndef app():\n app = create_app(config='test_settings')\n return app\n\n@pytest.fixture(scope='session')\ndef db(app, request):\n \"\"\"Session-wide test database.\"\"\"\n if os.path.exists(DB_LOCATION):\n os.unlink(DB_LOCATION)\n\n database.app = app\n database.create_all()\n\n def teardown():\n database.drop_all()\n os.unlink(DB_LOCATION)\n request.addfinalizer(teardown)\n return database\n\n@pytest.fixture(scope='function')\ndef session(db, request):\n\n session = db.create_scoped_session()\n db.session = session\n\n def teardown():\n session.remove()\n\n request.addfinalizer(teardown)\n return session\n\n```", "```py\nfrom application.users import models\n\ndef test_create_user_instance(session):\n \"\"\"Create and save a user instance.\"\"\"\n\n email = 'test@example.com'\n username = 'test_user'\n password = 'foobarbaz'\n\n user = models.User(email, username, password)\n session.add(user)\n session.commit()\n\n # We clear out the database after every run of the test suite\n # but the order of tests may affect which ID is assigned.\n # Let's not depend on magic numbers if we can avoid it.\n assert user.id is not None\n\n assert user.followed.count() == 0\n assert user.newsfeed().count() == 0\n\n```", "```py\ndef test_user_relationships(session):\n \"\"\"User following relationships.\"\"\"\n\n user_1 = models.User(\n email='test1@example.com', username='test1',\n password='foobarbaz')\n user_2 = models.User(\n email='test2@example.com', username='test2',\n password='bingbarboo')\n\n session.add(user_1)\n session.add(user_2)\n\n session.commit()\n\n assert user_1.followed.count() == 0\n assert user_2.followed.count() == 0\n\n user_1.follow(user_2)\n\n assert user_1.is_following(user_2) is True\n assert user_2.is_following(user_1) is False\n assert user_1.followed.count() == 1\n\n user_1.unfollow(user_2)\n\n assert user_1.is_following(user_2) is False\n assert user_1.followed.count() == 0\n\n```", "```py\nfrom flask import Flask\nfrom flask.ext.sqlalchemy import SQLAlchemy\nfrom flask.ext.bcrypt import Bcrypt\nfrom blinker import Namespace\n\n# Initialize the db extension, but without configuring\n# it with an application instance.\ndb = SQLAlchemy()\nflask_bcrypt = Bcrypt()\n\nsocializer_signals = Namespace()\nuser_followed = socializer_signals.signal('user-followed')\n\n# …\n\n```", "```py\ndef follow(self, user):\n \"\"\"\n Follow the given user.\n\n Return `False` if the user was already following the user.\n \"\"\"\n\n if self.is_following(user):\n return False\n self.followed.append(user)\n\n # Publish the signal event using the current model (self) as sender.\n user_followed.send(self)\n\n return self\n\n```", "```py\n__all__ = ['user_followed_email']\n\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\nlogger = logging.getLogger(__name__)\ndef user_followed_email(user, **kwargs):\n logger.debug(\n \"Send an email to {user}\".format(user=user.username))\n\nfrom application import user_followed\n\ndef connect_handlers():\n user_followed.connect(user_followed_email)\n\n```", "```py\nfrom flask import Flask\nfrom flask.ext.sqlalchemy import SQLAlchemy\nfrom flask.ext.bcrypt import Bcrypt\nfrom blinker import Namespace\n\n# Initialize the db extension, but without configuring\n# it with an application instance.\ndb = SQLAlchemy()\nflask_bcrypt = Bcrypt()\n\nsocializer_signals = Namespace()\nuser_followed = socializer_signals.signal('user-followed')\n\nfrom signal_handlers import connect_handlers\nconnect_handlers()\n\n# …\n# …\n\n```", "```py\nfrom flask import Blueprint, render_template, url_for, redirect, flash, g\nfrom flask.ext.login import login_user, logout_user\n\nfrom flask.ext.wtf import Form\nfrom wtforms import StringField, PasswordField\nfrom wtforms.validators import DataRequired, Length\n\nfrom models import User\nfrom application import db, flask_bcrypt\n\nusers = Blueprint('users', __name__, template_folder='templates')\n\nclass Login\tForm(Form):\n \"\"\"\nRepresents the basic Login form elements & validators.\n \"\"\"\n\nusername = StringField('username',\n validators=[DataRequired()])\npassword = PasswordField('password',\n validators=[DataRequired(),Length(min=6)])\n\nclass CreateUserForm(Form):\n \"\"\"\n Encapsulate the necessary information required for creating a new user.\n \"\"\"\n\n username = StringField('username', validators=[DataRequired(), Length(min=3, max=40)])\n email = StringField('email', validators=[DataRequired(), Length(max=255)])\n password = PasswordField('password', validators=[DataRequired(),\n Length(min=8)])\n\n @users.route('/signup', methods=['GET', 'POST'])\n def signup():\n \"\"\"\nBasic user creation functionality.\n\n \"\"\"\n\nform = CreateUserForm()\n\nif form.validate_on_submit():\n\n user = User( username=form.username.data,\n email=form.email.data,\n password=form.password.data)\n\n # add the user to the database\n db.session.add(user)\n db.session.commit()\n # Once we have persisted the user to the database successfully,\n # authenticate that user for the current session\nlogin_user(user, remember=True)\nreturn redirect(url_for('users.index'))\n\nreturn render_template('users/signup.html', form=form)\n\n@users.route('/', methods=['GET'])\ndef index():\nreturn \"User index page!\", 200\n\n@users.route('/login', methods=['GET', 'POST'])\ndef login():\n \"\"\"\nBasic user login functionality.\n\n \"\"\"\n\nif hasattr(g, 'user') and g.user.is_authenticated():\nreturn redirect(url_for('users.index'))\n\nform = LoginForm()\n\nif form.validate_on_submit():\n\n # We use one() here instead of first()\n user = User.query.filter_by(username=form.username.data).one()\n if not user or not flask_bcrypt.check_password_hash(user.password, form.password.data):\n\n flash(\"No such user exists.\")\n return render_template('users/login.html', form=form)\n\n login_user(user, remember=True)\n return redirect(url_for('users.index'))\n return render_template('users/login.html', form=form)\n\n@users.route('/logout', methods=['GET'])\ndef logout():\nlogout_user()\nreturn redirect(url_for('users.login'))\n\n```", "```py\n{% extends \"layout.html\" %}\n\n{% block content %}\n\n<form action=\"{{ url_for('users.signup')}}\" method=\"post\">\n  {{ form.hidden_tag() }}\n  {{ form.id }}\n  <div>{{ form.username.label }}: {{ form.username }}</div>\n  {% if form.username.errors %}\n  <ul class=\"errors\">{% for error in form.username.errors %}<li>{{ error }}</li>{% endfor %}</ul>\n  {% endif %}\n\n  <div>{{ form.email.label }}: {{ form.email }}</div>\n  {% if form.email.errors %}\n  <ul class=\"errors\">{% for error in form.email.errors %}<li>{{ error }}</li>{% endfor %}</ul>\n  {% endif %}\n\n  <div>{{ form.password.label }}: {{ form.password }}</div>\n  {% if form.password.errors %}\n  <ul class=\"errors\">{% for error in form.password.errors %}<li>{{ error }}</li>{% endfor %}</ul>\n  {% endif %}\n\n  <div><input type=\"submit\" value=\"Sign up!\"></div>\n</form>\n\n{% endblock %}\n```", "```py\nfrom flask import Flask\nfrom flask.ext.sqlalchemy import SQLAlchemy\nfrom flask.ext.bcrypt import Bcrypt\nfrom blinker import Namespace\nfrom flask.ext.login import LoginManager\n\n# Initialize the db extension, but without configuring\n# it with an application instance.\ndb = SQLAlchemy()\nflask_bcrypt = Bcrypt()\nlogin_manager = LoginManager()\n\nsocializer_signals = Namespace()\nuser_followed = socializer_signals.signal('user-followed')\n\nfrom signal_handlers import *\n\ndef create_app(config=None):\napp = Flask(__name__)\n\nif config is not None:\n app.config.from_object(config)\n\n # Initialize any extensions and bind blueprints to the\n # application instance here.\n db.init_app(app)\n flask_bcrypt.init_app(app)\n login_manager.init_app(app)\n\n from application.users.views import users\n app.register_blueprint(users, url_prefix='/users')\n\n from application.users import models as user_models\n @login_manager.user_loader\n de fload_user(user_id):\n return user_models.User.query.get(int(user_id))\n\n return app\n\n```", "```py\nSQLALCHEMY_DATABASE_URI = 'sqlite:///socializer.db'\nSECRET_KEY = 'BpRvzXZ800[-t:=z1eZtx9t/,P*'\n\n```", "```py\n# place with other imports…\nfrom sqlalchemy import exc\n\n# …\n\ntry:\n db.session.add(user)\n db.session.commit()\n except exc.IntegrityError as e:\n # A unique column constraint was violated\n current_app.exception(\"User unique constraint violated.\")\n return render_template('users/signup.html', form=form)\n except exc.SQLAlchemyError:\n current_app.exception(\"Could not save new user!\")\n flash(\"Something went wrong while creating this user!\")\n return render_template('users/signup.html', form=form)\n\n```", "```py\ntry:\n    # We use one() here instead of first()\n    user = User.query.filter_by(\n           username=form.username.data).one()s\nexcept NoResultFound:\n    flash(\"User {username} does not exist.\".format(\n        username=form.username.data))\n    return render_template('users/login.html', form=form)\n\n# …\n```", "```py\ndef test_get_user_signup_page(client):\n \"\"\"Ensure signup page is available.\"\"\"\n response = client.get('/users/signup')\n assert response.status_code == 200\n assert 'Sign up!' in response.data\n\n```", "```py\nfrom flask import session, get_flashed_messages\nfrom application.users.models import User\nfrom application import flask_bcrypt\n\ndef test_signup_new_user(client):\n \"\"\"Successfully sign up a new user.\"\"\"\n data = {'username': 'test_username', 'email': 'test@example.com',\n 'password': 'my test password'}\n\n response = client.post('/users/signup', data=data)\n\n # On successful creation we redirect.\n assert response.status_code == 302\n\n # Assert that a session was created due to successful login\n assert '_id' in session\n\n # Ensure that we have no stored flash messages indicating an error\n # occurred.\n assert get_flashed_messages() == []\n\n user = User.query.filter_by(username=data['username']).one()\n\n assert user.email == data['email']\n assert user.password\n assert flask_bcrypt.check_password_hash(\n user.password, data['password'])\n\n```", "```py\nimport pytest\nimport sqlalchemy\n\ndef test_signup_invalid_user(client):\n \"\"\"Try to sign up with invalid data.\"\"\"\n\n data = {'username': 'x', 'email': 'short@example.com',\n 'password': 'a great password'}\n\n response = client.post('/users/signup', data=data)\n\n # With a form error, we still return a 200 to the client since\n # browsers are not always the best at handling proper 4xx response codes.\n assert response.status_code == 200\n assert 'must be between 3 and 40 characters long.' in response.data\n\n```", "```py\ndef test_signup_invalid_user_missing_fields(client):\n \"\"\"Try to sign up with missing email.\"\"\"\n\n data = {'username': 'no_email', 'password': 'a great password'}\n response = client.post('/users/signup', data=data)\n\n assert response.status_code == 200\n assert 'This field is required' in response.data\n\n with pytest.raises(sqlalchemy.orm.exc.NoResultFound):\n User.query.filter_by(username=data['username']).one()\n\n data = {'username': 'no_password', 'email': 'test@example.com'}\n response = client.post('/users/signup', data=data)\n\n assert response.status_code == 200\n assert 'This field is required' in response.data\n\n with pytest.raises(sqlalchemy.orm.exc.NoResultFound):\n User.query.filter_by(username=data['username']).one()\n\n```", "```py\nclass Post(db.Model):\n # …\n user = db.relationship('User',\n backref=db.backref('posts', lazy='dynamic'))\n\n```", "```py\n@users.route('/feed', methods=['GET'])\n@login_required\ndef feed():\n \"\"\"\n List all posts for the authenticated user; most recent first.\n \"\"\"\n posts = current_user.newsfeed()\n return render_template('users/feed.html', posts=posts)\n\n```", "```py\n{% extends \"layout.html\" %}\n\n{% block content %}\n<div class=\"new-post\">\n  <p><a href=\"{{url_for('posts.add')}}\">New Post</a></p>\n</div>\n\n{% for post in posts %}\n<div class=\"post\">\n  <span class=\"author\">{{post.user.username}}</span>, published on <span class=\"date\">{{post.created_on}}</span>\n  <pre><code>{{post.content}}</code></pre>\n</div>\n{% endfor %}\n\n{% endblock %}\n```", "```py\nfrom flask import Blueprint, render_template, url_for, redirect, flash, current_app\n\nfrom flask.ext.login import login_required, current_user\nfrom flask.ext.wtf import Form\nfrom wtforms import StringField\nfrom wtforms.widgets import TextArea\nfrom wtforms.validators import DataRequired\nfrom sqlalchemy import exc\n\nfrom models import Post\nfrom application import db\n\nposts = Blueprint('posts', __name__, template_folder='templates')\n\nclass CreatePostForm(Form):\n \"\"\"Form for creating new posts.\"\"\"\n\n content = StringField('content', widget=TextArea(),\n validators=[DataRequired()])\n\n@posts.route('/add', methods=['GET', 'POST'])\n@login_required\ndef add():\n \"\"\"Add a new post.\"\"\"\n\n form = CreatePostForm()\n if form.validate_on_submit():\n user_id = current_user.id\n\n post = Post(user_id=user_id, content=form.content.data)\n db.session.add(post)\n\n try:\n db.session.commit()\n except exc.SQLAlchemyError:\n current_app.exception(\"Could not save new post!\")\n flash(\"Something went wrong while creating your post!\")\n else:\n return render_template('posts/add.html', form=form)\n\n return redirect(url_for('users.feed'))\n\n```", "```py\n{% extends \"layout.html\" %}\n\n{% block content %}\n<form action=\"{{ url_for('posts.add')}}\" method=\"post\">\n\n  {{ form.hidden_tag() }}\n  {{ form.id }}\n\n  <div class=\"row\">\n    <div>{{ form.content.label }}: {{ form.content }}</div>\n    {% if form.content.errors %}\n    <ul class=\"errors\">{% for error in form.content.errors %}<li>{{ error }}</li>{% endfor %}</ul>\n    {% endif %}\n  </div>\n\n  <div><input type=\"submit\" value=\"Post\"></div>\n</form>\n\n{% endblock %}\n```", "```py\ndef create_app(config=None):\n    app = Flask(__name__)\n\n    # …\n    from application.users.views import users\n    app.register_blueprint(users, url_prefix='/users')\n\n from application.posts.views import posts\n app.register_blueprint(posts, url_prefix='/posts')\n\n        # …\n```"]