["```py\n +--------+                               +---------------+\n |        |--(A)- Authorization Request ->|   Resource    |\n |        |                               |     Owner     |\n |        |<-(B)-- Authorization Grant ---|               |\n |        |                               +---------------+\n |        |\n |        |                               +---------------+\n |        |--(C)-- Authorization Grant -->| Authorization |\n | Client |                               |     Server    |\n |        |<-(D)----- Access Token -------|               |\n |        |                               +---------------+\n |        |\n |        |                               +---------------+\n |        |--(E)----- Access Token ------>|    Resource   |\n |        |                               |     Server    |\n |        |<-(F)--- Protected Resource ---|               |\n +--------+                               +---------------+\n\n```", "```py\n$ mkdir \u2013p ~/src/dinnerly\n$ mkvirtualenv dinnerly\n$ cd ~/src/dinnerly\n\n```", "```py\n$ pip install flask flask-oauthlib flask-sqlalchemy flask-login flask-wtf\n\n```", "```py\n-run.py\n-application\n \u251c\u2500\u2500 __init__.py\n \u2514\u2500\u2500 users\n     \u251c\u2500\u2500 __init__.py\n     \u251c\u2500\u2500 models.py\n    \u2514\u2500\u2500 views.py\n\n```", "```py\nfrom flask import Flask\nfrom flask.ext.sqlalchemy import SQLAlchemy\n\n# Deferred initialization of the db extension\ndb = SQLAlchemy()\n\ndef create_app(config=None):\n    app = Flask(__name__, static_folder=None)\n\n    if config is not None:\n        app.config.from_object(config)\n\n    db.init_app(app)\n    return app\n```", "```py\nfrom application import create_app\n\napp = create_app(config='settings')\napp.run(debug=True)\n```", "```py\nfrom application import db, create_app\napp = create_app(config='settings')\ndb.app = app\n\ndb.create_all()\n```", "```py\nimport datetime\nfrom application import db\n\nclass User(db.Model):\n\n    # The primary key for each user record.\n    id = db.Column(db.Integer, primary_key=True)\n\n    # The username for a user. Might not be\n    username = db.Column(db.String(40))\n\n    #  The date/time that the user account was created on.\n    created_on = db.Column(db.DateTime,\n        default=datetime.datetime.utcnow)\n\n    def __repr__(self):\n        return '<User {!r}>'.format(self.username)\n```", "```py\nclass User(db.Model):\n\n   # \u2026\n\n    def is_authenticated(self):\n        \"\"\"All our registered users are authenticated.\"\"\"\n        return True\n\n    def is_active(self):\n        \"\"\"All our users are active.\"\"\"\n        return True\n\n    def is_anonymous(self):\n        \"\"\"All users are not in an anonymous state.\"\"\"\n        return False\n\n    def get_id(self):\n        \"\"\"Get the user ID as a Unicode string.\"\"\"\n        return unicode(self.id)\n```", "```py\nclass TwitterConnection(db.Model):\n\n    # The primary key for each connection record.\n    id = db.Column(db.Integer, primary_key=True)\n\n    # Our relationship to the User that this\n    # connection belongs to.\n    user_id = db.Column(db.Integer(),\n        db.ForeignKey('user.id'), nullable=False, unique=True)\n\n    # The twitter screen name of the connected account.\n    screen_name = db.Column(db.String(), nullable=False)\n\n    # The Twitter ID of the connected account\n    twitter_user_id = db.Column(db.Integer(), nullable=False)\n\n    # The OAuth token\n    oauth_token = db.Column(db.String(), nullable=False)\n\n    # The OAuth token secret\n    oauth_token_secret = db.Column(db.String(), nullable=False)\n```", "```py\nClass User(db.Model):\n  # \u2026\n\n  twitter = db.relationship(\"TwitterConnection\", uselist=False,\n    backref=\"user\")\n```", "```py\nclass FacebookConnection(db.Model):\n\n    # The primary key for each connection record.\n    id = db.Column(db.Integer, primary_key=True)\n\n    # Our relationship to the User that this\n    # connection belongs to.\n    user_id = db.Column(db.Integer(),\n        db.ForeignKey('user.id'), nullable=False)\n\n    # The numeric Facebook ID of the user that this\n    # connection belongs to.\n    facebook_id = db.Column(db.Integer(), nullable=False)\n\n    # The OAuth token\n    access_token = db.Column(db.String(), nullable=False)\n\n    # The name of the user on Facebook that this\n    # connection belongs to.\n    name = db.Column(db.String())\n```", "```py\nclass User(db.Model):\n\n       # \u2026\n\n    facebook = db.relationship(\"FacebookConnection\", \n        uselist=False, backref=\"user\")\n```", "```py\nfrom flask import Flask\nfrom flask.ext.sqlalchemy import SQLAlchemy\nfrom flask_oauthlib.client import OAuth\n from flask.ext.login import LoginManager\n\n# Deferred initialization of our extensions\ndb = SQLAlchemy()\noauth = OAuth()\nlogin_manager = LoginManager()\n\ndef create_app(config=None):\n    app = Flask(__name__, static_folder=None)\n\n    if config is not None:\n        app.config.from_object(config)\n\n    db.init_app(app)\n oauth.init_app(app)\n login_manager.init_app(app)\n\n    return app\n```", "```py\nfrom flask.ext.login import login_user, current_user\nfrom application import oauth\n\ntwitter = oauth.remote_app(\n    'twitter',\n    consumer_key='<consumer key>',\n    consumer_secret='<consumer secret>',\n    base_url='https://api.twitter.com/1.1/',\n    request_token_url='https://api.twitter.com/oauth/request_token',\n    access_token_url='https://api.twitter.com/oauth/access_token',\n    authorize_url='https://api.twitter.com/oauth/authenticate')\n\nfacebook = oauth.remote_app(\n    'facebook',\n    consumer_key='<facebook app id>',\n    consumer_secret='<facebook app secret>',\n    request_token_params={'scope': 'email,publish_actions'},\n    base_url='https://graph.facebook.com',\n    request_token_url=None,\n    access_token_url='/oauth/access_token',\n    access_token_method='GET',\n    authorize_url='https://www.facebook.com/dialog/oauth')\n```", "```py\nfrom flask import Blueprint, redirect, url_for, request\nfrom flask.ext.login import login_user, current_user\n\nfrom application.users.models import (\n    User, TwitterConnection, FacebookConnection)\nfrom application import oauth, db, login_manager\nimport sqlalchemy\n\nusers = Blueprint('users', __name__, template_folder='templates')\n```", "```py\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))\n```", "```py\n@twitter.tokengetter\ndef get_twitter_token():\n    \"\"\"Fetch Twitter token from currently logged\n    in user.\"\"\"\n    if (current_user.is_authenticated() and\n            current_user.twitter):\n        return (current_user.twitter.oauth_token,\n                current_user.twitter.oauth_token_secret)\n    return None\n\n@facebook.tokengetter\ndef get_facebook_token():\n    \"\"\"Fetch Facebook token from currently logged\n    in user.\"\"\"\n    if (current_user.is_authenticated() and\n            current_user.facebook):\n        return (current_user.facebook.oauth_token, )\n    return None\n```", "```py\n@users.route('/login/twitter')\ndef login_twitter():\n    \"\"\"Kick-off the Twitter authorization flow if\n    not currently authenticated.\"\"\"\n\n    if current_user.is_authenticated():\n        return redirect(url_for('recipes.index'))\n    return twitter.authorize(\n        callback=url_for('.twitter_authorized',\n            _external=True))\n```", "```py\n@users.route('/login/twitter-authorized')\ndef twitter_authorized():\n  resp = twitter.authorized_response()\n\n  try:\n    user = db.session.query(User).join(\n      TwitterConnection).filter(\n        TwitterConnection.oauth_token == \n          resp['oauth_token']).one()\n    except sqlalchemy.orm.exc.NoResultFound:\n      credential = TwitterConnection(\n        twitter_user_id=int(resp['user_id']),\n        screen_name=resp['screen_name'],\n        oauth_token=resp['oauth_token'],\n        oauth_token_secret=resp['oauth_token_secret'])\n\n        user = User(username=resp['screen_name'])\n        user.twitter = credential\n\n        db.session.add(user)\n        db.session.commit()\n        db.session.refresh(user)\n\n  login_user(user)\n  return redirect(url_for('recipes.index'))\n```", "```py\n@users.route('/login/facebook')\ndef login_facebook():\n    \"\"\"Kick-off the Facebook authorization flow if\n    not currently authenticated.\"\"\"\n\n    if current_user.is_authenticated():\n        return redirect(url_for('recipes.index'))\n    return facebook.authorize(\n        callback=url_for('.facebook_authorized',\n            _external=True))\n```", "```py\n@users.route('/login/facebook-authorized')\ndef facebook_authorized():\n  \"\"\"Handle the authorization grant & save the token.\"\"\"\n\n  resp = facebook.authorized_response()\n  me = facebook.get('/me')\n\n  try:\n    user = db.session.query(User).join(\n      FacebookConnection).filter(\n        TwitterConnection.oauth_token ==\n          resp['access_token']).one()\n    except sqlalchemy.orm.exc.NoResultFound:\n      credential = FacebookConnection(\n        name=me.data['name'],\n        facebook_id=me.data['id'],\n        access_token=resp['access_token'])\n\n        user = User(username=resp['screen_name'])\n        user.twitter = credential\n\n        db.session.add(user)\n        db.session.commit()\n        db.session.refresh(user)\n\n  login_user(user)\n  return redirect(url_for('recipes.index'))\n```", "```py\nimport datetime\nfrom application import db\n\nclass Recipe(db.Model):\n\n    # The unique primary key for each recipe created.\n    id = db.Column(db.Integer, primary_key=True)\n\n    # The title of the recipe.\n    title = db.Column(db.String())\n\n    # The ingredients for the recipe.\n    # For the sake of simplicity, we'll assume ingredients\n    # are in a comma-separated string.\n    ingredients = db.Column(db.Text())\n\n    # The instructions for each recipe.\n    instructions = db.Column(db.Text())\n\n    #  The date/time that the post was created on.\n    created_on = db.Column(db.DateTime(),\n        default=datetime.datetime.utcnow,\n        index=True)\n\n    # The user ID that created this recipe.\n    user_id = db.Column(db.Integer(), db.ForeignKey('user.id'))\n\n    # User-Recipe is a one-to-many relationship.\n    user = db.relationship('User',\n            backref=db.backref('recipes'))\n```", "```py\ndef summarize(self, character_count=136):\n    \"\"\"\n    Generate a summary for posting to social media.\n    \"\"\"\n\n    if len(self.title) <= character_count:\n        return self.title\n\n    short = self.title[:character_count].rsplit(' ', 1)[0]\n    return short + '...'\n```", "```py\nfrom application import oauth\n\ntwitter = oauth.remote_app(\n    'twitter',\n    consumer_key='<consumer key>',\n    consumer_secret='<consumer secret>',\n    base_url='https://api.twitter.com/1/',\n    request_token_url='https://api.twitter.com/oauth/request_token',\n    access_token_url='https://api.twitter.com/oauth/access_token',\n    authorize_url='https://api.twitter.com/oauth/authenticate',\n    access_token_method='GET')\n\nfacebook = oauth.remote_app(\n    'facebook',\n    consumer_key='<consumer key>',\n    consumer_secret='<consumer secret>',\n    request_token_params={'scope': 'email,publish_actions'},\n    base_url='https://graph.facebook.com',\n    request_token_url=None,\n    access_token_url='/oauth/access_token',\n    access_token_method='GET',\n    authorize_url='https://www.facebook.com/dialog/oauth')\n```", "```py\nfrom application.users.services import twitter, facebook\nfrom sqlalchemy import event\n\n@event.listens_for(Recipe, 'after_insert')\ndef listen_for_recipe_insert(mapper, connection, target):\n    \"\"\"Listens for after_insert event from SQLAlchemy\n    for Recipe model instances.\"\"\"\n\n    summary = target.summarize()\n\n    if target.user.twitter:\n        twitter_response = twitter.post(\n            'statuses/update.json',\n            data={'status': summary})\n        if twitter_response.status != 200:\n            raise ValueError(\"Could not publish to Twitter.\")\n\n    if target.user.facebook:\n        fb_response = facebook.post('/me/feed', data={\n            'message': summary\n        })\n        if fb_response.status != 200:\n            raise ValueError(\"Could not publish to Facebook.\")\n```", "```py\nfrom flask import abort, render_template\nfrom flask.ext.login import login_required\n\n# \u2026\n\n@users.route('/twitter/find-friends')\n@login_required\ndef twitter_find_friends():\n    \"\"\"Find common friends.\"\"\"\n\n    if not current_user.twitter:\n        abort(403)\n\n    twitter_user_id = current_user.twitter.twitter_user_id\n\n    # This will only query 5000 Twitter user IDs.\n    # If your users have more friends than that,\n    # you will need to handle the returned cursor\n    # values to iterate over all of them.\n    response = twitter.get(\n        'friends/ids?user_id={}'.format(twitter_user_id))\n\n    friends = response.json().get('ids', list())\n    friends = [int(f) for f in friends]\n\n    common_friends = User.query.filter(\n        User.twitter_user_id.in_(friends))\n\n    return render_template('users/friends.html',\n        friends=common_friends)\n```", "```py\n$ pip install flask-alembic\n\n```", "```py\n$ pip install flask-script\n\n```", "```py\nfrom flask.ext.script import Manager, Shell, Server\nfrom application import create_app, db\nfrom flask_alembic.cli.script import manager as alembic_manager\n\n# Create the `manager` object with a\n# callable that returns a Flask application object.\nmanager = Manager(app=create_app)\n\ndef _context():\n    \"\"\"Adds additional objects to our default shell context.\"\"\"\n    return dict(db=db)\n\nif __name__ == '__main__':\n manager.add_command('db', alembic_manager)\n    manager.add_command('runserver', Server(port=6000))\n    manager.add_command('shell', Shell(make_context=_context))\n    manager.run()\n```", "```py\n# \u2026\nfrom flask.ext.alembic import Alembic\n\n# \u2026\n# Intialize the Alembic extension\nalembic = Alembic()\n\ndef create_app(config=None):\n    app = Flask(__name__, static_folder=None)\n\n    if config is not None:\n        app.config.from_object(config)\n\n    import application.users.models\n    import application.recipes.models\n       # \u2026\n alembic.init_app(app)\n\n    from application.users.views import users\n    app.register_blueprint(users, url_prefix='/users')\n\n    return app\n```", "```py\n$ python manage.py db revision 'Initial schema.'\n\n```", "```py\n\"\"\"Initial schema.\n\nRevision ID: cd5ee4319a3\nRevises:\nCreate Date: 2015-10-30 23:54:00.990549\n\n\"\"\"\n\n# revision identifiers, used by Alembic.\nrevision = 'cd5ee4319a3'\ndown_revision = None\nbranch_labels = ('default',)\ndepends_on = None\n\nfrom alembic import op\nimport sqlalchemy as sa\n\ndef upgrade():\n    ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('user',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('username', sa.String(length=40), nullable=True),\n    sa.Column('created_on', sa.DateTime(), nullable=True),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_table('facebook_connection',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('user_id', sa.Integer(), nullable=False),\n    sa.Column('facebook_id', sa.Integer(), nullable=False),\n    sa.Column('access_token', sa.String(), nullable=False),\n    sa.Column('name', sa.String(), nullable=True),\n    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),\n    sa.PrimaryKeyConstraint('id'),\n    sa.UniqueConstraint('user_id')\n    )\n    op.create_table('recipe',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('title', sa.String(), nullable=True),\n    sa.Column('ingredients', sa.Text(), nullable=True),\n    sa.Column('instructions', sa.Text(), nullable=True),\n    sa.Column('created_on', sa.DateTime(), nullable=True),\n    sa.Column('user_id', sa.Integer(), nullable=True),\n    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_index(\n        op.f('ix_recipe_created_on'), 'recipe',\n        ['created_on'], unique=False)\n    op.create_table('twitter_connection',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('user_id', sa.Integer(), nullable=False),\n    sa.Column('screen_name', sa.String(), nullable=False),\n    sa.Column('twitter_user_id', sa.Integer(), nullable=False),\n    sa.Column('oauth_token', sa.String(), nullable=False),\n    sa.Column('oauth_token_secret', sa.String(), nullable=False),\n    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),\n    sa.PrimaryKeyConstraint('id'),\n    sa.UniqueConstraint('user_id')\n    )\n    ### end Alembic commands ###\n\ndef downgrade():\n    ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('twitter_connection')\n    op.drop_index(\n        op.f('ix_recipe_created_on'), table_name='recipe')\n    op.drop_table('recipe')\n    op.drop_table('facebook_connection')\n    op.drop_table('user')\n    ### end Alembic commands ###\n```", "```py\n$ python manage.py db upgrade\n\n```"]