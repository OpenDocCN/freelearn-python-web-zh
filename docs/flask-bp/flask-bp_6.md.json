["```py\n$ mkdir -p ~/src/hublot && cd ~/src/hublot\n$ mkvirtualenv hublot\n$ pip install flask flask-sqlalchemy flask-script\n\n```", "```py\n\u251c\u2500\u2500 application\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 repositories\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u2514\u2500\u2500 models.py\n\u2514\u2500\u2500 manage.py\n\n```", "```py\nfrom flask import Flask\nfrom flask.ext.sqlalchemy import SQLAlchemy\n\n# Initialize the db extension, but without configuring\n# it with an application instance.\ndb = SQLAlchemy()\n\ndef create_app(config=None):\n    app = Flask(__name__)\n\n    if config is not None:\n        app.config.from_object(config)\n\n    # Initialize extensions\n    db.init_app(app)\n\n    return app\n```", "```py\nSQLALCHEMY_DATABASE_URI = 'sqlite:///../hublot.db'\n```", "```py\nfrom application import db\nfrom sqlalchemy.schema import UniqueConstraint\nimport datetime\n\nclass Repository(db.Model):\n    \"\"\"Holds the meta-information about a particular\n    Github repository.\"\"\"\n\n    # The unique primary key for the local repository record.\n    id = db.Column(db.Integer, primary_key=True)\n\n    # The name of the repository.\n    name = db.Column(db.String(length=255), nullable=False)\n\n    # The github org/user that owns the repository.\n    owner = db.Column(db.String(length=255), nullable=False)\n\n    # The description (if any) of the repository.\n    description = db.Column(db.Text())\n\n    #  The date/time that the record was created on.\n    created_on = db.Column(db.DateTime(), \n        default=datetime.datetime.utcnow, index=True)\n\n    # The SQLAlchemy relation for the issues contained within this\n    # repository.\n    issues = db.relationship('Issue')\n\n    __table_args__ = (UniqueConstraint('name', 'owner'), )\n\n    def __repr__(self):\n        return u'<Repository {}>'.format(self.name)\n```", "```py\nclass Issue(db.Model):\n    \"\"\"Holds the meta information regarding an issue that\n    belongs to a repository.\"\"\"\n\n    # The autoincremented ID of the issue.\n    id = db.Column(db.String(length=40), primary_key=True)\n    # The repository ID that this issue belongs to.\n\n    #\n    # This relationship will produce a `repository` field\n    # that will link back to the parent repository.\n    repository_id = db.Column(db.Integer(), \n        db.ForeignKey('repository.id'))\n\n    # The title of the issue\n    title = db.Column(db.String(length=255), nullable=False)\n\n    # The issue number\n    number = db.Column(db.Integer(), nullable=False)\n\n    state = db.Column(db.Enum('open', 'closed'), nullable=False)\n\n    def __repr__(self):\n        \"\"\"Representation of this issue by number.\"\"\"\n        return '<Issue {}>'.format(self.number)\n```", "```py\nfrom flask.ext.script import Manager\nfrom application import create_app, db\n\n# Create the `manager` object with a\n# callable that returns a Flask application object.\nmanager = Manager(app=create_app)\n```", "```py\n@manager.command\ndef init_db():\n \"\"\"Initialize SQLAlchemy database models.\"\"\"\n\n db.create_all()\n\n```", "```py\nif __name__ == '__main__':\n    manager.run()\n```", "```py\n$ python manage.py init_db\n\n```", "```py\n@manager.command\ndef drop_db():\n if prompt_bool(\n \"Are you sure you want to lose all your data\"):\n db.drop_all()\n\n```", "```py\n$ python manage.py drop_db\n\n```", "```py\nusage: manage.py [-?] {shell,drop_db,init_db,runserver} ...\n\npositional arguments:\n {shell,drop_db,init_db,runserver}\n shell           Runs a Python shell inside Flask application \n context.\n drop_db\n init_db         Initialize SQLAlchemy database models.\n runserver       Runs the Flask development server i.e. \n app.run()\n\noptional arguments:\n -?, --help            show this help message and exit\n\n```", "```py\nfrom flask.ext.script import Manager, prompt_bool, Server\n# \u2026\n\nif __name__ == '__main__':\n    manager.add_command('runserver', Server(port=6000))\n    manager.run()\n```", "```py\ndef _context():\n    \"\"\"Adds additional objects to our default shell context.\"\"\"\n    return dict(db=db, repositories=repositories)\n\nif __name__ == '__main__':\n    manager.add_command('runserver', Server(port=6000))\n    manager.add_command('shell', Shell(make_context=_context))\n    manager.run()\n```", "```py\n$ python manage.py shell\n\n>>> type(db)\n<class 'flask_sqlalchemy.SQLAlchemy'>\n>>>\n\n```", "```py\n$ python manage.py runserver\n * Running on http://127.0.0.1:6000/ (Press CTRL+C to quit)\n\n```", "```py\n$ python manage.py repositories add \"https://github.com/mitsuhiko/flask\"\\\n --description=\"Main Flask repository\"\n\n```", "```py\nfrom flask.ext.script import Manager\n\nrepository_manager = Manager(\n    usage=\"Repository-based CLI actions.\")\n\n@repository_manager.command\ndef add():\n    \"\"\"Adds a repository to our database.\"\"\"\n    pass\n```", "```py\nfrom flask.ext.script import Manager, prompt_bool, Server, Shell\nfrom application import create_app, db, repositories\nfrom application.repositories.cli import repository_manager\n\n# Create the `manager` object with a\n# callable that returns a Flask application object.\nmanager = Manager(app=create_app)\n\n# \u2026\n# \u2026\n\nif __name__ == '__main__':\n    manager.add_command('runserver', Server(port=6000))\n    manager.add_command('shell', Shell(make_context=_context))\n manager.add_command('repositories', repository_manager)\n    manager.run()\n```", "```py\n$ python manage.py repositories --help\nusage: Repository-based CLI actions.\n\nRepository-based CLI actions.\n\npositional arguments:\n {add}\n add       Adds a repository to our database.\n\noptional arguments:\n -?, --help  show this help message and exit\n\n```", "```py\n$ python manage.py repositories add\n\n```", "```py\n@repository_manager.command\ndef add(url, description=None):\n    \"\"\"Adds a repository to our database.\"\"\"\n\n    print url, description\n```", "```py\n$ python manage.py repositories add \"https://github.com/mitsuhiko/flask\" --description=\"A repository to add!\"\n\nhttps://github.com/mitsuhiko/flask A repository to add!\n\n```", "```py\n@repository_manager.command\ndef add(url, description=None):\n    \"\"\"Adds a repository to our database.\"\"\"\n\n parsed = urlparse(url)\n\n # Ensure that our repository is hosted on github\n if parsed.netloc != 'github.com':\n print \"Not from Github! Aborting.\"\n return 1\n\n try:\n _, owner, repo_name = parsed.path.split('/')\n except ValueError:\n print \"Invalid Github project URL format!\"\n        return 1\n```", "```py\nfrom flask.ext.script import Manager\nfrom urlparse import urlparse\nfrom application.repositories.models import Repository\nfrom application import db\nimport sqlalchemy\n\n# \u2026\n\n@repository_manager.command\ndef add(url, description=None):\n    \"\"\"Adds a repository to our database.\"\"\"\n\n    parsed = urlparse(url)\n\n    # Ensure that our repository is hosted on github\n    if parsed.netloc != 'github.com':\n        print \"Not from Github! Aborting.\"\n        return 1\n\n    try:\n        _, owner, repo_name = parsed.path.split('/')\n    except ValueError:\n        print \"Invalid Github project URL format!\"\n        return 1\n\n repository = Repository(name=repo_name, owner=owner)\n db.session.add(repository)\n\n try:\n db.session.commit()\n except sqlalchemy.exc.IntegrityError:\n print \"That repository already exists!\"\n return 1\n\n print \"Created new Repository with ID: %d\" % repository.id\n    return 0\n```", "```py\n$ python manage.py repositories add \"https://github.com/mitsuhiko/flask\" --description=\"A repository to add!\"\n\nCreated new Repository with ID: 1\n\n```", "```py\n$ sqlite3 hublot.db\nSQLite version 3.8.5 2014-08-15 22:37:57\nEnter \".help\" for usage hints.\n\nsqlite> select * from repository;\n\n1|flask|mitsuhiko|A repository to add!|2015-07-22 04:00:36.080829\n\n```", "```py\n$ pip install github3.py\n\n```", "```py\nclass Githubber(object):\n    \"\"\"\n    A Flask extension that wraps necessary configuration\n    and functionality for interacting with the Github API\n    via the `github3.py` 3rd party library.\n    \"\"\"\n\n    def __init__(self, app=None):\n        \"\"\"\n        Initialize the extension.\n\n        Any default configurations that do not require\n        the application instance should be put here.\n        \"\"\"\n\n        if app:\n            self.init_app(app)\n\n    def init_app(self, app):\n        \"\"\"\n        Initialize the extension with any application-level \n        Configuration requirements.\n        \"\"\"\n        self.app = app\n```", "```py\n    def init_app(self, app):\n        \"\"\"\n        Initialize the extension with any application-level \n        Configuration requirements.\n\n        Also store the initialized extension and application state\n        to the `app.extensions`\n        \"\"\"\n\n        if not hasattr(app, 'extensions'):\n            app.extensions = {}\n\n        if app.config.get('GITHUB_USERNAME') is None:\n            raise ValueError(\n                \"Cannot use Githubber extension without \"\n                \"specifying the GITHUB_USERNAME.\")\n\n        if app.config.get('GITHUB_PASSWORD') is None:\n            raise ValueError(\n                \"Cannot use Githubber extension without \"\n                \"specifying the GITHUB_PASSWORD.\")\n\n        # Store the state of the currently configured extension in\n        # `app.extensions`.\n        app.extensions['githubber'] = self\n        self.app = app\n```", "```py\nfrom github3 import login\n\nclass Githubber(object):\n    # \u2026\n    def __init__(self, app=None):\n\n        self._client = None\n        # \u2026\n\n    @property\n    def client(self):\n        if self._client:\n            return self._client\n\n        gh_client = login(self.app.config['GITHUB_USERNAME'],\n                password=self.app.config['GITHUB_PASSWORD'])\n\n        self._client = gh_client\n        return self._client\n```", "```py\nfrom flask import Flask\nfrom flask.ext.sqlalchemy import SQLAlchemy\nfrom application.extensions import Githubber\n\n# \u2026\nhubber = Githubber()\n\ndef create_app(config=None):\n    app = Flask(__name__)\n    # \u2026\n\n    # Initialize any extensions and bind blueprints to the\n    # application instance here.\n    db.init_app(app)\n hubber.init_app(app)\n\n    return app\n```", "```py\nfrom flask.ext.script import Manager\nfrom urlparse import urlparse\nfrom application.repositories.models import Repository, Issue\nfrom application import db, hubber\nimport sqlalchemy\n\n# \u2026\n\n@repository_manager.command\ndef fetch_issues(repository_id):\n    \"\"\"Fetch all commits for the given Repository.\"\"\"\n\n    try:\n        repo = Repository.query.get(repository_id)\n    except sqlalchemy.orm.exc.NoResultFound:\n        print \"No such repository ID!\"\n        return 1\n\n    r = hubber.client.repository(repo.owner, repo.name)\n    issues = []\n\n    for issue in r.iter_issues():\n        i = Issue(repository_id=repo.id, title=issue.title,\n                number=issue.number, state=issue.state)\n\n        issues.append(i)\n\n    db.session.add_all(issues)\n\n       print \"Added {} issues!\".format(len(issues))\n```"]