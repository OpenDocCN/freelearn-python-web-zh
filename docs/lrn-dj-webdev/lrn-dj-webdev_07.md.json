["```py\nclass UserFollowers(models.Model):\n  user = models.ForeignKey(User, unique=True))\n  date = models.DateTimeField(auto_now_add=True)\n  count = models.IntegerField(default=1))\n  followers = models.ManyToManyField(User, related_name='followers')\n  def __str__(self):\n    return '%s, %s' % self.user, self.count\n```", "```py\n$ python manage.py syncdb\n\n```", "```py\n  {% block navbar %}\n  <p class=\"navbar-text navbar-right\">\n    <span class=\"glyphicon glyphicon-user\"></span> {{ user.username }}\n  </p>\n  {% endblock %}\n```", "```py\n  {% extends \"base.html\" %}\n  {% block navbar %}\n  <p class=\"navbar-text navbar-right\">\n    <span class=\"glyphicon glyphicon-user\"></span> {{ user.username }}\n  </p>\n  {% endblock %}\n  {% block content %}\n  <div class=\"row clearfix\">\n    <div class=\"col-md-6 col-md-offset-3 column\">\n      <form id=\"search-form\" action=\"post/\" method=\"POST\">{% csrf_token %}\n        <div class=\"input-group\">\n          {{ form.text.errors }}\n          {{ form.text }}\n          {{ form.country.as_hidden }}\n          <span class=\"input-group-btn\">\n            <button class=\"btn btn-default\" type=\"submit\">Post</button>\n          </span>\n        </div><!-- /input-group -->\n      </form>\n    </div>\n    <h1>&nbsp;</h1>\n    <div class=\"col-md-12 column\">\n      {% for tweet in tweets %}\n      <div class=\"well\">\n        <span>{{ tweet.text }}</span>\n      </div>\n      {% endfor %}\n    </div>\n  </div>\n  {% endblock %}\n```", "```py\nclass TweetForm(forms.Form):\n  text = forms.CharField(widget=forms.Textarea(attrs={'rows': 1, 'cols': 85, 'class':'form-control', 'placeholder': 'Post a new Tweet'}), max_length=160)\n  country = forms.CharField(widget=forms.HiddenInput())\n```", "```py\n  url(r'^login/$', 'django.contrib.auth.views.login'),\n  url(r'^logout/$', 'django.contrib.auth.views.logout')\n```", "```py\n  from django.conf.urls import patterns, include, url\n  from django.contrib import admin\n  from tweet.views import Index, Profile, PostTweet, HashTagCloud, Search, SearchHashTag, HashTagJson\n  admin.autodiscover()\n\n  urlpatterns = patterns('',\n    url(r'^$', Index.as_view()),\n    url(r'^user/(\\w+)/$', Profile.as_view()),\n    url(r'^admin/', include(admin.site.urls)),\n    url(r'^user/(\\w+)/post/$', PostTweet.as_view()),\n    url(r'^hashTag/(\\w+)/$', HashTagCloud.as_view()),\n    url(r'^search/$', Search.as_view()),\n    url(r'^search/hashTag$', SearchHashTag.as_view()),\n    url(r'^hashtag.json$', HashTagJson.as_view()),\n    url(r'^login/$', 'django.contrib.auth.views.login'),\n    url(r'^logout/$', 'django.contrib.auth.views.logout')   \n  )\n```", "```py\n $  mkdir -p mytweets/templates/registration\n\n```", "```py\n  {% extends \"base.html\" %}\n  {% block content %}\n  {% if form.errors %}\n  <p>Your username and password didn't match. Please try again.</p>\n  {% endif %}\n  <form method=\"post\" action=\"{% url 'django.contrib.auth.views.login' %}\">\n    {% csrf_token %}\n    <table>\n      <tr>\n        <td>{{ form.username.label_tag }}</td>\n        <td>{{ form.username }}</td>\n      </tr>\n      <tr>\n        <td>{{ form.password.label_tag }}</td>\n        <td>{{ form.password }}</td>\n      </tr>\n    </table>\n    <input type=\"submit\" value=\"login\"/>\n    <input type=\"hidden\" name=\"next\" value=\"{{ next }}\"/>\n  </form>\n  {% endblock %}\n```", "```py\n  {% extends \"base.html\" %}\n  {% block content %}\n    You have been Logged out!\n  {% endblock %}\n```", "```py\nLOGIN_REDIRECT_URL = '/profile'\nLOGIN_URL = 'django.contrib.auth.views.login'\n```", "```py\n  url(r'^profile/$', UserRedirect.as_view()),\n```", "```py\nclass UserRedirect(View):\n  def get(self, request):\n  return HttpResponseRedirect('/user/'+request.user.username)\n```", "```py\n  {% extends \"base.html\" %}\n  {% block navbar %}\n  <p class=\"navbar-text navbar-left\">\n    <span class=\"glyphicon glyphicon-user\"> </span> {{ profile.username }}'s Profile Page\n    {% if profile.username != user.username %}\n    <span class=\"btn btn-xs btn-default follow-btn\" title=\"Click to follow {{ profile.username }}\">\n    <input id=\"follow\" type=\"hidden\" name=\"follow\" value=\"{{ profile.username }}\">\n    <span class=\"glyphicon glyphicon-plus\"> </span> {% if following %} Unfollow {% else %} Follow {% endif %}</span>\n    {% endif %}\n  </p>\n  <p class=\"navbar-text navbar-right\">\n    <span class=\"glyphicon glyphicon-user\"></span> {{ user.username }}\n  </p>\n  {% endblock %}\n  {% block content %}\n  <div class=\"row clearfix\">\n    <div class=\"col-md-6 col-md-offset-3 column\">\n      <form id=\"search-form\" action=\"post/\" method=\"POST\">{% csrf_token %}\n        <div class=\"input-group\">\n          {{ form.text.errors }}\n          {{ form.text }}\n          {{ form.country.as_hidden }}\n          <span class=\"input-group-btn\">\n            <button class=\"btn btn-default\" type=\"submit\">Post</button>\n          </span>\n        </div>\n        <!-- /input-group -->\n      </form>\n    </div>\n    <h1>&nbsp;</h1>\n    <div class=\"col-md-12 column\">\n      {% for tweet in tweets %}\n      <div class=\"well\">\n        <span>{{ tweet.text }}</span>\n      </div>\n      {% endfor %}\n    </div>\n  </div>\n  {% endblock %}\n```", "```py\n  {% if profile.username != user.username %}\n  <span class=\"btn btn-xs btn-default follow-btn\" title=\"Click to follow {{ profile.username }}\">\n    <input id=\"follow\" type=\"hidden\" name=\"follow\" value=\"{{ profile.username }}\">\n  <span class=\"glyphicon glyphicon-plus\"> </span> {% if following %} Unfollow {% else %} Follow {% endif %}</span>\n  {% endif %}\n```", "```py\nclass Profile(LoginRequiredMixin, View):\n  \"\"\"User Profile page reachable from /user/<username> URL\"\"\"\n  def get(self, request, username):\n    params = dict()\n    userProfile = User.objects.get(username=username))\n    userFollower = UserFollower.objects.get(user=userProfile)\n    if userFollower.followers.filter(username=request.user.username).exists():\n      params[\"following\"] = True\n    else:\n      params[\"following\"] = False\n      form = TweetForm(initial={'country': 'Global'})\n      search_form = SearchForm()\n      tweets = Tweet.objects.filter(user=userProfile).order_by('-created_date')\n      params[\"tweets\"] = tweets\n      params[\"profile\"] = userProfile\n      params[\"form\"] = form\n      params[\"search\"] = search_form\n      return render(request, 'profile.html', params)\n```", "```py\n  if userFollower.followers.filter(username=request.user.username).exists():\n```", "```py\n  def post(self, request, username):\n    follow = request.POST['follow']\n    user = User.objects.get(username= request.user.username)))\n    userProfile === User.objects.get(username=username)\n    userFollower, status = UserFollower.objects.get_or_create(user=userProfile)\n    if follow=='true':\n      #follow user\n      userFollower.followers.add(user)\n    else:\n      #unfollow user\n      userFollower.followers.remove(user)\n    return HttpResponse(json.dumps(\"\"), content_type=\"application/json\")\n```", "```py\n<p class=\"navbar-text navbar-left\">\n  <span class=\"glyphicon glyphicon-user\"> </span> {{ profile.username }}'s Profile Page\n    {% if profile.username != user.username %}\n    <span class=\"btn btn-xs btn-default follow-btn\" title=\"Click to follow {{ profile.username }}\" value=\"{{ following }}\" username=\"{{ profile.username }}\">\n      <span class=\"glyphicon glyphicon-plus\"></span><span class=\"follow-text\">\n      {{ following|yesno:\"Unfollow,Follow\" }}\n    </span>\n  </span>\n  {% endif %}\n</p>\n```", "```py\n$(\".follow-btn\").click(function () {\n  var username = $(this).attr('username');\n  var follow = $(this).attr('value') != \"True\";\n  $.ajax({\n    type: \"POST\",\n    url:  \"/user/\"+username+\"/\",\n    data: { username: username , follow : follow  },\n    success: function () {\n      window.location.reload();\n    },\n    error: function () {\n      alert(\"ERROR !!\");\n    }\n  })\n});\n```", "```py\n  {% block js %}\n  <script src=\"img/profile.js' %}\"></script>\n  {% endblock %}\n```", "```py\n  {% extends \"base.html\" %}\n  {% load staticfiles %}\n  {% block navbar %}\n  <p class=\"navbar-text navbar-right\">\n    <span class=\"glyphicon glyphicon-user\"></span> {{ user.username }}\n  </p>\n  {% endblock %}\n  {% block content %}\n  <div class=\"row clearfix\">\n    <div class=\"col-md-12 column\">\n      {% for userFollower in userFollowers %}\n      <div class=\"well\">\n        <span class=\"username\">{{ userFollower.user.username }}</span>\n        <span class=\"count text-muted\"> ({{ userFollower.count }} followers)</span>\n      </div>\n      {% endfor %}\n    </div>\n  </div>\n  {% endblock %}\n```", "```py\nclass MostFollowedUsers(View):\n  def get(self, request):\n    userFollowers = UserFollower.objects.order_by('-count')\n    params = dict()\n    params['userFollowers'] = userFollowers\n    return render(request, 'users.html', params)\n```", "```py\n  userFollowers = UserFollower.objects.order_by('-count')\n```", "```py\n  url(r'^mostFollowed/$', MostFollowedUsers.as_view()),\n```", "```py\n  userFollowers = UserFollower.objects.order_by('-count')[:10]\n```"]