["```py\nsudo apt-get install mysql-server \n\n```", "```py\npip install MySQL-python \n\n```", "```py\nDATABASES = {\n  'default': {\n  'ENGINE': 'django.db.backends.mysql',\n  'NAME': 'django_db',\n  'USER': 'your_username',\n  'PASSWORD': 'your_password',\n  }\n}\n```", "```py\npython manage.py syncdb \n\n```", "```py\nDATABASES = {\n  'default': {\n    'NAME': 'app_data',\n    'ENGINE': 'django.db.backends.postgresql_psycopg2',\n    'USER': 'postgres_user',\n    'PASSWORD': 's3krit'\n  },\n  'users': {\n    'NAME': 'user_data',\n    'ENGINE': 'django.db.backends.mysql',\n    'USER': 'mysql_user',\n    'PASSWORD': 'priv4te'\n  }\n}\n```", "```py\n$python manage.py syncdb \n\n```", "```py\n$python manage.py makemigrations 'app_name'\n\n```", "```py\nMigrations for 'app_name':\n  0003_auto.py:\n    - Alter field name on app_name\n```", "```py\n$ python manage.py migrate app_name\n\n```", "```py\nSynchronize non migrated apps: sessions, admin, messages, auth, staticfiles, contenttypes\nApply all migrations: app_name\nSynchronizing apps without migrations:\nCreating tables...\nInstalling custom SQL...\nInstalling indexes...\nInstalled 0 object(s) from 0 fixture(s)\nRunning migrations:\nApplying app_name.0003_auto... OK\n\n```", "```py\n$ python manage.py makemigrations tweet\n\n```", "```py\nMigrations for 'tweet': \n0001_initial.py: \n- Create model HashTag \n- Create model Tweet \n- Add field tweet to hashtag \n\n```", "```py\n$python manage.py makemigrations tweet\n\n```", "```py\nMigrations for 'tweet': \n0002_auto_20141215_0808.py: \n- Alter field text on tweet \n\n```", "```py\n$mysql -u mysql_username -pmysql_password mytweets \n\n```", "```py\n$mysql> desc tweet_tweet;\n\n```", "```py\n+-------------------+-------------+------+-----+---------+----------------+\n| Field | Type | Null | Key | Default | Extra |\n+--------------+--------------+------+-----+---------+----------------+\n| id | int(11) | NO | PRI | NULL | auto_increment |\n| user_id | int(11) | NO | MUL | NULL | |\n| text | varchar(160) | NO | | NULL | |\n| created_date | datetime | NO | | NULL | |\n| country | varchar(30) | NO | | NULL | |\n| is_active | tinyint(1) | NO | | NULL | |\n+--------------+--------------+------+-----+---------+----------------+\n6 rows in set (0.00 sec)\n\n```", "```py\ntext | varchar(160) | NO | | NULL\n\n```", "```py\n$python manage.py migrate tweet\n\n```", "```py\nApply all migrations: tweet\nRunning migrations:\nApplying tweet.0002_auto_20141215_0808... OK\n\n```", "```py\nmysql> desc tweet_tweet;\n+--------------+--------------+------+-----+---------+----------------+\n| Field | Type | Null | Key | Default | Extra |\n+--------------+--------------+------+-----+---------+----------------+\n| id | int(11) | NO | PRI | NULL | auto_increment |\n| user_id | int(11) | NO | MUL | NULL | |\n| text | varchar(140) | YES | | NULL | |\n| created_date | datetime | NO | | NULL | |\n| country | varchar(30) | NO | | NULL | |\n| is_active | tinyint(1) | NO | | NULL | |\n+--------------+--------------+------+-----+---------+----------------+\n6 rows in set (0.00 sec)\n\n```", "```py\n| text | varchar(140) | YES | | NULL | |\n\n```", "```py\nmysql> select * from django_migrations;\n+----+-------+-------------------------+---------------------+\n| id | app | name | applied |\n+----+-------+-------------------------+---------------------+\n| 1 | tweet | 0001_initial | 2014-12-15 08:02:34 |\n| 2 | tweet | 0002_auto_20141215_0808 | 2014-12-15 08:13:19 |\n+----+-------+-------------------------+---------------------+\n\n```", "```py\n$python manage.py migrate tweet zero\n\n```", "```py\n$python manage.py migrate tweet \n\n```", "```py\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\nfrom django.db import models, migrations\n\nclass Migration(migrations.Migration):\ndependencies = [\n  ('user_profile', '__first__'),\n]\n\noperations = [\n  migrations.CreateModel(\n  name='HashTag',\n  fields=[\n    ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n    ('name', models.CharField(unique=True, max_length=64)),\n  ],\n  options = {\n  },\n  bases=(models.Model,),\n  ),\n  migrations.CreateModel(\n  name='Tweet',\n  fields=[\n    ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n    ('text', models.CharField(max_length=160)),\n    ('created_date', models.DateTimeField(auto_now_add=True)),\n    ('country', models.CharField(default=b'Global', max_length=30)),\n    ('is_active', models.BooleanField(default=True)),\n    ('user', models.ForeignKey(to='user_profile.User')),\n  ],\n  options = {\n  },\n  bases=(models.Model,),\n  ),\n  migrations.AddField(\n    model_name='hashtag',\n    name='tweet',\n    field=models.ManyToManyField(to='tweet.Tweet'),\n    preserve_default=True,\n  ),\n]\n```", "```py\n        migrations.CreateModel(\n        name='HashTag',....\n        migrations.CreateModel(\n        name='Tweet',..\n        ```", "```py\n$python manage.py makemigrations --empty tweet\n\n```", "```py\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\nclass Migration(migrations.Migration):\n\ndependencies = [\n  ('tweet', '0002_auto_20141215_0808'),\n]\n\noperations = [\n]\n```", "```py\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\ndef load_data(apps, schema_editor):\n  Tweet(text='This is sample Tweet',\n    created_date=date(2013,11,29),\n    country='India',\n    is_active=True,\n  ).save()\n\nclass Migration(migrations.Migration):\n\ndependencies = [\n  ('tweet', '0002_auto_20141215_0808'),\n]\n\noperations = [\n  migrations.RunPython(load_data)\n]\n```", "```py\n$python manage.py migrate\n\n```", "```py\nSynchronize unmigrated apps: user_profile\nApply all migrations: admin, contenttypes, tweet, auth, sessions\nSynchronizing apps without migrations:\nCreating tables...\nInstalling custom SQL...\nInstalling indexes...\nRunning migrations:\nApplying contenttypes.0001_initial... FAKED\nApplying auth.0001_initial... FAKED\nApplying admin.0001_initial... FAKED\nApplying sessions.0001_initial... FAKED\nApplying tweet.0003_auto_20141215_1349... OK\n\n```", "```py\nmysql> select * from tweet_tweet;\n+----+---------+---------------------------------------------+---------------------+---------+-----------+\n| id | user_id | text | created_date | country | is_active |\n+----+---------+---------------------------------------------+---------------------+---------+-----------+\n| 1 | 1 | This Tweet was uploaded from the file. | 2014-12-15 14:17:42 | India | 1 |\n+----+---------+---------------------------------------------+---------------------+---------+-----------+\n2 rows in set (0.00 sec)\n\n```", "```py\n$python load data tweet/initial_data.json\n\n```", "```py\nsudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10\n\n```", "```py\necho 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | sudo tee /etc/apt/sources.list.d/mongodb.list\n\n```", "```py\nsudo apt-get update\n\n```", "```py\nsudo apt-get install -y mongodb-org\n\n```", "```py\nsudo service mongod start\n\n```", "```py\nsudo pip install mongoengine \n\n```", "```py\n$django-admin.py startproject url_shortner\n$cd url_shortner\n$python manage.py startapp url\n\n```", "```py\nDATABASES = {\n  'default': {\n  'ENGINE': 'django.db.backends.sqlite3',\n  'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n  }\n}\n```", "```py\nDATABASES = {\n  'default': {\n  'ENGINE': 'django.db.backends.dummy'\n  }\n}\n```", "```py\nAUTHENTICATION_BACKENDS = (\n  'mongoengine.django.auth.MongoEngineBackend',\n)\n```", "```py\nSESSION_ENGINE = 'mongoengine.django.sessions'\nSESSION_SERIALIZER = 'mongoengine.django.sessions.BSONSerializer'\n```", "```py\nfrom django.db import models\nfrom mongoengine import *\nconnect('urlShortener')\n```", "```py\nfrom mongoengine import connect\nconnect('project1')\n```", "```py\nconnect('project1', host='192.168.1.35', port=12345)\n```", "```py\nconnect('project1', username='webapp', password='pwd123')\n```", "```py\nclass Url(Document):\nfull_url = URLField(required=True)\nshort_url = StringField(max_length=50, primary_key=True, unique=True)\ndate = models.DateTimeField(auto_now_add=True)\n```", "```py\n    class Index(View):\n    def get(self, request):\n    return render(request, 'base.html')\n\n    def post(self, request):\n    long_url = request.POST['longurl']\n    short_id = str(Url.objects.count() + 1)\n    url = Url()\n    url.full_url = long_url\n    url.short_url = short_id\n    url.save()\n    params = dict()\n    params[\"short_url\"] = short_id\n    params['path'] = request.META['HTTP_REFERER']\n    return render(request, 'base.html', params)\n    ```", "```py\n    params['path'] = request.META['HTTP_REFERER'] \n    ```", "```py\n{ \"_id\" : ObjectId(\"548d6ec8e389a24f5ea44258\"), \"full_url\" : \"http://sample_long_url\", \"short_url\" : \"short_url\" } \n```", "```py\nclass Link(View):\ndef get(self, request, short_url):\nurl = Url.objects(short_url=short_url)\nresult = url[0]\nreturn HttpResponseRedirect(result.full_url)\n```", "```py\nurl = Url.objects(short_url=short_url)\n```", "```py\nreturn HttpResponseRedirect(result.full_url) \n```", "```py\n<!DOCTYPE html>\n  <html>\n    <head lang=\"en\">\n      <meta charset=\"UTF-8\">\n      <title>URL Shortner</title>\n    </head>\n    <body>\n      <form action=\"\" method=\"post\">\n        {% csrf_token %}\n        Long Url:<br>\n        <textarea rows=\"3\" cols=\"80\" name=\"longurl\"></textarea>\n        <br>\n        <input type=\"submit\" value=\"Get short Url\">\n      </form>\n\n      <div id=\"short_url\">\n      {% if short_url %}\n        <span>\n          <a href=\"{{ path }}link/{{ short_url }}\" target=\"_blank\">{{ path }}link/{{ short_url }}</a>\n        </span>\n        {% endif %}\n      </div>\n    </body>\n  </html>\n```", "```py\nurl_shortner/urlmapping.py\n\nfrom django.conf.urls import patterns, url\nfrom url.views import Index, Link\nfrom django.contrib import admin\nadmin.autodiscover()\n\nurlpatterns = patterns('',\nurl(r'^$', Index.as_view()),\nurl(r'^link/(\\w+)/$', Link.as_view()),\n)\n```"]