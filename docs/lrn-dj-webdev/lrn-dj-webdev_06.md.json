["```py\n    $(\"a.title\")\n    ```", "```py\n>>> $(\".navbar\").hide()\n>>> $(\".navbar\").show() \n\n```", "```py\n>>> $('.well').slideUp()\n\n```", "```py\n>>> $(\".navbar\").css(\"display\")\n\n```", "```py\nblock\n\n```", "```py\n>>> $(\".navbar\").css(\"font-size\", \"0.8em\")\n\n```", "```py\n<div id=\"nav\" style=\"font-size: 0.8em;\">\n\n```", "```py\n>>> $(\"input\").attr(\"size\", \"48\")\n\n```", "```py\n<input type=\"hidden\" name=\"csrfmiddlewaretoken\" value=\"xxx\" size=\"48\">\n<input id=\"id_country\" name=\"country\" type=\"hidden\" value=\"Global\" size=\"48\">\n<input type=\"submit\" value=\"post\" size=\"48\">\n\n```", "```py\n>>> $(\".well span\").before(\"<strong>(</strong>\")\n>>> $(\".well span\").after(\"<strong>)</strong>\")\n\n```", "```py\n$(\"#navbar\").remove()\n\n```", "```py\n>>> $(\"#nav\")\n\n```", "```py\n[]\n\n```", "```py\n>>> $(\".well span\").after(\"<button id=\\\"test-button\\\">Click me!</button>\")\n\n```", "```py\n>>> $(\"#test-button\").click(function () { alert(\"You clicked me!\"); })\n\n```", "```py\nfunction () { alert(\"You clicked me!\"); }\n\n```", "```py\n>>> function handler() { alert(\"You clicked me!\"); }\n>>> $(\"#test-button\").click(handler)\n\n```", "```py\nclass SearchForm(forms.Form):\nquery = forms.CharField(label='Enter a keyword to search for',\nwidget=forms.TextInput(attrs={'size': 32, 'class':'form-control'}))\n```", "```py\nclass Search(View):\n  \"\"\"Search all tweets with query /search/?query=<query> URL\"\"\"\n  def get(self, request):\n    form = SearchForm()\n    params = dict()\n    params[\"search\"] = form\n  return render(request, 'search.html', params)\n\n  def post(self, request):\n    form = SearchForm(request.POST)\n    if form.is_valid():\n    query = form.cleaned_data['query']\n    tweets = Tweet.objects.filter(text__icontains=query)\n    context = Context({\"query\": query, \"tweets\": tweets})\n    return_str = render_to_string('partials/_tweet_search.html', context)\n  return HttpResponse(json.dumps(return_str), content_type=\"application/json\")\n  else:\n    HttpResponseRedirect(\"/search\")\n```", "```py\n{% extends \"base.html\" %}\n{% load staticfiles %}\n{% block content %}\n\n<div class=\"row clearfix\">\n  <div class=\"col-md-6 col-md-offset-3 column\">\n    <form id=\"search-form\" action=\"\" method=\"post\">{% csrf_token %}\n      <div class=\"input-group input-group-sm\">\n      {{ search.query.errors }}\n      {{ search.query }}\n        <span class=\"input-group-btn\">\n          <button class=\"btn btn-search\" type=\"submit\">search</button>\n        </span>\n      </div><!-- /input-group -->\n    </form>\n  </div>\n  <div class=\"col-md-12 column tweets\">\n  </div>\n</div>\n{% endblock %}\n{% block js %}\n  <script src=\"img/search.js' %}\"></script>\n{% endblock %}\n```", "```py\n{% load staticfiles %}\n  <html>\n    <head>\n      <link href=\"{% static 'css/bootstrap.min.css' %}\"\n        rel=\"stylesheet\" media=\"screen\">\n        {% block css %}\n        {% endblock %}\n    </head>\n    <body>\n      <nav class=\"navbar navbar-default\" role=\"navigation\">\n        <a class=\"navbar-brand\" href=\"#\">MyTweets</a>\n        <p class=\"navbar-text navbar-right\">User Profile Page</p>\n      </nav>\n      <div class=\"container\">\n        {% block content %}\n        {% endblock %}\n      </div>\n      <nav class=\"navbar navbar-default navbar-fixed-bottom\" role=\"navigation\">\n        <p class=\"navbar-text navbar-right\">Footer </p>\n      </nav>\n      <script src=\"img/jquery-2.1.1.min.js' %}\"></script>\n      <script src=\"img/bootstrap.min.js' %}\"></script>\n      <script src=\"img/base.js' %}\"></script>\n        {% block js %}\n        {% endblock %}\n    </body>\n  </html>\n```", "```py\n{% block css %}\n  {% endblock %}\n  {% block js %}\n{% endblock %}\n```", "```py\nurl(r'^search/$', Search.as_view()),\nurls.py\nfrom django.conf.urls import patterns, include, url\nfrom django.contrib import admin\nfrom tweet.views import Index, Profile, PostTweet, HashTagCloud, Search\n\nadmin.autodiscover()\n\nurlpatterns = patterns('',\nurl(r'^$', Index.as_view()),\nurl(r'^user/(\\w+)/$', Profile.as_view()),\nurl(r'^admin/', include(admin.site.urls)),\nurl(r'^user/(\\w+)/post/$', PostTweet.as_view()),\nurl(r'^hashTag/(\\w+)/$', HashTagCloud.as_view()),\nurl(r'^search/$', Search.as_view()),\n)\n```", "```py\nsearch.js\n\n$('#search-form').submit(function(e){\n$.post('/search/', $(this).serialize(), function(data){\n$('.tweets').html(data);\n});\ne.preventDefault();\n});\n```", "```py\ndef post(self, request):\n  form = SearchForm(request.POST)\n  if form.is_valid():\n    query = form.cleaned_data['query']\n    tweets = Tweet.objects.filter(text__icontains=query)\n    context = Context({\"query\": query, \"tweets\": tweets})\n    return_str = render_to_string('partials/_tweet_search.html', context)\n  return HttpResponse(json.dumps(return_str), content_type=\"application/json\")\n  else:\n    HttpResponseRedirect(\"/search\")\n```", "```py\nfield__operator\n```", "```py\ncontext = Context({\"query\": query, \"tweets\": tweets})\nreturn_str = render_to_string('partials/_tweet_search.html', context)\nreturn HttpResponse(json.dumps(return_str), content_type=\"application/json\")\n```", "```py\n{% for tweet in tweets %}\n  <div class=\"well\">\n    <span>{{ tweet.text }}</span>\n  </div>\n{% endfor %}\n{% if not tweets %}\n  <div class=\"well\">\n    <span> No Tweet found.</span>\n  </div>\n{% endif %}\n```", "```py\ncontext = Context({\"query\": query, \"tweets\": tweets})\nreturn_str = render_to_string('partials/_tweet_search.html', context)\n```", "```py\nreturn HttpResponse(json.dumps(return_str), content_type=\"application/json\")\n```", "```py\nfrom django.views.generic import View\nfrom django.shortcuts import render\nfrom user_profile.models import User\nfrom models import Tweet, HashTag\nfrom tweet.forms import TweetForm, SearchForm\nfrom django.http import HttpResponseRedirect\nfrom django.template.loader import render_to_string\nfrom django.template import Context\nfrom django.http import HttpResponse\nimport json\n```", "```py\ndef search_page(request):\n  [...]\n  variables = RequestContext(request, {\n    'form': form,\n    'bookmarks': bookmarks,\n    'show_results': show_results,\n    'show_tags': True,\n    'show_user': True\n  })\n  if request.GET.has_key('AJAX'):):):\n    return render_to_response('bookmark_list.html', variables)\n  else:\n    return render_to_response('search.html', variables)\n```", "```py\n{% extends \"base.html\" %}\n  {% block external %}\n    <script type=\"text/javascript\" src=\"img/search.js\">\n    </script>\n  {% endblock %}\n{% block title %}Search Bookmarks{% endblock %}\n{% block head %}Search Bookmarks{% endblock %}\n[...]\n```", "```py\nfunction search_submit() {\n  var query = $(\"#id_query\").val();\n  $(\"#search-results\").load(\n    \"/search/?AJAX&query=\" + encodeURIComponent(query)\n  );\nreturn false;\n}\n```", "```py\n$(document).ready(function () {\n  $(\"#search-form\").submit(search_submit);\n});\n```", "```py\ndef _bookmark_save(request, form):\n  # Create or get link.\n  link, dummy = \\\n  Link.objects.get_or_create(url=form.clean_data['url'])\n  # Create or get bookmark.\n  bookmark, created = Bookmark.objects.get_or_create(\n    user=request.user,\n    link=link\n  )\n  # Update bookmark title.\n  bookmark.title = form.clean_data['title']\n  # If the bookmark is being updated, clear old tag list.\n  if not created:\n    bookmark.tag_set.clear()\n    # Create new tag list.\n    tag_names = form.clean_data['tags'].split()\n    for tag_name in tag_names:\n      tag, dummy = Tag.objects.get_or_create(name=tag_name)\n      bookmark.tag_set.add(tag)\n      # Save bookmark to database and return it.\n      bookmark.save()\n    return bookmark\n    Now in the same file, replace the code that you removed from bookmark_save_page\n    with a call to _bookmark_save :\n      @login_required\n      def bookmark_save_page(request):\n        if request.method == 'POST':\n          form = BookmarkSaveForm(request.POST)\n        if form.is_valid():\n          bookmark = _bookmark_save(request, form)\n          return HttpResponseRedirect(\n            '/user/%s/' % request.user.username\n          )\n        else:\n          form = BookmarkSaveForm()\n          variables = RequestContext(request, {\n            'form': form\n          })\n        return render_to_response('bookmark_save.html', variables)\n```", "```py\nif there is POST data:\n  Validate and save bookmark.\n  Redirect to user page.\nelse:\n  Create an empty form.\nRender page.\n```", "```py\nif there is POST data:\n  Validate and save bookmark.\n  Redirect to user page.\n  else if there is a URL in GET data:\n    Create a form an populate it with the URL's bookmark.\n  else:\n    Create an empty form.\nRender page.\n```", "```py\nfrom django.core.exceptions import ObjectDoesNotExist\n@login_required\ndef bookmark_save_page(request):\n  if request.method == 'POST':\n    form = BookmarkSaveForm(request.POST)\n      if form.is_valid():\n        bookmark = _bookmark_save(request, form)\n        return HttpResponseRedirect(\n          '/user/%s/' % request.user.username)\n        elif request.GET.has_key('url'):):):\n          url = request.GET['url']\n          title = ''\n          tags = ''\n        try:\n          link = Link.objects.get(url=url)\n          bookmark = Bookmark.objects.get(\n            link=link,\n            user=request.user\n          )\n        title = bookmark.title\n        tags = ' '.join(\n          tag.name for tag in bookmark.tag_set.all()\n        )\n        except ObjectDoesNotExist:\n          pass\n        form = BookmarkSaveForm({\n          'url': url,\n          'title': title,\n          'tags': tags\n        })\n        else:\n          form = BookmarkSaveForm()\n          variables = RequestContext(request, {\n            'form': form\n          })\n        return render_to_response('bookmark_save.html', variables)\n```", "```py\n{% if bookmarks %}\n  <ul class=\"bookmarks\">\n    {% for bookmark in bookmarks %}\n      <li>\n        <a href=\"{{ bookmark.link.url }}\" class=\"title\">\n        {{ bookmark.title|escape }}</a>\n        {% if show_edit %}\n          <a href=\"/save/?url={{ bookmark.link.url|urlencode }}\"\n          class=\"edit\">[edit]</a>\n        {% endif %}\n      <br />\n      {% if show_tags %}\n        Tags:\n          {% if bookmark.tag_set.all %}\n            <ul class=\"tags\">\n              {% for tag in bookmark.tag_set.all %}\n                <li><a href=\"/tag/{{ tag.name|urlencode }}/\">\n              {{ tag.name|escape }}</a></li>\n              {% endfor %}\n            </ul>\n      {% else %}\n        None.\n      {% endif %}\n      <br />\n[...]\n```", "```py\ndef user_page(request, username):\n  user = get_object_or_404(User, username=username)\n  bookmarks = user.bookmark_set.order_by('-id')\n  variables = RequestContext(request, {\n    'bookmarks': bookmarks,\n    'username': username,\n    'show_tags': True,\n    'show_edit': username == request.user.username,\n  })\nreturn render_to_response('user_page.html', variables)\n```", "```py\nul.bookmarks .edit {\n  font-size: 70%;\n}\n```", "```py\n<form id=\"save-form\" method=\"post\" action=\"/save/\">\n  {{ form.as_p }}\n  <input type=\"submit\" value=\"save\" />\n</form>\n```", "```py\n{%extends \"base.html\" %}\n{%block title %}Save Bookmark{% endblock %}\n{%block head %}Save Bookmark{% endblock %}\n{%block content %}\n{%include 'bookmark_save_form.html' %}\n{%endblock %}\n```", "```py\ndef bookmark_save_page(request):\n  AJAX = request.GET.has_key('AJAX')))\n  if request.method == 'POST':\n    form = BookmarkSaveForm(request.POST)\n    if form.is_valid():\n      bookmark = _bookmark_save(form)\n        if AJAX:\n          variables = RequestContext(request, {\n            'bookmarks': [bookmark],\n            'show_edit': True,\n            'show_tags': True\n        })\n      return render_to_response('bookmark_list.html', variables)\n      else:\n        return HttpResponseRedirect(\n          '/user/%s/' % request.user.username\n        )\n      else:\n        if AJAX:\n          return HttpResponse('failure')\n          elif request.GET.has_key('url'):\n            url = request.GET['url']\n            title = ''\n            tags = ''\n        try:\n          link = Link.objects.get(url=url)\n          bookmark = Bookmark.objects.get(link=link, user=request.user)\n          title = bookmark.title\n          tags = ' '.join(tag.name for tag in bookmark.tag_set.all())\n        except:::\n          pass\n          form = BookmarkSaveForm({\n            'url': url,\n            'title': title,\n            'tags': tags\n          })\n        else:\n          form = BookmarkSaveForm()\n          variables = RequestContext(request, {\n            'form': form\n          })\n          if AJAX:\n            return render_to_response(\n              'bookmark_save_form.html',\n              variables\n            )\n            else:\n              return render_to_response(\n                'bookmark_save.html',\n                variables\n              )\n```", "```py\nAJAX = request.GET.has_key('AJAX')\n```", "```py\nif condition:\n  if form.is_valid():\n    bookmark = _bookmark_save(form)\n    if AJAX:\n      variables = RequestContext(request, {\n        'bookmarks': [bookmark],\n         'show_edit': True,\n         'show_tags': True\n      })\n    return render_to_response('bookmark_list.html', variables)\n    else:\n      return HttpResponseRedirect('/user/%s/' % request.user.username)\n    else:\n      if AJAX:\n        return HttpResponse('failure')\n```", "```py\nif AJAX:\n  return render_to_response('bookmark_save_form.html', variables)\n  else:\n    return render_to_response('bookmark_save.html', variables)\n```", "```py\n{% extends \"base.html\" %}\n  {% block external %}\n    <script type=\"text/javascript\" src=\"img/bookmark_edit.js\">\n    </script>\n  {% endblock %}\n  {% block title %}{{ username }}{% endblock %}\n  {% block head %}Bookmarks for {{ username }}{% endblock %}\n  {% block content %}\n    {% include 'bookmark_list.html' %}\n  {% endblock %}\n```", "```py\nfunction bookmark_edit() {\n  var item = $(this).parent();\n  var url = item.find(\".title\").attr(\"href\");\n  item.load(\"/save/?AJAX&url=\" + escape(url), null, function () {\n    $(\"#save-form\").submit(bookmark_save);\n  });\n  return false;\n}\n```", "```py\n$(document).ready(function () {\n  $(\"ul.bookmarks .edit\").click(bookmark_edit);\n});\n```", "```py\nfunction bookmark_save() {\n  var item = $(this).parent();\n  var data = {\n    url: item.find(\"#id_url\").val(),\n    title: item.find(\"#id_title\").val(),\n    tags: item.find(\"#id_tags\").val()\n  };\n  $.post(\"/save/?AJAX\", data, function (result) {\n    if (result != \"failure\") {\n      item.before($(\"li\", result).get(0));\n      item.remove();\n      $(\"ul.bookmarks .edit\").click(bookmark_edit);\n    }\n    else {\n      alert(\"Failed to validate bookmark before saving.\");\n    }\n  });\n  return false;\n}\n```", "```py\n{% extends \"base.html\" %}\n  {% block external %}\n  <link rel=\"stylesheet\"\n  href=\"/site_media/jquery.autocomplete.css\" type=\"text/css\" />\n  <script type=\"text/javascript\"\n  src=\"img/dimensions.js\"> </script>\n  <script type=\"text/javascript\"\n  src=\"img/jquery.bgiframe.min.js\"> </script>\n  <script type=\"text/javascript\"\n  src=\"img/jquery.autocomplete.js\"> </script>\n  <script type=\"text/javascript\"\n  src=\"img/tag_autocomplete.js\"> </script>\n  {% endblock %}\n  {% block title %}Save Bookmark{% endblock %}\n  {% block head %}Save Bookmark{% endblock %}\n[...]\n```", "```py\ndef AJAX_tag_autocomplete(request):\n  if request.GET.has_key('q'):):):\n    tags = \\\n    Tag.objects.filter(name__istartswith=request.GET['q'])[:10]\n  return HttpResponse('\\n'.join(tag.name for tag in tags))\nreturn HttpResponse()\n```", "```py\nurlpatterns = patterns('',\n  # AJAX\n  (r'^AJAX/tag/autocomplete/$', AJAX_tag_autocomplete),\n)\n```", "```py\n$(document).ready(function () {\n  $(\"#id_tags\").autocomplete(\n    '/AJAX/tag/autocomplete/',\n    {multiple: true, multipleSeparator: ' '}\n  );\n});\n```"]