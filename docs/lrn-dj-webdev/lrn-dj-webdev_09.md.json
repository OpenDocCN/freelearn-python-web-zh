["```py\n  SITE_HOST = '127.0.0.1:8000'\n  DEFAULT_FROM_EMAIL = 'MyTwitter <noreply@mytwitter.com>'\n  EMAIL_HOST = 'mail.yourisp.com'\n  EMAIL_PORT = ''\n  EMAIL_HOST_USER = 'username+mail.yourisp.com'\n  EMAIL_HOST_PASSWORD = ''\n```", "```py\n>>> from django.core.mail import EmailMessage\n>>> email = EmailMessage('Hello', 'World', to=['your_email@example.com'])\n>>> email.send()\n\n```", "```py\n  EMAIL_USE_TLS = True\n  EMAIL_HOST = 'smtp.gmail.com'\n  EMAIL_HOST_USER = 'your-gmail-email-id'\n  EMAIL_HOST_PASSWORD = 'your-gmail-application-password'\n  EMAIL_PORT = 587\n  SITE_HOST = '127.0.0.1:8000'\n```", "```py\n (534, '5.7.9 Application-specific password required. Learn more at\\n5.7.9 http://support.google.com/accounts/bin/answer.py?answer=185833 zr2sm8629305pbb.83 - gsmtp')\n\n```", "```py\n>>> from django.core.mail import EmailMessage\n>>> email = EmailMessage('Hello', 'World', to=['your_email@example.com'])\n>>> email.send()\n\n```", "```py\n EMAIL_HOST_USER = 'your-gmail-email-id'\n\n```", "```py\n  class Invitation(models.Model):\n    name = models.CharField(maxlength=50)\n    email = models.EmailField()\n    code = models.CharField(maxlength=20)\n    sender = models.ForeignKey(User)\n    def __unicode__(self):\n        return u'%s, %s' % (self.sender.username, self.email)\n```", "```py\nfrom django import forms\n\nclass InvitationForm(forms.Form):\n  email = forms.CharField(widget=forms.TextInput(attrs={'size': 32, 'placeholder': 'Email Address of Friend to invite.', 'class':'form-control search-query'}))\n```", "```py\n  {% extends \"base.html\" %}\n  {% load staticfiles %}\n  {% block content %}\n  <div class=\"row clearfix\">\n    <div class=\"col-md-6 col-md-offset-3 column\">\n      {% if success == \"1\" %}\n        <div class=\"alert alert-success\" role=\"alert\">Invitation Email was successfully sent to {{ email }}</div>\n      {% endif %}\n      {% if success == \"0\" %}\n        <div class=\"alert alert-danger\" role=\"alert\">Failed to send Invitation Email to {{ email }}</div>\n      {% endif %}\n      <form id=\"search-form\" action=\"\" method=\"post\">{% csrf_token %}\n        <div class=\"input-group input-group-sm\">\n        {{ invite.email.errors }}\n        {{ invite.email }}\n          <span class=\"input-group-btn\">\n            <button class=\"btn btn-search\" type=\"submit\">Invite</button>\n          </span>\n        </div>\n      </form>\n    </div>\n  </div>\n  {% endblock %}\n```", "```py\n  url(r'^invite/$', Invite.as_view()),\n```", "```py\nfrom django.views.generic import View\nfrom django.conf import settings\nfrom django.shortcuts import render\nfrom django.template import Context\nfrom django.template.loader import render_to_string\nfrom user_profile.forms import InvitationForm\nfrom django.core.mail import EmailMultiAlternatives\nfrom user_profile.models import Invitation, User\nfrom django.http import HttpResponseRedirect\nimport hashlib\n\nclass Invite(View):\n  def get(self, request):\n    params = dict()\n    success = request.GET.get('success')\n    email = request.GET.get('email')\n    invite = InvitationForm()\n    params[\"invite\"] = invite\n    params[\"success\"] = success\n    params[\"email\"] = email\n    return render(request, 'invite.html', params)\n\n  def post(self, request):\n    form = InvitationForm(self.request.POST)\n    if form.is_valid():\n      email = form.cleaned_data['email']\n      subject = 'Invitation to join MyTweet App'\n      sender_name = request.user.username\n      sender_email = request.user.email\n      invite_code = Invite.generate_invite_code(email)\n      link = 'http://%s/invite/accept/%s/' % (settings.SITE_HOST, invite_code)\n      context = Context({\"sender_name\": sender_name, \"sender_email\": sender_email, \"email\": email, \"link\": link})\n      invite_email_template = render_to_string('partials/_invite_email_template.html', context)\n      msg = EmailMultiAlternatives(subject, invite_email_template, settings.EMAIL_HOST_USER, [email], cc=[settings.EMAIL_HOST_USER])\n      user = User.objects.get(username=request.user.username)\n      invitation = Invitation()\n      invitation.email = email\n      invitation.code = invite_code\n      invitation.sender = user\n      invitation.save()\n      success = msg.send()\n      return HttpResponseRedirect('/invite?success='+str(success)+'&email='+email)\n\n  @staticmethod\n  def generate_invite_code(email):\n    secret = settings.SECRET_KEY\n    if isinstance(email, unicode):\n      email = email.encode('utf-8')\n      activation_key = hashlib.sha1(secret+email).hexdigest()\n      return activation_key\n```", "```py\n  invite_code = Invite.generate_invite_code(email)\n```", "```py\n  Hi,\n    {{ sender_name }}({{ sender_email }}) has invited you to join Mytweet.\n    Please click {{ link }} to join.\nThis email was sent to {{ email }}. If you think this is a mistake Please ignore.\n```", "```py\n url(r'^invite/accept/(\\w+)/$', InviteAccept.as_view()),\n\n```", "```py\nclass InviteAccept(View):\n  def get(self, request, code):\n    return HttpResponseRedirect('/register?code='+code)\n```", "```py\nclass Register(View):\n  def get(self, request):\n    params = dict()\n    registration_form = RegisterForm()\n    code = request.GET.get('code')\n    params['code'] = code\n    params['register'] = registration_form\n    return render(request, 'registration/register.html', params)\n\n  def post(self, request):\n    form = RegisterForm(request.POST)\n    if form.is_valid():\n      username = form.cleaned_data['username']\n      email = form.cleaned_data['email']\n      password = form.cleaned_data['password']\n      try:\n        user = User.objects.get(username=username)                \n      except:\n        user = User()\n        user.username = username\n        user.email = email\n        commit = True\n        user = super(user, self).save(commit=False)\n        user.set_password(password)\n        if commit:\n          user.save()\n        return HttpResponseRedirect('/login')\n```", "```py\nfrom django.utils.translation import ugettext as _\nfrom django.views.generic import View\nfrom django.conf import settings\nfrom django.shortcuts import render\nfrom django.template import Context\nfrom django.template.loader import render_to_string\nfrom user_profile.forms import InvitationForm\nfrom django.core.mail import EmailMultiAlternatives\nfrom user_profile.models import Invitation, User\nfrom django.http import HttpResponseRedirect\nimport hashlib\n\nclass Invite(View):\n  def get(self, request):\n    params = dict()\n    success = request.GET.get('success')\n    email = request.GET.get('email')\n    invite = InvitationForm()\n    params[\"invite\"] = invite\n    params[\"success\"] = success\n    params[\"email\"] = email\n    return render(request, 'invite.html', params)\n\n  def post(self, request):\n    form = InvitationForm(self.request.POST)\n    if form.is_valid():\n      email = form.cleaned_data['email']\n      subject = _('Invitation to join MyTweet App')\n      sender_name = request.user.username\n      sender_email = request.user.email\n      invite_code = Invite.generate_invite_code(email)\n      link = 'http://%s/invite/accept/%s/' % (settings.SITE_HOST, invite_code)\n      context = Context({\"sender_name\": sender_name, \"sender_email\": sender_email, \"email\": email, \"link\": link})\n      invite_email_template = render_to_string('partials/_invite_email_template.html', context)\n      msg = EmailMultiAlternatives(subject, invite_email_template, settings.EMAIL_HOST_USER, [email], cc=[settings.EMAIL_HOST_USER])\n      user = User.objects.get(username=request.user.username)\n      invitation = Invitation()\n      invitation.email = email\n      invitation.code = invite_code\n      invitation.sender = user\n      invitation.save()\n      success = msg.send()\n    return HttpResponseRedirect('/invite?success='+str(success)+'&email='+email)\n\n  @staticmethod\n  def generate_invite_code(email):\n    secret = settings.SECRET_KEY\n    if isinstance(email, unicode):\n      email = email.encode('utf-8')\n      activation_key = hashlib.sha1(secret+email).hexdigest()\n    return activation_key\n```", "```py\nfrom django.utils.translation import ugettext\n  subject = ugettext('Invitation to join MyTweet App')\n```", "```py\nmessage= \\\n_('An invitation was sent to %(email)s.') % {\n'email': invitation.email}\n```", "```py\n{% extends \"base.html\" %}\n{% load staticfiles %}\n{% load i18n %}\n{% block content %}\n<div class=\"row clearfix\">\n  <div class=\"col-md-6 col-md-offset-3 column\">\n    {% if success == \"1\" %}\n    <div class=\"alert alert-success\" role=\"alert\">\n      {% trans Invitation Email was successfully sent to  %}{{ email }}\n    </div>\n    {% endif %}\n    {% if success == \"0\" %}\n    <div class=\"alert alert-danger\" role=\"alert\">Failed to send Invitation Email to {{ email }}</div>\n    {% endif %}\n      <form id=\"search-form\" action=\"\" method=\"post\">{% csrf_token %}\n        <div class=\"input-group input-group-sm\">\n        {{ invite.email.errors }}\n        {{ invite.email }}\n          <span class=\"input-group-btn\">\n            <button class=\"btn btn-search\" type=\"submit\">Invite</button>\n          </span>\n        </div>\n      </form>\n    </div>\n  </div>\n  {% endblock %}\n```", "```py\n{% blocktrans %} \n```", "```py\nfrom django.utils.translation import gettext_lazy as _\nclass InvitationForm(forms.Form):\n  email = forms.CharField(widget=forms.TextInput(attrs={'size': 32, 'placeholder': _('Email Address of Friend to invite.'), 'class':'form-control'}))\n```", "```py\n$ sudo chmod +x /usr/bin/make-messages.py\n\n```", "```py\n$ make-messages.py -l de\n\n```", "```py\n#: user_profile/forms.py\nmsgid \"Friend's Name\"\nmsgstr \"\"\n```", "```py\n\"Content-Type: text/plain; charset=UTF-8\\n\"\n```", "```py\n$ compile-messages.py\n\n```", "```py\nUSE_I18N = True\n```", "```py\nLANGUAGE_CODE = 'de'\n```", "```py\nMIDDLEWARE_CLASSES = (\n'django.middleware.common.CommonMiddleware',\n'django.contrib.sessions.middleware.SessionMiddleware',\n'django.contrib.auth.middleware.AuthenticationMiddleware',\n'django.middleware.doc.XViewMiddleware',\n'django.middleware.locale.LocaleMiddleware',\n)\n\n```", "```py\nurlpatterns = patterns('',\n# i18n\n(r'^i18n/', include('django.conf.urls.i18n')),\n)\n```", "```py\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html>\n  <head>\n    [...]\n  </head>\n  <body>\n    [...]\n    <div id=\"footer\">\n    Django Mytweets <br />\n    Languages:\n      <a href=\"/i18n/setlang/?language=en\">en</a>\n      <a href=\"/i18n/setlang/?language=de\">de</a>\n      [ 218 ]Chapter 11\n    </div>\n  </body>\n</html>\n```", "```py\n#footer {\nmargin-top: 2em;\ntext-align: center;\n}\n```", "```py\n    CACHE_BACKEND = 'simple:///'\n    ```", "```py\n    $ python manage.py createcachetable cache_table\n\n    ```", "```py\n    CACHE_BACKEND = 'db://cache_table'\n    ```", "```py\n    CACHE_BACKEND = 'file:///tmp/django_cache'\n    ```", "```py\n    CACHE_BACKEND = 'memcached://ip:port/'\n    ```", "```py\nCACHE_MIDDLEWARE_SECONDS = 60 * 5\n```", "```py\nMIDDLEWARE_CLASSES = (\n'django.middleware.common.CommonMiddleware',\n'django.contrib.sessions.middleware.SessionMiddleware',\n'django.contrib.auth.middleware.AuthenticationMiddleware',\n'django.middleware.cache.CacheMiddleware',\n'django.middleware.doc.XViewMiddleware',\n'django.middleware.locale.LocaleMiddleware',\n)\n\n```", "```py\nfrom django.views.decorators.cache import cache_page\n...\n...\nurl(r'^search/hashTag$',  cache_page(60 * 15)(SearchHashTag.as_view())),\n...\n...\n\n```", "```py\n % load cache %}\n {% cache 500 sidebar %}\n .. sidebar ..\n {% endcache %}\n\n```", "```py\n$ python manage.py shell\n\n```", "```py\n>>>from django.test.client import Client\nclient = Client()\n>>> response = client.get('/')\n>>> print response\n\nX-Frame-Options: SAMEORIGIN\nContent-Type: text/html; charset=utf-8\n\n<html>\n <head>\n <link href=\"/static/css/bootstrap.min.css\"\n rel=\"stylesheet\" media=\"screen\">\n </head>\n <body>\n <nav class=\"navbar navbar-default\" role=\"navigation\">\n <a class=\"navbar-brand\" href=\"#\">MyTweets</a>\n </nav>\n <div class=\"container\">\n </div>\n <nav class=\"navbar navbar-default navbar-fixed-bottom\" role=\"navigation\">\n <p class=\"navbar-text navbar-right\">Footer </p>\n </nav>\n <script src=\"img/jquery-2.1.1.min.js\"></script>\n <script src=\"img/bootstrap.min.js\"></script>\n <script src=\"img/base.js\"></script>\n </body>\n</html>\n>>> \n\n```", "```py\n>>> print client.post('/login/',{'username': 'your_username', 'password': 'your_password'})\n\n```", "```py\n>>> print client.login('/friend/invite/', 'your_username', 'your_password')\n\n```", "```py\nfrom django.test import TestCase\nfrom django.test.client import Client\nclass ViewTest(TestCase):\ndef setUp(self):\nself.client = Client()\ndef test_register_page(self):\ndata = {\n'username': 'test_user',\n'email': 'test_user@example.com',\n'password1': 'pass123',\n'password2': 'pass123'\n}\nresponse = self.client.post('/register/', data)\nself.assertEqual(response.status_code, 302)\n\n```", "```py\n$ python manage.py test\n\n```", "```py\nCreating test database...\nCreating table auth_message\nCreating table auth_group\nCreating table auth_user\nCreating table auth_permission\n[...]\nLoading 'initial_data' fixtures...\nNo fixtures found.\n.\n-------------------------------------------------------------\nRan 1 test in 0.170s\nOK\nDestroying test database...\n\n```", "```py\ndef test_register_page(self):\ndata = {\n'username': 'test_user',\n'email': 'test_user@example.com',\n'password1': '1',\n# 'password2': '1'\n}\nresponse = self.client.post('/register/', data)\nself.assertEqual(response.status_code, 302)\n```", "```py\n=============================================================\nFAIL: test_register_page (mytweets.user_profile.tests.ViewTest)\n-------------------------------------------------------------\nTraceback (most recent call last):\nFile \"mytweets/user_profile/tests.py\", line 19, in test_\nregister_page\nself.assertEqual(response.status_code, 302)\nAssertionError: 200 != 302\n-------------------------------------------------------------\nRan 1 test in 0.170s\nFAILED (failures=1)\n\n```"]