["```py\n  from django.contrib import admin\n  from models import Tweet, HashTag\n  from user_profile.models import UserFollower\n  # Register your models here.\n  admin.site.register(Tweet)\n  admin.site.register(HashTag)\n  admin.site.register(UserFollower)\n```", "```py\n  from django.contrib import admin\n  from models import Tweet, HashTag\n  from user_profile.models import UserFollower\n class TweetAdmin(admin.ModelAdmin):\n list_display = ('user', 'text', 'created_date')\n  # Register your models here.\n  admin.site.register(Tweet, TweetAdmin)))\n  admin.site.register(HashTag)\n  admin.site.register(UserFollower)\n```", "```py\n  class TweetAdmin(admin.ModelAdmin):\n    list_display = ('user', 'text', 'created_date')\n```", "```py\n  from django.contrib import admin\n  from models import Tweet, HashTag\n  from user_profile.models import UserFollower\n\n  class TweetAdmin(admin.ModelAdmin):\n    list_display = ('user', 'text', 'created_date')\n list_filter = ('user', )\n ordering = ('-created_date', )\n search_fields = ('text', )\n\n  # Register your models here.\n  admin.site.register(Tweet, TweetAdmin)\n  admin.site.register(HashTag)\n  admin.site.register(UserFollower)\n```", "```py\n  {% extends \"admin/base.html\" %}\n  {% load i18n %}\n  {% block title %}{{ title|escape }} |\n  {% trans 'Django Tweet site admin' %}{% endblock %}\n  {% block branding %}\n  <h1 id=\"site-name\">{% trans 'Django Tweet administration' %}</h1>\n  {% endblock %}\n  {% block nav-global %}{% endblock %}\n```", "```py\napp.operation_model\n```", "```py\n  user.has_perm('tweets.add_tweet')\n```", "```py\n  user.has_perm('tweets.change_tweet')\n```", "```py\nfrom django.contrib.auth.decorators import permission_required\n@permission_required('tweets.add_tweet', login_url=\"/login/\")\ndef tweet_save_page(request):\n  # [...]\n```", "```py\n  from tweet.models import *\n  from django.core.paginator import Paginator\n  query_set = Tweet.objects.all()\n  paginator = Paginator(query_set, 10)\n```", "```py\n>>> paginator.num_pages # Number of pages\n1\n>>> paginator.count # Total number of items\n5\n# Items in first page (index is zero-based)\n>>> paginator.object_list\n[<Tweet: #django is awesome.>, <Tweet: I love Django too.>, <Tweet: Django makes my day.>, <Tweet: #Django is fun.>, <Tweet: #Django is fun.>]\n\n# Does the first page have a previous page?\n>>> page1 = paginator.page(1)\n# Stores the first page object to page1\n>>> page1.has_previous()\nFalse\n# Does the first page have a next page?\n>>> page1.has_next()\nTrue\n\n```", "```py\n  class Profile(LoginRequiredMixin, View):\n    \"\"\"User Profile page reachable from /user/<username> URL\"\"\"\n    def get(self, request, username):\n      params = dict()\n      userProfile = User.objects.get(username=username)\n      userFollower = UserFollower.objects.get(user=userProfile)\n      if userFollower.followers.filter(username=request.user.username).exists():\n        params[\"following\"] = True\n      else:\n        params[\"following\"] = False\n        form = TweetForm(initial={'country': 'Global'})\n        search_form = SearchForm()\n        tweets = Tweet.objects.filter(user=userProfile).order_by('-created_date')\n        params[\"tweets\"] = tweets\n        params[\"profile\"] = userProfile\n        params[\"form\"] = form\n        params[\"search\"] = search_form\n        return render(request, 'profile.html', params)\n```", "```py\n  class Profile(LoginRequiredMixin, View):\n    \"\"\"User Profile page reachable from /user/<username> URL\"\"\"\n    def get(self, request, username):\n      params = dict()\n      userProfile = User.objects.get(username=username)\n      userFollower = UserFollower.objects.get(user=userProfile)\n      if userFollower.followers.filter(username=request.user.username).exists():\n        params[\"following\"] = True\n      else:\n        params[\"following\"] = False\n        form = TweetForm(initial={'country': 'Global'})\n        search_form = SearchForm()\n        tweets = Tweet.objects.filter(user=userProfile).order_by('-created_date')\n        paginator = Paginator(tweets, TWEET_PER_PAGE)\n        page = request.GET.get('page')\n      try:\n        tweets = paginator.page(page)\n        except PageNotAnInteger:\n          # If page is not an integer, deliver first page.\n          tweets = paginator.page(1)\n      except EmptyPage:\n        # If page is out of range (e.g. 9999), deliver last page of results.\n        tweets = paginator.page(paginator.num_pages)\n        params[\"tweets\"] = tweets\n        params[\"profile\"] = userProfile\n        params[\"form\"] = form\n        params[\"search\"] = search_form\n        return render(request, 'profile.html', params)\n```", "```py\n        tweets = Tweet.objects.filter(user=userProfile).order_by('-created_date')\n        paginator = Paginator(tweets, TWEET_PER_PAGE)\n        page = request.GET.get('page')\n        try:\n          tweets = paginator.page(page)\n        except PageNotAnInteger:\n          # If page is not an integer, deliver first page.\n          tweets = paginator.page(1)\n        except EmptyPage:\n          # If page is out of range (e.g. 9999), deliver last page of results.\n          tweets = paginator.page(paginator.num_pages)\n```"]