["```py\n$ virtualenv django_env\n\n```", "```py\nNew python executable in django_env/bin/python\nInstalling setuptools, pip...done.\n\n```", "```py\n$ source django_env/bin/activate\n\n```", "```py\n(django_env)ratan@lenovo:~/code$\n\n```", "```py\n$pip install django\n\n```", "```py\nbad interpreter: No such file or directory\n\n```", "```py\nDownloading/unpacking django\nDownloading Django-1.6.5-py2.py3-none-any.whl (6.7MB): 6.7MB downloaded\nInstalling collected packages: django\nSuccessfully installed django\nCleaning up...\n\n```", "```py\n$git --version\n\n```", "```py\ngit version 1.9.1\n\n```", "```py\n$django-admin.py startproject mytweets\n\n```", "```py\n$ pip install PackageName\n\n```", "```py\n$ pip install PackageName==1.0.4\n\n```", "```py\n$ pip install 'PackageName>=1.0.4' # minimum version\n\n```", "```py\n$pip install -r requirements.txt\n\n```", "```py\n$pip freeze > requirements.txt\n\n```", "```py\nDjango==1.6.5\nargparse==1.2.1\nwsgiref==0.1.2\n```", "```py\n$pip install -r requirements.txt\n\n```", "```py\n$git init\n\n```", "```py\nInitialized empty Git repository in /home/ratan/code/mytweets/.git/\n\n```", "```py\n...\ndrwxrwxr-x 7 ratan ratan 4096 Aug 2 16:07 .git/\n...\n```", "```py\n$git add .\n\n```", "```py\n$git commit -m \"initial commit of the project.\"\n\n```", "```py\n[master (root-commit) 597b6ec] initial commit of the project.\n5 files changed, 118 insertions(+)\ncreate mode 100755 manage.py\ncreate mode 100644 mytweets/__init__.py\ncreate mode 100644 mytweets/settings.py\ncreate mode 100644 mytweets/urls.py\ncreate mode 100644 mytweets/wsgi.py\n```", "```py\n$git log\n\n```", "```py\ncommit 597b6ec86c54584a758f482aa5a0f5781ff4b682\nAuthor: ratan <mail@ratankumar.org>\nDate: Sat Aug 2 16:50:37 2014 +0530\ninitial commit of the project.\n\n```", "```py\n$pip install django-bootstrap3\n\n```", "```py\n|-- css\n| |-- bootstrap.css\n| |-- bootstrap.css.map\n| |-- bootstrap.min.css\n| |-- bootstrap-theme.css\n| |-- bootstrap-theme.css.map\n| |-- bootstrap-theme.min.css\n|-- fonts\n| |-- glyphicons-halflings-regular.eot\n| |-- glyphicons-halflings-regular.svg\n| |-- glyphicons-halflings-regular.ttf\n| |-- glyphicons-halflings-regular.woff\n|-- js\n|-- bootstrap.js\n|-- bootstrap.min.js\n```", "```py\nSTATICFILES_DIRS = (\nos.path.join(\nos.path.dirname(__file__),\n'static',\n),\n)\n```", "```py\n$ python manage.py startapp tweets\n\n```", "```py\n$mkdir templates\n\n```", "```py\n{% load staticfiles %}\n<html>\n<head>\n<link href=\"{% static 'bootstrap/css/bootstrap.min.css' %}\"\nrel=\"stylesheet\" media=\"screen\" />\">\n</head>\n\n<body>\n{% block content %}\n<h1 class=\"text-info\">\">HELLO DJANGO!</h1>\n{% endblock %}\n\n<script src=\"img/bootstrap.min.js' %}\"></script>\n</body>\n</html>\n```", "```py\nmytweets/\n|-- manage.py\n|-- mytweets\n| |-- __init__.py\n| |-- __init__.pyc\n| |-- settings.py\n| |-- settings.pyc\n| |-- urls.py\n| |-- urls.pyc\n| |-- wsgi.py\n| `-- wsgi.pyc\n|-- static\n| |-- css\n| | |-- bootstrap.css\n| | |-- bootstrap.css.map\n| | |-- bootstrap.min.css\n| | |-- bootstrap-theme.css\n| | |-- bootstrap-theme.css.map\n| | `-- bootstrap-theme.min.css\n| |-- fonts\n| | |-- glyphicons-halflings-regular.eot\n| | |-- glyphicons-halflings-regular.svg\n| | |-- glyphicons-halflings-regular.ttf\n| | `-- glyphicons-halflings-regular.woff\n| `-- js\n| |-- bootstrap.js\n| `-- bootstrap.min.js\n|-- templates\n| `-- base.html\n`-- tweets\n|-- admin.py\n|-- __init__.py\n|-- models.py\n|-- tests.py\n`-- views.py\n```", "```py\nfrom django.http import HttpResponse\n\ndef index(request):\nif request.method == 'GET': \nreturn HttpResponse('I am called from a get Request')\nelif request.method == 'POST':\nreturn HttpResponse('I am called from a post Request')\n```", "```py\nfrom django.conf.urls import patterns, include, url\nfrom django.contrib import admin\nfrom tweets import views\nadmin.autodiscover()\n\nurlpatterns = patterns('',\nurl(r'^$', views.index, name='index'),\nurl(r'^admin/', include(admin.site.urls)),\n)\n```", "```py\n$python manage.py runserver\n\n```", "```py\nfrom django.http import HttpResponse\nfrom django.views.generic import View\n\nclass Index(ViewV iew):\ndef get(self, request): \nreturn HttpResponse('I am called from a get Request')\ndef post(self, request): \nreturn HttpResponse('I am called from a post Request')\n\nurls.py\nfrom django.conf.urls import patterns, include, url\nfrom django.contrib import admin\nfrom tweets.views import Index\nadmin.autodiscover()\n\nurlpatterns = patterns('',\nurl(r'^$', Index.as_view()),\nurl(r'^admin/', include(admin.site.urls)),\n)\n```", "```py\nTEMPLATE_DIRS = (\nBASE_DIR + '/templates/'\n)\nTEMPLATE_LOADERS = (\n'django.template.loaders.filesystem.Loader',\n'django.template.loaders.app_directories.Loader', \n)\n```", "```py\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nimport os\nBASE_DIR = os.path.dirname(os.path.dirname(__file__))\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/1.6/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'XXXXXXXXXXXXXXXXXXXXXXXXXX'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nTEMPLATE_DEBUG = True\nALLOWED_HOSTS = []\n\n# Application definition\nINSTALLED_APPS = (\n'django.contrib.admin',\n'django.contrib.auth',\n'django.contrib.contenttypes',\n'django.contrib.sessions',\n'django.contrib.messages',\n'django.contrib.staticfiles',\n)\n\nMIDDLEWARE_CLASSES = (\n'django.contrib.sessions.middleware.SessionMiddleware',\n'django.middleware.common.CommonMiddleware',\n'django.middleware.csrf.CsrfViewMiddleware',\n'django.contrib.auth.middleware.AuthenticationMiddleware',\n'django.contrib.messages.middleware.MessageMiddleware',\n'django.middleware.clickjacking.XFrameOptionsMiddleware',\n)\n\nROOT_URLCONF = 'mytweets.urls'\nWSGI_APPLICATION = 'mytweets.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/1.6/ref/settings/#databases\n\nDATABASES = {\n'default': {\n'ENGINE': 'django.db.backends.sqlite3',\n'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n}\n}\n\n#static file directory inclusion\nSTATICFILES_DIRS = ( \nos.path.join(\nos.path.dirname(__file__),\n'static',\n),\n)\n\nTEMPLATE_DIRS = (\nBASE_DIR + '/templates/'\n)\n\n# List of callables that know how to import templates from various sources.\nTEMPLATE_LOADERS = (\n'django.template.loaders.filesystem.Loader',\n'django.template.loaders.app_directories.Loader',\n# 'django.template.loaders.eggs.Loader',\n)\n\n# Internationalization\n# https://docs.djangoproject.com/en/1.6/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/1.6/howto/static-files/\n\nSTATIC_URL = '/static/'\n```", "```py\n    from django.views.generic import View\n    from django.shortcuts import render \n    class Index(View):\n    def get(self, request): \n    params = {}\n    params[\"name\"] = \"Django\"\n    return render(request, 'base.html', params)\n    ```", "```py\n    {% load staticfiles %}\n    <html>\n    <head>\n    <link href=\"{% static 'bootstrap/css/bootstrap.min.css' %}\"\n    rel=\"stylesheet\" media=\"screen\">\n    </head>\n\n    <body>\n    {% block content %}\n    <h1>Hello {{name}}!</h1>\n    {% endblock %}\n\n    <script src=\"img/bootstrap.min.js' %}\"></script>\n    </body>\n    </html>\n    ```", "```py\nChanges not staged for commit:\n(use \"git add <file>...\" to update what will be committed)\n(use \"git checkout -- <file>...\" to discard changes in working directory)\n\nmodified: mytweets/settings.py\nmodified: mytweets/urls.py\n\nUntracked files:\n(use \"git add <file>...\" to include in what will be committed)\n\n.gitignore\nstatic/\ntemplates/\ntweets/\n```", "```py\n$git add .\n\n```", "```py\nOn branch master\nChanges to be committed:\n(use \"git reset HEAD <file>...\" to unstage)\n\nnew file: .gitignore\nmodified: mytweets/settings.py\nmodified: mytweets/urls.py\nnew file: static/css/bootstrap-theme.css\nnew file: static/css/bootstrap-theme.css.map\nnew file: static/css/bootstrap-theme.min.css\nnew file: static/css/bootstrap.css\nnew file: static/css/bootstrap.css.map\nnew file: static/css/bootstrap.min.css\nnew file: static/fonts/glyphicons-halflings-regular.eot\nnew file: static/fonts/glyphicons-halflings-regular.svg\nnew file: static/fonts/glyphicons-halflings-regular.ttf\nnew file: static/fonts/glyphicons-halflings-regular.woff\nnew file: static/js/bootstrap.js\nnew file: static/js/bootstrap.min.js\nnew file: templates/base.html\nnew file: tweets/__init__.py\nnew file: tweets/admin.py\nnew file: tweets/models.py\nnew file: tweets/tests.py\nnew file: tweets/views.py\n\n```", "```py\n$git commit -m \"basic bootstap template added\"\n\n```", "```py\n[master 195230b] basic bootstap template added\n21 files changed, 9062 insertions(+), 1 deletion(-)\ncreate mode 100644 .gitignore\ncreate mode 100644 static/css/bootstrap-theme.css\ncreate mode 100644 static/css/bootstrap-theme.css.map\ncreate mode 100644 static/css/bootstrap-theme.min.css\ncreate mode 100644 static/css/bootstrap.css\ncreate mode 100644 static/css/bootstrap.css.map\ncreate mode 100644 static/css/bootstrap.min.css\ncreate mode 100644 static/fonts/glyphicons-halflings-regular.eot\ncreate mode 100644 static/fonts/glyphicons-halflings-regular.svg\ncreate mode 100644 static/fonts/glyphicons-halflings-regular.ttf\ncreate mode 100644 static/fonts/glyphicons-halflings-regular.woff\ncreate mode 100644 static/js/bootstrap.js\ncreate mode 100644 static/js/bootstrap.min.js\ncreate mode 100644 templates/base.html\ncreate mode 100644 tweets/__init__.py\ncreate mode 100644 tweets/admin.py\ncreate mode 100644 tweets/models.py\ncreate mode 100644 tweets/tests.py\ncreate mode 100644 tweets/views.py\n\n```", "```py\n    USER_ROLE = ( \n    ('U', 'USER'), \n    ('S', 'STAFF'), \n    ('A', 'ADMIN')\n    )\n    user_role = models.CharField(max_length=1, choices=USER_ROLE)\n    ```", "```py\nfrom django.db import models\nclass School(models.Model):\n# ...\nass\nclass Student(models.Model):\nschool = models.ForeignKey(School)\n# \u2026\n```", "```py\nclass EntryDetail(models.Model):\nentry = models.OneToOneField(Entry)\ndetails = models.TextField()\n```", "```py\nclass Product(models.Model):\nname = models.CharField(_(u\"Name\"), max_length=50)\nclass Category(models.Model):\nname = models.CharField(_(u\"Name\"), max_length=50)\nproducts = models.ManyToManyField(\"Product\", blank=True, null=True)\n```", "```py\n$python manage.py startapp user_profile\n\n```", "```py\nfrom django.db import models\nfrom django.contrib.auth.models import AbstractBaseUser\n\nclass User(AbstractBaseUser):\n\nCustom user class.\n```", "```py\nfrom django.db import models\nfrom django.contrib.auth.models import AbstractBaseUser\n\nclass User(AbstractBaseUser):\n\nCustom user class.\n\nusername = models.CharField('username', max_length=10, unique=True, db_index=True)\nemail = models.EmailField('email address', unique=True)\njoined = models.DateTimeField(auto_now_add=True)\nis_active = models.BooleanField(default=True)\nis_admin = models.BooleanField(default=False)\n```", "```py\nUSERNAME_FIELD = 'username' \ndef __unicode__(self):\nreturn self.username\n```", "```py\nfrom django.db import models\nfrom django.contrib.auth.models import AbstractBaseUser\n\nclass User(AbstractBaseUser):\n\"\"\"\nCustom user class.\n\"\"\"\nusername = models.CharField( 'username', max_length=10, unique=True, db_index=True)\nemail = models.EmailField('email address', unique=True)\njoined = models.DateTimeField(auto_now_add=True)\nis_active = models.BooleanField(default=True)\nis_admin = models.BooleanField(default=False)\n\nUSERNAME_FIELD = 'username'\ndef __unicode__(self):\nreturn self.username\n```", "```py\nfrom django.db import models\nfrom user_profile import User\nclass Tweet(models.Model):\n\"\"\"\nTweet model\n\"\"\"\nuser = models.ForeignKey(User)\ntext = models.CharField(max_length=160)\ncreated_date = models.DateTimeField(auto_now_add=True)\ncountry = models.CharField(max_length=30)\nis_active = models.BooleanField(default=True)\n```", "```py\nINSTALLED_APPS = (\n'django.contrib.admin',\n'django.contrib.auth',\n'django.contrib.contenttypes',\n'django.contrib.sessions',\n'django.contrib.messages',\n'django.contrib.staticfiles',\n'user_profile',\n'tweet'\n)\n```", "```py\n$python manage.py syncdb\n\n```", "```py\nCreating tables ...\nCreating table django_admin_log\nCreating table auth_permission\nCreating table auth_group_permissions\nCreating table auth_group\nCreating table auth_user_groups\nCreating table auth_user_user_permissions\nCreating table auth_user\nCreating table django_content_type\nCreating table django_session\nCreating table user_profile_user\nCreating table tweet_tweet\n```", "```py\nWould you like to create one now? (yes/no): yes\nUsername (leave blank to use 'ratan'):\nEmail address: mail@ratankumar.org\nPassword: XXXX\nPassword (again): XXXX\nSuperuser created successfully.\nInstalling custom SQL ...\nInstalling indexes ...\nInstalled 0 object(s) from 0 fixture(s)\n```", "```py\n    from django.contrib import admin\n    from models import Tweet\n\n    admin.site.register(Tweet)\n    ```", "```py\n    from django.contrib import admin\n    from models import User\n    admin.site.register(User)\n    ```", "```py\n$python manage.py runserver\n\n```", "```py\ndef __unicode__(self): \nreturn self.text\n```", "```py\nurl(r'^user/(\\w+)/$', Profile.as_view()), urls.py\nfrom django.conf.urls import patterns, include, url\nfrom django.contrib import admin\nfrom tweet.views import Index,Profile\nadmin.autodiscover()\n\nurlpatterns = patterns('',\nurl(r'^$', Index.as_view()),\nurl(r'^user/(\\w+)/$', Profile.as_view()),\nurl(r'^admin/', include(admin.site.urls)),\n)\n```", "```py\nclass Profile(View):\n\"\"\"User Profile page reachable from /user/<username> URL\"\"\"\ndef get(self, request, username):\nparams = dict()()()\nuser = User.objects.get(username=username)\ntweets = Tweet.objects.filter(user=user)\nparams[\"tweets\"] = tweets\nparams[\"user\"] = user\nreturn render(request, 'profile.html', params)\n```", "```py\nclass Profile(View):\n\"\"\"User Profile page reachable from /user/<username> URL\"\"\"\ndef get(self, request, username):\nparams = dict()\nuser = User.objects.get(username=username)\ntweets = Tweet.objects.filter(user=user)\nparams[\"tweets\"] = tweets\nparams[\"user\"] = user\nreturn render(request, 'profile.html', params)\n```", "```py\n{% load staticfiles %}\n<html>\n<head>\n<link href=\"{% static 'bootstrap/css/bootstrap.min.css' %}\"\nrel=\"stylesheet\" media=\"screen\">\n</head>\n\n<body>\n{% block content %}\n{% endblock %}\n\n<script src=\"img/jquery-2.1.1.min.js' %}\"></script>\n<script src=\"img/bootstrap.min.js' %}\"></script>\n</body>\n</html>\n```", "```py\n{% block content %}\n{% endblock %}\n```", "```py\n{% load staticfiles %}\n<html>\n<head>\n<link href=\"{% static 'css/bootstrap.min.css' %}\"\nrel=\"stylesheet\" media=\"screen\">\n</head>\n<body>\n<nav class=\"navbar navbar-default navbar-fixed-top\" role=\"navigation\">\n<a class=\"navbar-brand\" href=\"#\">MyTweets</a>\n<p class=\"navbar-text navbar-right\">User Profile Page</p>\n</nav>\n<div class=\"container\">\n{% block content %}\n\n{% endblock %}\n</div>\n<nav class=\"navbar navbar-default navbar-fixed-bottom\" role=\"navigation\">\n<p class=\"navbar-text navbar-right\">Footer </p>\n\n</nav>\n<script src=\"img/bootstrap.min.js' %}\"></script>\n</body>\n</html>\n```", "```py\nSTATICFILES_DIRS = (\nBASE_DIR + '/static/',\n)\n```", "```py\n{% extends \"base.html\" %}\n{% block content %}\n<div class=\"row clearfix\">\n<div class=\"col-md-12 column\">\n{% for tweet in tweets %}\n<div class=\"well\">\n<span>{{ tweet.text }}</span>\n</div>\n{% endfor %}\n</div>\n</div>\n{% endblock %}\n```"]