["```py\n>>> def a():\n...   print \"foo\"\n...     print \"bar\"\nIndentationError: unexpected indent\n\n```", "```py\nbar = some_function_name(var_first, var_second,\n var_third, var_fourth) \n# Here indentation of arguments makes them grouped, and stand clear from others.\ndef some_function_name(\n var_first, var_second, var_third,\n var_fourth):\n print(var_first)\n# This example shows the hanging intent.\n\n```", "```py\n# When vertical alignment is not used, Arguments on the first line are forbidden\nfoo = some_function_name(var_first, var_second,\n var_third, var_fourth)\n# Further indentation is required as indentation is not distinguishable between arguments and source code.\ndef some_function_name(\n var_first, var_second, var_third,\n var_fourth):\n print(var_first)\n\n```", "```py\n# Extra indentation is not necessary.\nif (this\n and that):\n do_something()\n\n```", "```py\nimport os\nimport sys\n\n```", "```py\nimport sys, os\n\n```", "```py\nfrom django.http import Http404, HttpResponse\n\n```", "```py\nfrom django.http import (\nHttp404, HttpResponse, HttpResponsePermanentRedirect\n)\n\n```", "```py\n    import re\n    import simplejson\n\n    ```", "```py\n    from decimal import *\n\n    ```", "```py\n    from models import ModelFoo\n    from models import ModelBar\n\n    ```", "```py\n$ django-admin.py startproject django_mytweets\n\n```", "```py\ndjango_mytweets///\ndjango_mytweets/\nmanage.py\n```", "```py\ndjango_mytweets/\n__init__.py\nsettings.py\nurls.py\nwsgi.py\n```", "```py\n    #!/usr/bin/env python\n    import os\n    import sys\n    if __name__ == \"__main__\":\n        os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"django_mytweets.settings\")\n        from django.core.management import execute_from_command_line\n        execute_from_command_line(sys.argv)\n    ```", "```py\n    #!/usr/bin/env python\n\n    ```", "```py\n    import os\n    import sys\n    ```", "```py\n    if __name__ == \"__main__\":\n        os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"django_mytweets.settings\")\n    django_mytweets/ ( Inner folder)\n    __init__.py\n    ```", "```py\n# Django settings for django_mytweets project.\nDEBUG = True\nTEMPLATE_DEBUG = DEBUG\nADMINS = (\n    # ('Your Name', 'your_email@domain.com'),\n)\nMANAGERS = ADMINS\nDATABASE_ENGINE = ''   # 'postgresql_psycopg2', 'postgresql',\n                       # 'mysql', 'sqlite3' or 'ado_mssql'.\nDATABASE_NAME = ''     # Or path to database file \n                       # if using sqlite3.\nDATABASE_USER = ''     # Not used with sqlite3.\nDATABASE_PASSWORD = '' # Not used with sqlite3.\nDATABASE_HOST = ''     # Set to empty string for localhost.\n                       # Not used with sqlite3.\nDATABASE_PORT = ''     # Set to empty string for default.\n                       # Not used with sqlite3.\n```", "```py\nDATABASE_ENGINE = 'sqlite3'\nDATABASE_NAME = 'django_mytweetsdb'\nDATABASE_USER = ''\nDATABASE_PASSWORD = ''\nDATABASE_HOST = ''\nDATABASE_PORT = ''\n```", "```py\n$ python manage.py syncdb\n\n```", "```py\n$ python manage.py runserver\n\n```", "```py\n$ python manage.py runserver <port number>\n\n```", "```py\n$ python manage.py runserver 0.0.0.0:<port number>\n\n```", "```py\n{% load bootstrap3 %}\n{%# simple HTML form #%}\n<form action=\"action_url\">\n    {% csrf_token %}\n    {% bootstrap_form sample_form %}\n    {% buttons %}\n        <button type=\"submit\" class=\"btn btn-primary\">\n            {% bootstrap_icon \"heart\" %} SUBMIT\n        </button>\n    {% endbuttons %}\n</form>\n```", "```py\n|-- css \n|   |-- bootstrap.css \n|   |-- bootstrap.css.map \n|   |-- bootstrap.min.css \n|   |-- bootstrap-theme.css \n|   |-- bootstrap-theme.css.map \n|   `-- bootstrap-theme.min.css \n|-- fonts \n|   |-- glyphicons-halflings-regular.eot \n|   |-- glyphicons-halflings-regular.svg \n|   |-- glyphicons-halflings-regular.ttf \n|   `-- glyphicons-halflings-regular.woff \n`-- js \n |-- bootstrap.js \n `-- bootstrap.min.js \n\n```", "```py\nSTATICFILES_DIRS = (\n    # put absolute path here as string not relative path.\n    # forward slash to be used even in windows.\n    os.path.join(\n        os.path.dirname(__file__),\n        'static',\n    ),\n)\n```"]