["```py\n$ docker version\nClient: Docker Engine - Community\n Version: 18.09.2\n API version: 1.39\n Go version: go1.10.8\n Git commit: 6247962\n Built: Sun Feb 10 04:12:39 2019\n OS/Arch: darwin/amd64\n Experimental: false\n```", "```py\n$ docker-compose version\ndocker-compose version 1.24.0, build 0aa5906\ndocker-py version: 3.7.2\nCPython version: 3.7.3\nOpenSSL version: OpenSSL 1.0.2r 26 Feb 2019\n```", "```py\n# scratch is a special container that is totally empty\nFROM scratch\nCOPY example.txt /example.txt\n```", "```py\n$ # docker build -f <dockerfile> --tag <tag> <context>\n$   docker build -f Dockerfile.simple --tag simple .\nSending build context to Docker daemon 3.072kB\nStep 1/2 : FROM scratch\n --->\nStep 2/2 : COPY example.txt /example.txt\n ---> Using cache\n ---> f961aef9f15c\nSuccessfully built f961aef9f15c\nSuccessfully tagged simple:latest\n\n$ docker images\nREPOSITORY TAG IMAGE ID CREATED SIZE\nsimple latest f961aef9f15c 4 minutes ago 11B\n```", "```py\nFROM alpine\n\nRUN mkdir -p /opt/\nCOPY example.txt /opt/example.txt\n```", "```py\n$ docker build -f Dockerfile.run --tag container-run .\nSending build context to Docker daemon 4.096kB\nStep 1/3 : FROM alpine\n ---> 055936d39205\nStep 2/3 : RUN mkdir -p /opt/\n ---> Using cache\n ---> 4f565debb941\nStep 3/3 : COPY example.txt /opt/example.txt\n ---> Using cache\n ---> d67a72454d75\nSuccessfully built d67a72454d75\nSuccessfully tagged container-run:latest\n\n$ # docker run <image name> <command> \n$   docker run container-run cat /opt/example.txt\nAn example file\n```", "```py\n$ ls\nDockerfile.run example.txt\n$ docker run container-run /bin/sh -c 'cat /opt/example.txt > out.txt'\n$ ls\nDockerfile.run example.txt\n```", "```py\nCMD cat /opt/example.txt\n```", "```py\n$ docker run container-run\nAn example file\n```", "```py\n$ docker run -it container-run /bin/sh\n/ # cd opt/\n/opt # ls\nexample.txt\n/opt # cat example.txt\nAn example file\n/opt # exit\n$\n```", "```py\n########\n# This image will compile the dependencies\n# It will install compilers and other packages, that won't be carried\n# over to the runtime image\n########\nFROM alpine:3.9 AS compile-image\n\n# Add requirements for python and pip\nRUN apk add --update python3\n\nRUN mkdir -p /opt/code\nWORKDIR /opt/code\n\n# Install dependencies\nRUN apk add python3-dev build-base gcc linux-headers postgresql-dev libffi-dev\n\n# Create a virtual environment for all the Python dependencies\nRUN python3 -m venv /opt/venv\n# Make sure we use the virtualenv:\nENV PATH=\"/opt/venv/bin:$PATH\"\nRUN pip3 install --upgrade pip\n\n# Install and compile uwsgi\nRUN pip3 install uwsgi==2.0.18\n# Install other dependencies\nCOPY ThoughtsBackend/requirements.txt /opt/\nRUN pip3 install -r /opt/requirements.txt\n```", "```py\n########\n# This image is the runtime, will copy the dependencies from the other\n########\nFROM alpine:3.9 AS runtime-image\n\n# Install python\nRUN apk add --update python3 curl libffi postgresql-libs\n\n# Copy uWSGI configuration\nRUN mkdir -p /opt/uwsgi\nADD docker/app/uwsgi.ini /opt/uwsgi/\nADD docker/app/start_server.sh /opt/uwsgi/\n\n# Create a user to run the service\nRUN addgroup -S uwsgi\nRUN adduser -H -D -S uwsgi\nUSER uwsgi\n\n# Copy the venv with compile dependencies from the compile-image\nCOPY --chown=uwsgi:uwsgi --from=compile-image /opt/venv /opt/venv\n# Be sure to activate the venv\nENV PATH=\"/opt/venv/bin:$PATH\"\n\n# Copy the code\nCOPY --chown=uwsgi:uwsgi ThoughtsBackend/ /opt/code/\n\n# Run parameters\nWORKDIR /opt/code\nEXPOSE 8000\nCMD [\"/bin/sh\", \"/opt/uwsgi/start_server.sh\"]\n```", "```py\n$ docker build -f docker/app/Dockerfile --tag thoughts-backend .\n...\n ---> 027569681620\nStep 12/26 : FROM alpine:3.9 AS runtime-image\n...\nSuccessfully built 50efd3830a90\nSuccessfully tagged thoughts-backend:latest\n$ docker images | head\nREPOSITORY TAG IMAGE ID CREATED SIZE\nthoughts-backend latest 50efd3830a90 10 minutes ago 144MB\n<none>           <none> 027569681620 12 minutes ago 409MB\n```", "```py\n$ docker run -it  -p 127.0.0.1:8000:8000/tcp thoughts-backend\n```", "```py\n$ docker ps\nCONTAINER ID IMAGE            COMMAND ... PORTS ...\nac2659958a68 thoughts-backend ... ...     127.0.0.1:8000->8000/tcp \n$ docker exec -it ac2659958a68 /bin/sh\n/opt/code $ ls\nREADME.md __pycache__ db.sqlite3 init_db.py pytest.ini requirements.txt tests thoughts_backend wsgi.py\n/opt/code $ exit\n$ \n```", "```py\n$ docker ps\nCONTAINER ID IMAGE            COMMAND ... PORTS ...\nac2659958a68 thoughts-backend ... ...     127.0.0.1:8000->8000/tcp \n$ docker stop ac2659958a68\nac2659958a68\n```", "```py\n...\nspawned uWSGI master process (pid: 6)\nspawned uWSGI worker 1 (pid: 7, cores: 1)\nspawned uWSGI http 1 (pid: 8)\nCaught SIGTERM signal! Sending graceful stop to uWSGI through the master-fifo\nFri May 31 10:29:47 2019 - graceful shutdown triggered...\n$ \n```", "```py\n[uwsgi]\nuid=uwsgi\nchdir=/opt/code\nwsgi-file=wsgi.py\nmaster=True\npidfile=/tmp/uwsgi.pid\nhttp=:8000\nvacuum=True\nprocesses=1\nmax-requests=5000\n# Used to send commands to uWSGI\nmaster-fifo=/tmp/uwsgi-fifo\n```", "```py\n#!/bin/sh\n\n_term() {\n  echo \"Caught SIGTERM signal! Sending graceful stop to uWSGI through the master-fifo\"\n  # See details in the uwsgi.ini file and\n  # in http://uwsgi-docs.readthedocs.io/en/latest/MasterFIFO.html\n  # q means \"graceful stop\"\n  echo q > /tmp/uwsgi-fifo\n}\n\ntrap _term SIGTERM\n\nuwsgi --ini /opt/uwsgi/uwsgi.ini &\n\n# We need to wait to properly catch the signal, that's why uWSGI is started\n# in the background. $! is the PID of uWSGI\nwait $!\n# The container exits with code 143, which means \"exited because SIGTERM\"\n# 128 + 15 (SIGTERM)\n# http://www.tldp.org/LDP/abs/html/exitcodes.html\n# http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_12_02.html\n```", "```py\nversion: '3.7'\n\nservices:\n    # Development related\n    test-sqlite:\n        environment:\n            - PYTHONDONTWRITEBYTECODE=1\n        build:\n            dockerfile: docker/app/Dockerfile\n            context: .\n        entrypoint: pytest\n        volumes:\n            - ./ThoughtsBackend:/opt/code\n```", "```py\n$ docker-compose build test-sqlite\nBuilding test-sqlite\n...\nSuccessfully built 8751a4a870d9\nSuccessfully tagged ch3_test-sqlite:latest\n```", "```py\n$ docker-compose run test-sqlite\n=================== test session starts ===================\nplatform linux -- Python 3.6.8, pytest-4.5.0, py-1.8.0, pluggy-0.12.0 -- /opt/venv/bin/python3\ncachedir: .pytest_cache\nrootdir: /opt/code, inifile: pytest.ini\nplugins: flask-0.14.0\ncollected 17 items\n\ntests/test_thoughts.py::test_create_me_thought PASSED [ 5%]\n...\ntests/test_token_validation.py::test_valid_token_header PASSED [100%]\n\n========== 17 passed, 177 warnings in 1.25 seconds ============\n$ \n```", "```py\n$ docker-compose run test-sqlite -k validation\n...\n===== 9 passed, 8 deselected, 13 warnings in 0.30 seconds =======\n$\n```", "```py\nquery = (query.filter(ThoughtModel.text.contains(search_param)))\n```", "```py\n# This Dockerfile is for localdev purposes only, so it won't be\n# optimised for size\nFROM alpine:3.9\n\n# Add the proper env variables for init the db\nARG POSTGRES_DB\nENV POSTGRES_DB $POSTGRES_DB\nARG POSTGRES_USER\nENV POSTGRES_USER $POSTGRES_USER\nARG POSTGRES_PASSWORD\nENV POSTGRES_PASSWORD $POSTGRES_PASSWORD\nARG POSTGRES_PORT\nENV LANG en_US.utf8\nEXPOSE $POSTGRES_PORT\n\n# For usage in startup\nENV POSTGRES_HOST localhost\nENV DATABASE_ENGINE POSTGRESQL\n# Store the data inside the container, as we don't care for\n# persistence\nRUN mkdir -p /opt/data\nENV PGDATA /opt/data\n```", "```py\nRUN apk update\nRUN apk add bash curl su-exec python3\nRUN apk add postgresql postgresql-contrib postgresql-dev\nRUN apk add python3-dev build-base linux-headers gcc libffi-dev\n```", "```py\n# Adding our code\nWORKDIR /opt/code\n\nRUN mkdir -p /opt/code/db\n# Add postgres setup\nADD ./docker/db/postgres-setup.sh /opt/code/db/\nRUN /opt/code/db/postgres-setup.sh\n```", "```py\n## Install our code to prepare the DB\nADD ./ThoughtsBackend/requirements.txt /opt/code\n\nRUN pip3 install -r requirements.txt\n```", "```py\n## Need to import all the code, due dependencies to initialize the DB\nADD ./ThoughtsBackend/ /opt/code/\n# Add all DB commands\nADD ./docker/db/* /opt/code/db/\n\n## get the db ready\nRUN /opt/code/db/prepare_db.sh\n```", "```py\n# Start the database in normal operation\nUSER postgres\nCMD [\"postgres\"]\n```", "```py\n    db:\n        build:\n            context: .\n            dockerfile: ./docker/db/Dockerfile\n            args:\n                # These values should be in sync with environment\n                # for development. If you change them, you'll \n                # need to rebuild the container\n                - POSTGRES_DB=thoughts\n                - POSTGRES_USER=postgres\n                - POSTGRES_PASSWORD=somepassword\n                - POSTGRES_PORT=5432\n        ports:\n            - \"5432:5432\"\n```", "```py\n$ docker-compose up build\n$ docker-compose up db\nCreating ch3_db_1 ... done\nAttaching to ch3_db_1\n...\ndb_1 | 2019-06-02 13:55:38.934 UTC [1] LOG: database system is ready to accept connections\n```", "```py\n$ PGPASSWORD=somepassword pgcli -h localhost -U postgres thoughts\nServer: PostgreSQL 11.3\nVersion: 2.0.2\nChat: https://gitter.im/dbcli/pgcli\nMail: https://groups.google.com/forum/#!forum/pgcli\nHome: http://pgcli.com\npostgres@localhost:thoughts> select * from thought_model\n+------+------------+--------+-------------+\n|  id  |  username  |  text  |  timestamp  |\n|------+------------+--------+-------------|\n+------+------------+--------+-------------+\nSELECT 0\nTime: 0.016s\n```", "```py\nimport os\nfrom pathlib import Path\nfrom flask_sqlalchemy import SQLAlchemy\n\nDATABASE_ENGINE = os.environ.get('DATABASE_ENGINE', 'SQLITE')\n\nif DATABASE_ENGINE == 'SQLITE':\n    dir_path = Path(os.path.dirname(os.path.realpath(__file__)))\n    path = dir_path / '..'\n\n    # Database initialisation\n    FILE_PATH = f'{path}/db.sqlite3'\n    DB_URI = 'sqlite+pysqlite:///{file_path}'\n    db_config = {\n        'SQLALCHEMY_DATABASE_URI': DB_URI.format(file_path=FILE_PATH),\n        'SQLALCHEMY_TRACK_MODIFICATIONS': False,\n    }\n\nelif DATABASE_ENGINE == 'POSTGRESQL':\n    db_params = {\n        'host': os.environ['POSTGRES_HOST'],\n        'database': os.environ['POSTGRES_DB'],\n        'user': os.environ['POSTGRES_USER'],\n        'pwd': os.environ['POSTGRES_PASSWORD'],\n        'port': os.environ['POSTGRES_PORT'],\n    }\n    DB_URI = 'postgresql://{user}:{pwd}@{host}:{port}/{database}'\n    db_config = {\n        'SQLALCHEMY_DATABASE_URI': DB_URI.format(**db_params),\n        'SQLALCHEMY_TRACK_MODIFICATIONS': False,\n    }\n\nelse:\n    raise Exception('Incorrect DATABASE_ENGINE')\n\ndb = SQLAlchemy()\n```", "```py\nDATABASE_ENGINE=POSTGRESQL\nPOSTGRES_DB=thoughts\nPOSTGRES_USER=postgres\nPOSTGRES_PASSWORD=somepassword\nPOSTGRES_PORT=5432\nPOSTGRES_HOST=db\n```", "```py\n    test-postgresql:\n        env_file: environment.env\n        environment:\n            - PYTHONDONTWRITEBYTECODE=1\n        build:\n            dockerfile: docker/app/Dockerfile\n            context: .\n        entrypoint: pytest\n        depends_on:\n            - db\n        volumes:\n            - ./ThoughtsBackend:/opt/code\n```", "```py\n$ docker-compose run test-postgresql\nStarting ch3_db_1 ... done\n============== test session starts ====================\nplatform linux -- Python 3.6.8, pytest-4.6.0, py-1.8.0, pluggy-0.12.0 -- /opt/venv/bin/python3\ncachedir: .pytest_cache\nrootdir: /opt/code, inifile: pytest.ini\nplugins: flask-0.14.0\ncollected 17 items\n\ntests/test_thoughts.py::test_create_me_thought PASSED [ 5%]\n...\ntests/test_token_validation.py::test_valid_token_header PASSED [100%]\n\n===== 17 passed, 177 warnings in 2.14 seconds ===\n$\n```", "```py\n     server:\n        env_file: environment.env\n        image: thoughts_server\n        build:\n            context: .\n            dockerfile: docker/app/Dockerfile\n        ports:\n            - \"8000:8000\"\n        depends_on:\n            - db\n```", "```py\n$ docker-compose up server\nCreating network \"ch3_default\" with the default driver\nCreating ch3_db_1 ... done\nCreating ch3_server_1 ... done\nAttaching to ch3_server_1\nserver_1 | [uWSGI] getting INI configuration from /opt/uwsgi/uwsgi.ini\nserver_1 | *** Starting uWSGI 2.0.18 (64bit) on [Sun Jun 2 \n...\nserver_1 | spawned uWSGI master process (pid: 6)\nserver_1 | spawned uWSGI worker 1 (pid: 7, cores: 1)\nserver_1 | spawned uWSGI http 1 (pid: 8)\n```", "```py\n$ docker-compose up -d server\nCreating network \"ch3_default\" with the default driver\nCreating ch3_db_1 ... done\nCreating ch3_server_1 ... done\n$\n```", "```py\n$ docker-compose ps\n Name Command State Ports\n------------------------------------------------------------------------------\nch3_db_1 postgres Up 0.0.0.0:5432->5432/tcp\nch3_server_1 /bin/sh /opt/uwsgi/start_s ... Up 0.0.0.0:8000->8000/tcp\n```", "```py\n$ PGPASSWORD=somepassword pgcli -h localhost -U postgres thoughts\nServer: PostgreSQL 11.3\nVersion: 2.0.2\n\npostgres@localhost:thoughts> \nINSERT INTO thought_model (username, text, timestamp) \nVALUES ('peterparker', 'A great power carries a great\n responsability', now());\n\nINSERT 0 1\nTime: 0.014s\npostgres@localhost:thoughts>\n```", "```py\n$ curl http://localhost:8000/api/thoughts/\n[{\"id\": 1, \"username\": \"peterparker\", \"text\": \"A great power carries a great responsability\", \"timestamp\": \"2019-06-02T19:44:34.384178\"}]\n```", "```py\n$ docker-compose logs server\nAttaching to ch3_server_1\nserver_1 | [uWSGI] getting INI configuration from /opt/uwsgi/uwsgi.ini\nserver_1 | *** Starting uWSGI 2.0.18 (64bit) on [Sun Jun 2 19:44:15 2019] ***\nserver_1 | compiled with version: 8.3.0 on 02 June 2019 11:00:48\n...\nserver_1 | [pid: 7|app: 0|req: 2/2] 172.27.0.1 () {28 vars in 321 bytes} [Sun Jun 2 19:44:41 2019] GET /api/thoughts/ => generated 138 bytes in 4 msecs (HTTP/1.1 200) 2 headers in 72 bytes (1 switches on core 0)\n```", "```py\n$ docker-compose down\nStopping ch3_server_1 ... done\nStopping ch3_db_1 ... done\nRemoving ch3_server_1 ... done\nRemoving ch3_db_1 ... done\nRemoving network ch3_default\n```", "```py\n$ docker run -it python:3.7\nPython 3.7.3 (default, May 8 2019, 05:28:42)\n[GCC 6.3.0 20170516] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n```", "```py\n$ docker run -it python:3.7-slim\nPython 3.7.3 (default, May 8 2019, 05:31:59)\n[GCC 6.3.0 20170516] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n```", "```py\n$ docker images | grep python\npython 3.7-slim ca7f9e245002 4 weeks ago 143MB\npython 3.7      a4cc999cf2aa 4 weeks ago 929MB\n```", "```py\n$ docker tag thoughts-backend:latest thoughts-backend:v1.5\n$ docker images\nREPOSITORY       TAG    IMAGE ID     CREATED    SIZE\nthoughts-backend latest c7a8499623e7 5 min ago 144MB\nthoughts-backend v1.5   c7a8499623e7 5 min ago 144MB\n```", "```py\n$ docker tag thoughts-backend:latest jaimebuelta/thoughts-backend:latest\n```", "```py\n$ docker login\nLogin with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.\nUsername: jaimebuelta\nPassword:\nLogin Succeeded\n```", "```py\n$ docker push jaimebuelta/thoughts-backend:latest\nThe push refers to repository [docker.io/jaimebuelta/thoughts-backend]\n1ebb4000a299: Pushed\n669047e32cec: Pushed\n6f7246363f55: Pushed\nac1d27280799: Pushed\nc43bb774a4bb: Pushed\n992e49acee35: Pushed\n11c1b6dd59b3: Pushed\n7113f6aae2a4: Pushed\n5275897866cf: Pushed\nbcf2f368fe23: Mounted from library/alpine\nlatest: digest: sha256:f1463646b5a8dec3531842354d643f3d5d62a15cc658ac4a2bdbc2ecaf6bb145 size: 2404\n```"]