["```py\nclass UserModel(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(50))\n    # DO NOT EVER STORE PLAIN PASSWORDS IN DATABASES\n    # THIS IS AN EXAMPLE!!!!!\n    password = db.Column(db.String(50))\n    creation = db.Column(db.DateTime, server_default=func.now())\n```", "```py\nimport requests\n\ndef search(request):\n    username = get_username_from_session(request)\n    search_param = request.GET.get('search')\n\n    url = settings.THOUGHTS_BACKEND + '/api/thoughts/'\n    params = {\n        'search': search_param,\n    }\n    result = requests.get(url, params=params)\n    results = result.json()\n\n    context = {\n        'thoughts': results,\n        'username': username,\n    }\n    return render(request, 'search.html', context)\n```", "```py\ndef list_thoughts(request):\n    username = get_username_from_session(request)\n    if not username:\n        return redirect('login')\n\n    url = settings.THOUGHTS_BACKEND + '/api/me/thoughts/'\n    headers = {\n        'Authorization': request.COOKIES.get('session'),\n    }\n    result = requests.get(url, headers=headers)\n    if result.status_code != http.client.OK:\n        return redirect('login')\n\n    context = {\n        'thoughts': result.json(),\n        'username': username,\n    }\n    return render(request, 'list_thoughts.html', context)\n```", "```py\ndef get_username_from_session(request):\n    cookie_session = request.COOKIES.get('session')\n    username = validate_token_header(cookie_session,\n                                     settings.TOKENS_PUBLIC_KEY)\n    if not username:\n        return None\n\n    return username\n```", "```py\nTHOUGHTS_BACKEND_URL=http://10.0.10.3:8000\nUSER_BACKEND_URL=http://10.0.10.3:8001\n```", "```py\n$ kubectl create namespace example\n```", "```py\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n    name: thoughts-backend\n    labels:\n        app: thoughts-backend\n    namespace: example\n```", "```py\nspec:\n    replicas: 1\n    selector:\n        matchLabels:\n            app: thoughts-backend\n```", "```py\n\n    template:\n        metadata:\n            labels:\n                app: thoughts-backend\n        spec:\n            containers:\n                - name: thoughts-backend-service\n                  ...\n                - name: thoughts-backend-db\n                  ...\n```", "```py\n- name: thoughts-backend-db\n  image: thoughts_backend_db:latest\n  imagePullPolicy: Never\n```", "```py\n - name: thoughts-backend-service\n   image: thoughts_server:latest\n   imagePullPolicy: Never\n   ports:\n   - containerPort: 8000\n   env:\n   - name: DATABASE_ENGINE\n     value: POSTGRESQL\n   - name: POSTGRES_DB\n     value: thoughts\n   - name: POSTGRES_USER\n     value: postgres\n   - name: POSTGRES_PASSWORD\n     value: somepassword\n   - name: POSTGRES_PORT\n     value: \"5432\"\n   - name: POSTGRES_HOST\n     value: \"127.0.0.1\"\n```", "```py\n$ kubectl apply -f thoughts_backend/kubernetes/deployment.yaml\ndeployment \"thoughts-backend\" created\n```", "```py\n$ kubectl get deployments -n example\nNAME             DESIRED CURRENT UP-TO-DATE AVAILABLE AGE\nthoughts-backend 1       1       1          1         20s\n```", "```py\n$ kubectl get pods -n example\nNAME                              READY STATUS  RESTARTS AGE\nthoughts-backend-6dd57f5486-l9tgg 2/2   Running 0        1m\n```", "```py\n$ kubectl delete pod thoughts-backend-6dd57f5486-l9tgg -n example\npod \"thoughts-backend-6dd57f5486-l9tgg\" deleted\n$ kubectl get pods -n example\nNAME                              READY STATUS  RESTARTS AGE\nthoughts-backend-6dd57f5486-nf2ds 2/2   Running 0        28s\n```", "```py\n---\napiVersion: v1\nkind: Service\nmetadata:\n    namespace: example\n    labels:\n        app: thoughts-service\n    name: thoughts-service\nspec:\n    ports:\n        - name: thoughts-backend\n          port: 80\n          targetPort: 8000\n    selector:\n        app: thoughts-backend\n    type: NodePort\n```", "```py\n$ kubectl apply -f kubernetes/service.yaml\nservice \"thoughts-service\" configured\n$ kubectl get service -n example\nNAME CLUSTER-IP EXTERNAL-IP PORT(S) AGE\nthoughts-service 10.100.252.250 <nodes> 80:31600/TCP 1m\n```", "```py\n---\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n    name: thoughts-backend-ingress\n    namespace: example\nspec:\n    rules:\n        - host: thoughts.example.local\n          http:\n            paths:\n              - backend:\n                  serviceName: thoughts-service\n                  servicePort: 80\n                path: /\n```", "```py\n$ kubectl apply -f kubernetes/ingress.yaml\ningress \"thoughts-backend-ingress\" created\n$ kubectl get ingress -n example\nNAME                     HOSTS                  ADDRESS  PORTS  AGE\nthoughts-backend-ingress thoughts.example.local localhost 80 1m\n$ curl http://localhost\n<html>\n<head><title>404 Not Found</title></head>\n<body>\n<center><h1>404 Not Found</h1></center>\n<hr><center>nginx/1.15.8</center>\n</body>\n</html>\n```", "```py\n127.0.0.1 thoughts.example.local\n```", "```py\n$ kubectl apply -f users_backend/kubernetes/deployment.yaml\ndeployment \"users-backend\" created\n$ kubectl apply -f users_backend/kubernetes/service.yaml\nservice \"users-service\" created\n$ kubectl apply -f users_backend/kubernetes/ingress.yaml\ningress \"users-backend-ingress\" created\n```", "```py\n127.0.0.1 users.example.local\n```", "```py\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n    name: frontend\n    labels:\n        app: frontend\n    namespace: example\n```", "```py\nspec:\n    replicas: 1\n    selector:\n        matchLabels:\n            app: frontend\n    template:\n        metadata:\n            labels:\n                app: frontend\n```", "```py\n        spec:\n            containers:\n                - name: frontend-service\n                  image: thoughts_frontend:latest\n                  imagePullPolicy: Never\n                  ports:\n                     - containerPort: 8000\n                  env:\n                      - name: THOUGHTS_BACKEND_URL\n                        value: http://thoughts-service\n                      - name: USER_BACKEND_URL\n                        value: http://users-service\n```", "```py\n127.0.0.1 frontend.example.local\n```", "```py\n$ kubectl apply -f frontend/kubernetes/deployment.yaml\ndeployment \"frontend\" created\n$ kubectl apply -f frontend/kubernetes/service.yaml\nservice \"frontend-service\" created\n$ kubectl apply -f frontend/kubernetes/ingress.yaml\ningress \"frontend-ingress\" created\n```"]