["```py\n$ cd Chapter10/microservices/\n$ cd frontend\n$ docker-compose build\n...\n$ cd thoughts_backend\n$ docker-compose build\n...\n$ cd users_backend\n$ docker-compose build\n...\n```", "```py\n$ cd Chapter10/kubernetes\n$ kubectl create namespace example\n$ kubectl apply --recursive -f .\n...\n```", "```py\n127.0.0.1 thoughts.example.local\n127.0.0.1 users.example.local\n127.0.0.1 frontend.example.local\n127.0.0.1 syslog.example.local\n127.0.0.1 prometheus.example.local\n127.0.0.1 grafana.example.local\n```", "```py\nAug 15 00:15:15.100 10.1.0.90 INFO app: REQUEST GET /endpoint\nAug 15 00:15:15.153 10.1.0.92 INFO api: REQUEST GET /api/endpoint\nAug 15 00:15:15.175 10.1.0.90 INFO app: RESPONSE TIME 4 ms\nAug 15 00:15:15.210 10.1.0.90 INFO app: RESPONSE STATUS 200\n```", "```py\nFROM alpine:3.9\n\nRUN apk add --update rsyslog\n\nCOPY rsyslog.conf /etc/rsyslog.d/rsyslog.conf\n```", "```py\n# Start a UDP listen port at 5140\nmodule(load=\"imudp\")\ninput(type=\"imudp\" port=\"5140\")\n...\n# Store the received files in /var/log/syslog, and enable rotation\n$outchannel log_rotation,/var/log/syslog, 5000000,/bin/rm /var/log/syslog\n```", "```py\n$ docker-compose build\nBuilding rsyslog\n...\nSuccessfully built 560bf048c48a\nSuccessfully tagged rsyslog:latest\n```", "```py\n  volumes:\n  - emptyDir: {}\n    name: log-volume\n```", "```py\nspec:\n  containers:\n  - name: syslog\n    command:\n      - rsyslogd\n      - -n\n      - -f\n      - /etc/rsyslog.d/rsyslog.conf\n    image: rsyslog:latest\n    imagePullPolicy: Never\n    ports:\n      - containerPort: 5140\n        protocol: UDP\n    volumeMounts:\n      - mountPath: /var/log\n        name: log-volume\n```", "```py\n  - name: frontrail\n    args:\n    - --ui-highlight\n    - /var/log/syslog\n    - -n\n    - \"1000\"\n    image: mthenw/frontail:4.6.0\n    imagePullPolicy: Always\n    ports:\n    - containerPort: 9001\n      protocol: TCP\n    resources: {}\n    volumeMounts:\n    - mountPath: /var/log\n      name: log-volume\n```", "```py\nspec:\n  ports:\n  - name: fronttail\n    port: 9001\n    protocol: TCP\n    targetPort: 9001\n  - name: syslog\n    port: 5140\n    protocol: UDP\n    targetPort: 5140\n```", "```py\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: syslog-ingress\n  namespace: example\nspec:\n  rules:\n  - host: syslog.example.local\n    http:\n      paths:\n      - backend:\n          serviceName: syslog\n          servicePort: 9001\n        path: /\n```", "```py\n# Log to the logger container\nlogger = rsyslog:syslog:5140,thoughts_backend\n```", "```py\nfrom flask import current_app as app\n\n...\nif search_param:\n    param = f'%{search_param}%'\n    app.logger.info(f'Searching with params {param}')\n    query = (query.filter(ThoughtModel.text.ilike(param)))\n```", "```py\nfrom logging.config import dictConfig\n\ndictConfig({\n    'version': 1,\n    'formatters': {\n        'default': {\n            'format': '[%(asctime)s] %(levelname)s in \n                        %(module)s: %(message)s',\n        }\n    },\n    'handlers': {\n        'wsgi': {\n            'class': 'logging.StreamHandler',\n            'stream': 'ext://flask.logging.wsgi_errors_stream',\n            'formatter': 'default'\n        }\n    },\n    'root': {\n        'level': 'INFO',\n        'handlers': ['wsgi']\n    }\n})\n```", "```py\nclass RequestFormatter(logging.Formatter):\n    ''' Inject the HTTP_X_REQUEST_ID to format logs '''\n\n    def format(self, record):\n        record.request_id = 'NA'\n\n        if has_request_context():\n            record.request_id = request.environ.get(\"HTTP_X_REQUEST_ID\")\n\n        return super().format(record)\n```", "```py\n# Enable RequestId\napplication.config['REQUEST_ID_UNIQUE_VALUE_PREFIX'] = ''\nRequestID(application)\n\nif not script:\n    # For scripts, it should not connect to Syslog\n    handler = logging.handlers.SysLogHandler(('syslog', 5140))\n    req_format = ('[%(asctime)s] %(levelname)s [%(request_id)s] '\n                    %(module)s: %(message)s')\n    handler.setFormatter(RequestFormatter(req_format))\n    handler.setLevel(logging.INFO)\n    application.logger.addHandler(handler)\n    # Do not propagate to avoid log duplication\n    application.logger.propagate = False\n```", "```py\nfrom flask import current_app, g\n\ndef logging_before():\n    msg = 'REQUEST {REQUEST_METHOD} {REQUEST_URI}'.format(**request.environ)\n    current_app.logger.info(msg)\n\n    # Store the start time for the request\n    g.start_time = time()\n```", "```py\ndef logging_after(response):\n    # Get total time in milliseconds\n    total_time = time() - g.start_time\n    time_in_ms = int(total_time * 1000)\n    msg = f'RESPONSE TIME {time_in_ms} ms'\n    current_app.logger.info(msg)\n\n    msg = f'RESPONSE STATUS {response.status_code.value}'\n    current_app.logger.info(msg)\n\n    # Store metrics\n    ...\n\n    return response\n```", "```py\ndef create_app(script=False):\n    ...\n    application = Flask(__name__)\n    application.before_request(logging_before)\n    application.after_request(logging_after)\n```", "```py\n$ docker-compose run test\n...\n___ ERROR at setup of test_get_non_existing_thought ___\n-------- Captured log setup ---------\nINFO flask.app:app.py:46 REQUEST POST /api/me/thoughts/\nINFO flask.app:token_validation.py:66 Header successfully validated\nERROR flask.app:app.py:1761 Exception on /api/me/thoughts/ [POST]\nTraceback (most recent call last):\n File \"/opt/venv/lib/python3.6/site-packages/flask/app.py\", line 1813, in full_dispatch_request\n rv = self.dispatch_request()\n File \"/opt/venv/lib/python3.6/site-packages/flask/app.py\", line 1799, in dispatch_request\n return self.view_functions[rule.endpoint](**req.view_args)\n File \"/opt/venv/lib/python3.6/site-packages/flask_restplus/api.py\", line 325, in wrapper\n resp = resource(*args, **kwargs)\n File \"/opt/venv/lib/python3.6/site-packages/flask/views.py\", line 88, in view\n return self.dispatch_request(*args, **kwargs)\n File \"/opt/venv/lib/python3.6/site-packages/flask_restplus/resource.py\", line 44, in dispatch_request\n resp = meth(*args, **kwargs)\n File \"/opt/venv/lib/python3.6/site-packages/flask_restplus/marshalling.py\", line 136, in wrapper\n resp = f(*args, **kwargs)\n File \"/opt/code/thoughts_backend/api_namespace.py\", line 80, in post\n raise Exception('Unexpected error!')\nException: Unexpected error!\nINFO flask.app:app.py:57 RESPONSE TIME 3 ms\nINFO flask.app:app.py:60 RESPONSE STATUS 500 \n```", "```py\nfrom prometheus_flask_exporter import PrometheusMetrics\n\nmetrics = PrometheusMetrics(app=None)\n\ndef create_app(script=False):\n    ...\n    # Initialise metrics\n    metrics.init_app(application)\n```", "```py\nfrom prometheus_client import Histogram, Counter\n\nMETRIC_REQUESTS = Counter('requests', 'Requests',\n                          ['endpoint', 'method', 'status_code'])\nMETRIC_REQ_TIME = Histogram('req_time', 'Req time in ms',\n                            ['endpoint', 'method', 'status_code']) \n\ndef logging_after(response):\n    ...\n    # Store metrics\n    endpoint = request.endpoint\n    method = request.method.lower()\n    status_code = response.status_code\n    METRIC_REQUESTS.labels(endpoint, method, status_code).inc()\n    METRIC_REQ_TIME.labels(endpoint, method, status_code).observe(time_in_ms)\n```", "```py\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: prometheus-config\n  namespace: example\ndata:\n  prometheus.yaml: |\n    scrape_configs:\n    - job_name: 'example'\n\n      static_configs:\n        - targets: ['thoughts-service', 'users-service', \n                    'frontend-service']\n```", "```py\nspec:\n  containers:\n  - name: prometheus\n    image: prom/prometheus\n    volumeMounts:\n    - mountPath: /etc/prometheus/prometheus.yml\n      subPath: prometheus.yaml\n      name: volume-config\n    ports:\n    - containerPort: 9090\n    volumes:\n    - name: volume-config\n      configMap:\n        name: prometheus-config\n```", "```py\nspec:\n  containers:\n    - name: grafana\n      image: grafana/grafana\n      volumeMounts:\n        - mountPath: /etc/grafana/provisioning\n                     /datasources/prometheus.yaml\n          subPath: prometheus.yaml\n          name: volume-config\n        - mountPath: /etc/grafana/provisioning/dashboards\n          name: volume-dashboard\n      ports:\n        - containerPort: 3000\n  volumes:\n    - name: volume-config\n      configMap:\n        name: grafana-config\n    - name: volume-dashboard\n      configMap:\n        name: grafana-dashboard\n```", "```py\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: grafana-config\n  namespace: example\ndata:\n  prometheus.yaml: |\n      apiVersion: 1\n\n      datasources:\n      - name: Prometheus\n        type: prometheus\n        url: http://prometheus-service\n        access: proxy\n        isDefault: true\n```", "```py\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: grafana-dashboard\n  namespace: example\ndata:\n  dashboard.yaml: |\n    apiVersion: 1\n\n    providers:\n    - name: 'Example'\n      orgId: 1\n      folder: ''\n      type: file\n      editable: true\n      options:\n        path: /etc/grafana/provisioning/dashboards\n  dashboard.json: |-\n    <JSON FILE>\n```", "```py\nrate(flask_http_request_duration_seconds_count[5m])\n```", "```py\nsum(rate(flask_http_request_duration_seconds_count[5m])) by (path)\n```", "```py\navg(rate(flask_http_request_duration_seconds_bucket[5m])) by (method, path)\n```", "```py\nhistogram_quantile(0.95, sum(rate(flask_http_request_duration_seconds_bucket[5m])) by (method, path, le)) * 1000\n\n```"]