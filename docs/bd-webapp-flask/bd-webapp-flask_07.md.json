["```py\n# coding:utf-8\n\n\"\"\"Doctest example\"\"\"\n\nimport doctest\nimport unittest\n\ndef sum_fnc(a, b):\n    \"\"\"\n    Returns a + b\n\n    >>> sum_fnc(10, 20)\n    30\n    >>> sum_fnc(-10, -20)\n    -30\n    >>> sum_fnc(10, -20)\n    -10\n    \"\"\"\n    return a + b\n\nclass TestSumFnc(unittest.TestCase):\n    def test_sum_with_positive_numbers(self):\n        result = sum_fnc(10, 20)\n        self.assertEqual(result, 30)\n\n    def test_sum_with_negative_numbers(self):\n        result = sum_fnc(-10, -20)\n        self.assertEqual(result, -30)\n\n    def test_sum_with_mixed_signal_numbers(self):\n        result = sum_fnc(10, -20)\n        self.assertEqual(result, -10)\n\nif __name__ == '__main__':\n    doctest.testmod(verbose=1)\n    unittest.main()\n```", "```py\n# coding:utf-8\n\nfrom flask import Flask, url_for, request\nimport unittest\n\ndef setup_database(app):\n    # setup database ...\n    pass\n\ndef setup(app):\n    from flask import request, render_template\n\n    # this is not a good production setup\n    # you should register blueprints here\n    @app.route(\"/\")\n    def index_view():\n        return render_template('index.html', name=request.args.get('name'))\n\ndef app_factory(name=__name__, debug=True):\n    app = Flask(name)\n    app.debug = debug\n    setup_database(app)\n    setup(app)\n    return app\n\nclass TestWebApp(unittest.TestCase):\n    def setUp(self):\n        # setUp is called before each test method\n        # we create a clean app for each test\n        self.app = app_factory()\n        # we create a clean client for each test\n        self.client = self.app.test_client()\n\n    def tearDown(self):\n        # release resources here\n        # usually, you clean or destroy the test database\n        pass\n\n    def test_index_no_arguments(self):\n        with self.app.test_request_context():\n            path = url_for('index_view')\n            resp = self.client.get(path)\n            # check response content\n            self.assertIn('Hello World', resp.data)\n\n    def test_index_with_name(self):\n        with self.app.test_request_context():\n            name = 'Amazing You'\n            path = url_for('index_view', name=name)\n            resp = self.client.get(path)\n            # check response content\n            self.assertIn(name, resp.data)\n\nif __name__ == '__main__':\n    unittest.main()\n```", "```py\npip install lettuce python-Levenshtein\n\n```", "```py\n# coding:utf-8\nfrom lettuce import *\nfrom lib import sum_fnc\n\n@step('Given I have the numbers (\\-?\\d+) and (\\-?\\d+)')\ndef have_the_numbers(step, *numbers):\n    numbers = map(lambda n: int(n), numbers)\n    world.numbers = numbers\n\n@step('When I sum them')\ndef compute_sum(step):\n    world.result = sum_fnc(*world.numbers)\n\n@step('Then I see the result (\\-?\\d+)')\ndef check_number(step, expected):\n    expected = int(expected)\n    assert world.result == expected, \"Got %d; expected %d\" % (world.result, expected)\n```", "```py\npip install flask-testing blinker\n\n```", "```py\npip install selenium\n\n```", "```py\n# coding:utf-8\n\n\"\"\"\nExample adapted from https://pythonhosted.org/Flask-Testing/#testing-with-liveserver\n\"\"\"\n\nimport urllib2\nfrom urlparse import urljoin\nfrom selenium import webdriver\nfrom flask import Flask, render_template, jsonify, url_for\nfrom flask.ext.testing import LiveServerTestCase\nfrom random import choice\n\nmy_lines = ['Hello there!', 'How do you do?', 'Flask is great, ain't it?']\n\ndef setup(app):\n    @app.route(\"/\")\n    def index_view():\n        return render_template('js_index.html')\n\n    @app.route(\"/text\")\n    def text_view():\n        return jsonify({'text': choice(my_lines)})\n\ndef app_factory(name=None):\n    name = name or __name__\n    app = Flask(name)\n    setup(app)\n    return app\n\nclass IndexTest(LiveServerTestCase):\n    def setUp(self):\n        self.driver = webdriver.PhantomJS()\n\n    def tearDown(self):\n        self.driver.close()\n\n    def create_app(self):\n        app = app_factory()\n        app.config['TESTING'] = True\n        # default port is 5000\n        app.config['LIVESERVER_PORT'] = 8943\n        return app\n\n    def test_server_is_up_and_running(self):\n        resp = urllib2.urlopen(self.get_server_url())\n        self.assertEqual(resp.code, 200)\n\n    def test_random_text_was_loaded(self):\n        with self.app.test_request_context():\n            domain = self.get_server_url()\n            path = url_for('.index_view')\n            url = urljoin(domain, path)\n\n            self.driver.get(url)\n            fillme_element = self.driver.find_element_by_id('fillme')\n            fillme_text = fillme_element.text\n            self.assertIn(fillme_text, my_lines)\n\nif __name__ == '__main__':\n    import unittest\n    unittest.main()\n```", "```py\n<html>\n<head><title>Hello You</title></head>\n<body>\n<span id=\"fillme\"></span>\n\n<!-- Loading JQuery from CDN -->\n<!-- what's a CDN? http://www.rackspace.com/knowledge_center/article/what-is-a-cdn -->\n<script type=\"text/javascript\" src=\"img/jquery-2.1.3.min.js\"></script>\n<script type=\"text/javascript\">\n  $(document).ready(function(){\n    $.getJSON(\"{{ url_for('.text_view') }}\",\n    function(data){\n       $('#fillme').text(data['text']);\n    });\n  });\n</script>\n</body></html>\n```", "```py\n# example from https://pythonhosted.org/Flask-Testing/#testing-json-responses\n@app.route(\"/ajax/\")\ndef some_json():\n    return jsonify(success=True)\n\nclass TestViews(TestCase):\n    def test_some_json(self):\n        response = self.client.get(\"/ajax/\")\n        self.assertEquals(response.json, dict(success=True))\n```", "```py\nattributes = { \u2026 }\nmodel = MyModel(**attributes)\ndb.session.add(model)\ndb.session.commit()\n```", "```py\n# coding:utf-8\n# == USING FIXTURES ===\nimport tempfile, os\nimport json\n\nfrom flask import Flask\nfrom flask.ext.testing import TestCase\nfrom flask.ext.sqlalchemy import SQLAlchemy\n\ndb = SQLAlchemy()\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(255))\n    gender = db.Column(db.String(1), default='U')\n\n    def __unicode__(self):\n        return self.name\n\ndef app_factory(name=None):\n    name = name or __name__\n    app = Flask(name)\n    return app\n\nclass MyTestCase(TestCase):\n    def create_app(self):\n        app = app_factory()\n        app.config['TESTING'] = True\n        # db_fd: database file descriptor\n        # we create a temporary file to hold our data\n        self.db_fd, app.config['DATABASE'] = tempfile.mkstemp()\n        db.init_app(app)\n        return app\n\n    def load_fixture(self, path, model_cls):\n        \"\"\"\n        Loads a json fixture into the database\n        \"\"\"\n        fixture = json.load(open(path))\n\n        for data in fixture:\n            # Model accepts dict like parameter\n            instance = model_cls(**data)\n            # makes sure our session knows about our new instance\n            db.session.add(instance)\n\n        db.session.commit()\n\n    def setUp(self):\n        db.create_all()\n        # you could load more fixtures if needed\n        self.load_fixture('fixtures/users.json', User)\n\n    def tearDown(self):\n        # makes sure the session is removed\n        db.session.remove()\n\n        # close file descriptor\n        os.close(self.db_fd)\n\n        # delete temporary database file\n        # as SQLite database is a single file, this is equivalent to a drop_all\n        os.unlink(self.app.config['DATABASE'])\n\n    def test_fixture(self):\n        marie = User.query.filter(User.name.ilike('Marie%')).first()\n        self.assertEqual(marie.gender, \"F\")\n\nif __name__ == '__main__':\n    import unittest\n    unittest.main()\n```", "```py\ndef new_user(**kw):\n    # this way we only know the user data in execution time\n    # tests should consider it\n    kw['name'] = kw.get('name', \"%s %s\" % (choice(names), choice(surnames)) )\n    kw['gender'] = kw.get('gender', choice(['M', 'F', 'U']))\n    return kw\nuser = User(**new_user())\ndb.session.add(user)\ndb.session.commit()\n```"]