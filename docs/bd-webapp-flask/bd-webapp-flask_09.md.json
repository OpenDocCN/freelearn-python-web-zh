["```py\nfrom flask import Flask\nimport logging\n\n# set configuration for your Flask application or extensions\nclass Config(object):\n    LOG_LEVEL = logging.WARNING\n\napp = Flask(__name__)\napp.config.from_object(Config)\napp.run()\n```", "```py\napp.config['LOG_LEVEL']\n```", "```py\n\u2026\napp.config.from_envvar('PATH_TO_CONFIGURATION')\n```", "```py\n# in the console\nexport  PATH_TO_CONFIGURATION=/home/youruser/someconfig.py\n\n```", "```py\n# someconfig.py\nimport logging\nLOG_LEVEL = logging.WARNING\n```", "```py\n    from collections import namedtuplenamedtuple('RoleNeed', ['role', 'admin'])\n    ```", "```py\npip install flask-wtf flask-login flask-principal flask-sqlalchemy\n\n```", "```py\n# coding:utf-8\n# this example is based in the examples available in flask-login and flask-principal docs\n\nfrom flask_wtf import Form\n\nfrom wtforms import StringField, PasswordField, ValidationError\nfrom wtforms import validators\n\nfrom flask import Flask, flash, render_template, redirect, url_for, request, session, current_app\nfrom flask.ext.login import UserMixin\nfrom flask.ext.sqlalchemy import SQLAlchemy\nfrom flask.ext.login import LoginManager, login_user, logout_user, login_required, current_user\nfrom flask.ext.principal import Principal, Permission, Identity, AnonymousIdentity, identity_changed\nfrom flask.ext.principal import RoleNeed, UserNeed, identity_loaded\n\nprincipal = Principal()\nlogin_manager = LoginManager()\nlogin_manager.login_view = 'login_view'\n# you may also overwrite the default flashed login message\n# login_manager.login_message = 'Please log in to access this page.'\ndb = SQLAlchemy()\n\n# Create a permission with a single Need\n# we use it to see if an user has the correct rights to do something\nadmin_permission = Permission(RoleNeed('admin'))\n```", "```py\n# UserMixin implements some of the methods required by Flask-Login\nclass User(db.Model, UserMixin):\n    __tablename__ = 'users'\n\n    id = db.Column(db.Integer, primary_key=True)\n    active = db.Column(db.Boolean, default=False)\n    username = db.Column(db.String(60), unique=True, nullable=False)\n    password = db.Column(db.String(20), nullable=False)\n    roles = db.relationship(\n        'Role', backref='roles', lazy='dynamic')\n\n    def __unicode__(self):\n        return self.username\n\n    # flask login expects an is_active method in your user model\n    # you usually inactivate a user account if you don't want it\n    # to have access to the system anymore\n    def is_active(self):\n        \"\"\"\n        Tells flask-login if the user account is active\n        \"\"\"\n        return self.active\n\nclass Role(db.Model):\n    \"\"\"\n    Holds our user roles\n    \"\"\"\n    __tablename__ = 'roles'\n    name = db.Column(db.String(60), primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'))\n\n    def __unicode__(self):\n        return self.name\n```", "```py\nclass LoginForm(Form):\n    def get_user(self):\n        return User.query.filter_by(username=self.username.data).first()\n\n    user = property(get_user)\n\n    username = StringField(validators=[validators.InputRequired()])\n    password = PasswordField(validators=[validators.InputRequired()])\n\n    def validate_username(self, field):\n        \"Validates that the username belongs to an actual user\"\n        if self.user is None:\n            # do not send a very specific error message here, otherwise you'll\n            # be telling the user which users are available in your database\n            raise ValidationError('Your username and password did not match')\n\n    def validate_password(self, field):\n        username = field.data\n        user = User.query.get(username)\n\n        if user is not None:\n            if not user.password == field.data:\n                raise ValidationError('Your username and password did not match')\n```", "```py\nclass Config(object):\n    \"Base configuration class\"\n    DEBUG = False\n    SECRET_KEY = 'secret'\n    SQLALCHEMY_DATABASE_URI = 'sqlite:////tmp/ex03.db'\n\nclass Dev(Config):\n    \"Our dev configuration\"\n    DEBUG = True\n    SQLALCHEMY_DATABASE_URI = 'sqlite:////tmp/dev.db'\n\ndef setup(app):\n    # initializing our extensions ; )\n    db.init_app(app)\n    principal.init_app(app)\n    login_manager.init_app(app)\n\n    # adding views without using decorators\n    app.add_url_rule('/admin/', view_func=admin_view)\n    app.add_url_rule('/admin/context/', view_func=admin_only_view)\n    app.add_url_rule('/login/', view_func=login_view, methods=['GET', 'POST'])\n    app.add_url_rule('/logout/', view_func=logout_view)\n\n    # connecting on_identity_loaded signal to our app\n    # you may also connect using the @identity_loaded.connect_via(app) decorator\n    identity_loaded.connect(on_identity_loaded, app, False)\n\n# our application factory\ndef app_factory(name=__name__, config=Dev):\n    app = Flask(name)\n    app.config.from_object(config)\n    setup(app)\n    return app\n```", "```py\n@identity_loaded.connect_via(app)\n\n# we use the decorator to let the login_manager know of our load_user\n# userid is the model id attribute by default\n@login_manager.user_loader\ndef load_user(userid):\n    \"\"\"\n    Loads an user using the user_id\n\n    Used by flask-login to load the user with the user id stored in session\n    \"\"\"\n    return User.query.get(userid)\n\ndef on_identity_loaded(sender, identity):\n    # Set the identity user object\n    identity.user = current_user\n\n    # in case you have resources that belong to a specific user\n    if hasattr(current_user, 'id'):\n        identity.provides.add(UserNeed(current_user.id))\n\n    # Assuming the User model has a list of roles, update the\n    # identity with the roles that the user provides\n    if hasattr(current_user, 'roles'):\n        for role in current_user.roles:\n            identity.provides.add(RoleNeed(role.name))\n```", "```py\ndef login_view():\n    form = LoginForm()\n\n    if form.validate_on_submit():\n        # authenticate the user...\n        login_user(form.user)\n\n        # Tell Flask-Principal the identity changed\n        identity_changed.send(\n            # do not use current_app directly\n            current_app._get_current_object(),\n            identity=Identity(form.user.id))\n        flash(\"Logged in successfully.\")\n        return redirect(request.args.get(\"next\") or url_for(\"admin_view\"))\n\n    return render_template(\"login.html\", form=form)\n\n@login_required  # you can't logout if you're not logged\ndef logout_view():\n    # Remove the user information from the session\n    # Flask-Login can handle this on its own = ]\n    logout_user()\n\n    # Remove session keys set by Flask-Principal\n    for key in ('identity.name', 'identity.auth_type'):\n        session.pop(key, None)\n\n    # Tell Flask-Principal the user is anonymous\n    identity_changed.send(\n        current_app._get_current_object(),\n        identity=AnonymousIdentity())\n\n    # it's good practice to redirect after logout\n    return redirect(request.args.get('next') or '/')\n```", "```py\n# I like this approach better ...\n@login_required\n@admin_permission.require()\ndef admin_view():\n    \"\"\"\n    Only admins can access this\n    \"\"\"\n    return render_template('admin.html')\n\n# Meh ...\n@login_required\ndef admin_only_view():\n    \"\"\"\n    Only admins can access this\n    \"\"\"\n    with admin_permission.require():\n        # using context\n        return render_template('admin.html')\n```", "```py\ndef populate():\n    \"\"\"\n    Populates our database with a single user, for testing ; )\n\n    Why not use fixtures? Just don't wanna ...\n    \"\"\"\n    user = User(username='student', password='passwd', active=True)\n    db.session.add(user)\n    db.session.commit()\n    role = Role(name='admin', user_id=user.id)\n    db.session.add(role)\n    db.session.commit()\n\nif __name__ == '__main__':\n    app = app_factory()\n\n    # we need to use a context here, otherwise we'll get a runtime error\n    with app.test_request_context():\n        db.drop_all()\n        db.create_all()\n        populate()\n\n    app.run()\n```", "```py\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>{% block title %}{% endblock %}</title>\n\n  <link rel=\"stylesheet\" media=\"screen,projection\"\n    href=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/0.96.1/css/materialize.min.css\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\"/>\n  <style type=\"text/css\">\n    .messages{\n      position: fixed;\n      list-style: none;\n      margin:0px;\n      padding: .5rem 2rem;\n      bottom: 0; left: 0;\n      width:100%;\n      background-color: #abc;\n      text-align: center;\n    }\n  </style>\n</head>\n<body>\n  {% with messages = get_flashed_messages() %}\n    {% if messages %}\n    <ul class='messages'>\n        {% for message in messages %}\n        <li>{{ message }}</li>\n        {% endfor %}\n    </ul>\n    {% endif %}\n  {% endwith %}\n\n  <header>\n     <nav>\n      <div class=\"container nav-wrapper\">\n        {% if current_user.is_authenticated() %}\n        <span>Welcome to the admin interface, {{ current_user.username }}</span>\n        {% else %}<span>Welcome, stranger</span>{% endif %}\n\n        <ul id=\"nav-mobile\" class=\"right hide-on-med-and-down\">\n          {% if current_user.is_authenticated() %}\n          <li><a href=\"{{ url_for('logout_view') }}?next=/admin/\">Logout</a></li>\n          {% else %}\n          <li><a href=\"{{ url_for('login_view') }}?next=/admin/\">Login</a></li>\n          {% endif %}\n        </ul>\n      </div>\n    </nav>\n  </header>\n  <div class=\"container\">\n    {% block content %}{% endblock %}\n  </div>\n  <script type=\"text/javascript\" src=\"img/jquery-2.1.1.min.js\"></script>\n  <script src=\"img/materialize.min.js\"></script>\n</body>\n</html>\n```", "```py\npip install flask-admin\n\n```", "```py\n# coding:utf-8\n\nfrom flask import Flask\nfrom flask.ext.admin import Admin\nfrom flask.ext.admin.contrib.sqla import ModelView\nfrom flask.ext.login import UserMixin\nfrom flask.ext.sqlalchemy import SQLAlchemy\n\ndb = SQLAlchemy()\n\nclass User(db.Model, UserMixin):\n    __tablename__ = 'users'\n\n    id = db.Column(db.Integer, primary_key=True)\n    active = db.Column(db.Boolean, default=False)\n    username = db.Column(db.String(60), unique=True, nullable=False)\n    password = db.Column(db.String(20), nullable=False)\n    roles = db.relationship(\n        'Role', backref='roles', lazy='dynamic')\n\n    def __unicode__(self):\n        return self.username\n\n    # flask login expects an is_active method in your user model\n    # you usually inactivate a user account if you don't want it\n    # to have access to the system anymore\n    def is_active(self):\n        \"\"\"\n        Tells flask-login if the user account is active\n        \"\"\"\n        return self.active\n\nclass Role(db.Model):\n    \"\"\"\n    Holds our user roles\n    \"\"\"\n    __tablename__ = 'roles'\n    name = db.Column(db.String(60), primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'))\n\n    def __unicode__(self):\n        return self.name\n\n# Flask and Flask-SQLAlchemy initialization here\nadmin = Admin()\nadmin.add_view(ModelView(User, db.session, category='Profile'))\nadmin.add_view(ModelView(Role, db.session, category='Profile'))\n\ndef app_factory(name=__name__):\n    app = Flask(name)\n    app.debug = True\n    app.config['SECRET_KEY'] = 'secret'\n    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/ex04.db'\n\n    db.init_app(app)\n    admin.init_app(app)\n    return app\n\nif __name__ == '__main__':\n    app = app_factory()\n\n    # we need to use a context here, otherwise we'll get a runtime error\n    with app.test_request_context():\n        db.drop_all()\n        db.create_all()\n\n    app.run()\n```", "```py\n# coding:utf-8\n# permissions.py\n\nfrom flask.ext.principal import RoleNeed, UserNeed, Permission\nfrom flask.ext.principal import Principal\n\nprincipal = Principal()\n\n# admin permission role\nadmin_permission = Permission(RoleNeed('admin'))\n\n# END of FILE\n\n# coding:utf-8\n# admin.py\n\nfrom flask import g\nfrom flask.ext.login import current_user, login_required\nfrom flask.ext.admin import Admin, AdminIndexView, expose\nfrom flask.ext.admin.contrib.sqla import ModelView\n\nfrom permissions import *\n\nclass AuthMixinView(object):\n    def is_accessible(self):\n        has_auth = current_user.is_authenticated()\n        has_perm = admin_permission.allows(g.identity)\n        return has_auth and has_perm\n\nclass AuthModelView(AuthMixinView, ModelView):\n    @expose()\n    @login_required\n    def index_view(self):\n        return super(ModelView, self).index_view()\n\nclass AuthAdminIndexView(AuthMixinView, AdminIndexView):\n    @expose()\n    @login_required\n    def index_view(self):\n        return super(AdminIndexView, self).index_view()\n\nadmin = Admin(name='Administrative Interface', index_view=AuthAdminIndexView())\n```", "```py\n    form_args = {'form_field_name': {'parameter': 'value'}}  # parameter could be name, for example\n    ```", "```py\n    form_overrides = {'form_field': wtforms.SomeField}\n    ```", "```py\n    form_choices = {'form_field': [('value store in db', 'value display in the combo box')]}\n    ```", "```py\nclass AuthModelView(AuthMixinView, ModelView):\n    can_edit= False\n    form = MyAuthForm\n\n    @expose()\n    @login_required\n    def index_view(self):\n        return super(ModelView, self).index_view()\n```", "```py\n# coding:utf-8\nfrom flask import Flask\nfrom flask.ext.admin import Admin, BaseView, expose\n\nclass ReportsView(BaseView):\n    @expose('/')\n    def index(self):\n        # make sure reports.html exists\n        return self.render('reports.html')\n\napp = Flask(__name__)\nadmin = Admin(app)\nadmin.add_view(ReportsView(name='Reports Page'))\n\nif __name__ == '__main__':\n    app.debug = True\n    app.run()\n```", "```py\nclass ReportsView(BaseView):\n\u2026\n  def is_visible(self):\n    return False\n```"]