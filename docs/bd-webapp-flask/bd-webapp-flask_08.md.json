["```py\n# library for parsing and reading our HTML\npip install lxml\n# our test-friendly library\npip install flask-testing\n\n```", "```py\n# coding:utf-8\n# runtests.py\n\nimport lxml.html\n\nfrom flask.ext.testing import TestCase\nfrom flask import url_for\nfrom main import app_factory\nfrom database import db\n\nclass BaseTest(object):\n    \"\"\"\n    Base test case. Our test cases should extend this class.\n    It handles database creation and clean up.\n    \"\"\"\n\n    def create_app(self):\n        app = app_factory()\n        app.config['TESTING'] = True\n        return app\n\n    def setUp(self):\n        self.app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/ex01_test.sqlite'\n        db.create_all()\n\n    def tearDown(self):\n        db.session.remove()\n        db.drop_all()\n\nclass PostDetailTest(BaseTest, TestCase):\n    def add_single_post(self):\n        from blog import Post\n\n        db.session.add(Post(title='Some text', slug='some-text', content='some content'))\n        db.session.commit()\n\n        assert Post.query.count() == 1\n\n    def setUp(self):\n        super(PostDetailTest, self).setUp()\n        self.add_single_post()\n\n    def test_get_request(self):\n        with self.app.test_request_context():\n            url = url_for('blog.posts_view', slug='some-text')\n            resp = self.client.get(url)\n            self.assert200(resp)\n            self.assertTemplateUsed('post.html')\n            self.assertIn('Some text', resp.data)\n\nclass PostListTest(BaseTest, TestCase):\n    def add_posts(self):\n        from blog import Post\n\n        db.session.add_all([\n            Post(title='Some text', slug='some-text', content='some content'),\n            Post(title='Some more text', slug='some-more-text', content='some more content'),\n            Post(title='Here we go', slug='here-we-go', content='here we go!'),\n        ])\n        db.session.commit()\n\n        assert Post.query.count() == 3\n\n    def add_multiple_posts(self, count):\n        from blog import Post\n\n        db.session.add_all([\n            Post(title='%d' % i, slug='%d' % i, content='content %d' % i) for i in range(count)\n        ])\n        db.session.commit()\n\n        assert Post.query.count() == count\n\n    def test_get_posts(self):\n        self.add_posts()\n\n        # as we want to use url_for ...\n        with self.app.test_request_context():\n            url = url_for('blog.posts_view')\n            resp = self.client.get(url)\n\n            self.assert200(resp)\n            self.assertIn('Some text', resp.data)\n            self.assertIn('Some more text', resp.data)\n            self.assertIn('Here we go', resp.data)\n            self.assertTemplateUsed('posts.html')\n\n    def test_page_number(self):\n        self.add_multiple_posts(15)\n\n        with self.app.test_request_context():\n            url = url_for('blog.posts_view')\n            resp = self.client.get(url)\n\n            self.assert200(resp)\n\n            # we use lxml to count how many li results were returned\n            handle = lxml.html.fromstring(resp.data)\n            self.assertEqual(10, len(handle.xpath(\"//ul/li\")))\n\nif __name__ == '__main__':\n    import unittest\n    unittest.main()\n```", "```py\n# coding:utf-8\n# blog.py\n\nfrom flask import Blueprint, render_template, request\nfrom database import db\n\n# app is usually a good name for your blueprint instance\napp = Blueprint(\n    'blog',  # our blueprint name and endpoint prefix\n    # template_folder points out to a templates folder in the current module directory\n    __name__, template_folder='templates'\n)\n\nclass Post(db.Model):\n    __tablename__ = 'posts'\n\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(100), nullable=False)\n    slug = db.Column(db.String(100), nullable=False, unique=True)\n    content = db.Column(db.Text(), nullable=False)\n\n    def __unicode__(self):\n        return self.title\n\n@app.route(\"/\")\n@app.route(\"/<slug>\")\ndef posts_view(slug=None):\n    if slug is not None:\n        post = Post.query.filter_by(slug=slug).first()\n        return render_template('post.html', post=post)\n\n    # lets paginate our result\n    page_number = into(request.args.get('page', 1))\n    page = Post.query.paginate(page_number, 10)\n\n    return render_template('posts.html', page=page)\n```", "```py\n# coding:utf-8\n# database.py\nfrom flask.ext.sqlalchemy import SQLAlchemy\n\ndb = SQLAlchemy()\n## database.py END\n\n# coding:utf-8\n# main.py\nfrom flask import Flask\nfrom database import db\nfrom blog import app as blog_bp\n\ndef app_factory(name=None):\n    app = Flask(name or __name__)\n    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/ex01.db'\n\n    db.init_app(app)\n\n    # let Flask know about blog blueprint\n    app.register_blueprint(blog_bp)\n    return app\n\n# running or importing?\nif __name__ == '__main__':\n    app = app_factory()\n    app.debug = True\n\n    # make sure our tables are created\n    with app.test_request_context():\n        db.create_all()\n\n    app.run()\n```", "```py\n# coding:utf-8\nfrom views import *\n```", "```py\n# coding:utf-8\nfrom flask import Flask\nimport logging\nfrom logging.handlers import RotatingFileHandler\n\napp = Flask(__name__)\n\n# default flask logging handler pushes messages into the console\n# works DEBUG mode only\napp.config['LOG_FILENAME'] = '/var/tmp/project_name.log'\n# log warning messages or higher\napp.config['LOG_LEVEL'] = logging.WARNING\napp.config['ADMINS'] = ['you@domain.com']\napp.config['ENV'] = 'production'\n\ndef configure_file_logger(app, filename, level=logging.DEBUG):\n    # special file handler that overwrites logging file after\n    file_handler = RotatingFileHandler(\n        filename=filename,\n        encoding='utf-8',  # cool kids use utf-8\n        maxBytes=1024 * 1024 * 32,  # we don't want super huge log files ...\n        backupCount=3  # keep up to 3 old log files before rolling over\n    )\n\n    # define how our log messages should look like\n    formatter = logging.Formatter(u\"%(asctime)s %(levelname)s\\t: %(message)s\")\n    file_handler.setFormatter(formatter)\n    file_handler.setLevel(level)\n\n    app.logger.addHandler(file_handler)\n\ndef configure_mail_logger(app, level=logging.ERROR):\n    \"\"\"\n    Notify admins by e-mail in case of error for immediate action\n    based on from http://flask.pocoo.org/docs/0.10/errorhandling/#error-mails\n    \"\"\"\n\n    if app.config['ENV'] == 'production':\n        from logging.handlers import SMTPHandler\n\n        mail_handler = SMTPHandler(\n            '127.0.0.1',\n            'server-error@domain.com',\n            app.config['ADMINS'], 'YourApplication Failed')\n\n        mail_handler.setLevel(level)\n        app.logger.addHandler(mail_handler)\n\nif __name__ == '__main__':\n    app.debug = True\n    configure_file_logger(app, '/var/tmp/project_name.dev.log')\n    configure_mail_logger(app)\n    app.run()\n```", "```py\n# coding:utf-8\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef index_view(arg=None):\n    import pdb; pdb.set_trace()  # @TODO remove me before commit\n    return 'Arg is %s' % arg\n\nif __name__ == '__main__':\n    app.debug = True\n    app.run()\n```", "```py\npip install flask-debugtoolbar\n\n```", "```py\n# coding:utf-8\nfrom flask import Flask, render_template\nfrom flask_debugtoolbar import DebugToolbarExtension\n\napp = Flask(__name__)\n# configure your application before initializing any extensions\napp.debug = True\napp.config['SECRET_KEY'] = 'secret'  # required for session cookies to work\napp.config['DEBUG_TB_TEMPLATE_EDITOR_ENABLED'] = True\ntoolbar = DebugToolbarExtension(app)\n\n@app.route(\"/\")\ndef index_view():\n    # please, make sure templates/index.html exists ; )\n    return render_template('index.html')\n\nif __name__ == '__main__':\n    app.run()\n```", "```py\n# coding:utf-8\n\nfrom flask import Flask, render_template, session, flash\nfrom flask.ext.sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\n# strong secret key!!\napp.config['SECRET_KEY'] = '\\xa6\\xb5\\x0e\\x7f\\xd3}\\x0b-\\xaa\\x03\\x03\\x82\\x10\\xbe\\x1e0u\\x93,{\\xd4Z\\xa3\\x8f'\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/ex05.sqlite'\ndb = SQLAlchemy(app)\n\nclass Product(db.Model):\n    __tablename__ = 'products'\n\n    id = db.Column(db.Integer, primary_key=True)\n    sku = db.Column(db.String(30), unique=True)\n    name = db.Column(db.String(255), nullable=False)\n\n    def __unicode__(self):\n        return self.name\n\n@app.route(\"/cart/add/<sku>\")\ndef add_to_cart_view(sku):\n    product = Product.query.filter_by(sku=sku).first()\n\n    if product is not None:\n        session['cart'] = session.get('cart') or dict()\n        item = session['cart'].get(product.sku) or dict()\n        item['qty'] = item.get('qty', 0) + 1\n        session['cart'][product.sku] = item\n        flash(u'%s add to cart. Total: %d' % (product, item['qty']))\n\n    return render_template('cart.html')\n\ndef init():\n    \"\"\"\n    Initializes and populates the database\n    \"\"\"\n    db.create_all()\n\n    if Product.query.count() == 0:\n        db.session.add_all([\n            Product(sku='010', name='Boots'),\n            Product(sku='020', name='Gauntlets'),\n            Product(sku='030', name='Helmets'),\n        ])\n        db.session.commit()\n\nif __name__ == '__main__':\n    app.debug = True\n\n    with app.test_request_context():\n        init()\n\n    app.run()\n# == END\n# cart.html\n<html><head>\n  <title>Cart</title>\n</head><body>\n{% with messages = get_flashed_messages() %}\n  {% if messages %}\n  <ul>\n    {% for message in messages %}\n    <li>{{ message }}</li>\n    {% endfor %}\n  {% endif %}\n  </ul>\n{% endwith %}\n</body></html>\n```", "```py\nsession['cart'] = dict()  # new cart\n# modified tells me if session knows it was changed\nassert session.modified == True\nsession.modified = False  # we force it to think it was not meddled with\nsession['cart']['item'] = dict()\n# session does not know that one of its children was modified\nassert session.modified == False\n# we tell it, forcing a update\nsession.modified =True\n# session will be saved, now\n```"]