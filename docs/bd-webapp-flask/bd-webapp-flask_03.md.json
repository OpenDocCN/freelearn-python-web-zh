["```py\nfrom jinja2 import Template\nx = \"\"\"\n<p>Uncle Scrooge nephews</p>\n<ul>\n{% for i in my_list %}\n<li>{{ i }}</li>\n{% endfor %}\n</ul>\n\"\"\"\ntemplate = Template(x)\n# output is an unicode string\nprint template.render(my_list=['Huey', 'Dewey', 'Louie'])\n```", "```py\nfrom jinja2 import Template\n# create the template\nt = Template(\"{{ variable }}\")\n# \u2013 Built-in Types \u2013\nt.render(variable='hello you')\n>> u\"hello you\"\nt.render(variable=100)\n>> u\"100\"\n# you can evaluate custom classes instances\nclass A(object):\n  def __str__(self):\n    return \"__str__\"\n  def __unicode__(self):\n    return u\"__unicode__\"\n  def __repr__(self):\n    return u\"__repr__\"\n# \u2013 Custom Objects Evaluation \u2013\n# __unicode__ has the highest precedence in evaluation\n# followed by __str__ and __repr__\nt.render(variable=A())\n>> u\"__unicode__\"\n```", "```py\nfrom jinja2 import Template\n# create the template\nt = Template(\"{{ fnc() }}\")\nt.render(fnc=lambda: 10)\n>> u\"10\"\n# evaluating a function with argument\nt = Template(\"{{ fnc(x) }}\")\nt.render(fnc=lambda v: v, x='20')\n>> u\"20\"\nt = Template(\"{{ fnc(v=30) }}\")\nt.render(fnc=lambda v: v)\n>> u\"30\"\n```", "```py\n{# flask syntax #}\n{{ some_function() }}\n\n{# django syntax #}\n{{ some_function }}\n```", "```py\nfrom jinja2 import Template\n# no context provided / needed\nTemplate(\"{{ 3 + 3 }}\").render()\n>> u\"6\"\nTemplate(\"{{ 3 - 3 }}\").render()\n>> u\"0\"\nTemplate(\"{{ 3 * 3 }}\").render()\n>> u\"9\"\nTemplate(\"{{ 3 / 3 }}\").render()\n>> u\"1\"\n```", "```py\nfrom jinja2 import Template\nTemplate(\"{{ my_list[0] }}\").render(my_list=[1, 2, 3])\n>> u'1'\nTemplate(\"{{ my_list['foo'] }}\").render(my_list={'foo': 'bar'})\n>> u'bar'\n# and here's some magic\nTemplate(\"{{ my_list.foo }}\").render(my_list={'foo': 'bar'})\n>> u'bar'\n```", "```py\n{% stmt %}\n{% endstmt %}\n```", "```py\n{% block content %}\n{% for i in items %}\n{{ i }} - {{ i.price }}\n{% endfor %}\n{% endblock %}\n```", "```py\n{# first example #}\n{#\nsecond example\n#}\n```", "```py\n{% if true %}Too easy{% endif %}\n{% if true == true == True %}True and true are the same{% endif %}\n{% if false == false == False %}False and false also are the same{% endif %}\n{% if none == none == None %}There's also a lowercase None{% endif %}\n{% if 1 >= 1 %}Compare objects like in plain python{% endif %}\n{% if 1 == 2 %}This won't be printed{% else %}This will{% endif %}\n{% if \"apples\" != \"oranges\" %}All comparison operators work = ]{% endif %}\n{% if something %}elif is also supported{% elif something_else %}^_^{% endif %}\n```", "```py\n{% if  5 < 10 < 15 %}true{%else%}false{% endif %}\n{% if  (5 < 10) < 15 %}true{%else%}false{% endif %}\n{% if  5 < (10 < 15) %}true{%else%}false{% endif %}\n```", "```py\n{% for item in my_list %}\n{{ item }}{# print evaluate item #}\n{% endfor %}\n{# or #}\n{% for key, value in my_dictionary.items() %}\n{{ key }}: {{ value }}\n{% endfor %}\n```", "```py\n{% for i in ['a', 'b', 'c', 'd'] %}\n{% if loop.first %}This is the first iteration{% endif %}\n{% if loop.last %}This is the last iteration{% endif %}\n{{ loop.cycle('red', 'blue') }}{# print red or blue alternating #}\n{{ loop.index }} - {{ loop.index0 }} {# 1 indexed index \u2013 0 indexed index #}\n{# reverse 1 indexed index \u2013 reverse 0 indexed index #}\n{{ loop.revindex }} - {{ loop.revindex0 }} \n{% endfor %}\n```", "```py\nfor i in [1, 2, 3]:\n  pass\nelse:\n  print \"this will be printed\"\nfor i in [1, 2, 3]:\n  if i == 3:\n    break\nelse:\n  print \"this will never not be printed\"\n```", "```py\n{% for i in [] %}\n{{ i }}\n{% else %}I'll be printed{% endfor %}\n{% for i in ['a'] %}\n{{ i }}\n{% else %}I won't{% endfor %}\n```", "```py\n{% for i in [1, 2, 3, 4, 5] if i > 2 %}\nvalue: {{ i }}; loop.index: {{ loop.index }}\n{%- endfor %}\n```", "```py\nvalue:3; index: 1\nvalue:4; index: 2\nvalue:5; index: 3\n```", "```py\n# coding:utf-8\nwith open('parent.txt', 'w') as file:\n    file.write(\"\"\"\n{% block template %}parent.txt{% endblock %}\n===========\nI am a powerful psychic and will tell you your past\n\n{#- \"past\" is the block identifier #}\n{% block past %}\nYou had pimples by the age of 12.\n{%- endblock %}\n\nTremble before my power!!!\"\"\".strip())\n\nwith open('child.txt', 'w') as file:\n    file.write(\"\"\"\n{% extends \"parent.txt\" %}\n\n{# overwriting the block called template from parent.txt #}\n{% block template %}child.txt{% endblock %}\n\n{#- overwriting the block called past from parent.txt #}\n{% block past %}\nYou've bought an ebook recently.\n{%- endblock %}\"\"\".strip())\nwith open('other.txt', 'w') as file:\n\tfile.write(\"\"\"\n{% extends \"child.txt\" %}\n{% block template %}other.txt{% endblock %}\"\"\".strip())\n\nfrom jinja2 import Environment, FileSystemLoader\n\nenv = Environment()\n# tell the environment how to load templates\nenv.loader = FileSystemLoader('.')\n# look up our template\ntmpl = env.get_template('parent.txt')\n# render it to default output\nprint tmpl.render()\nprint \"\"\n# loads child.html and its parent\ntmpl = env.get_template('child.txt')\nprint tmpl.render()\n# loads other.html and its parent\nenv.get_template('other.txt').render()\n```", "```py\nwith open('base.txt', 'w') as file:\n  file.write(\"\"\"\n{{ myvar }}\nYou wanna hear a dirty joke?\n{% include 'joke.txt' %}\n\"\"\".strip())\nwith open('joke.txt', 'w') as file:\n  file.write(\"\"\"\nA boy fell in a mud puddle. {{ myvar }} \n\"\"\".strip())\n\nfrom jinja2 import Environment, FileSystemLoader\n\nenv = Environment()\n# tell the environment how to load templates\nenv.loader = FileSystemLoader('.')\nprint env.get_template('base.txt').render(myvar='Ha ha!')\n```", "```py\n{% set x = 10 %}\n{{ x }}\n{% set x, y, z = 10, 5+5, \"home\" %}\n{{ x }} - {{ y }} - {{ z }}\n```", "```py\nwith open('formfield.html', 'w') as file:\n  file.write('''\n{% macro input(name, value='', label='') %}\n{% if label %}\n<label for='{{ name }}'>{{ label }}</label>\n{% endif %}\n<input id='{{ name }}' name='{{ name }}' value='{{ value }}'></input>\n{% endmacro %}'''.strip())\nwith open('index.html', 'w') as file:\n  file.write('''\n{% from 'formfield.html' import input %}\n<form method='get' action='.'>\n{{ input('name', label='Name:') }}\n<input type='submit' value='Send'></input>\n</form>\n'''.strip())\n\nfrom jinja2 import Environment, FileSystemLoader\n\nenv = Environment()\nenv.loader = FileSystemLoader('.')\nprint env.get_template('index.html').render()\n```", "```py\n{% from 'formfield.html' import input as field_input %}\n```", "```py\n{% import 'formfield.html' as formfield %}\n```", "```py\n# coding:utf-8\nwith open('formfield.html', 'w') as file:\n    file.write('''\n{% macro input(name) -%}\n<input id='{{ name }}' name='{{ name }}' {% for k,v in kwargs.items() -%}{{ k }}='{{ v }}' {% endfor %}></input>\n{%- endmacro %}\n'''.strip())with open('index.html', 'w') as file:\n    file.write('''\n{% from 'formfield.html' import input %}\n{# use method='post' whenever sending sensitive data over HTTP #}\n<form method='post' action='.'>\n{{ input('name', type='text') }}\n{{ input('passwd', type='password') }}\n<input type='submit' value='Send'></input>\n</form>\n'''.strip())\n\nfrom jinja2 import Environment, FileSystemLoader\n\nenv = Environment()\nenv.loader = FileSystemLoader('.')\nprint env.get_template('index.html').render()\n```", "```py\nenv = Environment(extensions=['jinja2.ext.do', 'jinja2.ext.with_'])\n```", "```py\n{% set x = {1:'home', '2':'boat'} %}\n{% do x.update({3: 'bar'}) %}\n{%- for key,value in x.items() %}\n{{ key }} - {{ value }}\n{%- endfor %}\n```", "```py\n{% with age = user.get_age() %}\nMy age: {{ age }}\n{% endwith %}\nMy age: {{ age }}{# no value here #}\n```", "```py\n{% with %}\n{% set count = query.count() %}\nCurrent Stock: {{ count }}\nDiff: {{ prev_count - count }}\n{% endwith %}\n{{ count }} {# empty value #}\n```", "```py\n{% set name = 'junior' %}\n{{ name|capitalize }} {# output is Junior #}\n```", "```py\n{{ ['Adam', 'West']|join(' ') }} {# output is Adam West #}\n```", "```py\n{# prints default value if input is undefined #}\n{{ x|default('no opinion') }}\n{# prints default value if input evaluates to false #}\n{{ none|default('no opinion', true) }}\n{# prints input as it was provided #}\n{{ 'some opinion'|default('no opinion') }}\n\n{# you can use a filter inside a control statement #}\n{# sort by key case-insensitive #}\n{% for key in {'A':3, 'b':2, 'C':1}|dictsort %}{{ key }}{% endfor %}\n{# sort by key case-sensitive #}\n{% for key in {'A':3, 'b':2, 'C':1}|dictsort(true) %}{{ key }}{% endfor %}\n{# sort by value #}\n{% for key in {'A':3, 'b':2, 'C':1}|dictsort(false, 'value') %}{{ key }}{% endfor %}\n{{ [3, 2, 1]|first }} - {{ [3, 2, 1]|last }}\n{{ [3, 2, 1]|length }} {# prints input length #}\n{# same as in python #}\n{{ '%s, =D'|format(\"I'm John\") }}\n{{ \"He has two daughters\"|replace('two', 'three') }}\n{# safe prints the input without escaping it first#}\n{{ '<input name=\"stuff\" />'|safe }}\n{{ \"there are five words here\"|wordcount }}\n```", "```py\nfrom flask import Flask\napp = Flask(__name__)\napp.jinja_env.add_extension('jinja2.ext.do')  # or jinja2.ext.with_\nif __name__ == '__main__':\n  app.run()\n```", "```py\nfrom flask import Flask, render_template\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return render_template(\"index.html\")\n```", "```py\nfrom flask import Flask, render_template\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return render_template(\"index.html\", my_age=28)\n```", "```py\nfrom flask import Flask, render_response\napp = Flask(__name__)\n\n@app.context_processor\ndef luck_processor():\n  from random import randint\n  def lucky_number():\n    return randint(1, 10)\n  return dict(lucky_number=lucky_number)\n\n@app.route(\"/\")\ndef hello():\n  # lucky_number will be available in the index.html context by default\n  return render_template(\"index.html\")\n```"]