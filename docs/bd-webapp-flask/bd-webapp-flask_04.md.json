["```py\n<!-- example 1 -->\n<form method='post' action='.'>\n<input type='text' name='username' />\n<input type='password' name='passwd' />\n<input type='submit' />\n</form>\n```", "```py\n<!-- example 2 -->\n<form action='.'>\n<input type='search' name='search' />\n</form>\n```", "```py\n# coding:utf-8\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route('/', methods=['get', 'post'])\ndef login_view():\n    # the methods that handle requests are called views, in flask\n    msg = ''\n\n    # form is a dictionary like attribute that holds the form data\n    if request.method == 'POST':\n      username = request.form[\"username\"]\n        passwd = request.form[\"passwd\"]\n\n        # static useless validation\n        if username == 'you' and passwd == 'flask':\n            msg = 'Username and password are correct'\n        else:\n            msg = 'Username or password are incorrect'\n    return render_template('form.html', message=msg)\n\nif __name__=='__main__':\n    app.run()\n```", "```py\n# inside a flask view\ndef some_view():\n    try:\n        page = int(request.args.get('page', 1))\n        assert page == 10\n    except ValueError:\n        page = 1\n    ...\n```", "```py\npip install wtforms\n\n```", "```py\nfrom wtforms import Form, StringField, PasswordField\nclass LoginForm(Form):\n    username = StringField(u'Username:')\n    passwd = PasswordField(u'Password:')\n```", "```py\n<form method='post'>\n{% for field in form %}\n    {{ field.label }}\n    {{ field }}\n    {% if field.errors %}\n        {% for error in field.errors %}\n            <div class=\"field_error\">{{ error }}</div>\n        {% endfor %}\n    {% endif %}\n{% endfor %}\n</form>\n```", "```py\n{% if field.flags.required %}\n{{ field(required='required') }}\n{% endif %}\n```", "```py\n# coding:utf-8\nfrom wtforms import Form, ValidationError\nfrom wtforms import StringField, PasswordField\nfrom wtforms.validators import Length, InputRequired\nfrom werkzeug.datastructures import MultiDict\n\nimport re\n\ndef is_proper_username(form, field):\n    if not re.match(r\"^\\w+$\", field.data):\n        msg = '%s should have any of these characters only: a-z0-9_' % field.name\n        raise ValidationError(msg)\n\nclass LoginForm(Form):\n    username = StringField(\n        u'Username:', [InputRequired(), is_proper_username, Length(min=3, max=40)])\n    password = PasswordField(\n        u'Password:', [InputRequired(), Length(min=5, max=12)])\n\n    @staticmethod\n    def validate_password(form, field):\n        data = field.data\n        if not re.findall('.*[a-z].*', data):\n            msg = '%s should have at least one lowercase character' % field.name\n            raise ValidationError(msg)\n        # has at least one uppercase character\n        if not re.findall('.*[A-Z].*', data):\n            msg = '%s should have at least one uppercase character' % field.name\n            raise ValidationError(msg)\n        # has at least one number\n        if not re.findall('.*[0-9].*', data):\n            msg = '%s should have at least one number' % field.name\n            raise ValidationError(msg)\n        # has at least one special character\n        if not re.findall('.*[^ a-zA-Z0-9].*', data):\n            msg = '%s should have at least one special character' % field.name\n            raise ValidationError(msg)\n\n# testing our form\nform = LoginForm(MultiDict([('username', 'italomaia'), ('password', 'lL2m@msbb')]))\nprint form.validate()\nprint form.errors\n```", "```py\n# oh god, so hard... not!\npip flask-wtf\n\n```", "```py\n# make sure you're importing Form from flask_wtf and not wtforms\nfrom flask_wtf import Form\n\n# --//--\n@app.route('/', methods=['get', 'post'])\ndef login_view():\n    # the methods that handle requests are called views, in flask\n    msg = ''\n    # request.form is passed implicitly; implies POST\n    form = LoginForm()\n    # if the form should also deal with form.args, do it like this:\n    # form = LoginForm(request.form or request.args)\n\n    # checks that the submit method is POST and form is valid\n    if form.validate_on_submit():\n        msg = 'Username and password are correct'\n    else:\n        msg = 'Username or password are incorrect'\n    return render_template('form.html', message=msg)\n```", "```py\n# flash allows us to send messages to the user template without\n# altering the returned context\nfrom flask import flash\nfrom flask import redirect\n@app.route('/', methods=['get', 'post'])\ndef login_view():\n    # msg is no longer necessary. We will use flash, instead\n    form = LoginForm()\n\n    if form.validate_on_submit():\n        flash(request, 'Username and password are correct')\n        # it's good practice to redirect after a successful form submit\n        return redirect('/')\n    return render_template('form.html', form=form)\n```", "```py\n{# \nbeautiful example from \nhttp://flask.pocoo.org/docs/0.10/patterns/flashing/#simple-flashing \n#}\n{% with messages = get_flashed_messages() %}\n  {% if messages %}\n    <ul class='messages'>\n    {% for message in messages %}\n      <li>{{ message }}</li>\n    {% endfor %}\n    </ul>\n  {% endif %}\n{% endwith %}\n```", "```py\napp.secret_key = 'some secret string value' # ex: import os; os.urandom(24)\n```", "```py\n<form method='post'>{{ form.csrf_token }}\n{% for field in form if field.name != 'csrf_token' %}\n    <div class=\"field\">\n    {{ field.label }} {{ field }}\n    </div>\n    {% if field.errors %}\n        {% for error in field.errors %}\n        <div class=\"field_error\">{{ error }}</div>\n        {% endfor %}\n    {% endif %}\n{% endfor %}\n<input type='submit' />\n</form>\n```", "```py\nform = Form(csrf_enabled=False)\n```"]