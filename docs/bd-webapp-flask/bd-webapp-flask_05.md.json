["```py\npip install sqlalchemy\n\n```", "```py\nfrom sqlalchemy import create_engine\ndb = create_engine('sqlite:///employees.sqlite')\n# echo output to console\ndb.echo = True\n\nconn = db.connect()\n\nconn.execute(\"\"\"\nCREATE TABLE employee (\n  id          INTEGER PRIMARY KEY,\n  name        STRING(100) NOT NULL,\n  birthday    DATE NOT NULL\n)\"\"\")\n\nconn.execute(\"INSERT INTO employee VALUES (NULL, 'marcos mango', date('1990-09-06') );\")\nconn.execute(\"INSERT INTO employee VALUES (NULL, 'rosie rinn', date('1980-09-06') );\")\nconn.execute(\"INSERT INTO employee VALUES (NULL, 'mannie moon', date('1970-07-06') );\")\nfor row in conn.execute(\"SELECT * FROM employee\"):\n    print row\n# give connection back to the connection pool\nconn.close()\n```", "```py\n# we start our transaction here\n# all actions now are executed within the transaction context\ntrans = conn.begin()\n\ntry:\n    # we are using a slightly different insertion syntax for convenience, here; \n    # id value is not explicitly provided\n    conn.execute(\"INSERT INTO employee (name, birthday) VALUES ('marcos mango', date('1990-09-06') );\")\n    conn.execute(\"INSERT INTO employee (name, birthday) VALUES ('rosie rinn', date('1980-09-06') );\")\n    conn.execute(\"INSERT INTO employee (name, birthday) VALUES ('mannie moon', date('1970-07-06') );\")\n    # commit all\n    trans.commit()\nexcept:\n    # all or nothing. Undo what was executed within the transaction\n    trans.rollback()\n    raise\n```", "```py\n# coding:utf-8\nfrom sqlalchemy import create_engine\n\nengine = create_engine('sqlite:///employees.sqlite')\nengine.echo = True\n\nconn = engine.connect()\n\nconn.execute(\"\"\"\nCREATE TABLE employee (\n  id          INTEGER PRIMARY KEY,\n  name        STRING(100) NOT NULL,\n  birthday    DATE NOT NULL\n)\"\"\")\n\nconn.execute(\"\"\"\nCREATE TABLE address(\n  id      INTEGER PRIMARY KEY,\n  street  STRING(100) NOT NULL,\n  number  INTEGER,\n  google_maps STRING(255),\n  id_employee INTEGER NOT NULL,\n  FOREIGN KEY(id_employee) REFERENCES employee(id)\n)\"\"\")\n\ntrans = conn.begin()\ntry:\n    conn.execute(\"INSERT INTO employee (name, birthday) VALUES ('marcos mango', date('1990-09-06') );\")\n    conn.execute(\"INSERT INTO employee (name, birthday) VALUES ('rosie rinn', date('1980-09-06') );\")\n    conn.execute(\"INSERT INTO employee (name, birthday) VALUES ('mannie moon', date('1970-07-06') );\")\n    # insert addresses for each employee\n    conn.execute(\n        \"INSERT INTO address (street, number, google_maps, id_employee) \"\n        \"VALUES ('Oak', 399, '', 1)\")\n    conn.execute(\n        \"INSERT INTO address (street, number, google_maps, id_employee) \"\n        \"VALUES ('First Boulevard', 1070, '', 1)\")\n    conn.execute(\n        \"INSERT INTO address (street, number, google_maps, id_employee) \"\n        \"VALUES ('Cleveland, OH', 10, 'Cleveland,+OH,+USA/@41.4949426,-81.70586,11z', 2)\")\n    trans.commit()\nexcept:\n    trans.rollback()\n    raise\n\n# get marcos mango addresses\nfor row in conn.execute(\"\"\"\n  SELECT a.street, a.number FROM employee e\n  LEFT OUTER JOIN address a\n  ON e.id = a.id_employee\n  WHERE e.name like '%marcos%';\n  \"\"\"):\n    print \"address:\", row\nconn.close()\n```", "```py\n# coding:utf-8\n\nfrom sqlalchemy import create_engine\nfrom sqlalchemy import Column, Integer, String, Date, ForeignKey\nfrom sqlalchemy.orm import sessionmaker, relationship, backref\nfrom sqlalchemy.ext.declarative import declarative_base\n\nfrom datetime import datetime\n\nengine = create_engine('sqlite:///employees.sqlite')\nengine.echo = True\n\n# base class for our models\nBase = declarative_base()\n\n# we create a session binded to our engine\nSession = sessionmaker(bind=engine)\n\n# and then the session itself\nsession = Session()\n\n# our first model\nclass Address(Base):\n    # the table name we want in the database\n    __tablename__ = 'address'\n\n    # our primary key\n    id = Column(Integer, primary_key=True)\n    street = Column(String(100))\n    number = Column(Integer)\n    google_maps = Column(String(255))\n    # our foreign key to employee\n    id_employee = Column(Integer, ForeignKey('employee.id'))\n\n    def __repr__(self):\n         return u\"%s, %d\" % (self.street, self.number)\n\nclass Employee(Base):\n    __tablename__ = 'employee'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String(100))\n    birthday = Column(Date)\n    # we map \n    addresses = relationship(\"Address\", backref=\"employee\")\n\n    def __repr__(self):\n         return self.name\n\n# create our database from our classes\nBase.metadata.create_all(engine)\n\n# execute everything inside a transaction\nsession.add_all([\n        Employee(name='marcos mango', birthday=datetime.strptime('1990-09-06', '%Y-%m-%d')), \n        Employee(name='rosie rinn', birthday=datetime.strptime('1980-09-06', '%Y-%m-%d')),\n        Employee(name='mannie moon', birthday=datetime.strptime('1970-07-06', '%Y-%m-%d'))\n    ])\nsession.commit()\n\nsession.add_all([\n    Address(street='Oak', number=399, google_maps='', id_employee=1),\n    Address(street='First Boulevard', number=1070, google_maps='', id_employee=1),\n    Address(street='Cleveland, OH', number=10, \n             google_maps='Cleveland,+OH,+USA/@41.4949426,-81.70586,11z', id_employee=2)\n])\nsession.commit()\n\n# get marcos, then his addresses\nmarcos = session.query(Employee).filter(Employee.name.like(r\"%marcos%\")).first()\nfor address in marcos.addresses:\n    print 'Address:', address\n```", "```py\nmarcos.name = \"marcos tangerine\"\nsession.commit()\n```", "```py\nmarcos = session.query(Employee).filter(Employee.name.like(r\"%marcos%\")).first()\nmarcos_last_name = marcos.name.split(' ')[-1]\nprint marcos_last_name\n```", "```py\npip install flask-wtf flask-sqlalchemy\n\n```", "```py\n# coding:utf-8\nfrom flask import Flask, render_template, redirect, flash\nfrom flask_wtf import Form\nfrom flask.ext.sqlalchemy import SQLAlchemy\n\nfrom wtforms.ext.sqlalchemy.orm import model_form\n\napp = Flask(__name__)\napp.config['SECRET_KEY'] = 'secret'\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/employees.sqlite'\napp.config['SQLALCHEMY_ECHO'] = True\n\n# initiate the extension\ndb = SQLAlchemy(app)\n\n# define our model\nclass Employee(db.Model):\n    __tablename__ = 'employee'\n\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    birthday = db.Column(db.Date, nullable=False)\n\n    def __repr__(self):\n        return 'employee %s' % self.name\n\n# create the database\ndb.create_all()\n\n# auto-generate form for our model\nEmployeeForm = model_form(Employee, base_class=Form, field_args={\n    'name': {\n    'class': 'employee'\n  }\n})\n\n@app.route(\"/\", methods=['GET', 'POST'])\ndef index():\n    # as you remember, request.POST is implicitly provided as argument\n    form = EmployeeForm()\n\n    try:\n        if form.validate_on_submit():\n            employee = Employee()\n            form.populate_obj(employee)\n            db.session.add(employee)\n            db.session.commit()\n            flash('New employee add to database')\n            return redirect('/')\n    except Exception, e:\n        # log e\n        db.session.rollback()\n        flash('An error occurred accessing the database. Please, contact administration.')\n\n    employee_list=Employee.query.all()\n    return render_template('index.html', form=form, employee_list=employee_list)\n\nif __name__ == '__main__':\n    app.debug = True\n    app.run()\n```", "```py\nemployee.name = form.name.data\nemployee. birthday = form.birthday.data\n```", "```py\nqueryset = Employee.query.filter_by(name='marcos mango')\nqueryset = queryset.filter_by(birthday=datetime.strptime('1990-09-06', '%Y-%m-%d'))\nqueryset.all()  # <= returns the result of both filters applied together\n```", "```py\nsudo apt-get install mongodb\n\n```", "```py\nmongo\n\n```", "```py\n> use example\nswitched to db example\n> db.employees.insert({name: 'marcos mango', birthday: new Date('Sep 06, 1990')})\nWriteResult({ \"nInserted\" : 1 })\n> db.employees.find({'name': {$regex: /marcos/}})\n```", "```py\npip install mongoengine pymongo==2.8\n\n```", "```py\n# coding:utf-8\n\nfrom mongoengine import *\nfrom datetime import datetime\n\n# as the mongo daemon, mongod, is running locally, we just need the database name to connect\nconnect('example')\n\nclass Employee(Document):\n    name = StringField()\n    birthday = DateTimeField()\n\n    def __unicode__(self):\n        return u'employee %s' % self.name\n\nemployee = Employee()\nemployee.name = 'rosie rinn'\nemployee.birthday = datetime.strptime('1980-09-06', '%Y-%m-%d')\nemployee.save()\n\nfor e in Employee.objects(name__contains='rosie'):\n    print e\n```", "```py\npip install flask-mongoengine\n\n```", "```py\n# coding:utf-8\n\nfrom flask import Flask, flash, redirect, render_template\nfrom flask.ext.mongoengine import MongoEngine\nfrom flask.ext.mongoengine.wtf import model_form\nfrom flask_wtf import Form\n\napp = Flask(__name__)\napp.config['SECRET_KEY'] = 'secret'\napp.config['MONGODB_SETTINGS'] = {\n    # 'replicaset': '',\n    'db': 'example',\n    # 'host': '',\n    # 'username': '',\n    # 'password': ''\n}\ndb = MongoEngine(app)\n\nclass Employee(db.Document):\n    name = db.StringField()\n    # mongoengine does not support datefield\n    birthday = db.DateTimeField()\n\n    def __unicode__(self):\n        return u'employee %s' % self.name\n\n# auto-generate form for our model\nEmployeeForm = model_form(Employee, base_class=Form, field_args={\n    'birthday': {\n        # we want to use date format, not datetime\n        'format': '%Y-%m-%d'\n    }\n})\n\n@app.route(\"/\", methods=['GET', 'POST'])\ndef index():\n    # as you remember, request.POST is implicitly provided as argument\n    form = EmployeeForm()\n\n    try:\n        if form.validate_on_submit():\n            employee = Employee()\n            form.populate_obj(employee)\n            employee.save()\n            flash('New employee add to database')\n            return redirect('/')\n    except:\n        # log e\n        flash('An error occurred accessing the database. Please, contact administration.')\n\n    employee_list=Employee.objects()\n    return render_template('index.html', form=form, employee_list=employee_list)\n\nif __name__ == '__main__':\n    app.debug = True\n    app.run()\n```"]