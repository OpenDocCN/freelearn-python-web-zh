["```py\n# myproject/settings/_base.py\nINSTALLED_APPS = [\n    # \u2026\n    \"myproject.apps.core\",\n    \"myproject.apps.music\",\n]\n```", "```py\n# myproject/apps/music/models.py\nimport os\nimport uuid\nfrom django.urls import reverse\nfrom django.utils.translation import ugettext_lazy as _\nfrom django.db import models\nfrom django.utils.text import slugify\nfrom myproject.apps.core.models import CreationModificationDateBase, UrlBase\n\ndef upload_to(instance, filename):\n    filename_base, filename_ext = os.path.splitext(filename)\n    artist = slugify(instance.artist)\n    title = slugify(instance.title)\n    return f\"music/{artist}--{title}{filename_ext.lower()}\"\n\nclass Song(CreationModificationDateBase, UrlBase):\n    uuid = models.UUIDField(primary_key=True, default=None, \n     editable=False)\n    artist = models.CharField(_(\"Artist\"), max_length=250)\n    title = models.CharField(_(\"Title\"), max_length=250)\n    url = models.URLField(_(\"URL\"), blank=True)\n    image = models.ImageField(_(\"Image\"), upload_to=upload_to, \n     blank=True, null=True)\n\n    class Meta:\n        verbose_name = _(\"Song\")\n        verbose_name_plural = _(\"Songs\")\n        unique_together = [\"artist\", \"title\"]\n\n    def __str__(self):\n        return f\"{self.artist} - {self.title}\"\n\n    def get_url_path(self):\n        return reverse(\"music:song_detail\", kwargs={\"pk\": self.pk})\n\n    def save(self, *args, **kwargs):\n        if self.pk is None:\n            self.pk = uuid.uuid4()\n        super().save(*args, **kwargs)\n```", "```py\n(env)$ python manage.py makemigrations\n(env)$ python manage.py migrate\n```", "```py\n# myproject/apps/music/admin.py\nfrom django.contrib import admin\nfrom .models import Song\n\n@admin.register(Song)\nclass SongAdmin(admin.ModelAdmin):\n    list_display = [\"title\", \"artist\", \"url\"]\n    list_filter = [\"artist\"]\n    search_fields = [\"title\", \"artist\"]\n```", "```py\n# myproject/apps/music/forms.py\nfrom django import forms\nfrom django.utils.translation import ugettext_lazy as _\nfrom .models import Song\n\nclass SongForm(forms.ModelForm):\n    class Meta:\n        model = Song\n        fields = \"__all__\" \n```", "```py\nartist,title,url\nCapital Cities,Safe And Sound,https://open.spotify.com/track/40Fs0YrUGuwLNQSaHGVfqT?si=2OUawusIT-evyZKonT5GgQ\nMilky Chance,Stolen Dance,https://open.spotify.com/track/3miMZ2IlJiaeSWo1DohXlN?si=g-xMM4m9S_yScOm02C2MLQ\nLana Del Rey,Video Games - Remastered,https://open.spotify.com/track/5UOo694cVvjcPFqLFiNWGU?si=maZ7JCJ7Rb6WzESLXg1Gdw\nMen I Trust,Tailwhip,https://open.spotify.com/track/2DoO0sn4SbUrz7Uay9ACTM?si=SC_MixNKSnuxNvQMf3yBBg\n```", "```py\n# myproject/apps/music/management/commands/import_music_from_csv.py\nfrom django.core.management.base import BaseCommand\n\nclass Command(BaseCommand):\n    help = (\n        \"Imports music from a local CSV file. \"\n        \"Expects columns: artist, title, url\"\n    )\n    SILENT, NORMAL, VERBOSE, VERY_VERBOSE = 0, 1, 2, 3\n\n    def add_arguments(self, parser):\n        # Positional arguments\n        parser.add_argument(\"file_path\", nargs=1, type=str)\n\n    def handle(self, *args, **options):\n        self.verbosity = options.get(\"verbosity\", self.NORMAL)\n        self.file_path = options[\"file_path\"][0]\n        self.prepare()\n        self.main()\n        self.finalize()\n```", "```py\n    def prepare(self):\n        self.imported_counter = 0\n        self.skipped_counter = 0\n```", "```py\n    def main(self):\n        import csv\n        from ...forms import SongForm\n\n        if self.verbosity >= self.NORMAL:\n            self.stdout.write(\"=== Importing music ===\")\n\n        with open(self.file_path, mode=\"r\") as f:\n            reader = csv.DictReader(f)\n            for index, row_dict in enumerate(reader):\n                form = SongForm(data=row_dict)\n                if form.is_valid():\n                    song = form.save()\n                    if self.verbosity >= self.NORMAL:\n                        self.stdout.write(f\" - {song}\\n\")\n                    self.imported_counter += 1\n                else:\n                    if self.verbosity >= self.NORMAL:\n                        self.stderr.write(\n                            f\"Errors importing song \"\n                            f\"{row_dict['artist']} - \n                             {row_dict['title']}:\\n\"\n                        )\n                        self.stderr.write(f\"{form.errors.as_json()}\\n\")\n                    self.skipped_counter += 1\n```", "```py\n    def finalize(self)\n        if self.verbosity >= self.NORMAL:\n            self.stdout.write(f\"-------------------------\\n\")\n            self.stdout.write(f\"Songs imported:         \n             {self.imported_counter}\\n\")\n            self.stdout.write(f\"Songs skipped: \n             {self.skipped_counter}\\n\\n\")\n```", "```py\n(env)$ python manage.py import_music_from_csv data/music.csv\n```", "```py\n(env)$ python manage.py help import_music_from_csv\n```", "```py\n(env)$ python manage.py import_music_from_csv data/music.csv --verbosity=0\n```", "```py\n(env)$ pip install openpyxl==3.0.2\n\n```", "```py\n# myproject/apps/music/management/commands\n# /import_music_from_xlsx.py\nfrom django.core.management.base import BaseCommand\n\nclass Command(BaseCommand):\n    help = (\n        \"Imports music from a local XLSX file. \"\n        \"Expects columns: Artist, Title, URL\"\n    )\n    SILENT, NORMAL, VERBOSE, VERY_VERBOSE = 0, 1, 2, 3\n\n    def add_arguments(self, parser):\n        # Positional arguments\n        parser.add_argument(\"file_path\",\n                            nargs=1,\n                            type=str)\n\n    def handle(self, *args, **options):\n        self.verbosity = options.get(\"verbosity\", self.NORMAL)\n        self.file_path = options[\"file_path\"][0]\n        self.prepare()\n        self.main()\n        self.finalize()\n```", "```py\n    def prepare(self):\n        self.imported_counter = 0\n        self.skipped_counter = 0\n\n```", "```py\n    def main(self):\n        from openpyxl import load_workbook\n        from ...forms import SongForm\n\n        wb = load_workbook(filename=self.file_path)\n        ws = wb.worksheets[0]\n\n        if self.verbosity >= self.NORMAL:\n            self.stdout.write(\"=== Importing music ===\")\n\n        columns = [\"artist\", \"title\", \"url\"]\n        rows = ws.iter_rows(min_row=2)  # skip the column captions\n        for index, row in enumerate(rows, start=1):\n            row_values = [cell.value for cell in row]\n            row_dict = dict(zip(columns, row_values))\n            form = SongForm(data=row_dict)\n            if form.is_valid():\n                song = form.save()\n                if self.verbosity >= self.NORMAL:\n                    self.stdout.write(f\" - {song}\\n\")\n                self.imported_counter += 1\n            else:\n                if self.verbosity >= self.NORMAL:\n                    self.stderr.write(\n                        f\"Errors importing song \"\n                        f\"{row_dict['artist']} - \n                         {row_dict['title']}:\\n\"\n                    )\n                    self.stderr.write(f\"{form.errors.as_json()}\\n\")\n                self.skipped_counter += 1\n```", "```py\n    def finalize(self):\n        if self.verbosity >= self.NORMAL:\n            self.stdout.write(f\"-------------------------\\n\")\n            self.stdout.write(f\"Songs imported: \n             {self.imported_counter}\\n\")\n            self.stdout.write(f\"Songs skipped: \n             {self.skipped_counter}\\n\\n\")\n```", "```py\n(env)$ python manage.py import_music_from_xlsx data/music.xlsx\n```", "```py\n# myproject/settings/_base.py\nLAST_FM_API_KEY = get_secret(\"LAST_FM_API_KEY\")\n```", "```py\n(env)$ pip install requests==2.22.0\n```", "```py\n{\n  \"tracks\": {\n    \"track\": [\n      {\n        \"name\": \"Mr. Brightside\",\n        \"duration\": \"224\",\n        \"mbid\": \"37d516ab-d61f-4bcb-9316-7a0b3eb845a8\",\n        \"url\": \"https://www.last.fm/music\n         /The+Killers/_/Mr.+Brightside\",\n        \"streamable\": {\n          \"#text\": \"0\",\n          \"fulltrack\": \"0\"\n        },\n        \"artist\": {\n          \"name\": \"The Killers\",\n          \"mbid\": \"95e1ead9-4d31-4808-a7ac-32c3614c116b\",\n          \"url\": \"https://www.last.fm/music/The+Killers\"\n        },\n        \"image\": [\n          {\n            \"#text\": \n            \"https://lastfm.freetls.fastly.net/i/u/34s\n             /2a96cbd8b46e442fc41c2b86b821562f.png\",\n            \"size\": \"small\"\n          },\n          {\n            \"#text\":  \n           \"https://lastfm.freetls.fastly.net/i/u/64s\n            /2a96cbd8b46e442fc41c2b86b821562f.png\",\n            \"size\": \"medium\"\n          },\n          {\n            \"#text\": \n            \"https://lastfm.freetls.fastly.net/i/u/174s\n             /2a96cbd8b46e442fc41c2b86b821562f.png\",\n            \"size\": \"large\"\n          },\n          {\n            \"#text\": \n            \"https://lastfm.freetls.fastly.net/i/u/300x300\n             /2a96cbd8b46e442fc41c2b86b821562f.png\",\n            \"size\": \"extralarge\"\n          }\n        ],\n        \"@attr\": {\n          \"rank\": \"1\"\n        }\n      },\n      ...\n    ],\n    \"@attr\": {\n      \"tag\": \"indie\",\n      \"page\": \"1\",\n      \"perPage\": \"50\",\n      \"totalPages\": \"4475\",\n      \"total\": \"223728\"\n    }\n  }\n}\n```", "```py\n# myproject/apps/music/management/commands\n# /import_music_from_lastfm_json.py\nfrom django.core.management.base import BaseCommand\n\nclass Command(BaseCommand):\n    help = \"Imports top songs from last.fm as JSON.\"\n    SILENT, NORMAL, VERBOSE, VERY_VERBOSE = 0, 1, 2, 3\n    API_URL = \"https://ws.audioscrobbler.com/2.0/\"\n\n    def add_arguments(self, parser):\n        # Named (optional) arguments\n        parser.add_argument(\"--max_pages\", type=int, default=0)\n\n    def handle(self, *args, **options):\n        self.verbosity = options.get(\"verbosity\", self.NORMAL)\n        self.max_pages = options[\"max_pages\"]\n        self.prepare()\n        self.main()\n        self.finalize()\n```", "```py\n    def prepare(self):\n        from django.conf import settings\n\n        self.imported_counter = 0\n        self.skipped_counter = 0\n        self.params = {\n            \"method\": \"tag.gettoptracks\",\n            \"tag\": \"indie\",\n            \"api_key\": settings.LAST_FM_API_KEY,\n            \"format\": \"json\",\n            \"page\": 1,\n        }\n```", "```py\n    def main(self):\n        import requests\n\n        response = requests.get(self.API_URL, params=self.params)\n        if response.status_code != requests.codes.ok:\n            self.stderr.write(f\"Error connecting to \n             {response.url}\")\n            return\n        response_dict = response.json()\n        pages = int(\n            response_dict.get(\"tracks\", {})\n            .get(\"@attr\", {}).get(\"totalPages\", 1)\n        )\n\n        if self.max_pages > 0:\n            pages = min(pages, self.max_pages)\n\n        if self.verbosity >= self.NORMAL:\n            self.stdout.write(f\"=== Importing {pages} page(s) \n             of tracks ===\")\n\n        self.save_page(response_dict)\n\n        for page_number in range(2, pages + 1):\n            self.params[\"page\"] = page_number\n            response = requests.get(self.API_URL, \n            params=self.params)\n            if response.status_code != requests.codes.ok:\n                self.stderr.write(f\"Error connecting to \n                 {response.url}\")\n                return\n            response_dict = response.json()\n            self.save_page(response_dict)\n```", "```py\n    def save_page(self, data):\n        import os\n        import requests\n        from io import BytesIO\n        from django.core.files import File\n        from ...forms import SongForm\n\n        for track_dict in data.get(\"tracks\", {}).get(\"track\"):\n            if not track_dict:\n                continue\n\n            song_dict = {\n                \"artist\": track_dict.get(\"artist\", {}).get(\"name\", \"\"),\n                \"title\": track_dict.get(\"name\", \"\"),\n                \"url\": track_dict.get(\"url\", \"\"),\n            }\n            form = SongForm(data=song_dict)\n            if form.is_valid():\n                song = form.save()\n\n                image_dict = track_dict.get(\"image\", None)\n                if image_dict:\n                    image_url = image_dict[1][\"#text\"]\n                    image_response = requests.get(image_url)\n                    song.image.save(\n os.path.basename(image_url),\n File(BytesIO(image_response.content)),\n )\n\n                if self.verbosity >= self.NORMAL:\n                    self.stdout.write(f\" - {song}\\n\")\n                self.imported_counter += 1\n            else:\n                if self.verbosity >= self.NORMAL:\n                    self.stderr.write(\n                        f\"Errors importing song \"\n                        f\"{song_dict['artist']} - \n                         {song_dict['title']}:\\n\"\n                    )\n                    self.stderr.write(f\"{form.errors.as_json()}\\n\")\n                self.skipped_counter += 1\n```", "```py\n    def finalize(self):\n        if self.verbosity >= self.NORMAL:\n            self.stdout.write(f\"-------------------------\\n\")\n            self.stdout.write(f\"Songs imported: \n             {self.imported_counter}\\n\")\n            self.stdout.write(f\"Songs skipped: \n             {self.skipped_counter}\\n\\n\")\n```", "```py\n(env)$ python manage.py import_music_from_lastfm_json --max_pages=3\n```", "```py\n# myproject/settings/_base.py\nLAST_FM_API_KEY = get_secret(\"LAST_FM_API_KEY\")\n```", "```py\n(env)$ pip install requests==2.22.0\n(env)$ pip install defusedxml==0.6.0\n\n```", "```py\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<lfm status=\"ok\">\n    <tracks tag=\"indie\" page=\"1\" perPage=\"50\" \n totalPages=\"4475\" total=\"223728\">\n        <track rank=\"1\">\n            <name>Mr. Brightside</name>\n            <duration>224</duration>\n            <mbid>37d516ab-d61f-4bcb-9316-7a0b3eb845a8</mbid>\n            <url>https://www.last.fm/music\n            /The+Killers/_/Mr.+Brightside</url>\n            <streamable fulltrack=\"0\">0</streamable>\n            <artist>\n                <name>The Killers</name>\n                <mbid>95e1ead9-4d31-4808-a7ac-32c3614c116b</mbid>\n                <url>https://www.last.fm/music/The+Killers</url>\n            </artist>\n            <image size=\"small\">https://lastfm.freetls.fastly.net/i\n             /u/34s/2a96cbd8b46e442fc41c2b86b821562f.png</image>\n            <image size=\"medium\">\n            https://lastfm.freetls.fastly.net/i\n            /u/64s/2a96cbd8b46e442fc41c2b86b821562f.png</image>\n            <image size=\"large\">https://lastfm.freetls.fastly.net/i\n            /u/174s/2a96cbd8b46e442fc41c2b86b821562f.png</image>\n            <image size=\"extralarge\">\n                https://lastfm.freetls.fastly.net/i/u/300x300\n                /2a96cbd8b46e442fc41c2b86b821562f.png\n            </image>\n        </track>\n        ...\n    </tracks>\n</lfm>\n```", "```py\n# myproject/apps/music/management/commands\n# /import_music_from_lastfm_xml.py\nfrom django.core.management.base import BaseCommand\n\nclass Command(BaseCommand):\n    help = \"Imports top songs from last.fm as XML.\"\n    SILENT, NORMAL, VERBOSE, VERY_VERBOSE = 0, 1, 2, 3\n    API_URL = \"https://ws.audioscrobbler.com/2.0/\"\n\n    def add_arguments(self, parser):\n        # Named (optional) arguments\n        parser.add_argument(\"--max_pages\", type=int, default=0)\n\n    def handle(self, *args, **options):\n        self.verbosity = options.get(\"verbosity\", self.NORMAL)\n        self.max_pages = options[\"max_pages\"]\n        self.prepare()\n        self.main()\n        self.finalize()\n```", "```py\n    def prepare(self):\n        from django.conf import settings\n\n        self.imported_counter = 0\n        self.skipped_counter = 0\n        self.params = {\n            \"method\": \"tag.gettoptracks\",\n            \"tag\": \"indie\",\n            \"api_key\": settings.LAST_FM_API_KEY,\n            \"format\": \"xml\",\n            \"page\": 1,\n        }\n```", "```py\n    def main(self):\n        import requests\n        from defusedxml import ElementTree\n\n        response = requests.get(self.API_URL, params=self.params)\n        if response.status_code != requests.codes.ok:\n            self.stderr.write(f\"Error connecting to {response.url}\")\n            return\n        root = ElementTree.fromstring(response.content)\n\n        pages = int(root.find(\"tracks\").attrib.get(\"totalPages\", 1))\n        if self.max_pages > 0:\n            pages = min(pages, self.max_pages)\n\n        if self.verbosity >= self.NORMAL:\n            self.stdout.write(f\"=== Importing {pages} page(s) \n             of songs ===\")\n\n        self.save_page(root)\n\n        for page_number in range(2, pages + 1):\n            self.params[\"page\"] = page_number\n            response = requests.get(self.API_URL, params=self.params)\n            if response.status_code != requests.codes.ok:\n                self.stderr.write(f\"Error connecting to {response.url}\")\n                return\n            root = ElementTree.fromstring(response.content)\n            self.save_page(root)\n```", "```py\n    def save_page(self, root):\n        import os\n        import requests\n        from io import BytesIO\n        from django.core.files import File\n        from ...forms import SongForm\n\n        for track_node in root.findall(\"tracks/track\"):\n            if not track_node:\n                continue\n\n            song_dict = {\n                \"artist\": track_node.find(\"artist/name\").text,\n                \"title\": track_node.find(\"name\").text,\n                \"url\": track_node.find(\"url\").text,\n            }\n            form = SongForm(data=song_dict)\n            if form.is_valid():\n                song = form.save()\n\n                image_node = track_node.find(\"image[@size='medium']\")\n                if image_node is not None:\n                    image_url = image_node.text\n                    image_response = requests.get(image_url)\n                    song.image.save(\n os.path.basename(image_url),\n File(BytesIO(image_response.content)),\n )\n\n                if self.verbosity >= self.NORMAL:\n                    self.stdout.write(f\" - {song}\\n\")\n                self.imported_counter += 1\n            else:\n                if self.verbosity >= self.NORMAL:\n                    self.stderr.write(\n                        f\"Errors importing song \"\n                        f\"{song_dict['artist']} - {song_dict['title']}:\\n\"\n                    )\n                    self.stderr.write(f\"{form.errors.as_json()}\\n\")\n                self.skipped_counter += 1\n```", "```py\n    def finalize(self):\n        if self.verbosity >= self.NORMAL:\n            self.stdout.write(f\"-------------------------\\n\")\n            self.stdout.write(f\"Songs imported: {self.imported_counter}\\n\")\n            self.stdout.write(f\"Songs skipped: {self.skipped_counter}\\n\\n\")\n```", "```py\n(env)$ python manage.py import_music_from_lastfm_xml --max_pages=3\n```", "```py\n# myproject/apps/music/views.py\nfrom django.views.generic import ListView, DetailView\nfrom django.utils.translation import ugettext_lazy as _\nfrom .models import Song\n\nclass SongList(ListView):\n    model = Song\n\nclass SongDetail(DetailView):\n    model = Song\n```", "```py\n# myproject/apps/music/urls.py\nfrom django.urls import path\nfrom .views import SongList, SongDetail\n\napp_name = \"music\"\n\nurlpatterns = [\n    path(\"\", SongList.as_view(), name=\"song_list\"),\n    path(\"<uuid:pk>/\", SongDetail.as_view(), name=\"song_detail\"),\n]\n```", "```py\n# myproject/urls.py\nfrom django.conf.urls.i18n import i18n_patterns\nfrom django.urls import include, path\n\nurlpatterns = i18n_patterns(\n    # \u2026\n path(\"songs/\", include(\"myproject.apps.music.urls\", \n     namespace=\"music\")),\n)\n```", "```py\n{# music/song_list.html #}\n{% extends \"base.html\" %}\n{% load i18n %}\n\n{% block main %}\n    <ul>\n        {% for song in object_list %}\n            <li><a href=\"{{ song.get_url_path }}\">\n             {{ song }}</a></li>\n        {% endfor %}\n    </ul>\n{% endblock %}\n```", "```py\n{# music/song_detail.html #}\n{% extends \"base.html\" %}\n{% load i18n %}\n\n{% block content %}\n    {% with song=object %}\n        <h1>{{ song }}</h1>\n        {% if song.image %}\n            <img src=\"img/{{ song.image.url }}\" alt=\"{{ song }}\" />\n        {% endif %}\n        {% if song.url %}\n            <a href=\"{{ song.url }}\" target=\"_blank\" \n             rel=\"noreferrer noopener\">\n                {% trans \"Check this song\" %}\n            </a>\n        {% endif %}\n    {% endwith %}\n{% endblock %}\n```", "```py\n# myproject/settings/_base.py\nINSTALLED_APPS = [\n    # \u2026\n    \"django.contrib.sitemaps\",\n    # \u2026\n]\n```", "```py\n# myproject/urls.py\nfrom django.conf.urls.i18n import i18n_patterns\nfrom django.urls import include, path\nfrom django.contrib.sitemaps import views as sitemaps_views\nfrom django.contrib.sitemaps import GenericSitemap\nfrom myproject.apps.music.models import Song\n\nclass MySitemap(GenericSitemap):\n limit = 50\n\n def location(self, obj):\n return obj.get_url_path()\n\nsong_info_dict = {\n \"queryset\": Song.objects.all(), \n \"date_field\": \"modified\",\n}\nsitemaps = {\"music\": MySitemap(song_info_dict, priority=1.0)}\n\nurlpatterns = [\n path(\"sitemap.xml\", sitemaps_views.index, \n     {\"sitemaps\": sitemaps}),\n path(\"sitemap-<str:section>.xml\", sitemaps_views.sitemap, \n     {\"sitemaps\": sitemaps},\n name=\"django.contrib.sitemaps.views.sitemap\"\n    ),\n]\n\nurlpatterns += i18n_patterns(\n    # \u2026\n    path(\"songs/\", include(\"myproject.apps.music.urls\", \n     namespace=\"music\")),\n)\n```", "```py\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n    <sitemap>\n        <loc>http://127.0.0.1:8000/sitemap-music.xml</loc>\n    </sitemap>\n    <sitemap>\n        <loc>http://127.0.0.1:8000/sitemap-music.xml?p=2</loc>\n    </sitemap>\n    <sitemap>\n        <loc>http://127.0.0.1:8000/sitemap-music.xml?p=3</loc>\n    </sitemap>\n</sitemapindex>\n\n```", "```py\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n    <url>\n        <loc>http://127.0.0.1:8000/en/songs/b2d3627b-dbc7\n         -4c11-a13e-03d86f32a719/</loc>\n        <lastmod>2019-12-15</lastmod>\n        <priority>1.0</priority>\n    </url>\n    <url>\n        <loc>http://127.0.0.1:8000/en/songs/f5c386fd-1952\n         -4ace-9848-717d27186fa9/</loc>\n        <lastmod>2019-12-15</lastmod>\n        <priority>1.0</priority>\n    </url>\n    <url>\n        <loc>http://127.0.0.1:8000/en/songs/a59cbb5a-16e8\n         -46dd-9498-d86e24e277a5/</loc>\n        <lastmod>2019-12-15</lastmod>\n        <priority>1.0</priority>\n    </url>\n    ...\n</urlset>\n```", "```py\n(env)$ python manage.py ping_google --settings=myproject.settings.production\n```", "```py\n# myproject/apps/music/forms.py\nfrom django import forms\nfrom django.utils.translation import ugettext_lazy as _\nfrom .models import Song\n\n# \u2026\n\nclass SongFilterForm(forms.Form):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        artist_choices = [\n            (artist, artist)\n            for artist in sorted(\n                Song.objects.values_list(\"artist\", \n                 flat=True).distinct(),\n                key=str.casefold\n            )\n        ]\n        self.fields[\"artist\"] = forms.ChoiceField(\n label=_(\"Artist\"),\n choices=artist_choices,\n required=False,\n )\n```", "```py\n# myproject/apps/music/views.py\nfrom django.http import Http404\nfrom django.views.generic import ListView, DetailView, FormView\nfrom django.utils.translation import ugettext_lazy as _\nfrom .models import Song\nfrom .forms import SongFilterForm\n\nclass SongList(ListView, FormView):\n    form_class = SongFilterForm\n    model = Song\n\n    def get(self, request, *args, **kwargs):\n        form_class = self.get_form_class()\n        self.form = self.get_form(form_class)\n\n        self.object_list = self.get_queryset()\n        allow_empty = self.get_allow_empty()\n        if not allow_empty and len(self.object_list) == 0:\n            raise Http404(_(u\"Empty list and '%(class_name)s\n             .allow_empty' is False.\")\n                          % {'class_name': \n                           self.__class__.__name__})\n\n        context = self.get_context_data(object_list=\n         self.object_list, form=self.form)\n        return self.render_to_response(context)\n\n    def get_form_kwargs(self):\n        kwargs = {\n            'initial': self.get_initial(),\n            'prefix': self.get_prefix(),\n        }\n        if self.request.method == 'GET':\n            kwargs.update({\n                'data': self.request.GET,\n            })\n        return kwargs\n\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        if self.form.is_valid():\n            artist = self.form.cleaned_data.get(\"artist\")\n            if artist:\n                queryset = queryset.filter(artist=artist)\n        return queryset\n```", "```py\n{# music/song_list.html #}\n{% extends \"base.html\" %}\n{% load i18n %}\n\n{% block sidebar %}\n <form action=\"\" method=\"get\">\n {{ form.errors }}\n {{ form.as_p }}\n <button type=\"submit\" class=\"btn btn-primary\">\n         {% trans \"Filter\" %}</button>\n </form>\n{% endblock %}\n\n{% block main %}\n    <ul>\n        {% for song in object_list %}\n            <li><a href=\"{{ song.get_url_path }}\">\n             {{ song }}</a></li>\n        {% endfor %}\n    </ul>\n{% endblock %}\n```", "```py\n# myproject/apps/music/feeds.py\nfrom django.contrib.syndication.views import Feed\nfrom django.urls import reverse\n\nfrom .models import Song\nfrom .forms import SongFilterForm\n\nclass SongFeed(Feed):\n    description_template = \"music/feeds/song_description.html\"\n\n    def get_object(self, request, *args, **kwargs):\n        form = SongFilterForm(data=request.GET)\n        obj = {}\n        if form.is_valid():\n            obj = {\"query_string\": request.META[\"QUERY_STRING\"]}\n            for field in [\"artist\"]:\n                value = form.cleaned_data[field]\n                obj[field] = value\n        return obj\n\n    def title(self, obj):\n        the_title = \"Music\"\n        artist = obj.get(\"artist\")\n        if artist:\n            the_title = f\"Music by {artist}\"\n        return the_title\n\n    def link(self, obj):\n        return self.get_named_url(\"music:song_list\", obj)\n\n    def feed_url(self, obj):\n        return self.get_named_url(\"music:song_rss\", obj)\n\n    @staticmethod\n    def get_named_url(name, obj):\n        url = reverse(name)\n        qs = obj.get(\"query_string\", False)\n        if qs:\n            url = f\"{url}?{qs}\"\n        return url\n\n    def items(self, obj):\n        queryset = Song.objects.order_by(\"-created\")\n\n        artist = obj.get(\"artist\")\n        if artist:\n            queryset = queryset.filter(artist=artist)\n\n        return queryset[:30]\n\n    def item_pubdate(self, item):\n        return item.created\n```", "```py\n{# music/feeds/song_description.html #}\n{% load i18n %}\n{% with song=obj %}\n    {% if song.image %}\n        <img src=\"img/{{ song.image.url }}\" alt=\"{{ song }}\" />\n    {% endif %}\n    {% if song.url %}\n        <a href=\"{{ song.url }}\" target=\"_blank\" \n         rel=\"noreferrer noopener\">\n            {% trans \"Check this song\" %}\n        </a>\n    {% endif %}\n{% endwith %}\n```", "```py\n# myproject/apps/music/urls.py\nfrom django.urls import path\n\nfrom .feeds import SongFeed\nfrom .views import SongList, SongDetail\n\napp_name = \"music\"\n\nurlpatterns = [\n    path(\"\", SongList.as_view(), name=\"song_list\"),\n    path(\"<uuid:pk>/\", SongDetail.as_view(), name=\"song_detail\"),\n path(\"rss/\", SongFeed(), name=\"song_rss\"),\n]\n```", "```py\n{# music/song_list.html #} \n{% url \"music:songs_rss\" as songs_rss_url %}\n<p>\n    <a href=\"{{ songs_rss_url }}?{{ request.META.QUERY_STRING }}\">\n        {% trans \"Subscribe to RSS feed\" %}\n    </a>\n</p> \n```", "```py\n(env)$ pip install djangorestframework==3.11.0\n```", "```py\n(env)$ python manage.py collectstatic\n```", "```py\n# myproject/settings/_base.py\nREST_FRAMEWORK = {\n    \"DEFAULT_PERMISSION_CLASSES\": [ \"rest_framework.permissions\n         .DjangoModelPermissionsOrAnonReadOnly\"\n    ],\n    \"DEFAULT_PAGINATION_CLASS\": \n    \"rest_framework.pagination.LimitOffsetPagination\",\n    \"PAGE_SIZE\": 50,\n}\n```", "```py\nfrom rest_framework import serializers\nfrom .models import Song\n\nclass SongSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Song\n        fields = [\"uuid\", \"artist\", \"title\", \"url\", \"image\"]\n```", "```py\nfrom rest_framework import generics\n\nfrom .serializers import SongSerializer\nfrom .models import Song\n\n# \u2026\n\nclass RESTSongList(generics.ListCreateAPIView):\n    queryset = Song.objects.all()\n    serializer_class = SongSerializer\n\n    def get_view_name(self):\n        return \"Song List\"\n\nclass RESTSongDetail(generics.RetrieveUpdateDestroyAPIView):\n    queryset = Song.objects.all()\n    serializer_class = SongSerializer\n\n    def get_view_name(self):\n        return \"Song Detail\"\n```", "```py\n# myproject/urls.py\nfrom django.urls import include, path\nfrom myproject.apps.music.views import RESTSongList, RESTSongDetail\n\nurlpatterns = [\n    path(\"api-auth/\", include(\"rest_framework.urls\", \n     namespace=\"rest_framework\")),\n    path(\"rest-api/songs/\", RESTSongList.as_view(), \n     name=\"rest_song_list\"),\n    path(\n        \"rest-api/songs/<uuid:pk>/\", RESTSongDetail.as_view(), \n          name=\"rest_song_detail\"\n    ),\n    # \u2026\n]\n```", "```py\nimport requests\n\nresponse = requests.post(\n    url=\"http://127.0.0.1:8000/rest-api/songs/\",\n    data={\n        \"artist\": \"Luwten\",\n        \"title\": \"Go Honey\",\n    },\n    auth=(\"admin\", \"<YOUR_ADMIN_PASSWORD>\"),\n)\nassert(response.status_code == requests.codes.CREATED)\n```"]