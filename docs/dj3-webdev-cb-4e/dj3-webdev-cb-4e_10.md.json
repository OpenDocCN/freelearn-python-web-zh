["```py\n(env)$ python manage.py shell\n```", "```py\n(env)$ pip install ipython\n(env)$ pip install bpython\n```", "```py\n(env)$ python manage.py shell\n```", "```py\n>>> help(\"django.forms\")\n```", "```py\n>>> import re\n>>> email_pattern = re.compile(r\"[^@]+@[^@]+\\.[^@]+\")\n>>> email_pattern.match(\"aidas@bendoraitis.lt\")\n<_sre.SRE_Match object at 0x1075681d0>\n```", "```py\n>>> from django.contrib.auth.models import User \n>>> User.objects.filter(groups__name=\"Editors\")\n[<User: admin>]\n```", "```py\n>>> exit()\n```", "```py\n# myproject/settings/_base.py\nINSTALLED_APPS = [\n    # \u2026\n    \"myproject.apps.core\",\n    \"myproject.apps.viral_videos\",\n]\n```", "```py\n# myproject/apps/viral_videos/models.py import uuid\nfrom django.db import models\nfrom django.utils.translation import ugettext_lazy as _\n\nfrom myproject.apps.core.models import (\n CreationModificationDateBase,\n UrlBase,\n)\n\nclass ViralVideo(CreationModificationDateBase, UrlBase):\n    uuid = models.UUIDField(primary_key=True, default=None, \n     editable=False)\n    title = models.CharField(_(\"Title\"), max_length=200, blank=True)\n    embed_code = models.TextField(_(\"YouTube embed code\"), blank=True)\n    anonymous_views = models.PositiveIntegerField(_(\"Anonymous \n     impressions\"), default=0)\n    authenticated_views = models.PositiveIntegerField(\n        _(\"Authenticated impressions\"), default=0\n    )\n\n    class Meta:\n        verbose_name = _(\"Viral video\")\n        verbose_name_plural = _(\"Viral videos\")\n\n    def __str__(self):\n        return self.title\n\n    def get_url_path(self):\n        from django.urls import reverse\n\n        return reverse(\"viral_videos:viral_video_detail\", \n         kwargs={\"pk\": self.pk})\n\n    def save(self, *args, **kwargs):\n        if self.pk is None:\n            self.pk = uuid.uuid4()\n        super().save(*args, **kwargs)\n```", "```py\n(env)$ python manage.py makemigrations\n(env)$ python manage.py migrate\n```", "```py\nLOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"handlers\": {\n        \"file\": {\n            \"level\": \"DEBUG\",\n            \"class\": \"logging.FileHandler\",\n            \"filename\": os.path.join(BASE_DIR, \"tmp\", \"debug.log\"),\n        }\n    },\n    \"loggers\": {\"django\": {\"handlers\": [\"file\"], \"level\": \"DEBUG\", \n     \"propagate\": True}},\n}\n```", "```py\n# myproject/apps/viral_videos/views.py\nimport logging\n\nfrom django.conf import settings\nfrom django.db import models\nfrom django.utils.timezone import now, timedelta\nfrom django.shortcuts import render, get_object_or_404\nfrom django.views.generic import ListView\n\nfrom .models import ViralVideo\n\nPOPULAR_FROM = getattr(settings, \"VIRAL_VIDEOS_POPULAR_FROM\", 500)\n\nlogger = logging.getLogger(__name__)\n\nclass ViralVideoList(ListView):\n    template_name = \"viral_videos/viral_video_list.html\"\n    model = ViralVideo\n\ndef viral_video_detail(request, pk):\n    yesterday = now() - timedelta(days=1)\n\n    qs = ViralVideo.objects.annotate(\n        total_views=models.F(\"authenticated_views\") + \n         models.F(\"anonymous_views\"),\n        label=models.Case(\n            models.When(total_views__gt=POPULAR_FROM, \n             then=models.Value(\"popular\")),\n            models.When(created__gt=yesterday, \n             then=models.Value(\"new\")),\n            default=models.Value(\"cool\"),\n            output_field=models.CharField(),\n        ),\n    )\n\n    # DEBUG: check the SQL query that Django ORM generates\n    logger.debug(f\"Query: {qs.query}\")\n\n    qs = qs.filter(pk=pk)\n    if request.user.is_authenticated:\n        qs.update(authenticated_views=models\n         .F(\"authenticated_views\") + 1)\n    else:\n        qs.update(anonymous_views=models.F(\"anonymous_views\") + 1)\n\n    video = get_object_or_404(qs)\n\n    return render(request, \"viral_videos/viral_video_detail.html\", \n     {\"video\": video})\n```", "```py\n# myproject/apps/viral_videos/urls.py\nfrom django.urls import path\n\nfrom .views import ViralVideoList, viral_video_detail\n\napp_name = \"viral_videos\"\n\nurlpatterns = [\n    path(\"\", ViralVideoList.as_view(), name=\"viral_video_list\"),\n    path(\"<uuid:pk>/\", viral_video_detail, \n     name=\"viral_video_detail\"),\n]\n```", "```py\n# myproject/urls.py\nfrom django.conf.urls.i18n import i18n_patterns\nfrom django.urls import include, path\n\nurlpatterns = i18n_patterns(\npath(\"viral-videos/\", include(\"myproject.apps.viral_videos.urls\", namespace=\"viral_videos\")),\n)\n```", "```py\n{# viral_videos/viral_video_list.html #}\n{% extends \"base.html\" %}\n{% load i18n %}\n\n{% block content %}\n    <h1>{% trans \"Viral Videos\" %}</h1>\n    <ul>\n        {% for video in object_list %}\n            <li><a href=\"{{ video.get_url_path }}\">\n             {{ video.title }}</a></li>\n        {% endfor %}\n    </ul>\n{% endblock %}\n```", "```py\n{# viral_videos/viral_video_detail.html #}\n{% extends \"base.html\" %}\n{% load i18n %}\n\n{% block content %}\n    <h1>{{ video.title }}\n        <span class=\"badge\">{{ video.label }}</span>\n    </h1>\n    <div>{{ video.embed_code|safe }}</div>\n    <div>\n        <h2>{% trans \"Impressions\" %}</h2>\n        <ul>\n            <li>{% trans \"Authenticated views\" %}:\n                {{ video.authenticated_views }}\n            </li>\n            <li>{% trans \"Anonymous views\" %}:\n                {{ video.anonymous_views }}\n            </li>\n            <li>{% trans \"Total views\" %}:\n                {{ video.total_views }}\n            </li>\n        </ul>\n    </div>\n{% endblock %}\n```", "```py\n# myproject/apps/viral_videos/admin.py\nfrom django.contrib import admin\nfrom .models import ViralVideo\n\n@admin.register(ViralVideo)\nclass ViralVideoAdmin(admin.ModelAdmin):\n    list_display = [\"title\", \"created\", \"modified\"]\n```", "```py\nSELECT \"viral_videos_viralvideo\".\"created\", \"viral_videos_viralvideo\".\"modified\", \"viral_videos_viralvideo\".\"uuid\", \"viral_videos_viralvideo\".\"title\", \"viral_videos_viralvideo\".\"embed_code\", \"viral_videos_viralvideo\".\"anonymous_views\", \"viral_videos_viralvideo\".\"authenticated_views\", (\"viral_videos_viralvideo\".\"authenticated_views\" + \"viral_videos_viralvideo\".\"anonymous_views\") AS \"total_views\", CASE WHEN (\"viral_videos_viralvideo\".\"authenticated_views\" + \"viral_videos_viralvideo\".\"anonymous_views\") > 500 THEN 'popular' WHEN \"viral_videos_viralvideo\".\"created\" > '2019-12-21T05:01:58.775441+00:00'::timestamptz THEN 'new' ELSE 'cool' END \n AS \"label\" FROM \"viral_videos_viralvideo\" WHERE \"viral_videos_viralvideo\".\"uuid\" = '2b14ffd3-d1f1-4699-a07b-1328421d8312'::uuid LIMIT 21; args=(500, 'popular', datetime.datetime(2019, 12, 21, 5, 1, 58, 775441, tzinfo=<UTC>), 'new', 'cool', UUID('2b14ffd3-d1f1-4699-a07b-1328421d8312'))\n```", "```py\n(env)$ pip install transliterate==1.10.2\n```", "```py\n# myproject/apps/guerrilla_patches/models.py from django.utils import text\nfrom transliterate import slugify\n\ntext.slugify = slugify\n```", "```py\n(env)$ python manage.py shell\n>>> from django.utils.text import slugify\n>>> slugify(\"Heiz\u00f6lr\u00fccksto\u00dfabd\u00e4mpfung\")\n'heizolruckstoabdampfung'\n```", "```py\n(env)$ python manage.py shell\n>>> from django.utils.text import slugify\n>>> slugify(\"Heiz\u00f6lr\u00fccksto\u00dfabd\u00e4mpfung\")\n'heizoelrueckstossabdaempfung'\n```", "```py\nbreakpoint()\n```", "```py\nraise Warning, some_variable\n\n```", "```py\n(env)$ pip install django-debug-toolbar==2.1\n\n```", "```py\n# myproject/settings/_base.py\nINSTALLED_APPS = [\n    # \u2026\n    \"debug_toolbar\",\n]\n```", "```py\n# myproject/settings/_base.py\nDEBUG_TOOLBAR_CONFIG = {\n    \"DISABLE_PANELS\": [],\n    \"SHOW_TOOLBAR_CALLBACK\": \n    \"myproject.apps.core.misc.custom_show_toolbar\",\n    \"SHOW_TEMPLATE_CONTEXT\": True,\n}\n\nDEBUG_TOOLBAR_PANELS = [\n    \"debug_toolbar.panels.versions.VersionsPanel\",\n    \"debug_toolbar.panels.timer.TimerPanel\",\n    \"debug_toolbar.panels.settings.SettingsPanel\",\n    \"debug_toolbar.panels.headers.HeadersPanel\",\n    \"debug_toolbar.panels.request.RequestPanel\",\n    \"debug_toolbar.panels.sql.SQLPanel\",\n    \"debug_toolbar.panels.templates.TemplatesPanel\",\n    \"debug_toolbar.panels.staticfiles.StaticFilesPanel\",\n    \"debug_toolbar.panels.cache.CachePanel\",\n    \"debug_toolbar.panels.signals.SignalsPanel\",\n    \"debug_toolbar.panels.logging.LoggingPanel\",\n    \"debug_toolbar.panels.redirects.RedirectsPanel\",\n]\n```", "```py\n# myproject/apps/core/misc.py\ndef custom_show_toolbar(request):\n    return \"1\" == request.COOKIES.get(\"DebugToolbar\", False)\n```", "```py\n# myproject/urls.py\nfrom django.conf.urls.i18n import i18n_patterns\nfrom django.urls import include, path\nfrom django.conf import settings\nimport debug_toolbar\n\nurlpatterns = i18n_patterns(\n    # \u2026\n)\n\nurlpatterns = [\n    path('__debug__/', include(debug_toolbar.urls)),\n] + urlpatterns\n```", "```py\njavascript:(function(){document.cookie=\"DebugToolbar=1; path=/\";location.reload();})();\n```", "```py\njavascript:(function(){document.cookie=\"DebugToolbar=0; path=/\";location.reload();})();\n```", "```py\n# myproject/apps/core/middleware.py\nfrom threading import local\n\n_thread_locals = local()\n\ndef get_current_request():\n    \"\"\"\n    :returns the HttpRequest object for this thread\n    \"\"\"\n    return getattr(_thread_locals, \"request\", None)\n\ndef get_current_user():\n    \"\"\"\n    :returns the current user if it exists or None otherwise \"\"\"\n    request = get_current_request()\n    if request:\n        return getattr(request, \"user\", None)\n\nclass ThreadLocalMiddleware(object):\n    \"\"\"\n    Middleware to add the HttpRequest to thread local storage\n    \"\"\"\n\n    def __init__(self, get_response):\n        self.get_response = get_response\n\n    def __call__(self, request):\n        _thread_locals.request = request\n        return self.get_response(request)\n```", "```py\n# myproject/settings/_base.py\nMIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n    \"django.middleware.locale.LocaleMiddleware\",\n    \"debug_toolbar.middleware.DebugToolbarMiddleware\",\n \"myproject.apps.core.middleware.ThreadLocalMiddleware\",\n]\n```", "```py\n# myproject/apps/core/models.py\nfrom django.conf import settings\nfrom django.db import models\nfrom django.utils.translation import gettext_lazy as _\n\nclass CreatorBase(models.Model):\n    \"\"\"\n    Abstract base class with a creator\n    \"\"\"\n\n    creator = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        verbose_name=_(\"creator\"),\n        editable=False,\n        blank=True,\n        null=True,\n        on_delete=models.SET_NULL,\n    )\n\n    class Meta:\n        abstract = True\n\n    def save(self, *args, **kwargs):\n        from .middleware import get_current_user\n\n        if not self.creator:\n self.creator = get_current_user()\n        super().save(*args, **kwargs)\n\n    save.alters_data = True\n```", "```py\n# myproject/apps/viral_videos/signals.py\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\nfrom django.template.loader import render_to_string\n\nfrom .models import ViralVideo\n\n@receiver(post_save, sender=ViralVideo)\ndef inform_administrators(sender, **kwargs):\n    from django.core.mail import mail_admins\n\n    instance = kwargs[\"instance\"]\n    created = kwargs[\"created\"]\n\n    if created:\n        context = {\"title\": instance.title, \"link\": \n         instance.get_url()}\n        subject = render_to_string(\n            \"viral_videos/email/administrator/subject.txt\", context\n        )\n        plain_text_message = render_to_string(\n            \"viral_videos/email/administrator/message.txt\", context\n        )\n        html_message = render_to_string(\n            \"viral_videos/email/administrator/message.html\", \n              context\n        )\n\n        mail_admins(\n            subject=subject.strip(),\n            message=plain_text_message,\n            html_message=html_message,\n            fail_silently=True,\n        )\n```", "```py\n{# viral_videos/email/administrator/subject.txt #}\nNew Viral Video Added\n```", "```py\n{# viral_videos/email/administrator/message.txt #}\nA new viral video called \"{{ title }}\" has been created.\nYou can preview it at {{ link }}.\n```", "```py\n{# viral_videos/email/administrator/message.html #}\n<p>A new viral video called \"{{ title }}\" has been created.</p>\n<p>You can <a href=\"{{ link }}\">preview it here</a>.</p>\n```", "```py\n# myproject/apps/viral_videos/apps.py\nfrom django.apps import AppConfig\nfrom django.utils.translation import ugettext_lazy as _\n\nclass ViralVideosAppConfig(AppConfig):\n    name = \"myproject.apps.viral_videos\"\n    verbose_name = _(\"Viral Videos\")\n\n    def ready(self):\n        from .signals import inform_administrators\n```", "```py\n# myproject/apps/viral_videos/__init__.py\ndefault_app_config = \"myproject.apps.viral_videos.apps.ViralVideosAppConfig\"\n```", "```py\n# myproject/settings/_base.py\nADMINS = [(\"Administrator\", \"admin@example.com\")]\n```", "```py\n# myproject/apps/viral_videos/checks.py\nfrom textwrap import dedent\n\nfrom django.core.checks import Warning, register, Tags\n\n@register(Tags.compatibility)\ndef settings_check(app_configs, **kwargs):\n    from django.conf import settings\n\n    errors = []\n\n    if not settings.ADMINS:\n        errors.append(\n            Warning(\n                dedent(\"\"\"\n                    The system admins are not set in the project \n                     settings\n                \"\"\"),\n                obj=settings,\n                hint=dedent(\"\"\"\n                    In order to receive notifications when new \n                     videos are created, define system admins \n                     in your settings, like:\n\n                    ADMINS = (\n                        (\"Admin\", \"administrator@example.com\"),\n                    )\n                \"\"\"),\n                id=\"viral_videos.W001\",\n            )\n        )\n\n    return errors\n```", "```py\n# myproject/apps/viral_videos/apps.py\nfrom django.apps import AppConfig\nfrom django.utils.translation import ugettext_lazy as _\n\nclass ViralVideosAppConfig(AppConfig):\n    name = \"myproject.apps.viral_videos\"\n    verbose_name = _(\"Viral Videos\")\n\n    def ready(self):\n        from .signals import inform_administrators\n        from .checks import settings_check\n```", "```py\n(env)$ python manage.py check\nSystem check identified some issues:\n\nWARNINGS:\n<Settings \"myproject.settings.dev\">: (viral_videos.W001)\nThe system admins are not set in the project settings\n\nHINT:\nIn order to receive notifications when new videos are\ncreated, define system admins in your settings, like:\n\nADMINS = (\n    (\"Admin\", \"administrator@example.com\"),\n)\n\nSystem check identified 1 issue (0 silenced).\n```"]