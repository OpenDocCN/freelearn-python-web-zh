["```py\n$ sudo pip3 install --upgrade pip setuptools wheel\n```", "```py\n$ cd ~/projects\n$ mkdir myproject_website\n$ cd myproject_website\n$ python3 -m venv env\n```", "```py\n$ source env/bin/activate\n```", "```py\n$ . env/bin/activate\n```", "```py\n(env)$\n```", "```py\n(env)$ deactivate\n```", "```py\n(env)$ pip install \"Django~=3.0.0\"\n```", "```py\n(env)$ django-admin.py startproject myproject\n```", "```py\nmyproject_website/\n\u251c\u2500\u2500 commands/\n\u251c\u2500\u2500 db_backups/\n\u251c\u2500\u2500 mockups/\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 django-myproject/\n\u2502       \u251c\u2500\u2500 externals/\n\u2502       \u2502   \u251c\u2500\u2500 apps/\n\u2502       \u2502   \u2502   \u2514\u2500\u2500 README.md\n\u2502       \u2502   \u2514\u2500\u2500 libs/\n\u2502       \u2502       \u2514\u2500\u2500 README.md\n\u2502       \u251c\u2500\u2500 locale/\n\u2502       \u251c\u2500\u2500 media/\n\u2502       \u251c\u2500\u2500 myproject/\n\u2502       \u2502   \u251c\u2500\u2500 apps/\n\u2502       \u2502   \u2502   \u251c\u2500\u2500 core/\n\u2502       \u2502   \u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502       \u2502   \u2502   \u2502   \u2514\u2500\u2500 versioning.py\n\u2502       \u2502   \u2502   \u2514\u2500\u2500 __init__.py\n\u2502       \u2502   \u251c\u2500\u2500 settings/\n\u2502       \u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502       \u2502   \u2502   \u251c\u2500\u2500 _base.py\n\u2502       \u2502   \u2502   \u251c\u2500\u2500 dev.py\n\u2502       \u2502   \u2502   \u251c\u2500\u2500 production.py\n\u2502       \u2502   \u2502   \u251c\u2500\u2500 sample_secrets.json\n\u2502       \u2502   \u2502   \u251c\u2500\u2500 secrets.json\n\u2502       \u2502   \u2502   \u251c\u2500\u2500 staging.py\n\u2502       \u2502   \u2502   \u2514\u2500\u2500 test.py\n\u2502       \u2502   \u251c\u2500\u2500 site_static/\n\u2502       \u2502   \u2502   \u2514\u2500\u2500 site/\n\u2502       \u2502   \u2502  django-admin.py startproject myproject     \u251c\u2500\u2500 css/\n\u2502       \u2502   \u2502       \u2502   \u2514\u2500\u2500 style.css\n\u2502       \u2502   \u2502       \u251c\u2500\u2500 img/\n\u2502       \u2502   \u2502       \u2502   \u251c\u2500\u2500 favicon-16x16.png\n\u2502       \u2502   \u2502       \u2502   \u251c\u2500\u2500 favicon-32x32.png\n\u2502       \u2502   \u2502       \u2502   \u2514\u2500\u2500 favicon.ico\n\u2502       \u2502   \u2502       \u251c\u2500\u2500 js/\n\u2502       \u2502   \u2502       \u2502   \u2514\u2500\u2500 main.js\n\u2502       \u2502   \u2502       \u2514\u2500\u2500 scss/\n\u2502       \u2502   \u2502           \u2514\u2500\u2500 style.scss\n\u2502       \u2502   \u251c\u2500\u2500 templates/\n\u2502       \u2502   \u2502   \u251c\u2500\u2500 base.html\n\u2502       \u2502   \u2502   \u2514\u2500\u2500 index.html\n\u2502       \u2502   \u251c\u2500\u2500 __init__.py\n\u2502       \u2502   \u251c\u2500\u2500 urls.py\n\u2502       \u2502   \u2514\u2500\u2500 wsgi.py\n\u2502       \u251c\u2500\u2500 requirements/\n\u2502       \u2502   \u251c\u2500\u2500 _base.txt\n\u2502       \u2502   \u251c\u2500\u2500 dev.txt\n\u2502       \u2502   \u251c\u2500\u2500 production.txt\n\u2502       \u2502   \u251c\u2500\u2500 staging.txt\n\u2502       \u2502   \u2514\u2500\u2500 test.txt\n\u2502       \u251c\u2500\u2500 static/\n\u2502       \u251c\u2500\u2500 LICENSE\n\u2502       \u2514\u2500\u2500 manage.py\n\u2514\u2500\u2500 env/\n```", "```py\n# requirements/_base.txt\nDjango~=3.0.4\ndjangorestframework\n-e git://github.com/omab/python-social-auth.git@6b1e301c79#egg=python-social-auth\n```", "```py\n# requirements/production.txt\n-r _base.txt\n```", "```py\n# requirements/dev.txt\n-r _base.txt\ncoverage\ndjango-debug-toolbar\nselenium\n```", "```py\n(env)$ pip install -r requirements/dev.txt\n```", "```py\n(env)$ pip freeze > requirements/_base.txt\n```", "```py\n(env)$ pip freeze > requirements.txt\n```", "```py\n(env)$ pip install -r requirements.txt\n```", "```py\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n```", "```py\nBASE_DIR = os.path.dirname(\n    os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n)\n```", "```py\n# myproject/settings/production.py\nfrom ._base import *\n```", "```py\n# myproject/settings/dev.py\nfrom ._base import *\nEMAIL_BACKEND = \"django.core.mail.backends.console.EmailBackend\"\n```", "```py\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n```", "```py\nos.environ.setdefault('DJANGO_SETTINGS_MODULE',  'myproject.settings.production')\n```", "```py\n# settings/_base.py\nimport os\nBASE_DIR = os.path.dirname(\n    os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n)\n# ...\nTEMPLATES = [{\n    # ...\n    DIRS: [\n       os.path.join(BASE_DIR, 'myproject', 'templates'),\n    ],\n    # ...\n}]\n# ...\nLOCALE_PATHS = [\n    os.path.join(BASE_DIR, 'locale'),\n]\n# ...\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'myproject', 'site_static'),\n]\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n```", "```py\n# settings/_base.py\nimport os\nfrom django.core.exceptions import ImproperlyConfigured\n\ndef get_secret(setting):\n    \"\"\"Get the secret variable or return explicit exception.\"\"\"\n    try:\n        return os.environ[setting]\n    except KeyError:\n        error_msg = f'Set the {setting} environment variable'\n        raise ImproperlyConfigured(error_msg)\n```", "```py\nSECRET_KEY = get_secret('DJANGO_SECRET_KEY')\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql_psycopg2',\n        'NAME': get_secret('DATABASE_NAME'),\n        'USER': get_secret('DATABASE_USER'),\n        'PASSWORD': get_secret('DATABASE_PASSWORD'),\n        'HOST': 'db',\n        'PORT': '5432',\n    }\n}\n```", "```py\n$ export DJANGO_SECRET_KEY=\"change-this-to-50-characters-long-random-\n  string\"\n$ export DATABASE_NAME=\"myproject\"\n$ export DATABASE_USER=\"myproject\"\n$ export DATABASE_PASSWORD=\"change-this-to-database-password\"\n```", "```py\n# settings/_base.py\nimport os\nimport json\n\nwith open(os.path.join(os.path.dirname(__file__), 'secrets.json'), 'r') \n as f:\n    secrets = json.loads(f.read())\n\ndef get_secret(setting):\n    \"\"\"Get the secret variable or return explicit exception.\"\"\"\n    try:\n        return secrets[setting]\n    except KeyError:\n        error_msg = f'Set the {setting} secret variable'\n        raise ImproperlyConfigured(error_msg)\n```", "```py\n{\n    \"DATABASE_NAME\": \"myproject\",\n    \"DATABASE_USER\": \"myproject\",\n    \"DATABASE_PASSWORD\": \"change-this-to-database-password\",\n    \"DJANGO_SECRET_KEY\": \"change-this-to-50-characters-long-random-string\"\n}\n```", "```py\n{\n    \"DATABASE_NAME\": \"\",\n    \"DATABASE_USER\": \"\",\n    \"DATABASE_PASSWORD\": \"\",\n    \"DJANGO_SECRET_KEY\": \"change-this-to-50-characters-long-random-string\"\n}\n```", "```py\nexternals/\n \u251c\u2500\u2500 apps/\n \u2502   \u251c\u2500\u2500 cms/\n \u2502   \u251c\u2500\u2500 haystack/\n \u2502   \u251c\u2500\u2500 storages/\n \u2502   \u2514\u2500\u2500 README.md\n \u2514\u2500\u2500 libs/\n     \u251c\u2500\u2500 boto/\n     \u251c\u2500\u2500 requests/\n     \u251c\u2500\u2500 twython/\n     \u2514\u2500\u2500 README.md\n```", "```py\n# settings/_base.py\nimport os\nimport sys\nBASE_DIR = os.path.dirname(\n    os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n)\nEXTERNAL_BASE = os.path.join(BASE_DIR, \"externals\")\nEXTERNAL_LIBS_PATH = os.path.join(EXTERNAL_BASE, \"libs\")\nEXTERNAL_APPS_PATH = os.path.join(EXTERNAL_BASE, \"apps\")\nsys.path = [\"\", EXTERNAL_LIBS_PATH, EXTERNAL_APPS_PATH] + sys.path\n```", "```py\n(env)$ python manage.py shell\n>>> import sys\n>>> sys.path\n```", "```py\n# versioning.py\nimport subprocess\nfrom datetime import datetime\n\ndef get_git_changeset_timestamp(absolute_path):\n    repo_dir = absolute_path\n    git_log = subprocess.Popen(\n        \"git log --pretty=format:%ct --quiet -1 HEAD\",\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        shell=True,\n        cwd=repo_dir,\n        universal_newlines=True,\n    )\n\n    timestamp = git_log.communicate()[0]\n    try:\n        timestamp = datetime.utcfromtimestamp(int(timestamp))\n    except ValueError:\n        # Fallback to current timestamp\n        return datetime.now().strftime('%Y%m%d%H%M%S')\n    changeset_timestamp = timestamp.strftime('%Y%m%d%H%M%S')\n    return changeset_timestamp\n```", "```py\n# settings/_base.py\nfrom myproject.apps.core.versioning import get_git_changeset_timestamp\n# ...\ntimestamp = get_git_changeset_timestamp(BASE_DIR)\nSTATIC_URL = f'/static/{timestamp}/'\n```", "```py\n# settings/_base.py\nwith open(os.path.join(BASE_DIR, 'myproject', 'settings', 'last-update.txt'), 'r') as f:\n    timestamp = f.readline().strip()\n\nSTATIC_URL = f'/static/{timestamp}/'\n```", "```py\n# django-myproject/.git/hooks/pre-commit\n#!/usr/bin/env python\nfrom subprocess import check_output, CalledProcessError\nimport os\nfrom datetime import datetime\n\ndef root():\n    ''' returns the absolute path of the repository root '''\n    try:\n        base = check_output(['git', 'rev-parse', '--show-toplevel'])\n    except CalledProcessError:\n        raise IOError('Current working directory is not a git repository')\n    return base.decode('utf-8').strip()\n\ndef abspath(relpath):\n    ''' returns the absolute path for a path given relative to the root of\n        the git repository\n    '''\n    return os.path.join(root(), relpath)\n\ndef add_to_git(file_path):\n    ''' adds a file to git '''\n    try:\n        base = check_output(['git', 'add', file_path])\n    except CalledProcessError:\n        raise IOError('Current working directory is not a git repository')\n    return base.decode('utf-8').strip()\n\ndef main():\n    file_path = abspath(\"myproject/settings/last-update.txt\")\n\n    with open(file_path, 'w') as f:\n        f.write(datetime.now().strftime(\"%Y%m%d%H%M%S\"))\n\n    add_to_git(file_path)\n\nif __name__ == '__main__':\n    main()\n```", "```py\n# /etc/mysql/my.cnf\n[client]\ndefault-character-set = utf8\n\n[mysql]\ndefault-character-set = utf8\n\n[mysqld]\ncollation-server = utf8_unicode_ci\ninit-connect = 'SET NAMES utf8'\ncharacter-set-server = utf8\n```", "```py\n$ /etc/init.d/mysql restart\n```", "```py\n$ createdb --encoding=UTF8 --locale=en_US.UTF-8 --template=template0 myproject\n```", "```py\n# .gitignore ### Python template\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\ndb.sqlite3\n\n# Sphinx documentation\ndocs/_build/\n\n# IPython\nprofile_default/\nipython_config.py\n\n# Environments\nenv/\n\n# Media and Static directories\n/media/\n!/media/.gitkeep\n\n/static/\n!/static/.gitkeep\n\n# Secrets\nsecrets.json\n```", "```py\n/media/\n!/media/.gitkeep\n```", "```py\n# ~/.bash_profile alias delpyc='\nfind . -name \"*.py[co]\" -delete\nfind . -type d -name \"__pycache__\" -delete'\n```", "```py\n(env)$ delpyc\n```", "```py\n# System libraries\nimport os\nimport re\nfrom datetime import datetime\n\n# Third-party libraries\nimport boto\nfrom PIL import Image\n\n# Django modules\nfrom django.db import models\nfrom django.conf import settings\n\n# Django apps\nfrom cms.models import Page\n\n# Current-app modules\nfrom .models import NewsArticle\nfrom . import app_settings\n```", "```py\n(env)$ cd myproject/apps/\n(env)$ django-admin.py startapp magazine\n```", "```py\n# myproject/apps/magazine/apps.py\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\nclass MagazineAppConfig(AppConfig):\n    name = \"myproject.apps.magazine\"\n    verbose_name = _(\"Magazine\")\n\n    def ready(self):\n        from . import signals\n```", "```py\n# myproject/apps/magazine/__init__.py\ndefault_app_config = \"myproject.apps.magazine.apps.MagazineAppConfig\"\n```", "```py\n# myproject/apps/magazine/signals.py\nfrom django.db.models.signals import post_save, post_delete\nfrom django.dispatch import receiver\nfrom django.conf import settings\n\nfrom .models import NewsArticle\n\n@receiver(post_save, sender=NewsArticle)\ndef news_save_handler(sender, **kwargs):\n    if settings.DEBUG:\n        print(f\"{kwargs['instance']} saved.\")\n\n@receiver(post_delete, sender=NewsArticle)\ndef news_delete_handler(sender, **kwargs):\n    if settings.DEBUG:\n        print(f\"{kwargs['instance']} deleted.\")\n```", "```py\n>>> from django.apps import apps as django_apps\n>>> magazine_app_config = django_apps.get_app_config(\"magazine\")\n>>> magazine_app_config\n<MagazineAppConfig: magazine>\n>>> magazine_app_config.models_module\n<module 'magazine.models' from '/path/to/myproject/apps/magazine/models.py'>\n>>> NewsArticle = django_apps.get_model(\"magazine\", \"NewsArticle\")\n>>> NewsArticle\n<class 'magazine.models.NewsArticle'>\n```", "```py\n# myproject/apps/magazine/app_settings.py\nfrom django.conf import settings\nfrom django.utils.translation import gettext_lazy as _\n\n# Example:\nSETTING_1 = getattr(settings, \"MAGAZINE_SETTING_1\", \"default value\")\n\nMEANING_OF_LIFE = getattr(settings, \"MAGAZINE_MEANING_OF_LIFE\", 42)\n\nARTICLE_THEME_CHOICES = getattr(\n    settings,\n    \"MAGAZINE_ARTICLE_THEME_CHOICES\",\n    [\n        ('futurism', _(\"Futurism\")),\n        ('nostalgia', _(\"Nostalgia\")),\n        ('sustainability', _(\"Sustainability\")),\n        ('wonder', _(\"Wonder\")),\n    ]\n)\n```", "```py\n# myproject/apps/magazine/models.py\nfrom django.db import models\nfrom django.utils.translation import gettext_lazy as _\n\nclass NewsArticle(models.Model):\n    created_at = models.DateTimeField(_(\"Created at\"),  \n     auto_now_add=True)\n    title = models.CharField(_(\"Title\"), max_length=255)\n    body = models.TextField(_(\"Body\"))\n    theme = models.CharField(_(\"Theme\"), max_length=20)\n\n    class Meta:\n        verbose_name = _(\"News Article\")\n        verbose_name_plural = _(\"News Articles\")\n\n    def __str__(self):\n        return self.title\n```", "```py\n# myproject/apps/magazine/admin.py\nfrom django import forms\nfrom django.contrib import admin\n\nfrom .models import NewsArticle\n\nfrom .app_settings import ARTICLE_THEME_CHOICES\n\nclass NewsArticleModelForm(forms.ModelForm):\n    theme = forms.ChoiceField(\n        label=NewsArticle._meta.get_field(\"theme\").verbose_name,\n        choices=ARTICLE_THEME_CHOICES,\n        required=not NewsArticle._meta.get_field(\"theme\").blank,\n    )\n    class Meta:\n        fields = \"__all__\"\n\n@admin.register(NewsArticle)\nclass NewsArticleAdmin(admin.ModelAdmin):\n form = NewsArticleModelForm\n```", "```py\n# myproject/settings/_base.py\nfrom django.utils.translation import gettext_lazy as _\n# ...\nMAGAZINE_ARTICLE_THEME_CHOICES = [\n    ('futurism', _(\"Futurism\")),\n    ('nostalgia', _(\"Nostalgia\")),\n    ('sustainability', _(\"Sustainability\")),\n    ('wonder', _(\"Wonder\")),\n    ('positivity', _(\"Positivity\")),\n    ('solutions', _(\"Solutions\")),\n    ('science', _(\"Science\")),\n]\n```", "```py\n# docker-compose.yml\nversion: \"3.7\"\n\nservices:\n  nginx:\n    image: nginx:latest\n    ports:\n      - \"80:80\"\n    volumes:\n      - ./config/nginx/conf.d:/etc/nginx/conf.d\n      - static_volume:/home/myproject/static\n      - media_volume:/home/myproject/media\n    depends_on:\n      - gunicorn\n\n  gunicorn:\n    build:\n      context: .\n      args:\n        PIP_REQUIREMENTS: \"${PIP_REQUIREMENTS}\"\n    command: bash -c \"/home/myproject/env/bin/gunicorn --workers 3 \n    --bind 0.0.0.0:8000 myproject.wsgi:application\"\n    depends_on:\n      - db\n    volumes:\n      - static_volume:/home/myproject/static\n      - media_volume:/home/myproject/media\n    expose:\n      - \"8000\"\n    environment:\n      DJANGO_SETTINGS_MODULE: \"${DJANGO_SETTINGS_MODULE}\"\n      DJANGO_SECRET_KEY: \"${DJANGO_SECRET_KEY}\"\n      DATABASE_NAME: \"${DATABASE_NAME}\"\n      DATABASE_USER: \"${DATABASE_USER}\"\n      DATABASE_PASSWORD: \"${DATABASE_PASSWORD}\"\n      EMAIL_HOST: \"${EMAIL_HOST}\"\n      EMAIL_PORT: \"${EMAIL_PORT}\"\n      EMAIL_HOST_USER: \"${EMAIL_HOST_USER}\"\n      EMAIL_HOST_PASSWORD: \"${EMAIL_HOST_PASSWORD}\"\n\n  db:\n    image: postgres:latest\n    restart: always\n    environment:\n      POSTGRES_DB: \"${DATABASE_NAME}\"\n      POSTGRES_USER: \"${DATABASE_USER}\"\n      POSTGRES_PASSWORD: \"${DATABASE_PASSWORD}\"\n    ports:\n      - 5432\n    volumes:\n      - postgres_data:/var/lib/postgresql/data/\n\nvolumes:\n  postgres_data:\n  static_volume:\n  media_volume:\n\n```", "```py\n# Dockerfile\n# pull official base image\nFROM python:3.8\n\n# accept arguments\nARG PIP_REQUIREMENTS=production.txt\n\n# set environment variables\nENV PYTHONDONTWRITEBYTECODE 1\nENV PYTHONUNBUFFERED 1\n\n# install dependencies\nRUN pip install --upgrade pip setuptools\n\n# create user for the Django project\nRUN useradd -ms /bin/bash myproject\n\n# set current user\nUSER myproject\n\n# set work directory\nWORKDIR /home/myproject\n\n# create and activate virtual environment\nRUN python3 -m venv env\n\n# copy and install pip requirements\nCOPY --chown=myproject ./src/myproject/requirements /home/myproject/requirements/\nRUN ./env/bin/pip3 install -r /home/myproject/requirements/${PIP_REQUIREMENTS}\n\n# copy Django project files\nCOPY --chown=myproject ./src/myproject /home/myproject/\n\n```", "```py\n# build_dev.sh\n#!/usr/bin/env bash\nDJANGO_SETTINGS_MODULE=myproject.settings.dev \\\nDJANGO_SECRET_KEY=\"change-this-to-50-characters-long-\n random-string\" \\\nDATABASE_NAME=myproject \\\nDATABASE_USER=myproject \\\nDATABASE_PASSWORD=\"change-this-too\" \\\nPIP_REQUIREMENTS=dev.txt \\\ndocker-compose up --detach --build\n```", "```py\n$ chmod +x build_dev.sh\n$ ./build_dev.sh\n```", "```py\nOperationalError at /en/admin/\n FATAL: role \"myproject\" does not exist\n```", "```py\n$ docker exec -it django_docker_db_1 bash\n/# su - postgres\n/$ createuser --createdb --password myproject\n/$ createdb --username myproject myproject\n```", "```py\nProgrammingError at /en/admin/ relation \"django_session\" does not exist LINE 1: ...ession_data\", \"django_session\".\"expire_date\" FROM \"django_se...\n```", "```py\n$ docker exec -it django_docker_gunicorn_1 bash\n$ source env/bin/activate\n(env)$ python manage.py migrate\n(env)$ python manage.py collectstatic\n(env)$ python manage.py createsuperuser\n```", "```py\ndjango_docker\n\u251c\u2500\u2500 config/\n\u2502   \u2514\u2500\u2500 nginx/\n\u2502       \u2514\u2500\u2500 conf.d/\n\u2502           \u2514\u2500\u2500 myproject.conf\n\u251c\u2500\u2500 git-hooks/\n\u2502   \u251c\u2500\u2500 install_hooks.sh\n\u2502   \u2514\u2500\u2500 pre-commit\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 myproject/\n\u2502       \u251c\u2500\u2500 locale/\n\u2502       \u251c\u2500\u2500 media/\n\u2502       \u251c\u2500\u2500 myproject/\n\u2502       \u2502   \u251c\u2500\u2500 apps/\n\u2502       \u2502   \u2502   \u2514\u2500\u2500 __init__.py\n\u2502       \u2502   \u251c\u2500\u2500 settings/\n\u2502       \u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502       \u2502   \u2502   \u251c\u2500\u2500 _base.py\n\u2502       \u2502   \u2502   \u251c\u2500\u2500 dev.py\n\u2502       \u2502   \u2502   \u251c\u2500\u2500 last-update.txt\n\u2502       \u2502   \u2502   \u251c\u2500\u2500 production.py\n\u2502       \u2502   \u2502   \u251c\u2500\u2500 staging.py\n\u2502       \u2502   \u2502   \u2514\u2500\u2500 test.py\n\u2502       \u2502   \u251c\u2500\u2500 site_static/\n\u2502       \u2502   \u2502   \u2514\u2500\u2500 site/\n\u2502       \u2502   \u2502       \u251c\u2500\u2500 css/\n\u2502       \u2502   \u2502       \u251c\u2500\u2500 img/\n\u2502       \u2502   \u2502       \u251c\u2500\u2500 js/\n\u2502       \u2502   \u2502       \u2514\u2500\u2500 scss/\n\u2502       \u2502   \u251c\u2500\u2500 templates/\n\u2502       \u2502   \u2502   \u251c\u2500\u2500 base.html\n\u2502       \u2502   \u2502   \u2514\u2500\u2500 index.html\n\u2502       \u2502   \u251c\u2500\u2500 __init__.py\n\u2502       \u2502   \u251c\u2500\u2500 urls.py\n\u2502       \u2502   \u2514\u2500\u2500 wsgi.py\n\u2502       \u251c\u2500\u2500 requirements/\n\u2502       \u2502   \u251c\u2500\u2500 _base.txt\n\u2502       \u2502   \u251c\u2500\u2500 dev.txt\n\u2502       \u2502   \u251c\u2500\u2500 production.txt\n\u2502       \u2502   \u251c\u2500\u2500 staging.txt\n\u2502       \u2502   \u2514\u2500\u2500 test.txt\n\u2502       \u251c\u2500\u2500 static/\n\u2502       \u2514\u2500\u2500 manage.py\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 build_dev.sh\n\u251c\u2500\u2500 build_dev_example.sh\n\u2514\u2500\u2500 docker-compose.yml\n```", "```py\n#/etc/nginx/conf.d/myproject.conf\nupstream myproject {\n    server django_docker_gunicorn_1:8000;\n}\n\nserver {\n    listen 80;\n\n    location / {\n        proxy_pass http://myproject;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $host;\n        proxy_redirect off;\n    }\n\n    rewrite \"/static/\\d+/(.*)\" /static/$1 last;\n\n    location /static/ {\n        alias /home/myproject/static/;\n    }\n\n    location /media/ {\n        alias /home/myproject/media/;\n    }\n}\n```", "```py\n$ docker-compose down\n$ ./build_dev.sh\n```", "```py\n$ docker-compose logs nginx\n$ docker-compose logs gunicorn $ docker-compose logs db\n\n```", "```py\n$ docker exec -it django_docker_gunicorn_1 bash\n$ docker exec -it django_docker_nginx_1 bash\n$ docker exec -it django_docker_db_1 bash\n```", "```py\n$ docker cp ~/avatar.png django_docker_gunicorn_1:/home/myproject/media/ $ docker cp django_docker_gunicorn_1:/home/myproject/media ~/Desktop/\n\n```"]