["```py\n# myproject/apps/ideas/models.py\nfrom django.db import models\nfrom django.urls import reverse\nfrom django.utils.translation import gettext_lazy as _\n\nfrom myproject.apps.core.models import (\n    CreationModificationDateBase,\n    MetaTagsBase,\n    UrlBase,\n)\n\nclass Idea(CreationModificationDateBase, MetaTagsBase, UrlBase):\n    title = models.CharField(\n        _(\"Title\"),\n        max_length=200,\n    )\n    content = models.TextField(\n        _(\"Content\"),\n    )\n    # other fields\u2026\n\n    class Meta:\n        verbose_name = _(\"Idea\")\n        verbose_name_plural = _(\"Ideas\")\n\n    def __str__(self):\n        return self.title\n\n    def get_url_path(self):\n        return reverse(\"idea_details\", kwargs={\n            \"idea_id\": str(self.pk),\n        })\n```", "```py\n>>> class A(object):\n... def test(self):\n...     print(\"A.test() called\")\n... \n\n>>> class B(object):\n... def test(self):\n...     print(\"B.test() called\")\n... \n\n>>> class C(object):\n... def test(self):\n...     print(\"C.test() called\")\n... \n\n>>> class D(A, B, C):\n... def test(self):\n...     super().test()\n...     print(\"D.test() called\")\n\n>>> d = D()\n>>> d.test()\nA.test() called\nD.test() called\n```", "```py\n# myproject/apps/core/models.py from urllib.parse import urlparse, urlunparse\nfrom django.conf import settings\nfrom django.db import models\n\nclass UrlBase(models.Model):\n    \"\"\"\n    A replacement for get_absolute_url()\n    Models extending this mixin should have either get_url or \n     get_url_path implemented.\n    \"\"\"\n    class Meta:\n        abstract = True\n\n    def get_url(self):\n        if hasattr(self.get_url_path, \"dont_recurse\"):\n            raise NotImplementedError\n        try:\n            path = self.get_url_path()\n        except NotImplementedError:\n            raise\n        return settings.WEBSITE_URL + path\n    get_url.dont_recurse = True\n\n    def get_url_path(self):\n        if hasattr(self.get_url, \"dont_recurse\"):\n            raise NotImplementedError\n        try:\n            url = self.get_url()\n        except NotImplementedError:\n            raise\n        bits = urlparse(url)\n        return urlunparse((\"\", \"\") + bits[2:])\n    get_url_path.dont_recurse = True\n\n    def get_absolute_url(self):\n        return self.get_url()\n```", "```py\n# myproject/settings/dev.py\nfrom ._base import *\n\nDEBUG = True\nWEBSITE_URL = \"http://127.0.0.1:8000\"  # without trailing slash\n```", "```py\n# myproject/apps/ideas/models.py\nfrom django.db import models\nfrom django.urls import reverse\nfrom django.utils.translation import gettext_lazy as _\n\nfrom myproject.apps.core.models import UrlBase\n\nclass Idea(UrlBase):\n    # fields, attributes, properties and methods\u2026\n\n    def get_url_path(self):\n        return reverse(\"idea_details\", kwargs={\n            \"idea_id\": str(self.pk),\n        })\n```", "```py\n<a href=\"{{ idea.get_url_path }}\">{{ idea.title }}</a>\n```", "```py\n<a href=\"{{ \u2028idea.get_url }}\">{{ idea.title }}</a>\n```", "```py\nclass Idea(UrlBase):\n    slug = models.SlugField(_(\"Slug for URLs\"), max_length=50)\n```", "```py\n# myproject/apps/core/models.py\nfrom django.db import models\nfrom django.utils.translation import gettext_lazy as _\n\nclass CreationModificationDateBase(models.Model):\n    \"\"\"\n    Abstract base class with a creation and modification date and time\n    \"\"\"\n\n    created = models.DateTimeField(\n        _(\"Creation Date and Time\"),\n        auto_now_add=True,\n    )\n\n    modified = models.DateTimeField(\n        _(\"Modification Date and Time\"),\n        auto_now=True,\n    )\n\n    class Meta:\n        abstract = True\n```", "```py\n# myproject/apps/ideas/models.py\nfrom django.db import models\n\nfrom myproject.apps.core.models import CreationModificationDateBase\n\nclass Idea(CreationModificationDateBase):\n    # other fields, attributes, properties, and methods\u2026\n```", "```py\n{# templates/core/includes/meta_field.html #}\n<meta name=\"{{ name }}\" content=\"{{ content }}\" />\n```", "```py\n# myproject/apps/core/models.py from django.conf import settings\nfrom django.db import models\nfrom django.utils.translation import gettext_lazy as _\nfrom django.utils.safestring import mark_safe\nfrom django.template.loader import render_to_string\n\nclass MetaTagsBase(models.Model):\n    \"\"\"\n    Abstract base class for generating meta tags\n    \"\"\"\n    meta_keywords = models.CharField(\n        _(\"Keywords\"),\n        max_length=255,\n        blank=True,\n        help_text=_(\"Separate keywords with commas.\"),\n    )\n    meta_description = models.CharField(\n        _(\"Description\"),\n        max_length=255,\n        blank=True,\n    )\n    meta_author = models.CharField(\n        _(\"Author\"),\n        max_length=255,\n        blank=True,\n    )\n    meta_copyright = models.CharField(\n        _(\"Copyright\"),\n        max_length=255,\n        blank=True,\n    )\n\n    class Meta:\n        abstract = True\n\n    def get_meta_field(self, name, content):\n        tag = \"\"\n        if name and content:\n            tag = render_to_string(\"core/includes/meta_field.html\", \n            {\n                \"name\": name,\n                \"content\": content,\n            })\n        return mark_safe(tag)\n\n    def get_meta_keywords(self):\n        return self.get_meta_field(\"keywords\", self.meta_keywords)\n\n    def get_meta_description(self):\n        return self.get_meta_field(\"description\", \n         self.meta_description)\n\n    def get_meta_author(self):\n        return self.get_meta_field(\"author\", self.meta_author)\n\n    def get_meta_copyright(self):\n        return self.get_meta_field(\"copyright\", \n         self.meta_copyright)\n\n    def get_meta_tags(self):\n        return mark_safe(\"\\n\".join((\n            self.get_meta_keywords(),\n            self.get_meta_description(),\n            self.get_meta_author(),\n            self.get_meta_copyright(),\n        )))\n```", "```py\n{% block meta_tags %}\n{{ block.super }}\n{{ idea.get_meta_tags }}\n{% endblock %}\n```", "```py\n# myproject/settings/_base.py\n\nINSTALLED_APPS = [\n    # contributed\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    # third-party\n    # ...\n    # local\n    \"myproject.apps.core\",\n    \"myproject.apps.categories\",\n    \"myproject.apps.ideas\",\n]\n```", "```py\n# myproject/apps/core/models.py from django.db import models\nfrom django.utils.translation import gettext_lazy as _\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.contrib.contenttypes.fields import GenericForeignKey\nfrom django.core.exceptions import FieldError\n\ndef object_relation_base_factory(\n        prefix=None,\n        prefix_verbose=None,\n        add_related_name=False,\n        limit_content_type_choices_to=None,\n        is_required=False):\n    \"\"\"\n    Returns a mixin class for generic foreign keys using\n    \"Content type - object ID\" with dynamic field names.\n    This function is just a class generator.\n\n    Parameters:\n    prefix:           a prefix, which is added in front of\n                      the fields\n    prefix_verbose:   a verbose name of the prefix, used to\n                      generate a title for the field column\n                      of the content object in the Admin\n    add_related_name: a boolean value indicating, that a\n                      related name for the generated content\n                      type foreign key should be added. This\n                      value should be true, if you use more\n                      than one ObjectRelationBase in your\n                      model.\n\n    The model fields are created using this naming scheme:\n        <<prefix>>_content_type\n        <<prefix>>_object_id\n        <<prefix>>_content_object\n    \"\"\"\n    p = \"\"\n    if prefix:\n        p = f\"{prefix}_\"\n\n    prefix_verbose = prefix_verbose or _(\"Related object\")\n    limit_content_type_choices_to = limit_content_type_choices_to \n     or {}\n\n    content_type_field = f\"{p}content_type\"\n    object_id_field = f\"{p}object_id\"\n    content_object_field = f\"{p}content_object\"\n\n    class TheClass(models.Model):\n class Meta:\n abstract = True\n\n    if add_related_name:\n        if not prefix:\n            raise FieldError(\"if add_related_name is set to \"\n                             \"True, a prefix must be given\")\n        related_name = prefix\n    else:\n        related_name = None\n\n    optional = not is_required\n\n    ct_verbose_name = _(f\"{prefix_verbose}'s type (model)\")\n\n    content_type = models.ForeignKey(\n        ContentType,\n        verbose_name=ct_verbose_name,\n        related_name=related_name,\n        blank=optional,\n        null=optional,\n        help_text=_(\"Please select the type (model) \"\n                    \"for the relation, you want to build.\"),\n        limit_choices_to=limit_content_type_choices_to,\n        on_delete=models.CASCADE)\n\n    fk_verbose_name = prefix_verbose\n\n    object_id = models.CharField(\n        fk_verbose_name,\n        blank=optional,\n        null=False,\n        help_text=_(\"Please enter the ID of the related object.\"),\n        max_length=255,\n        default=\"\")  # for migrations\n\n    content_object = GenericForeignKey(\n        ct_field=content_type_field,\n        fk_field=object_id_field)\n\n    TheClass.add_to_class(content_type_field, content_type)\n    TheClass.add_to_class(object_id_field, object_id)\n    TheClass.add_to_class(content_object_field, content_object)\n\n    return TheClass\n```", "```py\n# myproject/apps/ideas/models.py from django.db import models\nfrom django.utils.translation import gettext_lazy as _\n\nfrom myproject.apps.core.models import (\n    object_relation_base_factory as generic_relation,\n)\n\nFavoriteObjectBase = generic_relation(\n    is_required=True,\n)\n\nOwnerBase = generic_relation(\n    prefix=\"owner\",\n    prefix_verbose=_(\"Owner\"),\n    is_required=True,\n    add_related_name=True,\n    limit_content_type_choices_to={\n        \"model__in\": (\n            \"user\",\n            \"group\",\n        )\n    }\n)\n\nclass Like(FavoriteObjectBase, OwnerBase):\n    class Meta:\n        verbose_name = _(\"Like\")\n        verbose_name_plural = _(\"Likes\")\n\n    def __str__(self):\n        return _(\"{owner} likes {object}\").format(\n            owner=self.owner_content_object,\n            object=self.content_object\n        )\n```", "```py\n# myproject/apps/core/model_fields.py from django.conf import settings\nfrom django.db import models\nfrom django.utils.translation import get_language\nfrom django.utils import translation\n\nclass MultilingualField(models.Field):\n    SUPPORTED_FIELD_TYPES = [models.CharField, models.TextField]\n\n    def __init__(self, verbose_name=None, **kwargs):\n        self.localized_field_model = None\n        for model in MultilingualField.SUPPORTED_FIELD_TYPES:\n            if issubclass(self.__class__, model):\n                self.localized_field_model = model\n        self._blank = kwargs.get(\"blank\", False)\n        self._editable = kwargs.get(\"editable\", True)\n        super().__init__(verbose_name, **kwargs)\n\n    @staticmethod\n    def localized_field_name(name, lang_code):\n        lang_code_safe = lang_code.replace(\"-\", \"_\")\n        return f\"{name}_{lang_code_safe}\"\n\n    def get_localized_field(self, lang_code, lang_name):\n        _blank = (self._blank\n                  if lang_code == settings.LANGUAGE_CODE\n                  else True)\n        localized_field = self.localized_field_model(\n            f\"{self.verbose_name} ({lang_name})\",\n            name=self.name,\n            primary_key=self.primary_key,\n            max_length=self.max_length,\n            unique=self.unique,\n            blank=_blank,\n            null=False, # we ignore the null argument!\n            db_index=self.db_index,\n            default=self.default or \"\",\n            editable=self._editable,\n            serialize=self.serialize,\n            choices=self.choices,\n            help_text=self.help_text,\n            db_column=None,\n            db_tablespace=self.db_tablespace)\n        return localized_field\n\n    def contribute_to_class(self, cls, name,\n                            private_only=False,\n                            virtual_only=False):\n        def translated_value(self):\n            language = get_language()\n            val = self.__dict__.get(\n                MultilingualField.localized_field_name(\n                        name, language))\n            if not val:\n                val = self.__dict__.get(\n                    MultilingualField.localized_field_name(\n                            name, settings.LANGUAGE_CODE))\n            return val\n\n        # generate language-specific fields dynamically\n        if not cls._meta.abstract:\n            if self.localized_field_model:\n                for lang_code, lang_name in settings.LANGUAGES:\n                    localized_field = self.get_localized_field(\n                        lang_code, lang_name)\n                    localized_field.contribute_to_class(\n                            cls,\n                            MultilingualField.localized_field_name(\n                                    name, lang_code))\n\n                setattr(cls, name, property(translated_value))\n            else:\n                super().contribute_to_class(\n                    cls, name, private_only, virtual_only)\n```", "```py\nclass MultilingualCharField(models.CharField, MultilingualField):\n    pass\n\nclass MultilingualTextField(models.TextField, MultilingualField):\n    pass\n```", "```py\n# myproject/apps/core/admin.py\nfrom django.conf import settings\n\ndef get_multilingual_field_names(field_name):\n    lang_code_underscored = settings.LANGUAGE_CODE.replace(\"-\", \n     \"_\")\n    field_names = [f\"{field_name}_{lang_code_underscored}\"]\n    for lang_code, lang_name in settings.LANGUAGES:\n        if lang_code != settings.LANGUAGE_CODE:\n            lang_code_underscored = lang_code.replace(\"-\", \"_\")\n            field_names.append(\n                f\"{field_name}_{lang_code_underscored}\"\n            )\n    return field_names\n```", "```py\n# myproject/settings/_base.py LANGUAGE_CODE = \"en\"\n\n# All official languages of European Union\nLANGUAGES = [\n    (\"bg\", \"Bulgarian\"),    (\"hr\", \"Croatian\"),\n    (\"cs\", \"Czech\"),        (\"da\", \"Danish\"),\n    (\"nl\", \"Dutch\"),        (\"en\", \"English\"),\n    (\"et\", \"Estonian\"),     (\"fi\", \"Finnish\"),\n    (\"fr\", \"French\"),       (\"de\", \"German\"),\n    (\"el\", \"Greek\"),        (\"hu\", \"Hungarian\"),\n    (\"ga\", \"Irish\"),        (\"it\", \"Italian\"),\n    (\"lv\", \"Latvian\"),      (\"lt\", \"Lithuanian\"),\n    (\"mt\", \"Maltese\"),      (\"pl\", \"Polish\"),\n    (\"pt\", \"Portuguese\"),   (\"ro\", \"Romanian\"),\n    (\"sk\", \"Slovak\"),       (\"sl\", \"Slovene\"),\n    (\"es\", \"Spanish\"),      (\"sv\", \"Swedish\"),\n]\n```", "```py\n# myproject/apps/ideas/models.py\nfrom django.db import models\nfrom django.utils.translation import gettext_lazy as _\n\nfrom myproject.apps.core.model_fields import (\n    MultilingualCharField,\n    MultilingualTextField,\n)\n\nclass Idea(models.Model):\n    title = MultilingualCharField(\n        _(\"Title\"),\n        max_length=200,\n    )\n    content = MultilingualTextField(\n        _(\"Content\"),\n    )\n\n    class Meta:\n        verbose_name = _(\"Idea\")\n        verbose_name_plural = _(\"Ideas\")\n\n    def __str__(self):\n        return self.title\n```", "```py\n# myproject/apps/ideas/admin.py\nfrom django.contrib import admin\nfrom django.utils.translation import gettext_lazy as _\n\nfrom myproject.apps.core.admin import get_multilingual_field_names\n\nfrom .models import Idea\n\n@admin.register(Idea)\nclass IdeaAdmin(admin.ModelAdmin):\n    fieldsets = [\n        (_(\"Title and Content\"), {\n            \"fields\": get_multilingual_field_names(\"title\") +\n                      get_multilingual_field_names(\"content\")\n        }),\n    ]\n```", "```py\nclass Idea(models.Model):\n    title_bg = models.CharField(\n        _(\"Title (Bulgarian)\"),\n        max_length=200,\n    )\n    title_hr = models.CharField(\n        _(\"Title (Croatian)\"),\n        max_length=200,\n    )\n    # titles for other languages\u2026\n    title_sv = models.CharField(\n        _(\"Title (Swedish)\"),\n        max_length=200,\n    )\n\n    content_bg = MultilingualTextField(\n        _(\"Content (Bulgarian)\"),\n    )\n    content_hr = MultilingualTextField(\n        _(\"Content (Croatian)\"),\n    )\n    # content for other languages\u2026\n    content_sv = MultilingualTextField(\n        _(\"Content (Swedish)\"),\n    )\n\n    class Meta:\n        verbose_name = _(\"Idea\")\n        verbose_name_plural = _(\"Ideas\")\n\n    def __str__(self):\n        return self.title\n```", "```py\n<h1>{{ idea.title }}</h1>\n<div>{{ idea.content|urlize|linebreaks }}</div>\n```", "```py\n>>> lang_code = input(\"Enter language code: \")\n>>> lang_code_underscored = lang_code.replace(\"-\", \"_\")\n>>> qs = Idea.objects.order_by(f\"title_{lang_code_underscored}\")\n```", "```py\n# myproject/apps/core/model_fields.py\nfrom django.conf import settings\nfrom django.utils.translation import get_language\nfrom django.utils import translation\n\nclass TranslatedField(object):\n    def __init__(self, field_name):\n        self.field_name = field_name\n\n    def __get__(self, instance, owner):\n        lang_code = translation.get_language()\n        if lang_code == settings.LANGUAGE_CODE:\n            # The fields of the default language are in the main\n               model\n            return getattr(instance, self.field_name)\n        else:\n            # The fields of the other languages are in the\n               translation\n            # model, but falls back to the main model\n            translations = instance.translations.filter(\n                language=lang_code,\n            ).first() or instance\n            return getattr(translations, self.field_name)\n```", "```py\n# myproject/apps/core/admin.py\nfrom django import forms\nfrom django.conf import settings\nfrom django.utils.translation import gettext_lazy as _\n\nclass LanguageChoicesForm(forms.ModelForm):\n    def __init__(self, *args, **kwargs):\n        LANGUAGES_EXCEPT_THE_DEFAULT = [\n            (lang_code, lang_name)\n            for lang_code, lang_name in settings.LANGUAGES\n            if lang_code != settings.LANGUAGE_CODE\n        ]\n        super().__init__(*args, **kwargs)\n        self.fields[\"language\"] = forms.ChoiceField(\n            label=_(\"Language\"),\n            choices=LANGUAGES_EXCEPT_THE_DEFAULT, \n            required=True,\n        )\n```", "```py\n# myproject/settings/_base.py\nLANGUAGE_CODE = \"en\"\n\n# All official languages of European Union\nLANGUAGES = [\n    (\"bg\", \"Bulgarian\"),    (\"hr\", \"Croatian\"),\n    (\"cs\", \"Czech\"),        (\"da\", \"Danish\"),\n    (\"nl\", \"Dutch\"),        (\"en\", \"English\"),\n    (\"et\", \"Estonian\"),     (\"fi\", \"Finnish\"),\n    (\"fr\", \"French\"),       (\"de\", \"German\"),\n    (\"el\", \"Greek\"),        (\"hu\", \"Hungarian\"),\n    (\"ga\", \"Irish\"),        (\"it\", \"Italian\"),\n    (\"lv\", \"Latvian\"),      (\"lt\", \"Lithuanian\"),\n    (\"mt\", \"Maltese\"),      (\"pl\", \"Polish\"),\n    (\"pt\", \"Portuguese\"),   (\"ro\", \"Romanian\"),\n    (\"sk\", \"Slovak\"),       (\"sl\", \"Slovene\"),\n    (\"es\", \"Spanish\"),      (\"sv\", \"Swedish\"),\n]\n```", "```py\n# myproject/apps/ideas/models.py\nfrom django.db import models\nfrom django.conf import settings\nfrom django.utils.translation import gettext_lazy as _\n\nfrom myproject.apps.core.model_fields import TranslatedField\n\nclass Idea(models.Model):\n    title = models.CharField(\n        _(\"Title\"),\n        max_length=200,\n    )\n    content = models.TextField(\n        _(\"Content\"),\n    )\n    translated_title = TranslatedField(\"title\")\n    translated_content = TranslatedField(\"content\")\n\n    class Meta:\n        verbose_name = _(\"Idea\")\n        verbose_name_plural = _(\"Ideas\")\n\n    def __str__(self):\n        return self.title\n\nclass IdeaTranslations(models.Model):\n    idea = models.ForeignKey(\n        Idea,\n        verbose_name=_(\"Idea\"),\n        on_delete=models.CASCADE,\n        related_name=\"translations\",\n    )\n    language = models.CharField(_(\"Language\"), max_length=7)\n\n    title = models.CharField(\n        _(\"Title\"),\n        max_length=200,\n    )\n    content = models.TextField(\n        _(\"Content\"),\n    )\n\n    class Meta:\n        verbose_name = _(\"Idea Translations\")\n        verbose_name_plural = _(\"Idea Translations\")\n        ordering = [\"language\"]\n        unique_together = [[\"idea\", \"language\"]]\n\n    def __str__(self):\n        return self.title\n```", "```py\n# myproject/apps/ideas/admin.py\nfrom django.contrib import admin\nfrom django.utils.translation import gettext_lazy as _\n\nfrom myproject.apps.core.admin import LanguageChoicesForm\n\nfrom .models import Idea, IdeaTranslations\n\nclass IdeaTranslationsForm(LanguageChoicesForm):\n    class Meta:\n        model = IdeaTranslations\n        fields = \"__all__\"\n\nclass IdeaTranslationsInline(admin.StackedInline):\n    form = IdeaTranslationsForm\n    model = IdeaTranslations\n    extra = 0\n\n@admin.register(Idea)\nclass IdeaAdmin(admin.ModelAdmin):\n    inlines = [IdeaTranslationsInline]\n\n    fieldsets = [\n        (_(\"Title and Content\"), {\n            \"fields\": [\"title\", \"content\"]\n        }),\n    ]\n```", "```py\n<h1>{{ idea.translated_title }}</h1>\n<div>{{ idea.translated_content|urlize|linebreaks }}</div>\n```", "```py\n>>> from django.conf import settings\n>>> from django.db import models\n>>> lang_code = input(\"Enter language code: \")\n\n>>> if lang_code == settings.LANGUAGE_CODE:\n...     qs = Idea.objects.annotate(\n...         title_translation=models.F(\"title\"),\n...         content_translation=models.F(\"content\"),\n...     )\n... else:\n...     qs = Idea.objects.filter(\n...         translations__language=lang_code,\n...     ).annotate(\n...         title_translation=models.F(\"translations__title\"),\n...         content_translation=models.F(\"translations__content\"),\n...     )\n\n>>> qs = qs.order_by(\"title_translation\")\n\n>>> for idea in qs:\n...     print(idea.title_translation)\n```", "```py\n# myproject/apps/ideas/models.py from django.db import models\nfrom django.conf import settings\nfrom django.utils.translation import gettext_lazy as _\n\nclass Idea(models.Model):\n    author = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        verbose_name=_(\"Author\"),\n        on_delete=models.SET_NULL,\n        blank=True,\n        null=True,\n    )\n    category = models.ForeignKey(\n        \"categories.Category\",\n        verbose_name=_(\"Category\"),\n        blank=True,\n        null=True,\n        on_delete=models.SET_NULL,\n    )\n    # other fields, attributes, properties and methods\u2026\n```", "```py\n# myproject/apps/categories/models.py\nfrom django.db import models\nfrom django.utils.translation import gettext_lazy as _\n\nclass Category(models.Model):\n    # fields, attributes, properties, and methods\u2026\n\n    def get_ideas_without_this_category(self):\n        from myproject.apps.ideas.models import Idea\n        return Idea.objects.exclude(category=self)\n```", "```py\n# myproject/settings/_base.py\n\nINSTALLED_APPS = [\n    # contributed\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    # third-party\n    # ...\n    # local\n    \"myproject.apps.core\",\n    \"myproject.apps.categories\",\n    \"myproject.apps.ideas\",\n]\n```", "```py\n# myproject/apps/ideas/models.py\nfrom django.db import models\nfrom django.conf import settings\nfrom django.utils.translation import gettext_lazy as _\n\nfrom myproject.apps.core.models import (\n CreationModificationDateBase,\n MetaTagsBase,\n UrlBase,\n)\n\nclass Idea(CreationModificationDateBase, MetaTagsBase, UrlBase):\n    # fields, attributes, properties, and methods\u2026\n```", "```py\n# myproject/apps/ideas/models.py\nfrom django.db import models\nfrom django.utils.translation import gettext_lazy as _\n\nclass Idea(models.Model):\n    author = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        verbose_name=_(\"Author\"),\n        on_delete=models.SET_NULL,\n        blank=True,\n        null=True,\n        related_name=\"authored_ideas\",\n    )\n    title = models.CharField(\n        _(\"Title\"),\n        max_length=200,\n    )\n\n    class Meta:\n        verbose_name = _(\"Idea\")\n        verbose_name_plural = _(\"Ideas\")\n        constraints = [\n models.UniqueConstraint(\n fields=[\"title\"],\n condition=~models.Q(author=None),\n name=\"unique_titles_for_each_author\",\n ),\n models.CheckConstraint(\n check=models.Q(\n title__iregex=r\"^\\S.*\\S$\"\n # starts with non-whitespace,\n # ends with non-whitespace,\n # anything in the middle\n ),\n name=\"title_has_no_leading_and_trailing_whitespaces\",\n )\n ]\n```", "```py\nideas_with_authors = Idea.objects.exclude(author=None)\nideas_with_authors2 = Idea.objects.filter(~models.Q(author=None))\n```", "```py\n# myproject/apps/ideas/models.py from django.db import models\nfrom django.conf import settings\nfrom django.core.exceptions import ValidationError\nfrom django.utils.translation import gettext_lazy as _\n\nclass Idea(models.Model):\n    author = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        verbose_name=_(\"Author\"),\n        on_delete=models.SET_NULL,\n        blank=True,\n        null=True,\n        related_name=\"authored_ideas2\",\n    )\n    title = models.CharField(\n        _(\"Title\"),\n        max_length=200,\n    )\n\n    # other fields and attributes\u2026\n\n    class Meta:\n        verbose_name = _(\"Idea\")\n        verbose_name_plural = _(\"Ideas\")\n        constraints = [\n            models.UniqueConstraint(\n                fields=[\"title\"],\n                condition=~models.Q(author=None),\n                name=\"unique_titles_for_each_author2\",\n            ),\n            models.CheckConstraint(\n                check=models.Q(\n                    title__iregex=r\"^\\S.*\\S$\"\n                    # starts with non-whitespace,\n                    # ends with non-whitespace,\n                    # anything in the middle\n                ),\n                name=\"title_has_no_leading_and_trailing_whitespaces2\",\n            )\n        ]\n\n def clean(self):\n import re\n if self.author and Idea.objects.exclude(pk=self.pk).filter(\n author=self.author,\n title=self.title,\n ).exists():\n raise ValidationError(\n _(\"Each idea of the same user should have a unique title.\")\n )\n if not re.match(r\"^\\S.*\\S$\", self.title):\n raise ValidationError(\n _(\"The title cannot start or end with a whitespace.\")\n )\n\n    # other properties and methods\u2026\n```", "```py\n(env)$ python manage.py makemigrations ideas\n```", "```py\n(env)$ python manage.py migrate\n```", "```py\n(env)$ python manage.py migrate ideas\n```", "```py\n(env)$ python manage.py makemigrations --name=subtitle_added ideas\n```", "```py\n(env)$ python manage.py makemigrations --name=populate_subtitle \\\n> --empty ideas\n```", "```py\n(env)$ python manage.py showmigrations\n```", "```py\n(env)$ python manage.py showmigrations ideas\n```", "```py\n(env)$ python manage.py migrate ideas 0002\n\n```", "```py\n(env)$ python manage.py migrate ideas zero\n```", "```py\n# myproject/apps/categories/models.py\nfrom django.db import models\nfrom django.utils.translation import gettext_lazy as _\n\nfrom myproject.apps.core.model_fields import MultilingualCharField\n\nclass Category(models.Model):\n    title = MultilingualCharField(\n        _(\"Title\"),\n        max_length=200,\n    )\n\n    class Meta:\n        verbose_name = _(\"Category\")\n        verbose_name_plural = _(\"Categories\")\n\n    def __str__(self):\n        return self.title\n```", "```py\n# myproject/apps/ideas/models.py from django.db import models\nfrom django.conf import settings\nfrom django.utils.translation import gettext_lazy as _\n\nfrom myproject.apps.core.model_fields import (\n    MultilingualCharField,\n    MultilingualTextField,\n)\n\nclass Idea(models.Model):\n    title = MultilingualCharField(\n        _(\"Title\"),\n        max_length=200,\n    )\n    content = MultilingualTextField(\n        _(\"Content\"),\n    )\n category = models.ForeignKey(\n        \"categories.Category\",\n        verbose_name=_(\"Category\"),\n        blank=True,\n        null=True,\n        on_delete=models.SET_NULL,\n        related_name=\"category_ideas\",\n    ) \n    class Meta:\n        verbose_name = _(\"Idea\")\n        verbose_name_plural = _(\"Ideas\")\n\n    def __str__(self):\n        return self.title\n```", "```py\n(env)$ python manage.py makemigrations categories\n(env)$ python manage.py makemigrations ideas\n(env)$ python manage.py migrate\n```", "```py\n# myproject/apps/ideas/models.py from django.db import models\nfrom django.conf import settings\nfrom django.utils.translation import gettext_lazy as _\n\nfrom myproject.apps.core.model_fields import (\n    MultilingualCharField,\n    MultilingualTextField,\n)\n\nclass Idea(models.Model):\n    title = MultilingualCharField(\n        _(\"Title\"),\n        max_length=200,\n    )\n    content = MultilingualTextField(\n        _(\"Content\"),\n    )\n    category = models.ForeignKey(\n        \"categories.Category\",\n        verbose_name=_(\"Category\"),\n        blank=True,\n        null=True,\n        on_delete=models.SET_NULL,\n        related_name=\"category_ideas\",\n    )\n    categories = models.ManyToManyField(\n \"categories.Category\",\n verbose_name=_(\"Categories\"),\n blank=True,\n related_name=\"ideas\",\n )\n\n    class Meta:\n        verbose_name = _(\"Idea\")\n        verbose_name_plural = _(\"Ideas\")\n\n    def __str__(self):\n        return self.title\n```", "```py\n(env)$ python manage.py makemigrations ideas\n(env)$ python manage.py migrate ideas\n```", "```py\n(env)$ python manage.py makemigrations --empty \\\n> --name=copy_categories ideas\n```", "```py\n# myproject/apps/ideas/migrations/0003_copy_categories.py from django.db import migrations\n\ndef copy_categories(apps, schema_editor):\n Idea = apps.get_model(\"ideas\", \"Idea\")\n for idea in Idea.objects.all():\n if idea.category:\n idea.categories.add(idea.category)\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('ideas', '0002_idea_categories'),\n    ]\n\n    operations = [\n        migrations.RunPython(copy_categories),\n    ]\n```", "```py\n(env)$ python manage.py migrate ideas\n```", "```py\n# myproject/apps/ideas/models.py from django.db import models\nfrom django.conf import settings\nfrom django.utils.translation import gettext_lazy as _\n\nfrom myproject.apps.core.model_fields import (\n    MultilingualCharField,\n    MultilingualTextField,\n)\n\nclass Idea(models.Model):\n    title = MultilingualCharField(\n        _(\"Title\"),\n        max_length=200,\n    )\n    content = MultilingualTextField(\n        _(\"Content\"),\n    )\n\n    categories = models.ManyToManyField(\n \"categories.Category\",\n verbose_name=_(\"Categories\"),\n blank=True,\n related_name=\"ideas\",\n )\n\n    class Meta:\n        verbose_name = _(\"Idea\")\n        verbose_name_plural = _(\"Ideas\")\n\n    def __str__(self):\n        return self.title\n```", "```py\n(env)$ python manage.py makemigrations ideas\n(env)$ python manage.py migrate ideas\n```"]