["```py\n# myproject/settings/_base.py TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [os.path.join(BASE_DIR, \"myproject\", \"templates\")],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",\n                \"django.contrib.messages.context_processors.messages\",\n                \"django.template.context_processors.media\",\n                \"django.template.context_processors.static\",\n            ]\n        },\n    }\n]\n```", "```py\n{# base.html #}\n<!doctype html>\n{% load i18n static %}\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-\n     scale=1, shrink-to-fit=no\" />\n    <title>{% block head_title %}{% endblock %}</title>\n    {% include \"misc/includes/favicons.html\" %}\n {% block meta_tags %}{% endblock %}\n\n    <link rel=\"stylesheet\"\n          href=\"https://stackpath.bootstrapcdn.com/bootstrap\n           /4.3.1/css/bootstrap.min.css\"\n          integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784\n           /j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n          crossorigin=\"anonymous\" />\n    <link rel=\"stylesheet\"\n          href=\"{% static 'site/css/style.css' %}\"\n          crossorigin=\"anonymous\" />\n\n    {% block css %}{% endblock %}\n    {% block extra_head %}{% endblock %}\n</head>\n<body>\n    {% include \"misc/includes/header.html\" %}\n    <div class=\"container my-5\">\n {% block content %}\n <div class=\"row\">\n <div class=\"col-lg-4\">{% block sidebar %}\n                 {% endblock %}</div>\n <div class=\"col-lg-8\">{% block main %}\n                 {% endblock %}</div>\n </div>\n {% endblock %}\n </div>\n    {% include \"misc/includes/footer.html\" %}\n    <script src=\"img/jquery-3.4.1.min.js\"\n            crossorigin=\"anonymous\"></script>\n    <script src=\"img/popper.min.js\"\n            integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj\n             9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\"\n            crossorigin=\"anonymous\"></script>\n    <script src=\"img/bootstrap.min.js\"\n            integrity=\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6Vrj\n             IEaFf/nJGzIxFDsf4x0xIM+B07jRM\"\n            crossorigin=\"anonymous\"></script>\n    {% block js %}{% endblock %}\n    {% block extra_body %}{% endblock %}\n</body>\n</html>\n```", "```py\n{# misc/includes/favicon.html #}\n{% load static %}\n<link rel=\"icon\" type=\"image/png\" href=\"{% static 'site/img/favicon-32x32.png' %}\" sizes=\"32x32\"/>\n<link rel=\"icon\" type=\"image/png\" href=\"{% static 'site/img/favicon-16x16.png' %}\" sizes=\"16x16\"/>\n```", "```py\n(env)$ pip install -e git+https://github.com/divio/django-classy-tags.git@4c94d0354eca1600ad2ead9c3c151ad57af398a4#egg=django-classy-tags\n(env)$ pip install django-sekizai==1.0.0\n```", "```py\n# myproject/settings/_base.py\nINSTALLED_APPS = [\n    # \u2026\n    \"sekizai\",\n    # \u2026\n]\n```", "```py\n# myproject/settings/_base.py\nTEMPLATES = [\n    {\n        \"BACKEND\": \n        \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [os.path.join(BASE_DIR, \"myproject\", \"templates\")],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",\n                \"django.contrib.messages.context_processors\n                 .messages\",\n                \"django.template.context_processors.media\",\n                \"django.template.context_processors.static\",\n \"sekizai.context_processors.sekizai\",\n            ]\n        },\n    }\n]\n```", "```py\n{# base.html #}\n<!doctype html>\n{% load i18n static sekizai_tags %}\n```", "```py\n    {% block css %}{% endblock %}\n    {% render_block \"css\" %}\n    {% block extra_head %}{% endblock %}\n</head>\n```", "```py\n    {% block js %}{% endblock %}\n    {% render_block \"js\" %}\n    {% block extra_body %}{% endblock %}\n</body>\n```", "```py\n{% load static sekizai_tags %}\n\n<div>Sample widget</div>\n {% addtoblock \"css\" %}\n<link rel=\"stylesheet\" href=\"{% static 'site/css/sample-widget.css' \n  %}\"/>\n{% endaddtoblock %}\n\n{% addtoblock \"js\" %}\n<script src=\"img/sample-widget.js' %}\"></script>\n{% endaddtoblock %}\n```", "```py\n# myproject/settings/_base.py\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [os.path.join(BASE_DIR, \"myproject\", \"templates\")],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n\"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",\n                \"django.contrib.messages.context_processors.messages\",\n                \"django.template.context_processors.media\",\n                \"django.template.context_processors.static\",\n                \"sekizai.context_processors.sekizai\",\n            ]\n        },\n    }\n]\n```", "```py\nINSTALLED_APPS = [\n    # \u2026\n    \"myproject.apps.core\",\n    # \u2026\n]\n```", "```py\n# myproject/apps/core/views.py import json\nfrom django.http import HttpResponse\nfrom django.template import Template, Context\nfrom django.views.decorators.cache import cache_page\nfrom django.conf import settings\n\nJS_SETTINGS_TEMPLATE = \"\"\"\nwindow.settings = JSON.parse('{{ json_data|escapejs }}');\n\"\"\"\n\n@cache_page(60 * 15)\ndef js_settings(request):\n    data = {\n        \"MEDIA_URL\": settings.MEDIA_URL,\n        \"STATIC_URL\": settings.STATIC_URL,\n        \"DEBUG\": settings.DEBUG,\n        \"LANGUAGES\": settings.LANGUAGES,\n        \"DEFAULT_LANGUAGE_CODE\": settings.LANGUAGE_CODE,\n        \"CURRENT_LANGUAGE_CODE\": request.LANGUAGE_CODE,\n    }\n    json_data = json.dumps(data)\n    template = Template(JS_SETTINGS_TEMPLATE)\n    context = Context({\"json_data\": json_data})\n    response = HttpResponse(\n        content=template.render(context),\n        content_type=\"application/javascript; charset=UTF-8\",\n    )\n    return response\n```", "```py\n# myproject/urls.py from django.conf.urls.i18n import i18n_patterns\nfrom django.urls import include, path\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nfrom myproject.apps.core import views as core_views\n\nurlpatterns = i18n_patterns(\n    # other URL configuration rules\u2026\n path(\"js-settings/\", core_views.js_settings, \n     name=\"js_settings\"),\n)\n\nurlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)\nurlpatterns += static(\"/media/\", document_root=settings.MEDIA_ROOT)\n```", "```py\n{# base.html #}    \n\n    {# \u2026 #}\n\n    <script src=\"img/{% url 'js_settings' %}\"></script>\n    {% block js %}{% endblock %}\n    {% render_block \"js\" %}\n    {% block extra_body %}{% endblock %}\n</body>\n</html>\n```", "```py\nif (window.settings.DEBUG) {\n    console.warn('The website is running in DEBUG mode!');\n}\n```", "```py\n# http://127.0.0.1:8000/en/js-settings/\nwindow.settings = JSON.parse('{\\u0022MEDIA_URL\\u0022: \\u0022http://127.0.0.1:8000/media/\\u0022, \\u0022STATIC_URL\\u0022: \\u0022/static/20191001004640/\\u0022, \\u0022DEBUG\\u0022: true, \\u0022LANGUAGES\\u0022: [[\\u0022bg\\u0022, \\u0022Bulgarian\\u0022], [\\u0022hr\\u0022, \\u0022Croatian\\u0022], [\\u0022cs\\u0022, \\u0022Czech\\u0022], [\\u0022da\\u0022, \\u0022Danish\\u0022], [\\u0022nl\\u0022, \\u0022Dutch\\u0022], [\\u0022en\\u0022, \\u0022English\\u0022], [\\u0022et\\u0022, \\u0022Estonian\\u0022], [\\u0022fi\\u0022, \\u0022Finnish\\u0022], [\\u0022fr\\u0022, \\u0022French\\u0022], [\\u0022de\\u0022, \\u0022German\\u0022], [\\u0022el\\u0022, \\u0022Greek\\u0022], [\\u0022hu\\u0022, \\u0022Hungarian\\u0022], [\\u0022ga\\u0022, \\u0022Irish\\u0022], [\\u0022it\\u0022, \\u0022Italian\\u0022], [\\u0022lv\\u0022, \\u0022Latvian\\u0022], [\\u0022lt\\u0022, \\u0022Lithuanian\\u0022], [\\u0022mt\\u0022, \\u0022Maltese\\u0022], [\\u0022pl\\u0022, \\u0022Polish\\u0022], [\\u0022pt\\u0022, \\u0022Portuguese\\u0022], [\\u0022ro\\u0022, \\u0022Romanian\\u0022], [\\u0022sk\\u0022, \\u0022Slovak\\u0022], [\\u0022sl\\u0022, \\u0022Slovene\\u0022], [\\u0022es\\u0022, \\u0022Spanish\\u0022], [\\u0022sv\\u0022, \\u0022Swedish\\u0022]], \\u0022DEFAULT_LANGUAGE_CODE\\u0022: \\u0022en\\u0022, \\u0022CURRENT_LANGUAGE_CODE\\u0022: \\u0022en\\u0022}');\n```", "```py\n# myproject/settings/_base.py\nDATABASES = {\n    \"default\": {\n \"ENGINE\": \"django.contrib.gis.db.backends.postgis\",\n        \"NAME\": get_secret(\"DATABASE_NAME\"),\n        \"USER\": get_secret(\"DATABASE_USER\"),\n        \"PASSWORD\": get_secret(\"DATABASE_PASSWORD\"),\n        \"HOST\": \"localhost\",\n        \"PORT\": \"5432\",\n    }\n}\n```", "```py\n# myproject/apps/locations/models.py import uuid\nfrom collections import namedtuple\nfrom django.contrib.gis.db import models\nfrom django.urls import reverse\nfrom django.conf import settings\nfrom django.utils.translation import gettext_lazy as _\nfrom myproject.apps.core.models import (\n    CreationModificationDateBase, UrlBase\n)\n\nCOUNTRY_CHOICES = getattr(settings, \"COUNTRY_CHOICES\", [])\n\nGeoposition = namedtuple(\"Geoposition\", [\"longitude\", \"latitude\"])\n\nclass Location(CreationModificationDateBase, UrlBase):\n    uuid = models.UUIDField(primary_key=True, default=None, \n     editable=False)\n    name = models.CharField(_(\"Name\"), max_length=200)\n    description = models.TextField(_(\"Description\"))\n    street_address = models.CharField(_(\"Street address\"), \n     max_length=255, blank=True)\n    street_address2 = models.CharField(\n        _(\"Street address (2nd line)\"), max_length=255, blank=True\n    )\n    postal_code = models.CharField(_(\"Postal code\"), \n     max_length=255, blank=True)\n    city = models.CharField(_(\"City\"), max_length=255, \n     blank=True)\n    country = models.CharField(\n        _(\"Country\"), choices=COUNTRY_CHOICES, max_length=255, \n           blank=True\n    )\n    geoposition = models.PointField(blank=True, null=True)\n\n    class Meta:\n        verbose_name = _(\"Location\")\n        verbose_name_plural = _(\"Locations\")\n\n    def __str__(self):\n        return self.name\n\n    def get_url_path(self):\n        return reverse(\"locations:location_detail\", kwargs={\"pk\": \n         self.pk})\n```", "```py\ndef save(self, *args, **kwargs):\n        if self.pk is None:\n            self.pk = uuid.uuid4()\n        super().save(*args, **kwargs)\n```", "```py\n def get_field_value(self, field_name):\n        if isinstance(field_name, str):\n            value = getattr(self, field_name)\n            if callable(value):\n                value = value()\n            return value\n        elif isinstance(field_name, (list, tuple)):\n            field_names = field_name\n            values = []\n            for field_name in field_names:\n                value = self.get_field_value(field_name)\n                if value:\n                    values.append(value)\n            return \" \".join(values)\n        return \"\"\n\n    def get_full_address(self):\n        field_names = [\n            \"name\",\n            \"street_address\",\n            \"street_address\",\n            (\"postal_code\", \"city\"),\n            \"get_country_display\",\n        ]\n        full_address = []\n        for field_name in field_names:\n            value = self.get_field_value(field_name)\n            if value:\n                full_address.append(value)\n        return \", \".join(full_address)\n```", "```py\n def get_geoposition(self):\n        if not self.geoposition:\n            return None\n        return Geoposition(\n            self.geoposition.coords[0], self.geoposition.coords[1]\n        )\n\n    def set_geoposition(self, longitude, latitude): from django.contrib.gis.geos import Point\n        self.geoposition = Point(longitude, latitude, srid=4326)\n```", "```py\n# myproject/apps/locations/admin.py from django.contrib.gis import admin\nfrom .models import Location\n\n@admin.register(Location)\nclass LocationAdmin(admin.OSMGeoAdmin):\n    pass\n```", "```py\n# myproject/settings/_base.py # \u2026GOOGLE_MAPS_API_KEY = get_secret(\"GOOGLE_MAPS_API_KEY\")\n```", "```py\n# myproject/apps/core/context_processors.py from django.conf import settings\n\ndef google_maps(request):\n    return {\n        \"GOOGLE_MAPS_API_KEY\": settings.GOOGLE_MAPS_API_KEY,\n    }\n```", "```py\n# myproject/settings/_base.py\nTEMPLATES = [\n    {\n        \"BACKEND\": \n        \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [os.path.join(BASE_DIR, \"myproject\", \"templates\")],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",\n                \"django.contrib.messages.context_processors\n                 .messages\",\n                \"django.template.context_processors.media\",\n                \"django.template.context_processors.static\",\n                \"sekizai.context_processors.sekizai\",\n \"myproject.apps.core.context_processors\n                 .google_maps\",\n            ]\n        },\n    }\n]\n```", "```py\n# myproject/apps/locations/views.py from django.views.generic import ListView, DetailView\nfrom .models import Location\n\nclass LocationList(ListView):\n    model = Location\n    paginate_by = 10\n\nclass LocationDetail(DetailView):\n    model = Location\n    context_object_name = \"location\"\n```", "```py\n# myproject/apps/locations/urls.py from django.urls import path\nfrom .views import LocationList, LocationDetail\n\nurlpatterns = [\n    path(\"\", LocationList.as_view(), name=\"location_list\"),\n    path(\"<uuid:pk>/\", LocationDetail.as_view(), \n     name=\"location_detail\"),\n]\n```", "```py\n# myproject/urls.py from django.contrib import admin\nfrom django.conf.urls.i18n import i18n_patterns\nfrom django.urls import include, path\nfrom django.conf import settings\nfrom django.conf.urls.static import static\nfrom django.shortcuts import redirect\n\nfrom myproject.apps.core import views as core_views\n\nurlpatterns = i18n_patterns(\n    path(\"\", lambda request: redirect(\"locations:location_list\")),\n    path(\"admin/\", admin.site.urls),\n    path(\"accounts/\", include(\"django.contrib.auth.urls\")),\n    path(\"locations/\", include((\"myproject.apps.locations.urls\", \n    \"locations\"), namespace=\"locations\")),\n    path(\"js-settings/\", core_views.js_settings, \n     name=\"js_settings\"),\n)\nurlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)\nurlpatterns += static(\"/media/\", document_root=settings.MEDIA_ROOT)\n```", "```py\n{# locations/location_list.html #} {% extends \"base.html\" %}\n{% load i18n %}\n\n{% block content %}\n    <h1>{% trans \"Interesting Locations\" %}</h1>\n    {% if object_list %}\n        <ul>\n            {% for location in object_list %}\n                <li><a href=\"{{ location.get_url_path }}\">\n                    {{ location.name }}\n </a></li>\n            {% endfor %}\n        </ul>\n    {% else %}\n        <p>{% trans \"There are no locations yet.\" %}</p>\n    {% endif %}\n{% endblock %}\n```", "```py\n{# locations/location_detail.html #} {% extends \"base.html\" %}\n{% load i18n static %}\n\n{% block content %}\n    <a href=\"{% url \"locations:location_list\" %}\">{% trans \n     \"Interesting Locations\" %}</a>\n    <h1 class=\"map-title\">{{ location.name }}</h1>\n    <div class=\"my-3\">\n        {{ location.description|linebreaks|urlize }}\n    </div>\n    {% with geoposition=location.get_geoposition %}\n <div id=\"map\" class=\"mb-3\"\n data-latitude=\"{{ geoposition.latitude|stringformat:\"f\" }}\"\n data-longitude=\"{{ geoposition.longitude|stringformat:\"f\" }}\"\n data-address=\"{{ location.get_full_address }}\"></div>\n {% endwith %}\n{% endblock %}\n```", "```py\n{% block js %}\n <script src=\"img/location_detail.js' %}\"></script>\n <script async defer src=\"img/js?key={{ GOOGLE_MAPS_API_KEY }}&callback=Location.init\"></script>\n{% endblock %}\n```", "```py\n/* site_static/site/js/location_detail.js */ (function(window) {\n    \"use strict\";\n\n    function Location() {\n        this.case = document.getElementById(\"map\");\n        if (this.case) {\n            this.getCoordinates();\n            this.getAddress();\n            this.getMap();\n            this.getMarker();\n            this.getInfoWindow();\n        }\n    }\n\n    Location.prototype.getCoordinates = function() {\n        this.coords = {\n            lat: parseFloat(this.case.getAttribute(\"data-\n             latitude\")),\n            lng: parseFloat(this.case.getAttribute(\"data-\n             longitude\"))\n        };\n    };\n\n    Location.prototype.getAddress = function() {\n        this.address = this.case.getAttribute(\"data-address\");\n    };\n\n    Location.prototype.getMap = function() {\n        this.map = new google.maps.Map(this.case, {\n            zoom: 15,\n            center: this.coords\n        });\n    };\n\n    Location.prototype.getMarker = function() {\n        this.marker = new google.maps.Marker({\n            position: this.coords,\n            map: this.map\n        });\n    };\n\n    Location.prototype.getInfoWindow = function() {\n        var self = this;\n        var wrap = this.case.parentNode;\n        var title = wrap.querySelector(\".map-title\").textContent;\n\n        this.infoWindow = new google.maps.InfoWindow({\n            content: \"<h3>\"+title+\"</h3><p>\"+this.address+\"</p>\"\n        });\n\n        this.marker.addListener(\"click\", function() {\n            self.infoWindow.open(self.map, self.marker);\n        });\n    };\n\n    var instance;\n    Location.init = function() {\n        // called by Google Maps service automatically once loaded\n        // but is designed so that Location is a singleton\n        if (!instance) {\n            instance = new Location();\n        }\n    };\n\n    // expose in the global namespace\n    window.Location = Location;\n}(window));\n```", "```py\n/* site_static/site/css/style.css */ #map {\n    box-sizing: padding-box;\n    height: 0;\n    padding-bottom: calc(9 / 16 * 100%); /* 16:9 aspect ratio */\n    width: 100%;\n}\n@media screen and (max-width: 480px) {\n    #map {\n        display: none; /* hide on mobile devices (esp. portrait) */\n    }\n}\n```", "```py\n(env)$ pip install django-imagekit==4.0.2\n\n```", "```py\n# myproject/settings/_base.py INSTALLED_APPS = [\n    # \u2026\n    \"imagekit\",\n    # \u2026\n]\n```", "```py\n# myproject/apps/locations/models.py import contextlib\nimport os\n# \u2026\nfrom imagekit.models import ImageSpecField\nfrom pilkit.processors import ResizeToFill\n# \u2026\n\ndef upload_to(instance, filename):\n    now = timezone_now()\n    base, extension = os.path.splitext(filename)\n    extension = extension.lower()\n    return f\"locations/{now:%Y/%m}/{instance.pk}{extension}\"\n```", "```py\nclass Location(CreationModificationDateBase, UrlBase):\n    # \u2026\n    picture = models.ImageField(_(\"Picture\"), upload_to=upload_to)\n    picture_desktop = ImageSpecField(\n        source=\"picture\",\n        processors=[ResizeToFill(1200, 600)],\n        format=\"JPEG\",\n        options={\"quality\": 100},\n    )\n    picture_tablet = ImageSpecField(\n        source=\"picture\", processors=[ResizeToFill(768, 384)], \n         format=\"PNG\"\n    )\n    picture_mobile = ImageSpecField(\n        source=\"picture\", processors=[ResizeToFill(640, 320)], \n         format=\"PNG\"\n    )\n```", "```py\ndef delete(self, *args, **kwargs):\n    from django.core.files.storage import default_storage\n\n    if self.picture:\n        with contextlib.suppress(FileNotFoundError):\n            default_storage.delete(self.picture_desktop.path)\n            default_storage.delete(self.picture_tablet.path)\n            default_storage.delete(self.picture_mobile.path)\n        self.picture.delete()\n\n    super().delete(*args, **kwargs)\n```", "```py\n{# locations/location_detail.html #}\n{% extends \"base.html\" %}\n{% load i18n static %}\n\n{% block content %}\n    <a href=\"{% url \"locations:location_list\" %}\">{% trans \n     \"Interesting Locations\" %}</a>\n    <h1 class=\"map-title\">{{ location.name }}</h1>\n {% if location.picture %}\n <picture class=\"img-fluid\">\n <source\n                media=\"(max-width: 480px)\"\n                srcset=\"{{ location.picture_mobile.url }}\" />\n <source\n                media=\"(max-width: 768px)\"\n                srcset=\"{{ location.picture_tablet.url }}\" />\n <img\n                src=\"img/{{ location.picture_desktop.url }}\"\n                alt=\"{{ location.name }}\"\n                class=\"img-fluid\"\n            />\n </picture>\n {% endif %}    {# \u2026 #}\n{% endblock %}\n\n{% block js %}\n    {# \u2026 #}\n{% endblock %}\n```", "```py\n# myproject/apps/locations/models.py # \u2026\nRATING_CHOICES = ((1, \"\u2605\u2606\u2606\u2606\u2606\"), (2, \"\u2605\u2605\u2606\u2606\u2606\"), (3, \"\u2605\u2605\u2605\u2606\u2606\"), (4, \"\u2605\u2605\u2605\u2605\u2606\"), (5, \"\u2605\u2605\u2605\u2605\u2605\"))\n\nclass Location(CreationModificationDateBase, UrlBase):\n    # \u2026\n\n    rating = models.PositiveIntegerField(\n        _(\"Rating\"), choices=RATING_CHOICES, blank=True, null=True\n    )\n\n    # \u2026\n\n    def get_rating_percentage(self):\n return self.rating * 20 if self.rating is not None else None\n\n```", "```py\n{# locations/location_list.html #} {% extends \"base.html\" %}\n{% load i18n static utility_tags %}\n\n{% block content %}\n    <div class=\"row\">\n        <div class=\"col-lg-8\">\n            <h1>{% trans \"Interesting Locations\" %}</h1>\n            {% if object_list %}\n                <div class=\"item-list\">\n {% for location in object_list %}\n                        <a href=\"{{ location.get_url_path }}\"\n                           class=\"item d-block my-3\">\n                            <div class=\"card\">\n                                <div class=\"card-body\">\n                                    <div class=\"float-right\">\n                                        <div class=\"rating\" aria-\n                                          label=\"{% blocktrans with \n                                           stars=location.rating %}\n                                           {{ stars }} of 5 stars\n                                            {% endblocktrans %}\">\n                                            <span style=\"width:{{ \n                                           location.get_rating\n                                        _percentage }}%\"></span>\n                                        </div>\n                                    </div>\n                                    <p class=\"card-text\">{{ \n                                        location.name }}<br/>\n                                        <small>{{ location.city }},\n\n                                         {{location.get_country\n                                          _display }}</small>\n                                    </p>\n                                </div>\n                            </div>\n                        </a>\n {% endfor %}\n {% if page_obj.has_next %}\n <div class=\"text-center\">\n <div class=\"loading-indicator\"></div>\n </div>\n <p class=\"pagination\">\n <a class=\"next-page\"\n href=\"{% modify_query    \n                               page=page_obj.next_page_number %}\">\n {% trans \"More...\" %}</a>\n </p>\n {% endif %}\n                </div>\n            {% else %}\n                <p>{% trans \"There are no locations yet.\" %}</p>\n            {% endif %}\n        </div>\n        <div class=\"col-lg-4\">\n            {% include \"locations/includes/navigation.html\" %}\n        </div>\n    </div>\n{% endblock %}\n```", "```py\n{% block css %}\n    <link rel=\"stylesheet\" type=\"text/css\"\n          href=\"{% static 'site/css/rating.css' %}\">\n{% endblock %}\n\n{% block js %}\n    <script src=\"img/jquery.jscroll.min.js\"></script>\n    <script src=\"img/list.js' %}\"></script>\n{% endblock %}\n```", "```py\n{% block extra_body %}\n    <script type=\"text/template\" class=\"loader\">\n        <div class=\"text-center\">\n            <div class=\"loading-indicator\"></div>\n        </div>\n    </script>\n{% endblock %}\n```", "```py\n/* site_static/site/js/list.js */ jQuery(function ($) {\n    var $list = $('.item-list');\n    var $loader = $('script[type=\"text/template\"].loader');\n    $list.jscroll({\n        loadingHtml: $loader.html(),\n        padding: 100,\n        pagingSelector: '.pagination',\n        nextSelector: 'a.next-page:last',\n        contentSelector: '.item,.pagination'\n    });\n});\n```", "```py\n/* site_static/site/css/rating.css */ .rating {\n  color: #c90;\n  display: block;\n  position: relative;\n  margin: 0;\n  padding: 0;\n  white-space: nowrap;\n}\n\n.rating span {\n  color: #fc0;\n  display: block;\n  position: absolute;\n  overflow: hidden;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  white-space: nowrap;\n}\n\n.rating span:before,\n.rating span:after {\n  display: block;\n  position: absolute;\n  overflow: hidden;\n  left: 0;\n  top: 0;\n  bottom: 0;\n}\n\n.rating:before {\n  content: \"\u2606\u2606\u2606\u2606\u2606\";\n}\n\n.rating span:after {\n  content: \"\u2605\u2605\u2605\u2605\u2605\";\n}\n```", "```py\n/* site_static/site/css/style.css */ /* \u2026 */\n.loading-indicator {\n  display: inline-block;\n  width: 45px;\n  height: 45px;\n}\n.loading-indicator:after {\n  content: \"\";\n  display: block;\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  border: 5px solid rgba(0,0,0,.25);\n  border-color: rgba(0,0,0,.25) transparent rgba(0,0,0,.25) \n   transparent;\n  animation: dual-ring 1.2s linear infinite;\n}\n@keyframes dual-ring {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n```", "```py\n# myproject/apps/locations/urls.py from django.urls import path\nfrom .views import LocationList, LocationDetail\n\nurlpatterns = [\n    path(\"\", LocationList.as_view(), name=\"location_list\"),\n    path(\"add/\", add_or_change_location, name=\"add_location\"),\n    path(\"<uuid:pk>/\", LocationDetail.as_view(), \n     name=\"location_detail\"),\n    path(\n \"<uuid:pk>/modal/\",\n LocationDetail.as_view(template_name=\n         \"locations/location_detail_modal.html\"),\n name=\"location_detail_modal\",\n ),\n]\n```", "```py\n{# locations/location_detail_modal.html #}\n{% load i18n %}\n<p class=\"text-center\">\n    {% if location.picture %}\n        <picture class=\"img-fluid\">\n            <source media=\"(max-width: 480px)\"\n                    srcset=\"{{ location.picture_mobile.url }}\"/>\n            <source media=\"(max-width: 768px)\"\n                    srcset=\"{{ location.picture_tablet.url }}\"/>\n            <img src=\"img/{{ location.picture_desktop.url }}\"\n                 alt=\"{{ location.name }}\"\n                 class=\"img-fluid\"\n            />\n        </picture>\n    {% endif %}\n</p>\n<div class=\"modal-footer text-right\">\n    <a href=\"{% url \"locations:location_detail\" pk=location.pk %}\" \n     class=\"btn btn-primary pull-right\">\n        {% trans \"Learn more\u2026\" %}\n    </a>\n</div>\n```", "```py\n{# locations/location_list.html #} {# \u2026 #}\n<a href=\"{{ location.get_url_path }}\"\n   data-modal-title=\"{{ location.get_full_address }}\"\n   data-modal-url=\"{% url 'locations:location_detail_modal' \n    pk=location.pk %}\"\n   class=\"item d-block my-3\">\n    {# \u2026 #}\n</a>\n{# \u2026 #}\n```", "```py\n{% block extra_body %}\n    {# \u2026 #}\n <div id=\"modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\"\n         aria-hidden=\"true\" aria-labelledby=\"modal_title\">\n <div class=\"modal-dialog modal-dialog-centered\"\n             role=\"document\">\n <div class=\"modal-content\">\n <div class=\"modal-header\">\n <h4 id=\"modal_title\"\n                        class=\"modal-title\"></h4>\n <button type=\"button\" class=\"close\"\n                            data-dismiss=\"modal\"\n                            aria-label=\"{% trans 'Close' %}\">\n <span aria-hidden=\"true\">&times;</span>\n </button>\n </div>\n <div class=\"modal-body\"></div>\n </div>\n </div>\n </div>\n{% endblock %}\n```", "```py\n/* site_static/js/list.js */ /* \u2026 */\njQuery(function ($) {\n    var $list = $('.item-list');\n    var $modal = $('#modal');\n    $modal.on('click', '.close', function (event) {\n        $modal.modal('hide');\n        // do something when dialog is closed\u2026\n    });\n    $list.on('click', 'a.item', function (event) {\n        var $link = $(this);\n        var url = $link.data('modal-url');\n        var title = $link.data('modal-title');\n        if (url && title) {\n            event.preventDefault();\n            $('.modal-title', $modal).text(title);\n            $('.modal-body', $modal).load(url, function () {\n                $modal.on('shown.bs.modal', function () {\n                    // do something when dialog is shown\u2026\n                }).modal('show');\n            });\n        }\n    });\n});\n```", "```py\n# myproject/apps/likes/models.py from django.db import models\nfrom django.utils.translation import ugettext_lazy as _\nfrom django.conf import settings\n\nfrom myproject.apps.core.models import (\n    CreationModificationDateBase,\n    object_relation_base_factory,\n)\n\nLikeableObject = object_relation_base_factory(is_required=True)\n\nclass Like(CreationModificationDateBase, LikeableObject):\n    class Meta:\n        verbose_name = _(\"Like\")\n        verbose_name_plural = _(\"Likes\")\n        ordering = (\"-created\",)\n\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, \n     on_delete=models.CASCADE)\n\n    def __str__(self):\n        return _(\"{user} likes {obj}\").format(user=self.user, \n         obj=self.content_object)\n```", "```py\n# myproject/settings/_base.py # \u2026\nMIDDLEWARE = [\n    # \u2026\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    # \u2026\n]\n\nTEMPLATES = [\n    {\n        # \u2026\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.request\",\n                # \u2026\n            ]\n        },\n    }\n]\n```", "```py\n# myproject/apps/likes/templatetags/likes_tags.py from django import template\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.template.loader import render_to_string\n\nfrom ..models import Like\n\nregister = template.Library()\n\n# TAGS\n\nclass ObjectLikeWidget(template.Node):\n    def __init__(self, var):\n        self.var = var\n\n    def render(self, context):\n        liked_object = self.var.resolve(context)\n        ct = ContentType.objects.get_for_model(liked_object)\n        user = context[\"request\"].user\n\n        if not user.is_authenticated:\n            return \"\"\n\n        context.push(object=liked_object, content_type_id=ct.pk)\n        output = render_to_string(\"likes/includes/widget.html\", \n         context.flatten())\n        context.pop()\n        return output\n\n@register.tag\ndef like_widget(parser, token):\n    try:\n        tag_name, for_str, var_name = token.split_contents()\n    except ValueError:\n        tag_name = \"%r\" % token.contents.split()[0]\n        raise template.TemplateSyntaxError(\n            f\"{tag_name} tag requires a following syntax: \"\n            f\"{{% {tag_name} for <object> %}}\"\n        )\n    var = template.Variable(var_name)\n    return ObjectLikeWidget(var)\n\n```", "```py\n# myproject/apps/likes/templatetags/likes_tags.py # \u2026\n# FILTERS\n\n@register.filter\ndef liked_by(obj, user):\n    ct = ContentType.objects.get_for_model(obj)\n    liked = Like.objects.filter(user=user, content_type=ct, object_id=obj.pk)\n    return liked.count() > 0\n\n@register.filter\ndef liked_count(obj):\n    ct = ContentType.objects.get_for_model(obj)\n    likes = Like.objects.filter(content_type=ct, object_id=obj.pk)\n    return likes.count()\n```", "```py\n# myproject/apps/likes/urls.py from django.urls import path\nfrom .views import json_set_like\n\nurlpatterns = [\n    path(\"<int:content_type_id>/<str:object_id>/\",\n         json_set_like,\n         name=\"json_set_like\")\n]\n```", "```py\n# myproject/urls.py from django.conf.urls.i18n import i18n_patterns\nfrom django.urls import include, path\n\nurlpatterns = i18n_patterns(\n    # \u2026\n path(\"likes/\", include((\"myproject.apps.likes.urls\", \"likes\"), \n     namespace=\"likes\")),\n)\n```", "```py\n# myproject/apps/likes/views.py from django.contrib.contenttypes.models import ContentType\nfrom django.http import JsonResponse\nfrom django.views.decorators.cache import never_cache\nfrom django.views.decorators.csrf import csrf_exempt\n\nfrom .models import Like\nfrom .templatetags.likes_tags import liked_count\n\n@never_cache\n@csrf_exempt\ndef json_set_like(request, content_type_id, object_id):\n    \"\"\"\n    Sets the object as a favorite for the current user\n    \"\"\"\n    result = {\n        \"success\": False,\n    }\n    if request.user.is_authenticated and request.method == \"POST\":\n        content_type = ContentType.objects.get(id=content_type_id)\n        obj = content_type.get_object_for_this_type(pk=object_id)\n\n        like, is_created = Like.objects.get_or_create(\n            content_type=ContentType.objects.get_for_model(obj),\n            object_id=obj.pk,\n            user=request.user)\n        if not is_created:\n            like.delete()\n\n        result = {\n            \"success\": True,\n            \"action\": \"add\" if is_created else \"remove\",\n            \"count\": liked_count(obj),\n        }\n\n    return JsonResponse(result)\n```", "```py\n{# locations/location_detail.html #} {% extends \"base.html\" %}\n{% load i18n static likes_tags %}\n\n{% block content %}\n    <a href=\"{% url \"locations:location_list\" %}\">{% trans \n     \"Interesting Locations\" %}</a>\n    <div class=\"float-right\">\n {% if request.user.is_authenticated %}\n {% like_widget for location %}\n {% endif %}\n    </div>\n    <h1 class=\"map-title\">{{ location.name }}</h1>\n    {# \u2026 #}\n{% endblock %}\n```", "```py\n{# likes/includes/widget.html #}\n{% load i18n static likes_tags sekizai_tags %}\n<p class=\"like-widget\">\n    <button type=\"button\"\n            class=\"like-button btn btn-primary{% if object|\n liked_by:request.user %} active{% endif %}\"\n            data-href=\"{% url \"likes:json_set_like\" \n             content_type_id=content_type_id \n             object_id=object.pk %}\"\n            data-remove-label=\"{% trans \"Like\" %}\"\n            data-add-label=\"{% trans \"Unlike\" %}\">\n        {% if object|liked_by:request.user %}\n            {% trans \"Unlike\" %}\n        {% else %}\n            {% trans \"Like\" %}\n        {% endif %}\n    </button>\n    <span class=\"like-badge badge badge-secondary\">\n        {{ object|liked_count }}</span>\n</p>\n{% addtoblock \"js\" %}\n<script src=\"img/widget.js' %}\"></script>\n{% endaddtoblock %}\n```", "```py\n/* myproject/apps/likes/static/likes/js/widget.js */\n(function($) {\n    $(document).on(\"click\", \".like-button\", function() {\n        var $button = $(this);\n        var $widget = $button.closest(\".like-widget\");\n        var $badge = $widget.find(\".like-badge\");\n\n        $.post($button.data(\"href\"), function(data) {\n            if (data.success) {\n                var action = data.action; // \"add\" or \"remove\"\n                var label = $button.data(action + \"-label\");\n\n                $button[action + \"Class\"](\"active\");\n                $button.html(label);\n\n                $badge.html(data.count);\n            }\n        }, \"json\");\n    });\n}(jQuery));\n\n```", "```py\n# myproject/apps/locations/forms.py import os\nfrom django import forms\nfrom django.urls import reverse\nfrom django.utils.translation import ugettext_lazy as _\nfrom django.core.files.storage import default_storage\nfrom crispy_forms import bootstrap, helper, layout\nfrom .models import Location\n\nclass LocationForm(forms.ModelForm):\n    picture = forms.ImageField(\n        label=_(\"Picture\"), max_length=255, \n         widget=forms.FileInput(), required=False\n    )\n    picture_path = forms.CharField(\n        max_length=255, widget=forms.HiddenInput(), required=False\n    )\n    latitude = forms.FloatField(\n        label=_(\"Latitude\"),\n        help_text=_(\"Latitude (Lat.) is the angle between any point \n        and the equator (north pole is at 90; south pole is at \n        -90).\"),\n        required=False,\n    )\n    longitude = forms.FloatField(\n        label=_(\"Longitude\"),\n        help_text=_(\"Longitude (Long.) is the angle east or west \n        of an arbitrary point on Earth from Greenwich (UK), \n        which is the international zero-longitude point \n        (longitude=0 degrees). The anti-meridian of Greenwich is \n        both 180 (direction to east) and -180 (direction to \n        west).\"),\n        required=False,\n    )\n    class Meta:\n        model = Location\n        exclude = [\"geoposition\", \"rating\"]\n```", "```py\ndef __init__(self, request, *args, **kwargs):\n    self.request = request\n    super().__init__(*args, **kwargs)\n    geoposition = self.instance.get_geoposition()\n if geoposition:\n self.fields[\"latitude\"].initial = geoposition.latitude\n self.fields[\"longitude\"].initial = geoposition.longitude\n\n    name_field = layout.Field(\"name\", css_class=\"input-block-\n     level\")\n    description_field = layout.Field(\n        \"description\", css_class=\"input-block-level\", rows=\"3\"\n    )\n    main_fieldset = layout.Fieldset(_(\"Main data\"), name_field, \n     description_field)\n\n picture_field = layout.Field(\n \"picture\",\n data_url=reverse(\"upload_file\"),\n template=\"core/includes/file_upload_field.html\",\n )\n picture_path_field = layout.Field(\"picture_path\")\n\n picture_fieldset = layout.Fieldset(\n _(\"Picture\"),\n picture_field,\n picture_path_field,\n title=_(\"Picture upload\"),\n css_id=\"picture_fieldset\",\n )\n\n    street_address_field = layout.Field(\n        \"street_address\", css_class=\"input-block-level\"\n    )\n    street_address2_field = layout.Field(\n        \"street_address2\", css_class=\"input-block-level\"\n    )\n    postal_code_field = layout.Field(\"postal_code\", \n     css_class=\"input-block-level\")\n    city_field = layout.Field(\"city\", css_class=\"input-block-\n     level\")\n    country_field = layout.Field(\"country\", css_class=\"input-\n     block-level\")\n    latitude_field = layout.Field(\"latitude\", css_class=\"input-\n     block-level\")\n    longitude_field = layout.Field(\"longitude\", css_class=\"input-\n     block-level\")\n    address_fieldset = layout.Fieldset(\n        _(\"Address\"),\n        street_address_field,\n        street_address2_field,\n        postal_code_field,\n        city_field,\n        country_field,\n        latitude_field,\n        longitude_field,\n    )\n\n    submit_button = layout.Submit(\"save\", _(\"Save\"))\n    actions = bootstrap.FormActions(layout.Div(submit_button, \n      css_class=\"col\"))\n\n    self.helper = helper.FormHelper()\n    self.helper.form_action = self.request.path\n    self.helper.form_method = \"POST\"\n    self.helper.attrs = {\"noValidate\": \"noValidate\"}\n    self.helper.layout = layout.Layout(main_fieldset, \n     picture_fieldset, address_fieldset, actions) \n```", "```py\ndef clean(self):\n    cleaned_data = super().clean()\n    picture_path = cleaned_data[\"picture_path\"]\n    if not self.instance.pk and not self.files.get(\"picture\") \n     and not picture_path:\n        raise forms.ValidationError(_(\"Please choose an image.\"))\n```", "```py\ndef save(self, commit=True):\n    instance = super().save(commit=False)\n    picture_path = self.cleaned_data[\"picture_path\"]\n    if picture_path:\n        temporary_image_path = os.path.join(\"temporary-uploads\", \n         picture_path)\n        file_obj = default_storage.open(temporary_image_path)\n        instance.picture.save(picture_path, file_obj, save=False)\n        default_storage.delete(temporary_image_path)\n    latitude = self.cleaned_data[\"latitude\"]\n    longitude = self.cleaned_data[\"longitude\"]\n    if latitude is not None and longitude is not None:\n        instance.set_geoposition(longitude=longitude, \n         latitude=latitude)\n    if commit:\n        instance.save()\n        self.save_m2m()\n    return instance\n```", "```py\n# myproject/apps/locations/views.py from django.contrib.auth.decorators import login_required\nfrom django.shortcuts import render, redirect, get_object_or_404\n\nfrom .forms import LocationForm\nfrom .models import Location\n\n# \u2026\n\n@login_required\ndef add_or_change_location(request, pk=None):\n    location = None\n    if pk:\n        location = get_object_or_404(Location, pk=pk)\n    if request.method == \"POST\":\n        form = LocationForm(request, data=request.POST, \n         files=request.FILES, instance=location)\n        if form.is_valid():\n            location = form.save()\n            return redirect(\"locations:location_detail\", \n             pk=location.pk)\n    else:\n        form = LocationForm(request, instance=location)\n\n    context = {\"location\": location, \"form\": form}\n    return render(request, \"locations/location_form.html\", context)\n```", "```py\n# myproject/apps/locations/urls.py\nfrom django.urls import path\nfrom .views import add_or_change_location\n\nurlpatterns = [\n    # \u2026\n    path(\"<uuid:pk>/change/\", add_or_change_location, \n     name=\"add_or_change_location\"),\n]\n```", "```py\n# myproject/apps/core/views.py import os\nfrom django.core.files.base import ContentFile\nfrom django.core.files.storage import default_storage\nfrom django.http import JsonResponse\nfrom django.core.exceptions import SuspiciousOperation\nfrom django.urls import reverse\nfrom django.views.decorators.csrf import csrf_protect\nfrom django.utils.translation import gettext_lazy as _\nfrom django.conf import settings\n# \u2026\n\n@csrf_protect\ndef upload_file(request):\n    status_code = 400\n    data = {\"files\": [], \"error\": _(\"Bad request\")}\n    if request.method == \"POST\" and request.is_ajax() and \"picture\" \n     in request.FILES:\n        file_types = [f\"image/{x}\" for x in [\"gif\", \"jpg\", \"jpeg\", \n         \"png\"]]\n        file = request.FILES.get(\"picture\")\n        if file.content_type not in file_types:\n            status_code = 405\n            data[\"error\"] = _(\"Invalid file format\")\n        else:\n            upload_to = os.path.join(\"temporary-uploads\", \n             file.name)\n            name = default_storage.save(upload_to, \n             ContentFile(file.read()))\n            file = default_storage.open(name)\n            status_code = 200\n            del data[\"error\"]\n            absolute_uploads_dir = os.path.join(\n                settings.MEDIA_ROOT, \"temporary-uploads\"\n            )\n            file.filename = os.path.basename(file.name)\n            data[\"files\"].append(\n                {\n                    \"name\": file.filename,\n                    \"size\": file.size,\n                    \"deleteType\": \"DELETE\",\n                    \"deleteUrl\": (\n                        reverse(\"delete_file\") + \n                         f\"?filename={file.filename}\"\n                    ),\n                    \"path\": file.name[len(absolute_uploads_dir) \n                      + 1 :],\n                }\n            )\n\n    return JsonResponse(data, status=status_code)\n```", "```py\n# myproject/urls.py from django.urls import path\nfrom myproject.apps.core import views as core_views\n\n# \u2026\n\nurlpatterns += [\n    path(\n        \"upload-file/\",\n        core_views.upload_file,\n        name=\"upload_file\",\n    ),\n]\n```", "```py\n{# locations/location_form.html #}\n{% extends \"base.html\" %}\n{% load i18n crispy_forms_tags %}\n\n{% block content %}\n    <div class=\"row\">\n        <div class=\"col-lg-8\">\n            <a href=\"{% url \"locations:location_list\" %}\">{% trans \n             \"Interesting Locations\" %}</a>\n            <h1>\n                {% if location %}\n                    {% blocktrans trimmed with name=\n                      location.name %}\n                        Change Location \"{{ name }}\"\n                    {% endblocktrans %}\n                {% else %}\n                    {% trans \"Add Location\" %}\n                {% endif %}\n            </h1>\n            {% crispy form %}\n        </div>\n    </div>\n{% endblock %}\n```", "```py\n{# core/includes/file_upload_field.html #}\n{% load i18n crispy_forms_field static sekizai_tags %}\n\n{% include \"core/includes/picture_preview.html\" %}\n<{% if tag %}{{ tag }}{% else %}div{% endif %} id=\"div_{{ field.auto_id }}\"\nclass=\"form-group{% if 'form-horizontal' in form_class %} row{% endif %}{% if wrapper_class %} {{ wrapper_class }}{% endif %}{% if field.css_classes %} {{ field.css_classes }}{% endif %}\">\n  {% if field.label and form_show_labels %}\n    <label for=\"{{ field.id_for_label }}\"\n           class=\"col-form-label {{ label_class }}{% if field\n            .field.required %} requiredField{% endif %}\">\n      {{ field.label|safe }}{% if field.field.required %}<span \n       class=\"asteriskField\">*</span>{% endif %}\n    </label>\n  {% endif %}\n\n <div class=\"{{ field_class }}\">\n <span class=\"btn btn-success fileinput-button\">\n <span>{% trans \"Upload File...\" %}</span>\n {% crispy_field field %}\n </span>\n {% include 'bootstrap4/layout/help_text_and_errors.html' %}\n <p class=\"form-text text-muted\">\n {% trans \"Available formats are JPG, GIF, and PNG.\" %}\n {% trans \"Minimal size is 800 \u00d7 800 px.\" %}\n </p>\n </div>\n</{% if tag %}{{ tag }}{% else %}div{% endif %}>\n\n{% addtoblock \"css\" %}\n<link rel=\"stylesheet\" href=\"{% static 'site/vendor/jQuery-File-Upload-10.2.0/css/jquery.fileupload-ui.css' %}\"/>\n<link rel=\"stylesheet\" href=\"{% static 'site/vendor/jQuery-File-Upload-10.2.0/css/jquery.fileupload.css' %}\"/>\n{% endaddtoblock %}\n\n{% addtoblock \"js\" %}\n<script src=\"img/jquery.ui.widget.js' %}\"></script>\n<script src=\"img/jquery.iframe-transport.js' %}\"></script>\n<script src=\"img/jquery.fileupload.js' %}\"></script>\n<script src=\"img/picture_upload.js' %}\"></script>\n{% endaddtoblock %}\n```", "```py\n{# core/includes/picture_preview.html #} <div id=\"picture_preview\">\n  {% if form.instance.picture %}\n    <img src=\"img/{{ form.instance.picture.url }}\" alt=\"\" \n     class=\"img-fluid\"/>\n  {% endif %}\n</div>\n<div id=\"progress\" class=\"progress\" style=\"visibility: hidden\">\n  <div class=\"progress-bar progress-bar-striped \n   progress-bar-animated\"\n       role=\"progressbar\"\n       aria-valuenow=\"0\"\n       aria-valuemin=\"0\"\n       aria-valuemax=\"100\"\n       style=\"width: 0%\"></div>\n</div>\n```", "```py\n/* site_static/site/js/picture_upload.js */ $(function() {\n  $(\"#id_picture_path\").each(function() {\n    $picture_path = $(this);\n    if ($picture_path.val()) {\n      $(\"#picture_preview\").html(\n        '<img src=\"img/>          \"temporary-uploads/\" +\n          $picture_path.val() +\n          '\" alt=\"\" class=\"img-fluid\" />'\n      );\n    }\n  });\n  $(\"#id_picture\").fileupload({\n    dataType: \"json\",\n    add: function(e, data) {\n      $(\"#progress\").css(\"visibility\", \"visible\");\n      data.submit();\n    },\n    progressall: function(e, data) {\n      var progress = parseInt((data.loaded / data.total) * 100, \n       10);\n      $(\"#progress .progress-bar\")\n        .attr(\"aria-valuenow\", progress)\n        .css(\"width\", progress + \"%\");\n    },\n    done: function(e, data) {\n      $.each(data.result.files, function(index, file) {\n        $(\"#picture_preview\").html(\n          '<img src=\"img/>            \"temporary-uploads/\" +\n            file.name +\n            '\" alt=\"\" class=\"img-fluid\" />'\n        );\n        $(\"#id_picture_path\").val(file.name);\n      });\n      $(\"#progress\").css(\"visibility\", \"hidden\");\n    }\n  });\n});\n```"]