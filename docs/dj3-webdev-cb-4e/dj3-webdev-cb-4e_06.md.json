["```py\n(env)$ pip install Pillow\n(env)$ pip install django-imagekit\n```", "```py\n# myproject/settings/_base.py\nINSTALLED_APPS = [\n   # \u2026\n   \"django.contrib.admin\",\n   \"imagekit\",\n]\n```", "```py\n# myproject/urls.py\nfrom django.contrib import admin\nfrom django.conf.urls.i18n import i18n_patterns\nfrom django.urls import include, path\n\nurlpatterns = i18n_patterns(\n    # \u2026\n    path(\"admin/\", admin.site.urls),\n)\n```", "```py\n# myproject/apps/products/models.py import os\n\nfrom django.urls import reverse, NoReverseMatch\nfrom django.db import models\nfrom django.utils.timezone import now as timezone_now\nfrom django.utils.translation import ugettext_lazy as _\n\nfrom ordered_model.models import OrderedModel\n\nfrom myproject.apps.core.models import UrlBase\n\ndef product_photo_upload_to(instance, filename):\n    now = timezone_now()\n    slug = instance.product.slug\n    base, ext = os.path.splitext(filename)\n    return f\"products/{slug}/{now:%Y%m%d%H%M%S}{ext.lower()}\"\n\nclass Product(UrlBase):\n    title = models.CharField(_(\"title\"), max_length=200)\n    slug = models.SlugField(_(\"slug\"), max_length=200)\n    description = models.TextField(_(\"description\"), blank=True)\n    price = models.DecimalField(\n        _(\"price (EUR)\"), max_digits=8, decimal_places=2, \n         blank=True, null=True\n    )\n\n    class Meta:\n        verbose_name = _(\"Product\")\n        verbose_name_plural = _(\"Products\")\n\n    def get_url_path(self):\n        try:\n            return reverse(\"product_detail\", kwargs={\"slug\": self.slug})\n        except NoReverseMatch:\n            return \"\"\n\n    def __str__(self):\n        return self.title\n\nclass ProductPhoto(models.Model):\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    photo = models.ImageField(_(\"photo\"), \n     upload_to=product_photo_upload_to)\n\n    class Meta:\n        verbose_name = _(\"Photo\")\n        verbose_name_plural = _(\"Photos\")\n\n    def __str__(self):\n        return self.photo.name\n```", "```py\n# myproject/apps/products/admin.py from django.contrib import admin\nfrom django.template.loader import render_to_string\nfrom django.utils.html import mark_safe\nfrom django.utils.translation import ugettext_lazy as _\n\nfrom .models import Product, ProductPhoto\n\nclass ProductPhotoInline(admin.StackedInline):\n    model = ProductPhoto\n    extra = 0\n    fields = [\"photo\"]\n```", "```py\n@admin.register(Product)\nclass ProductAdmin(admin.ModelAdmin):\n    list_display = [\"first_photo\", \"title\", \"has_description\", \n     \"price\"]\n    list_display_links = [\"first_photo\", \"title\"]\n    list_editable = [\"price\"]\n\n    fieldsets = ((_(\"Product\"), {\"fields\": (\"title\", \"slug\", \n     \"description\", \"price\")}),)\n    prepopulated_fields = {\"slug\": (\"title\",)}\n    inlines = [ProductPhotoInline]\n\ndef first_photo(self, obj):\n        project_photos = obj.productphoto_set.all()[:1]\n         if project_photos.count() > 0:\n photo_preview = render_to_string(\n           \"admin/products/includes/photo-preview.html\",\n             {\"photo\": project_photos[0], \"product\": obj},\n            )\n           return mark_safe(photo_preview)\n         return \"\"\n\n    first_photo.short_description = _(\"Preview\")\n\ndef has_description(self, obj):\nreturn bool(obj.description)\n\n    has_description.short_description = _(\"Has description?\")\n    has_description.admin_order_field = \"description\"\n    has_description.boolean = True\n```", "```py\n{# admin/products/includes/photo-preview.html #} {% load imagekit %}\n{% thumbnail \"120x120\" photo.photo -- alt=\n \"{{ product.title }} preview\" %}\n```", "```py\n(env)$ pip install django-ordered-model \n```", "```py\n# myproject/apps/products/models.py from django.db import models\nfrom django.utils.translation import ugettext_lazy as _\n\nfrom ordered_model.models import OrderedModel\n\n# \u2026\n\nclass ProductPhoto(OrderedModel):\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    photo = models.ImageField(_(\"photo\"), \n     upload_to=product_photo_upload_to)\n\norder_with_respect_to = \"product\" \n    class Meta(OrderedModel.Meta):\n        verbose_name = _(\"Photo\")\n        verbose_name_plural = _(\"Photos\")\n\ndef __str__(self):\nreturn self.photo.name\n```", "```py\n# myproject/apps/products/admin.py from django.contrib import admin\nfrom django.template.loader import render_to_string\nfrom django.utils.html import mark_safe\nfrom django.utils.translation import ugettext_lazy as _\nfrom ordered_model.admin import OrderedTabularInline, OrderedInlineModelAdminMixin\n\nfrom .models import Product, ProductPhoto\n\nclass ProductPhotoInline(OrderedTabularInline):\n    model = ProductPhoto\n    extra = 0\n    fields = (\"photo_preview\", \"photo\", \"order\", \n    \"move_up_down_links\")\n    readonly_fields = (\"photo_preview\", \"order\", \n    \"move_up_down_links\")\n    ordering = (\"order\",)\n\n    def get_photo_preview(self, obj):\n photo_preview = render_to_string(\n \"admin/products/includes/photo-preview.html\",\n {\"photo\": obj, \"product\": obj.product},\n )\n return mark_safe(photo_preview)\n\n get_photo_preview.short_description = _(\"Preview\")\n```", "```py\n@admin.register(Product)\nclass ProductAdmin(OrderedInlineModelAdminMixin, admin.ModelAdmin):\n    # \u2026\n```", "```py\n(env)$ pip install openpyxl\n```", "```py\n# myproject/apps/products/admin.py from openpyxl import Workbook\nfrom openpyxl.styles import Alignment, NamedStyle, builtins\nfrom openpyxl.styles.numbers import FORMAT_NUMBER\nfrom openpyxl.writer.excel import save_virtual_workbook\n\nfrom django.http.response import HttpResponse\nfrom django.utils.translation import ugettext_lazy as _\nfrom ordered_model.admin import OrderedTabularInline, OrderedInlineModelAdminMixin\n\n# other imports\u2026\n\nclass ColumnConfig:\n    def __init__(\n            self,\n            heading,\n            width=None,\n            heading_style=\"Headline 1\",\n            style=\"Normal Wrapped\",\n            number_format=None,\n         ):\n        self.heading = heading\n        self.width = width\n        self.heading_style = heading_style\n        self.style = style\n        self.number_format = number_format\n```", "```py\ndef export_xlsx(modeladmin, request, queryset):\n    wb = Workbook()\n    ws = wb.active\n    ws.title = \"Products\"\n\n    number_alignment = Alignment(horizontal=\"right\")\n    wb.add_named_style(\n        NamedStyle(\n            \"Identifier\", alignment=number_alignment, \n             number_format=FORMAT_NUMBER\n        )\n    )\n    wb.add_named_style(\n        NamedStyle(\"Normal Wrapped\", \n         alignment=Alignment(wrap_text=True))\n    )\n\n    column_config = {\n        \"A\": ColumnConfig(\"ID\", width=10, style=\"Identifier\"),\n        \"B\": ColumnConfig(\"Title\", width=30),\n        \"C\": ColumnConfig(\"Description\", width=60),\n        \"D\": ColumnConfig(\"Price\", width=15, style=\"Currency\", \n             number_format=\"#,##0.00 \u20ac\"),\n        \"E\": ColumnConfig(\"Preview\", width=100, style=\"Hyperlink\"),\n    }\n\n    # Set up column widths, header values and styles\n    for col, conf in column_config.items():\n        ws.column_dimensions[col].width = conf.width\n\n        column = ws[f\"{col}1\"]\n        column.value = conf.heading\n        column.style = conf.heading_style\n\n    # Add products\n    for obj in queryset.order_by(\"pk\"):\n        project_photos = obj.productphoto_set.all()[:1]\n        url = \"\"\n        if project_photos:\n            url = project_photos[0].photo.url\n\n        data = [obj.pk, obj.title, obj.description, obj.price, url]\n        ws.append(data)\n\n        row = ws.max_row\n        for row_cells in ws.iter_cols(min_row=row, max_row=row):\n            for cell in row_cells:\n                conf = column_config[cell.column_letter]\n                cell.style = conf.style\n                if conf.number_format:\n                    cell.number_format = conf.number_format\n\n    mimetype = \"application/vnd.openxmlformats-\n     officedocument.spreadsheetml.sheet\"\n    charset = \"utf-8\"\n    response = HttpResponse(\n        content=save_virtual_workbook(wb),\n        content_type=f\"{mimetype}; charset={charset}\",\n        charset=charset,\n    )\n    response[\"Content-Disposition\"] = \"attachment; \n     filename=products.xlsx\"\n    return response\n\nexport_xlsx.short_description = _(\"Export XLSX\")\n```", "```py\n@admin.register(Product)\nclass ProductAdmin(OrderedInlineModelAdminMixin, admin.ModelAdmin):\n    # \u2026\n actions = [export_xlsx]\n    # \u2026\n```", "```py\n# myproject/apps/products/admin.py\nfrom django.contrib import admin\nfrom django.db import models\nfrom django.utils.translation import ugettext_lazy as _\n\n# other imports\u2026\n\nZERO = \"zero\"\nONE = \"one\"\nMANY = \"many\"\n\nclass PhotoFilter(admin.SimpleListFilter):\n    # Human-readable title which will be displayed in the\n    # right admin sidebar just above the filter options.\n    title = _(\"photos\")\n\n    # Parameter for the filter that will be used in the\n    # URL query.\n    parameter_name = \"photos\"\n\n    def lookups(self, request, model_admin):\n        \"\"\"\n        Returns a list of tuples, akin to the values given for\n        model field choices. The first element in each tuple is the\n        coded value for the option that will appear in the URL\n        query. The second element is the human-readable name for\n        the option that will appear in the right sidebar.\n        \"\"\"\n        return (\n            (ZERO, _(\"Has no photos\")),\n            (ONE, _(\"Has one photo\")),\n            (MANY, _(\"Has more than one photo\")),\n        )\n\n    def queryset(self, request, queryset):\n        \"\"\"\n        Returns the filtered queryset based on the value\n        provided in the query string and retrievable via\n        `self.value()`.\n        \"\"\"\n        qs = queryset.annotate(num_photos=\n         models.Count(\"productphoto\"))\n\n        if self.value() == ZERO:\n            qs = qs.filter(num_photos=0)\n        elif self.value() == ONE:\n            qs = qs.filter(num_photos=1)\n        elif self.value() == MANY:\n            qs = qs.filter(num_photos__gte=2)\n        return qs\n```", "```py\n@admin.register(Product)\nclass ProductAdmin(OrderedInlineModelAdminMixin, admin.ModelAdmin):\n    # \u2026\n    list_filter = [PhotoFilter]\n    # \u2026\n```", "```py\n# myproject/apps/accounts/apps.py\nfrom django.apps import AppConfig\nfrom django.utils.translation import ugettext_lazy as _\n\nclass AccountsConfig(AppConfig):\n    name = \"myproject.apps.accounts\"\n    verbose_name = _(\"Accounts\")\n\n    def ready(self):\n        pass\n\nclass SocialDjangoConfig(AppConfig):\n name = \"social_django\"\n    verbose_name = _(\"Social Authentication\")\n```", "```py\n# myproject/settings/_base.py # \u2026\nINSTALLED_APPS = [\n    # \u2026\n    #\"social_django\",\n    \"myproject.apps.accounts.apps.SocialDjangoConfig\",\n    # \u2026\n]\n```", "```py\n# myproject/apps/_base.py\nINSTALLED_APPS = [\n   # \u2026\n   \"myproject.apps.accounts\",\n]\n```", "```py\n# myproject/apps/accounts/models.py import uuid\n\nfrom django.contrib.auth.base_user import BaseUserManager\nfrom django.db import models\nfrom django.contrib.auth.models import AbstractUser, Group\nfrom django.utils.translation import ugettext_lazy as _\n\nclass Role(Group):\n    class Meta:\n        proxy = True\n        verbose_name = _(\"Role\")\n        verbose_name_plural = _(\"Roles\")\n\n    def __str__(self):\n        return self.name\n\nclass UserManager(BaseUserManager):\n    def create_user(self, username=\"\", email=\"\", password=\"\", \n     **extra_fields):\n        if not email:\n            raise ValueError(\"Enter an email address\")\n        email = self.normalize_email(email)\n        user = self.model(username=username, email=email, \n         **extra_fields)\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n\n    def create_superuser(self, username=\"\", email=\"\", password=\"\"):\n        user = self.create_user(email=email, password=password, \n         username=username)\n        user.is_superuser = True\n        user.is_staff = True\n        user.save(using=self._db)\n        return user\n\nclass User(AbstractUser):\n    uuid = models.UUIDField(primary_key=True, default=None, \n     editable=False)\n    # change username to non-editable non-required field\n    username = models.CharField(\n        _(\"username\"), max_length=150, editable=False, blank=True\n    )\n    # change email to unique and required field\n    email = models.EmailField(_(\"email address\"), unique=True)\n\n    USERNAME_FIELD = \"email\"\n    REQUIRED_FIELDS = []\n\n    objects = UserManager()\n\n    def save(self, *args, **kwargs):\n        if self.pk is None:\n            self.pk = uuid.uuid4()\n        super().save(*args, **kwargs)\n```", "```py\n# myproject/apps/accounts/admin.py\nfrom django.contrib import admin\nfrom django.contrib.auth.admin import UserAdmin, Group, GroupAdmin\nfrom django.urls import reverse\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.http import HttpResponse\nfrom django.shortcuts import get_object_or_404, redirect\nfrom django.utils.encoding import force_bytes\nfrom django.utils.safestring import mark_safe\nfrom django.utils.translation import ugettext_lazy as _\nfrom django.contrib.auth.forms import UserCreationForm\n\nfrom .helpers import download_avatar\nfrom .models import User, Role\n\nclass MyUserCreationForm(UserCreationForm):\n    def save(self, commit=True):\n        user = super().save(commit=False)\n        user.username = user.email\n        user.set_password(self.cleaned_data[\"password1\"])\n        if commit:\n            user.save()\n        return user\n\n@admin.register(User)\nclass MyUserAdmin(UserAdmin):\n    save_on_top = True\n    list_display = [\n        \"get_full_name\",\n        \"is_active\",\n        \"is_staff\",\n        \"is_superuser\",\n    ]\n    list_display_links = [\n        \"get_full_name\",\n    ]\n    search_fields = [\"email\", \"first_name\", \"last_name\", \"id\", \n     \"username\"]\n    ordering = [\"-is_superuser\", \"-is_staff\", \"last_name\", \n     \"first_name\"]\n\n    fieldsets = [\n        (None, {\"fields\": (\"email\", \"password\")}),\n        (_(\"Personal info\"), {\"fields\": (\"first_name\", \n         \"last_name\")}),\n        (\n            _(\"Permissions\"),\n            {\n                \"fields\": (\n                    \"is_active\",\n                    \"is_staff\",\n                    \"is_superuser\",\n                    \"groups\",\n                    \"user_permissions\",\n                )\n            },\n        ),\n        (_(\"Important dates\"), {\"fields\": (\"last_login\", \n         \"date_joined\")}),\n    ]\n    add_fieldsets = (\n        (None, {\"classes\": (\"wide\",), \"fields\": (\"email\", \n         \"password1\", \"password2\")}),\n    )\n    add_form = MyUserCreationForm\n\n    def get_full_name(self, obj):\n        return obj.get_full_name()\n\n    get_full_name.short_description = _(\"Full name\")\n\n```", "```py\nadmin.site.unregister(Group)\n\n@admin.register(Role)\nclass MyRoleAdmin(GroupAdmin):\n    list_display = (\"__str__\", \"display_users\")\n    save_on_top = True\n\n    def display_users(self, obj):\n        links = []\n        for user in obj.user_set.all():\n            ct = ContentType.objects.get_for_model(user)\n            url = reverse(\n                \"admin:{}_{}_change\".format(ct.app_label, \n                  ct.model), args=(user.pk,)\n            )\n            links.append(\n                \"\"\"<a href=\"{}\" target=\"_blank\">{}</a>\"\"\".format(\n                    url,\n                    user.get_full_name() or user.username,\n                )\n            )\n        return mark_safe(u\"<br />\".join(links))\n\n    display_users.short_description = _(\"Users\")\n```", "```py\n# myproject/apps/accounts/models.py import os\n\nfrom imagekit.models import ImageSpecField\nfrom pilkit.processors import ResizeToFill\nfrom django.utils import timezone\n\n# \u2026\n\ndef upload_to(instance, filename):\n now = timezone.now()\n filename_base, filename_ext = os.path.splitext(filename)\n return \"users/{user_id}/{filename}{ext}\".format(\n user_id=instance.pk,\n filename=now.strftime(\"%Y%m%d%H%M%S\"),\n ext=filename_ext.lower(),\n )\n\nclass User(AbstractUser):\n    # \u2026\n\n avatar = models.ImageField(_(\"Avatar\"), upload_to=upload_to, \n     blank=True)\n avatar_thumbnail = ImageSpecField(\n source=\"avatar\",\n processors=[ResizeToFill(60, 60)],\n format=\"JPEG\",\n options={\"quality\": 100},\n )\n\n    # \u2026\n```", "```py\n# myprojects/apps/accounts/admin.py from django.contrib import admin\nfrom django.contrib.auth.admin import UserAdmin, Group, GroupAdmin\nfrom django.urls import reverse\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.http import HttpResponse\nfrom django.shortcuts import get_object_or_404\nfrom django.utils.encoding import force_bytes\nfrom django.utils.safestring import mark_safe\nfrom django.utils.translation import ugettext_lazy as _\nfrom django.contrib.auth.forms import UserCreationForm\n\nfrom .helpers import download_avatar\nfrom .models import User, Role\n\nclass MyUserCreationForm(UserCreationForm):\n    def save(self, commit=True):\n        user = super().save(commit=False)\n        user.username = user.email\n        user.set_password(self.cleaned_data[\"password1\"])\n        if commit:\n            user.save()\n        return user\n\n@admin.register(User)\nclass MyUserAdmin(UserAdmin):\n    save_on_top = True\n    list_display = [\n        \"get_avatar\",\n        \"get_full_name\",\n        \"download_gravatar\",\n        \"is_active\",\n        \"is_staff\",\n        \"is_superuser\",\n    ]\n    list_display_links = [\n        \"get_avatar\",\n        \"get_full_name\",\n    ]\n    search_fields = [\"email\", \"first_name\", \"last_name\", \"id\", \n     \"username\"]\n    ordering = [\"-is_superuser\", \"-is_staff\", \"last_name\", \n     \"first_name\"]\n\n    fieldsets = [\n        (None, {\"fields\": (\"email\", \"password\")}),\n        (_(\"Personal info\"), {\"fields\": (\"first_name\", \n         \"last_name\")}),\n        (\n            _(\"Permissions\"),\n            {\n                \"fields\": (\n                    \"is_active\",\n                    \"is_staff\",\n                    \"is_superuser\",\n                    \"groups\",\n                    \"user_permissions\",\n                )\n            },\n        ),\n (_(\"Avatar\"), {\"fields\": (\"avatar\",)}),\n        (_(\"Important dates\"), {\"fields\": (\"last_login\", \n         \"date_joined\")}),\n    ]\n    add_fieldsets = (\n        (None, {\"classes\": (\"wide\",), \"fields\": (\"email\", \n         \"password1\", \"password2\")}),\n    )\n    add_form = MyUserCreationForm\n\n    def get_full_name(self, obj):\n        return obj.get_full_name()\n\n    get_full_name.short_description = _(\"Full name\")\n\n    def get_avatar(self, obj):\n        from django.template.loader import render_to_string\n        html = render_to_string(\"admin/accounts\n         /includes/avatar.html\", context={\n            \"obj\": obj\n        })\n        return mark_safe(html)\n\n    get_avatar.short_description = _(\"Avatar\")\n\n    def download_gravatar(self, obj):\n        from django.template.loader import render_to_string\n        info = self.model._meta.app_label, \n         self.model._meta.model_name\n        gravatar_url = reverse(\"admin:%s_%s_download_gravatar\" % \n         info, args=[obj.pk])\n        html = render_to_string(\"admin/accounts\n         /includes/download_gravatar.html\", context={\n            \"url\": gravatar_url\n        })\n        return mark_safe(html)\n\n    download_gravatar.short_description = _(\"Gravatar\")\n\n    def get_urls(self):\n        from functools import update_wrapper\n        from django.conf.urls import url\n\n        def wrap(view):\n            def wrapper(*args, **kwargs):\n                return self.admin_site.admin_view(view)(*args, \n                 **kwargs)\n\n            wrapper.model_admin = self\n            return update_wrapper(wrapper, view)\n\n        info = self.model._meta.app_label, \n         self.model._meta.model_name\n\n        urlpatterns = [\n            url(\n                r\"^(.+)/download-gravatar/$\",\n                wrap(self.download_gravatar_view),\n                name=\"%s_%s_download_gravatar\" % info,\n            )\n        ] + super().get_urls()\n\n        return urlpatterns\n\n    def download_gravatar_view(self, request, object_id):\n        if request.method != \"POST\":\n            return HttpResponse(\n                \"{} method not allowed.\".format(request.method), \n                 status=405\n            )\n        from .models import User\n\n        user = get_object_or_404(User, pk=object_id)\n        import hashlib\n\n        m = hashlib.md5()\n        m.update(force_bytes(user.email))\n        md5_hash = m.hexdigest()\n        # d=404 ensures that 404 error is raised if gravatar is not \n        # found instead of returning default placeholder\n        url = \"https://www.gravatar.com/avatar\n         /{md5_hash}?s=800&d=404\".format(\n            md5_hash=md5_hash\n        )\n        download_avatar(object_id, url)\n        return HttpResponse(\"Gravatar downloaded.\", status=200)\n```", "```py\n# myproject/apps/accounts/helpers.py \ndef download_avatar(user_id, image_url):\n    import tempfile\n    import requests\n    from django.contrib.auth import get_user_model\n    from django.core.files import File\n\n    response = requests.get(image_url, allow_redirects=True, \n     stream=True)\n    user = get_user_model().objects.get(pk=user_id)\n\n    if user.avatar:  # delete the old avatar\n        user.avatar.delete()\n\n    if response.status_code != requests.codes.ok:\n        user.save()\n        return\n\n    file_name = image_url.split(\"/\")[-1]\n\n    image_file = tempfile.NamedTemporaryFile()\n\n    # Read the streamed image in sections\n    for block in response.iter_content(1024 * 8):\n        # If no more file then stop\n        if not block:\n            break\n        # Write image block to temporary file\n        image_file.write(block)\n\n    user.avatar.save(file_name, File(image_file))\n    user.save()\n```", "```py\n{# admin/accounts/includes/avatar.html #}\n{% if obj.avatar %}\n    <img src=\"img/{{ obj.avatar_thumbnail.url }}\" alt=\"\" \n     width=\"30\" height=\"30\" />\n{% endif %}\n```", "```py\n{# admin/accounts/includes/download_gravatar.html #}\n{% load i18n %}\n<button type=\"button\" data-url=\"{{ url }}\" class=\"button js_download_gravatar download-gravatar\">\n    {% trans \"Get Gravatar\" %}\n</button>\n```", "```py\n{# admin/accounts/user/change_list.html #}\n{% extends \"admin/change_list.html\" %}\n{% load static %}\n\n{% block footer %}\n{{ block.super }}\n<style nonce=\"{{ request.csp_nonce }}\">\n.button.download-gravatar {\n    padding: 2px 10px;\n}\n</style>\n<script nonce=\"{{ request.csp_nonce }}\">\ndjango.jQuery(function($) {\n    $('.js_download_gravatar').on('click', function(e) {\n        e.preventDefault();\n        $.ajax({\n            url: $(this).data('url'),\n            cache: 'false',\n            dataType: 'json',\n            type: 'POST',\n            data: {},\n            beforeSend: function(xhr) {\n                xhr.setRequestHeader('X-CSRFToken', \n                 '{{ csrf_token }}');\n            }\n        }).then(function(data) {\n            console.log('Gravatar downloaded.');\n            document.location.reload(true);\n        }, function(data) {\n            console.log('There were problems downloading the \n             Gravatar.');\n            document.location.reload(true);\n        });\n    })\n})\n\n</script>\n{% endblock %}\n```", "```py\n# myproject/settings/_base.py\nINSTALLED_APPS = [\n    # \u2026\n    \"myproject.apps.locations\",\n]\n```", "```py\n# myproject/apps/locations/models.py\nimport os\nimport uuid\nfrom collections import namedtuple\n\nfrom django.contrib.gis.db import models\nfrom django.urls import reverse\nfrom django.conf import settings\nfrom django.utils.translation import gettext_lazy as _\nfrom django.utils.timezone import now as timezone_now\n\nfrom myproject.apps.core.models import CreationModificationDateBase, UrlBase\n\nCOUNTRY_CHOICES = getattr(settings, \"COUNTRY_CHOICES\", [])\n\nGeoposition = namedtuple(\"Geoposition\", [\"longitude\", \"latitude\"])\n\ndef upload_to(instance, filename):\n    now = timezone_now()\n    base, extension = os.path.splitext(filename)\n    extension = extension.lower()\n    return f\"locations/{now:%Y/%m}/{instance.pk}{extension}\"\n\nclass Location(CreationModificationDateBase, UrlBase):\n    uuid = models.UUIDField(primary_key=True, default=None, \n     editable=False)\n    name = models.CharField(_(\"Name\"), max_length=200)\n    description = models.TextField(_(\"Description\"))\n    street_address = models.CharField(_(\"Street address\"), \n     max_length=255, blank=True)\n    street_address2 = models.CharField(\n        _(\"Street address (2nd line)\"), max_length=255, blank=True\n    )\n    postal_code = models.CharField(_(\"Postal code\"), \n     max_length=255, blank=True)\n    city = models.CharField(_(\"City\"), max_length=255, blank=True)\n    country = models.CharField(\n        _(\"Country\"), choices=COUNTRY_CHOICES, max_length=255, \n         blank=True\n    )\n    geoposition = models.PointField(blank=True, null=True)\n    picture = models.ImageField(_(\"Picture\"), upload_to=upload_to)\n\n    class Meta:\n        verbose_name = _(\"Location\")\n        verbose_name_plural = _(\"Locations\")\n\n    def __str__(self):\n        return self.name\n\n    def get_url_path(self):\n        return reverse(\"locations:location_detail\", \n         kwargs={\"pk\": self.pk})\n\n    def save(self, *args, **kwargs):\n        if self.pk is None:\n            self.pk = uuid.uuid4()\n        super().save(*args, **kwargs)\n\n    def delete(self, *args, **kwargs):\n        if self.picture:\n            self.picture.delete()\n        super().delete(*args, **kwargs)\n\n    def get_geoposition(self):\n        if not self.geoposition:\n            return None\n        return Geoposition(self.geoposition.coords[0], \n         self.geoposition.coords[1])\n\n    def set_geoposition(self, longitude, latitude):\n        from django.contrib.gis.geos import Point\n        self.geoposition = Point(longitude, latitude, srid=4326)\n```", "```py\n> CREATE EXTENSION postgis;\n```", "```py\n# myproject/apps/locations/admin.py\nfrom django.contrib.gis import admin\nfrom .models import Location\n\n@admin.register(Location)\nclass LocationAdmin(admin.OSMGeoAdmin):\n    pass\n```", "```py\n# myproject/apps/locations/admin.py from django.contrib import admin\nfrom django import forms\nfrom django.conf import settings\nfrom django.template.loader import render_to_string\nfrom django.utils.translation import ugettext_lazy as _\n\nfrom .models import Location\n\nLATITUDE_DEFINITION = _(\n    \"Latitude (Lat.) is the angle between any point and the \"\n    \"equator (north pole is at 90\u00b0; south pole is at -90\u00b0).\"\n)\n\nLONGITUDE_DEFINITION = _(\n    \"Longitude (Long.) is the angle east or west of a point \"\n    \"on Earth at Greenwich (UK), which is the international \"\n    \"zero-longitude point (longitude = 0\u00b0). The anti-meridian \"\n    \"of Greenwich (the opposite side of the planet) is both \"\n    \"180\u00b0 (to the east) and -180\u00b0 (to the west).\"\n)\n\nclass LocationModelForm(forms.ModelForm):\n    latitude = forms.FloatField(\n        label=_(\"Latitude\"), required=False, help_text=LATITUDE_DEFINITION\n    )\n    longitude = forms.FloatField(\n        label=_(\"Longitude\"), required=False, help_text=LONGITUDE_DEFINITION\n    )\n\n    class Meta:\n        model = Location\n        exclude = [\"geoposition\"]\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        if self.instance:\n            geoposition = self.instance.get_geoposition()\n            if geoposition:\n                self.fields[\"latitude\"].initial = \n               geoposition.latitude\n                self.fields[\"longitude\"].initial = \n               geoposition.longitude\n\n    def save(self, commit=True):\n        cleaned_data = self.cleaned_data\n        instance = super().save(commit=False)\n        instance.set_geoposition(\n            longitude=cleaned_data[\"longitude\"],\n            latitude=cleaned_data[\"latitude\"],\n        )\n        if commit:\n            instance.save()\n            self.save_m2m()\n        return instance\n\n@admin.register(Location)\nclass LocationAdmin(admin.ModelAdmin):\n    form = LocationModelForm\n    save_on_top = True\n    list_display = (\"name\", \"street_address\", \"description\")\n    search_fields = (\"name\", \"street_address\", \"description\")\n\n    def get_fieldsets(self, request, obj=None):\n        map_html = render_to_string(\n            \"admin/locations/includes/map.html\",\n            {\"MAPS_API_KEY\": settings.GOOGLE_MAPS_API_KEY},\n        )\n        fieldsets = [\n            (_(\"Main Data\"), {\"fields\": (\"name\", \"description\")}),\n            (\n                _(\"Address\"),\n                {\n                    \"fields\": (\n                        \"street_address\",\n                        \"street_address2\",\n                        \"postal_code\",\n                        \"city\",\n                        \"country\",\n                        \"latitude\",\n \"longitude\",\n                    )\n                },\n            ),\n            (_(\"Map\"), {\"description\": map_html, \"fields\": []}),\n            (_(\"Image\"), {\"fields\": (\"picture\",)}),\n        ]\n        return fieldsets\n```", "```py\n{# admin/locations/location/change_form.html #} {% extends \"admin/change_form.html\" %}\n{% load i18n static admin_modify admin_urls %}\n\n{% block extrastyle %}\n    {{ block.super }}\n    <link rel=\"stylesheet\" type=\"text/css\"\n          href=\"{% static 'site/css/location_map.css' %}\" />\n{% endblock %}\n\n{% block field_sets %}\n    {% for fieldset in adminform %}\n        {% include \"admin/includes/fieldset.html\" %}\n    {% endfor %}\n    <script src=\"img/>     %}\"></script>\n{% endblock %}\n```", "```py\n{# admin/locations/includes/map.html #} {% load i18n %}\n<div class=\"form-row map js_map\">\n    <div class=\"canvas\">\n        <!-- THE GMAPS WILL BE INSERTED HERE DYNAMICALLY -->\n    </div>\n    <ul class=\"locations js_locations\"></ul>\n    <div class=\"btn-group\">\n        <button type=\"button\"\n                class=\"btn btn-default locate-address  \n                 js_locate_address\">\n            {% trans \"Locate address\" %}\n        </button>\n        <button type=\"button\"\n                class=\"btn btn-default remove-geo js_remove_geo\">\n            {% trans \"Remove from map\" %}\n        </button>\n    </div>\n</div>\n<script src=\"img/js?key={{ MAPS_API_KEY }}\"></script>\n```", "```py\n/* site_static/site/css/location_map.css */ .map {\n    box-sizing: border-box;\n    width: 98%;\n}\n.map .canvas,\n.map ul.locations,\n.map .btn-group {\n    margin: 1rem 0;\n}\n.map .canvas {\n    border: 1px solid #000;\n    box-sizing: padding-box;\n    height: 0;\n    padding-bottom: calc(9 / 16 * 100%); /* 16:9 aspect ratio */\n    width: 100%;\n}\n.map .canvas:before {\n    color: #eee;\n    color: rgba(0, 0, 0, 0.1);\n    content: \"map\";\n    display: block;\n    font-size: 5rem;\n    line-height: 5rem;\n    margin-top: -25%;\n    padding-top: calc(50% - 2.5rem);\n    text-align: center;\n}\n.map ul.locations {\n    padding: 0;\n}\n.map ul.locations li {\n    border-bottom: 1px solid #ccc;\n    list-style: none;\n}\n.map ul.locations li:first-child {\n    border-top: 1px solid #ccc;\n}\n.map .btn-group .btn.remove-geo {\n    float: right;\n}\n```", "```py\n/* site_static/site/js/location_change_form.js */\n(function ($, undefined) {\n    var gettext = window.gettext || function (val) {\n        return val;\n    };\n    var $map, $foundLocations, $lat, $lng, $street, $street2,\n        $city, $country, $postalCode, gMap, gMarker;\n    // \u2026this is where all the further JavaScript functions go\u2026\n}(django.jQuery));\n```", "```py\nfunction getAddress4search() {\n    var sStreetAddress2 = $street2.val();\n    if (sStreetAddress2) {\n        sStreetAddress2 = \" \" + sStreetAddress2;\n    }\n\n    return [\n        $street.val() + sStreetAddress2,\n        $city.val(),\n        $country.val(),\n        $postalCode.val()\n    ].join(\", \");\n}\n```", "```py\nfunction updateMarker(lat, lng) {\n    var point = new google.maps.LatLng(lat, lng);\n\n    if (!gMarker) {\n        gMarker = new google.maps.Marker({\n            position: point,\n            map: gMap\n        });\n    }\n\n    gMarker.setPosition(point);\n    gMap.panTo(point, 15);\n    gMarker.setDraggable(true);\n\n    google.maps.event.addListener(gMarker, \"dragend\",\n        function() {\n            var point = gMarker.getPosition();\n            updateLatitudeAndLongitude(point.lat(), point.lng());\n        }\n    );\n}\n```", "```py\nfunction updateLatitudeAndLongitude(lat, lng) {\n    var precision = 1000000;\n    $lat.val(Math.round(lat * precision) / precision);\n    $lng.val(Math.round(lng * precision) / precision);\n}\n```", "```py\nfunction autocompleteAddress(results) {\n    var $item = $('<li/>');\n    var $link = $('<a href=\"#\"/>');\n\n    $foundLocations.html(\"\");\n    results = results || [];\n\n    if (results.length) {\n        results.forEach(function (result, i) {\n            $link.clone()\n                 .html(result.formatted_address)\n                 .click(function (event) {\n                     event.preventDefault();\n                     updateAddressFields(result\n                      .address_components);\n\n                     var point = result.geometry.location;\n                     updateLatitudeAndLongitude(\n                         point.lat(), point.lng());\n                     updateMarker(point.lat(), point.lng());\n                     $foundLocations.hide();\n                 })\n                 .appendTo($item.clone()\n                  .appendTo($foundLocations));\n        });\n        $link.clone()\n             .html(gettext(\"None of the above\"))\n             .click(function(event) {\n                 event.preventDefault();\n                 $foundLocations.hide();\n             })\n             .appendTo($item.clone().appendTo($foundLocations));\n        $foundLocations.show();\n    } else {\n        $foundLocations.hide();\n    }\n}\n```", "```py\nfunction updateAddressFields(addressComponents) {\n    var streetName, streetNumber;\n    var typeActions = {\n        \"locality\": function(obj) {\n            $city.val(obj.long_name);\n        },\n        \"street_number\": function(obj) {\n            streetNumber = obj.long_name;\n        },\n        \"route\": function(obj) {\n            streetName = obj.long_name;\n        },\n        \"postal_code\": function(obj) {\n            $postalCode.val(obj.long_name);\n        },\n        \"country\": function(obj) {\n            $country.val(obj.short_name);\n        }\n    };\n\n    addressComponents.forEach(function(component) {\n        var action = typeActions[component.types[0]];\n        if (typeof action === \"function\") {\n            action(component);\n        }\n    });\n\n    if (streetName) {\n        var streetAddress = streetName;\n        if (streetNumber) {\n            streetAddress += \" \" + streetNumber;\n        }\n        $street.val(streetAddress);\n    }\n}\n```", "```py\n$(function(){\n    $map = $(\".map\");\n\n    $foundLocations = $map.find(\"ul.js_locations\").hide();\n    $lat = $(\"#id_latitude\");\n    $lng = $(\"#id_longitude\");\n    $street = $(\"#id_street_address\");\n    $street2 = $(\"#id_street_address2\");\n    $city = $(\"#id_city\");\n    $country = $(\"#id_country\");\n    $postalCode = $(\"#id_postal_code\");\n\n    $map.find(\"button.js_locate_address\")\n        .click(function(event) {\n            var geocoder = new google.maps.Geocoder();\n            geocoder.geocode(\n                {address: getAddress4search()},\n                function (results, status) {\n                    if (status === google.maps.GeocoderStatus.OK) {\n                        autocompleteAddress(results);\n                    } else {\n                        autocompleteAddress(false);\n                    }\n                }\n            );\n        });\n\n    $map.find(\"button.js_remove_geo\")\n        .click(function() {\n            $lat.val(\"\");\n            $lng.val(\"\");\n            gMarker.setMap(null);\n            gMarker = null;\n        });\n\n    gMap = new google.maps.Map($map.find(\".canvas\").get(0), {\n        scrollwheel: false,\n        zoom: 16,\n        center: new google.maps.LatLng(51.511214, -0.119824),\n        disableDoubleClickZoom: true\n    });\n\n    google.maps.event.addListener(gMap, \"dblclick\", function(event) \n    {\n        var lat = event.latLng.lat();\n        var lng = event.latLng.lng();\n        updateLatitudeAndLongitude(lat, lng);\n        updateMarker(lat, lng);\n    });\n\n    if ($lat.val() && $lng.val()) {\n        updateMarker($lat.val(), $lng.val());\n    }\n});\n```", "```py\nconsole.log(JSON.stringify(results, null, 4));\n```"]