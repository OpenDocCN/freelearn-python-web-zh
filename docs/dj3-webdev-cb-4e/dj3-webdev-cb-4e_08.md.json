["```py\n(env)$ pip install django-mptt==0.10.0\n```", "```py\n# myproject/settings/_base.py\nINSTALLED_APPS = [\n    # \u2026\n    \"mptt\",\n    # \u2026\n    \"myproject.apps.categories\",\n \"myproject.apps.ideas\",\n]\n```", "```py\n# myproject/apps/ideas/models.py\nfrom django.db import models\nfrom django.utils.translation import ugettext_lazy as _\nfrom mptt.models import MPTTModel\nfrom mptt.fields import TreeForeignKey\n\nfrom myproject.apps.core.models import CreationModificationDateBase\n\nclass Category(MPTTModel, CreationModificationDateBase):\n    parent = TreeForeignKey(\n \"self\", on_delete=models.CASCADE, \n blank=True, null=True, related_name=\"children\"\n    )\n    title = models.CharField(_(\"Title\"), max_length=200)\n\n    class Meta:\n ordering = [\"tree_id\", \"lft\"]\n        verbose_name = _(\"Category\")\n        verbose_name_plural = _(\"Categories\")\n\n class MPTTMeta:\n order_insertion_by = [\"title\"]\n\n    def __str__(self):\n        return self.title\n```", "```py\n# myproject/apps/ideas/models.py from django.utils.translation import gettext_lazy as _\n\nfrom mptt.fields import TreeManyToManyField\n\nfrom myproject.apps.core.models import CreationModificationDateBase, UrlBase\n\nclass Idea(CreationModificationDateBase, UrlBase):\n    # \u2026\n    categories = TreeManyToManyField(\n \"categories.Category\",\n verbose_name=_(\"Categories\"),\n related_name=\"category_ideas\",\n )\n```", "```py\n(env)$ python manage.py makemigrations\n(env)$ python manage.py migrate\n```", "```py\nancestor_categories = category.get_ancestors(\n    ascending=False,\n    include_self=False,\n)\n```", "```py\nroot = category.get_root()\n```", "```py\nchildren = category.get_children()\n```", "```py\ndescendants = category.get_descendants(include_self=False)\n```", "```py\ndescendants_count = category.get_descendant_count()\n```", "```py\nsiblings = category.get_siblings(include_self=False)\n```", "```py\nprevious_sibling = category.get_previous_sibling()\nnext_sibling = category.get_next_sibling()\n```", "```py\ncategory.is_root_node()\ncategory.is_child_node()\ncategory.is_leaf_node()\n```", "```py\n(env)$ pip install django-mptt-admin==0.7.2\n```", "```py\n# myproject/settings/_base.py\nINSTALLED_APPS = [\n    # \u2026\n    \"mptt\",\n \"django_mptt_admin\",\n]\n```", "```py\n(env)$ python manage.py collectstatic\n```", "```py\n# myproject/apps/categories/admin.py from django.contrib import admin\nfrom django_mptt_admin.admin import DjangoMpttAdmin\n\nfrom .models import Category\n\n@admin.register(Category)\nclass CategoryAdmin(DjangoMpttAdmin):\n    list_display = [\"title\", \"created\", \"modified\"]\n    list_filter = [\"created\"]\n```", "```py\n# myproject/apps/categories/views.py from django.views.generic import ListView\n\nfrom .models import Category\n\nclass IdeaCategoryList(ListView):\n    model = Category\n    template_name = \"categories/category_list.html\"\n    context_object_name = \"categories\"\n```", "```py\n{# categories/category_list.html #}\n{% extends \"base.html\" %}\n{% load mptt_tags %}\n\n{% block content %}\n    <ul class=\"root\">\n        {% recursetree categories %}\n            <li>\n                {{ node.title }}\n                {% if not node.is_leaf_node %}\n                    <ul class=\"children\">\n                        {{ children }}\n                    </ul>\n                {% endif %}\n            </li>\n        {% endrecursetree %}\n    </ul>\n{% endblock %}\n```", "```py\n# myproject/urls.py from django.conf.urls.i18n import i18n_patterns\nfrom django.urls import path\n\nfrom myproject.apps.categories import views as categories_views\n\nurlpatterns = i18n_patterns(\n    # \u2026\n    path(\n \"idea-categories/\",\n categories_views.IdeaCategoryList.as_view(),\n name=\"idea_categories\",\n ),\n)\n```", "```py\n# myproject/apps/ideas/forms.py from django import forms\nfrom django.utils.safestring import mark_safe\nfrom django.utils.translation import ugettext_lazy as _\nfrom django.contrib.auth import get_user_model\n\nfrom crispy_forms import bootstrap, helper, layout\nfrom mptt.forms import TreeNodeChoiceField\n\nfrom myproject.apps.categories.models import Category\n\nfrom .models import Idea, RATING_CHOICES\n\nUser = get_user_model()\n\nclass IdeaFilterForm(forms.Form):\n    author = forms.ModelChoiceField(\n        label=_(\"Author\"),\n        required=False,\n        queryset=User.objects.all(),\n    )\n category = TreeNodeChoiceField(\n label=_(\"Category\"),\n required=False,\n queryset=Category.objects.all(),\n level_indicator=mark_safe(\"&nbsp;&nbsp;&nbsp;&nbsp;\")\n )\n    rating = forms.ChoiceField(\n        label=_(\"Rating\"), required=False, choices=RATING_CHOICES\n    )\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        author_field = layout.Field(\"author\")\n        category_field = layout.Field(\"category\")\n        rating_field = layout.Field(\"rating\")\n        submit_button = layout.Submit(\"filter\", _(\"Filter\"))\n        actions = bootstrap.FormActions(submit_button)\n\n        main_fieldset = layout.Fieldset(\n            _(\"Filter\"),\n            author_field,\n            category_field,\n            rating_field,\n            actions,\n        )\n\n        self.helper = helper.FormHelper()\n        self.helper.form_method = \"GET\"\n        self.helper.layout = layout.Layout(main_fieldset)\n```", "```py\n{# ideas/idea_list.html #}\n{% extends \"base.html\" %}\n{% load i18n utility_tags crispy_forms_tags %}\n\n{% block sidebar %}\n {% crispy form %}\n{% endblock %}\n\n{% block main %}\n    {# \u2026 #}\n{% endblock %}\n```", "```py\n# myproject/apps/core/form_fields.py\nfrom django import forms\n\nclass MultipleChoiceTreeField(forms.ModelMultipleChoiceField):\n    widget = forms.CheckboxSelectMultiple\n\n    def label_from_instance(self, obj):\n        return obj\n```", "```py\n# myproject/apps/ideas/forms.py from django import forms\nfrom django.utils.translation import ugettext_lazy as _\nfrom django.contrib.auth import get_user_model\n\nfrom crispy_forms import bootstrap, helper, layout\n\nfrom myproject.apps.categories.models import Category\nfrom myproject.apps.core.form_fields import MultipleChoiceTreeField\n\nfrom .models import Idea, RATING_CHOICES\n\nUser = get_user_model()\n\nclass IdeaForm(forms.ModelForm):\n categories = MultipleChoiceTreeField(\n label=_(\"Categories\"),\n required=False,\n queryset=Category.objects.all(),\n )\n\n    class Meta:\n        model = Idea\n        exclude = [\"author\"]\n\n    def __init__(self, request, *args, **kwargs):\n        self.request = request\n        super().__init__(*args, **kwargs)\n\n        title_field = layout.Field(\"title\")\n        content_field = layout.Field(\"content\", rows=\"3\")\n        main_fieldset = layout.Fieldset(_(\"Main data\"), \n         title_field, content_field)\n\n        picture_field = layout.Field(\"picture\")\n        format_html = layout.HTML(\n            \"\"\"{% include \"ideas/includes/picture_guidelines.html\" \n                %}\"\"\"\n        )\n\n        picture_fieldset = layout.Fieldset(\n            _(\"Picture\"),\n            picture_field,\n            format_html,\n            title=_(\"Image upload\"),\n            css_id=\"picture_fieldset\",\n        )\n\n categories_field = layout.Field(\n \"categories\",\n template=\"core/includes\n            /checkboxselectmultiple_tree.html\"\n        )\n categories_fieldset = layout.Fieldset(\n _(\"Categories\"), categories_field, \n             css_id=\"categories_fieldset\"\n        )\n\n        submit_button = layout.Submit(\"save\", _(\"Save\"))\n        actions = bootstrap.FormActions(submit_button, \n         css_class=\"my-4\")\n\n        self.helper = helper.FormHelper()\n        self.helper.form_action = self.request.path\n        self.helper.form_method = \"POST\"\n        self.helper.layout = layout.Layout(\n            main_fieldset,\n            picture_fieldset,\n categories_fieldset,\n            actions,\n        )\n\n    def save(self, commit=True):\n        instance = super().save(commit=False)\n        instance.author = self.request.user\n        if commit:\n            instance.save()\n            self.save_m2m()\n        return instance\n```", "```py\n{# core/include/checkboxselectmultiple_tree.html #} {% load crispy_forms_filters l10n %}\n\n<div class=\"{% if field_class %} {{ field_class }}{% endif %}\"{% if flat_attrs %} {{ flat_attrs|safe }}{% endif %}>\n\n    {% for choice_value, choice_instance in field.field.choices %}\n    <div class=\"{%if use_custom_control%}custom-control custom-\n     checkbox{% if inline_class %} custom-control-inline{% endif \n     %}{% else %}form-check{% if inline_class %} form-check-\n     inline{% endif %}{% endif %}\">\n        <input type=\"checkbox\" class=\"{%if use_custom_control%}\n         custom-control-input{% else %}form-check-input\n         {% endif %}{% if field.errors %} is-invalid{% endif %}\"\n {% if choice_value in field.value or choice_\n         value|stringformat:\"s\" in field.value or \n         choice_value|stringformat:\"s\" == field.value\n         |default_if_none:\"\"|stringformat:\"s\" %} checked=\n         \"checked\"{% endif %} name=\"{{ field.html_name }}\" \n          id=\"id_{{ field.html_name }}_{{ forloop.counter }}\" \n          value=\"{{ choice_value|unlocalize }}\" {{ field.field\n          .widget.attrs|flatatt }}>\n        <label class=\"{%if use_custom_control%}custom-control-\n         label{% else %}form-check-label{% endif %} level-{{ \n        choice_instance.level }}\" for=\"id_{{ field.html_name \n          }}_{{ forloop.counter }}\">\n            {{ choice_instance|unlocalize }}\n        </label>\n        {% if field.errors and forloop.last and not inline_class %}\n            {% include 'bootstrap4/layout/field_errors_block.html' \n              %}\n        {% endif %}\n    </div>\n    {% endfor %}\n    {% if field.errors and inline_class %}\n    <div class=\"w-100 {%if use_custom_control%}custom-control \n     custom-checkbox{% if inline_class %} custom-control-inline\n     {% endif %}{% else %}form-check{% if inline_class %} form-\n      check-inline{% endif %}{% endif %}\">\n        <input type=\"checkbox\" class=\"custom-control-input {% if \n         field.errors %}is-invalid{%endif%}\">\n        {% include 'bootstrap4/layout/field_errors_block.html' %}\n    </div>\n    {% endif %}\n\n    {% include 'bootstrap4/layout/help_text.html' %}\n</div>\n```", "```py\n# myproject/apps/ideas/views.py from django.contrib.auth.decorators import login_required\nfrom django.shortcuts import render, redirect, get_object_or_404\n\nfrom .forms import IdeaForm\nfrom .models import Idea\n\n@login_required\ndef add_or_change_idea(request, pk=None):\n    idea = None\n    if pk:\n        idea = get_object_or_404(Idea, pk=pk)\n    if request.method == \"POST\":\n        form = IdeaForm(request, data=request.POST, \n         files=request.FILES, instance=idea)\n        if form.is_valid():\n            idea = form.save()\n            return redirect(\"ideas:idea_detail\", pk=idea.pk)\n    else:\n        form = IdeaForm(request, instance=idea)\n\n    context = {\"idea\": idea, \"form\": form}\n    return render(request, \"ideas/idea_form.html\", context)\n```", "```py\n{# ideas/idea_form.html #}\n{% extends \"base.html\" %}\n{% load i18n crispy_forms_tags static %}\n\n{% block content %}\n    <a href=\"{% url \"ideas:idea_list\" %}\">{% trans \"List of ideas\" %}</a>\n    <h1>\n        {% if idea %}\n            {% blocktrans trimmed with title=idea.translated_title \n              %}\n                Change Idea \"{{ title }}\"\n            {% endblocktrans %}\n        {% else %}\n            {% trans \"Add Idea\" %}\n        {% endif %}\n    </h1>\n {% crispy form %}\n{% endblock %}\n```", "```py\n# myproject/apps/ideas/urls.py from django.urls import path\n\nfrom .views import add_or_change_idea\n\nurlpatterns = [\n    # \u2026\n    path(\"add/\", add_or_change_idea, name=\"add_idea\"),\n    path(\"<uuid:pk>/change/\", add_or_change_idea, \n     name=\"change_idea\"),\n]\n```", "```py\n/* myproject/site_static/site/css/style.css */\n.level-0 {margin-left: 0;}\n.level-1 {margin-left: 20px;}\n.level-2 {margin-left: 40px;}\n```", "```py\n(env)$ pip install django-treebeard==4.3\n```", "```py\n# myproject/settings/_base.py\nINSTALLED_APPS = [\n    # \u2026\n    \"treebeard\",\n    # \u2026\n    \"myproject.apps.categories\",\n \"myproject.apps.ideas\",\n]\n```", "```py\n# myproject/apps/categories/models.py\nfrom django.db import models\nfrom django.utils.translation import ugettext_lazy as _\nfrom treebeard.mp_tree import MP_Node\n\nfrom myproject.apps.core.models import CreationModificationDateBase\n\nclass Category(MP_Node, CreationModificationDateBase):\n    title = models.CharField(_(\"Title\"), max_length=200)\n\n    class Meta:\n        verbose_name = _(\"Category\")\n        verbose_name_plural = _(\"Categories\")\n\n    def __str__(self):\n        return self.title\n```", "```py\n(env)$ python manage.py makemigrations\n(env)$ python manage.py migrate\n```", "```py\n# myproject/apps/ideas/models.py from django.db import models\nfrom django.utils.translation import gettext_lazy as _\n\nfrom myproject.apps.core.models import CreationModificationDateBase, UrlBase\n\nclass Idea(CreationModificationDateBase, UrlBase):\n    # \u2026\n categories = models.ManyToManyField(\n \"categories.Category\",\n verbose_name=_(\"Categories\"),\n related_name=\"category_ideas\",\n )\n```", "```py\nancestor_categories = category.get_ancestors()\n```", "```py\nroot = category.get_root()\n```", "```py\nchildren = category.get_children()\n```", "```py\ndescendants = category.get_descendants()\n```", "```py\ndescendants_count = category.get_descendant_count()\n```", "```py\nsiblings = category.get_siblings()\n```", "```py\nprevious_sibling = category.get_prev_sibling()\nnext_sibling = category.get_next_sibling()\n```", "```py\ncategory.is_root()\ncategory.is_leaf()\ncategory.is_child_of(another_category)\ncategory.is_descendant_of(another_category)\ncategory.is_sibling_of(another_category)\n```", "```py\n(env)$ python manage.py collectstatic\n```", "```py\n# myproject/apps/categories/admin.py\nfrom django.contrib import admin\nfrom treebeard.admin import TreeAdmin\nfrom treebeard.forms import movenodeform_factory\n\nfrom .models import Category\n\n@admin.register(Category)\nclass CategoryAdmin(TreeAdmin):\n    form = movenodeform_factory(Category)\n    list_display = [\"title\", \"created\", \"modified\"]\n    list_filter = [\"created\"]\n```"]