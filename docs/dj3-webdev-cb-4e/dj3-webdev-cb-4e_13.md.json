["```py\n/home/myproject/commands/backup_mysql_db.sh\n#!/usr/bin/env bash\nSECONDS=0\nexport DJANGO_SETTINGS_MODULE=myproject.settings.production\nPROJECT_PATH=/home/myproject\nREPOSITORY_PATH=${PROJECT_PATH}/src/myproject\nLOG_FILE=${PROJECT_PATH}/logs/backup_mysql_db.log\nDAY_OF_THE_WEEK=$(LC_ALL=en_US.UTF-8 date +\"%w-%A\")\nDAILY_BACKUP_PATH=${PROJECT_PATH}/db_backups/${DAY_OF_THE_WEEK}.sql\nLATEST_BACKUP_PATH=${PROJECT_PATH}/db_backups/latest.sql\nerror_counter=0\n\nechoerr() { echo \"$@\" 1>&2; }\n\ncd ${PROJECT_PATH}\nmkdir -p logs\nmkdir -p db_backups\n\nsource env/bin/activate\ncd ${REPOSITORY_PATH}\n\nDATABASE=$(echo \"from django.conf import settings; print(settings.DATABASES['default']['NAME'])\" | python manage.py shell -i python)\nUSER=$(echo \"from django.conf import settings; print(settings.DATABASES['default']['USER'])\" | python manage.py shell -i python)\nPASSWORD=$(echo \"from django.conf import settings; print(settings.DATABASES['default']['PASSWORD'])\" | python manage.py shell -i python)\n\nEXCLUDED_TABLES=(\ndjango_session\n)\n\nIGNORED_TABLES_STRING=''\nfor TABLE in \"${EXCLUDED_TABLES[@]}\"; do\n    IGNORED_TABLES_STRING+=\" --ignore-table=${DATABASE}.${TABLE}\"\ndone\n```", "```py\necho \"=== Creating DB Backup ===\" > ${LOG_FILE}\ndate >> ${LOG_FILE}\n\necho \"- Dump structure\" >> ${LOG_FILE}\nmysqldump -u \"${USER}\" -p\"${PASSWORD}\" --single-transaction --no-data \"${DATABASE}\" > \"${DAILY_BACKUP_PATH}\" 2>> ${LOG_FILE}\nfunction_exit_code=$?\nif [[ $function_exit_code -ne 0 ]]; then\n    {\n        echoerr \"Command mysqldump for dumping database structure \n         failed with exit code ($function_exit_code).\"\n        error_counter=$((error_counter + 1))\n    } >> \"${LOG_FILE}\" 2>&1\nfi\n\necho \"- Dump content\" >> ${LOG_FILE}\n# shellcheck disable=SC2086\nmysqldump -u \"${USER}\" -p\"${PASSWORD}\" \"${DATABASE}\" ${IGNORED_TABLES_STRING} >> \"${DAILY_BACKUP_PATH}\" 2>> ${LOG_FILE}\nfunction_exit_code=$?\nif [[ $function_exit_code -ne 0 ]]; then\n    {\n        echoerr \"Command mysqldump for dumping database content \n         failed with exit code ($function_exit_code).\"\n        error_counter=$((error_counter + 1))\n    } >> \"${LOG_FILE}\" 2>&1\nfi\n\n```", "```py\necho \"- Create a *.gz archive\" >> ${LOG_FILE}\ngzip --force \"${DAILY_BACKUP_PATH}\"\nfunction_exit_code=$?\nif [[ $function_exit_code -ne 0 ]]; then\n    {\n        echoerr \"Command gzip failed with exit code \n         ($function_exit_code).\"\n        error_counter=$((error_counter + 1))\n    } >> \"${LOG_FILE}\" 2>&1\nfi\n\necho \"- Create a symlink latest.sql.gz\" >> ${LOG_FILE}\nif [ -e \"${LATEST_BACKUP_PATH}.gz\" ]; then\n    rm \"${LATEST_BACKUP_PATH}.gz\"\nfi\nln -s \"${DAILY_BACKUP_PATH}.gz\" \"${LATEST_BACKUP_PATH}.gz\"\nfunction_exit_code=$?\nif [[ $function_exit_code -ne 0 ]]; then\n    {\n        echoerr \"Command ln failed with exit code \n         ($function_exit_code).\"\n        error_counter=$((error_counter + 1))\n    } >> \"${LOG_FILE}\" 2>&1\nfi\n\n```", "```py\nduration=$SECONDS\necho \"------------------------------------------\" >> ${LOG_FILE}\necho \"The operation took $((duration / 60)) minutes and $((duration % 60)) seconds.\" >> ${LOG_FILE}\nexit $error_counter\n```", "```py\n# home/myproject/commands/restore_mysql_db.sh\n#!/usr/bin/env bash\nSECONDS=0\nPROJECT_PATH=/home/myproject\nREPOSITORY_PATH=${PROJECT_PATH}/src/myproject\nLATEST_BACKUP_PATH=${PROJECT_PATH}/db_backups/latest.sql\nexport DJANGO_SETTINGS_MODULE=myproject.settings.production\n\ncd \"${PROJECT_PATH}\"\nsource env/bin/activate\n\necho \"=== Restoring DB from a Backup ===\"\n\necho \"- Fill the database with schema and data\"\ncd \"${REPOSITORY_PATH}\"\nzcat \"${LATEST_BACKUP_PATH}.gz\" | python manage.py dbshell\n\nduration=$SECONDS\necho \"------------------------------------------\"\necho \"The operation took $((duration / 60)) minutes and $((duration % 60)) seconds.\"\n```", "```py\n$ chmod +x *.sh\n```", "```py\n$ ./backup_mysql_db.sh\n```", "```py\n$ ./restore_mysql_db.sh\n```", "```py\n=== Creating DB Backup ===\nFri Jan 17 02:12:14 CET 2020\n- Dump structure\nmysqldump: [Warning] Using a password on the command line interface can be insecure.\n- Dump content\nmysqldump: [Warning] Using a password on the command line interface can be insecure.\n- Create a *.gz archive\n- Create a symlink latest.sql.gz\n------------------------------------------\nThe operation took 0 minutes and 2 seconds.\n```", "```py\n=== Restoring DB from a Backup ===\n- Fill the database with schema and data\nmysql: [Warning] Using a password on the command line interface can be insecure.\n------------------------------------------\nThe operation took 0 minutes and 2 seconds.\n```", "```py\n/home/myproject/commands/backup_postgresql_db.sh\n#!/usr/bin/env bash\nSECONDS=0\nPROJECT_PATH=/home/myproject\nREPOSITORY_PATH=${PROJECT_PATH}/src/myproject\nLOG_FILE=${PROJECT_PATH}/logs/backup_postgres_db.log\nDAY_OF_THE_WEEK=$(LC_ALL=en_US.UTF-8 date +\"%w-%A\")\nDAILY_BACKUP_PATH=${PROJECT_PATH}/db_backups/${DAY_OF_THE_WEEK}.backup\nLATEST_BACKUP_PATH=${PROJECT_PATH}/db_backups/latest.backup\nerror_counter=0\n\nechoerr() { echo \"$@\" 1>&2; }\n\ncd ${PROJECT_PATH}\nmkdir -p logs\nmkdir -p db_backups\n\nsource env/bin/activate\ncd ${REPOSITORY_PATH}\n\nDATABASE=$(echo \"from django.conf import settings; print(settings.DATABASES['default']['NAME'])\" | python manage.py shell -i python)\n\n```", "```py\necho \"=== Creating DB Backup ===\" > ${LOG_FILE}\ndate >> ${LOG_FILE}\n\necho \"- Dump database\" >> ${LOG_FILE}\npg_dump --format=p --file=\"${DAILY_BACKUP_PATH}\" ${DATABASE}\nfunction_exit_code=$?\nif [[ $function_exit_code -ne 0 ]]; then\n    {\n        echoerr \"Command pg_dump failed with exit code \n         ($function_exit_code).\"\n        error_counter=$((error_counter + 1))\n    } >> \"${LOG_FILE}\" 2>&1\nfi\n\n```", "```py\necho \"- Create a *.gz archive\" >> ${LOG_FILE}\ngzip --force \"${DAILY_BACKUP_PATH}\"\nfunction_exit_code=$?\nif [[ $function_exit_code -ne 0 ]]; then\n    {\n        echoerr \"Command gzip failed with exit code \n         ($function_exit_code).\"\n        error_counter=$((error_counter + 1))\n    } >> \"${LOG_FILE}\" 2>&1\nfi\n\necho \"- Create a symlink latest.backup.gz\" >> ${LOG_FILE}\nif [ -e \"${LATEST_BACKUP_PATH}.gz\" ]; then\n    rm \"${LATEST_BACKUP_PATH}.gz\"\nfi\nln -s \"${DAILY_BACKUP_PATH}.gz\" \"${LATEST_BACKUP_PATH}.gz\"\nfunction_exit_code=$?\nif [[ $function_exit_code -ne 0 ]]; then\n    {\n        echoerr \"Command ln failed with exit code \n         ($function_exit_code).\"\n        error_counter=$((error_counter + 1))\n    } >> \"${LOG_FILE}\" 2>&1\nfi\n\n```", "```py\nduration=$SECONDS\necho \"------------------------------------------\" >> ${LOG_FILE}\necho \"The operation took $((duration / 60)) minutes and $((duration % 60)) seconds.\" >> ${LOG_FILE}\nexit $error_counter\n\n```", "```py\n# /home/myproject/commands/restore_postgresql_db.sh\n#!/usr/bin/env bash\nSECONDS=0\nPROJECT_PATH=/home/myproject\nREPOSITORY_PATH=${PROJECT_PATH}/src/myproject\nLATEST_BACKUP_PATH=${PROJECT_PATH}/db_backups/latest.backup\nexport DJANGO_SETTINGS_MODULE=myproject.settings.production\n\ncd \"${PROJECT_PATH}\"\nsource env/bin/activate\n\ncd \"${REPOSITORY_PATH}\"\n\nDATABASE=$(echo \"from django.conf import settings; print(settings.DATABASES['default']['NAME'])\" | python manage.py shell -i python)\nUSER=$(echo \"from django.conf import settings; print(settings.DATABASES['default']['USER'])\" | python manage.py shell -i python)\nPASSWORD=$(echo \"from django.conf import settings; print(settings.DATABASES['default']['PASSWORD'])\" | python manage.py shell -i python)\n\necho \"=== Restoring DB from a Backup ===\"\n\necho \"- Recreate the database\"\npsql --dbname=$DATABASE --command='SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE datname = current_database() AND pid <> pg_backend_pid();' \ndropdb $DATABASE\n createdb --username=$USER $DATABASE\n\necho \"- Fill the database with schema and data\"\nzcat \"${LATEST_BACKUP_PATH}.gz\" | python manage.py dbshell\n\nduration=$SECONDS\necho \"------------------------------------------\"\necho \"The operation took $((duration / 60)) minutes and $((duration % 60)) seconds.\"\n\n```", "```py\n$ chmod +x *.sh\n```", "```py\n$ ./backup_postgresql_db.sh\n```", "```py\n$ ./restore_postgresql_db.sh\n```", "```py\n=== Creating DB Backup ===\nFri Jan 17 02:40:55 CET 2020\n- Dump database\n- Create a *.gz archive\n- Create a symlink latest.backup.gz\n------------------------------------------\nThe operation took 0 minutes and 1 seconds.\n```", "```py\n=== Restoring DB from a Backup ===\n- Recreate the database\n pg_terminate_backend\n----------------------\n(0 rows)\n\n- Fill the database with schema and data\nSET\nSET\nSET\nSET\nSET\n set_config\n------------\n\n(1 row)\n\nSET\n\n\u2026\n\nALTER TABLE\nALTER TABLE\nALTER TABLE\n------------------------------------------\nThe operation took 0 minutes and 2 seconds.\n```", "```py\n(env)$ mkdir commands db_backups logs\n```", "```py\n# /home/myproject/commands/clear_sessions.sh\n#!/usr/bin/env bash\nSECONDS=0\nexport DJANGO_SETTINGS_MODULE=myproject.settings.production\nPROJECT_PATH=/home/myproject\nREPOSITORY_PATH=${PROJECT_PATH}/src/myproject\nLOG_FILE=${PROJECT_PATH}/logs/clear_sessions.log\nerror_counter=0\n\nechoerr() { echo \"$@\" 1>&2; }\n\ncd ${PROJECT_PATH}\nmkdir -p logs\n\necho \"=== Clearing up Outdated User Sessions ===\" > ${LOG_FILE}\ndate >> ${LOG_FILE}\n\nsource env/bin/activate\ncd ${REPOSITORY_PATH}\npython manage.py clearsessions >> \"${LOG_FILE}\" 2>&1\nfunction_exit_code=$?\nif [[ $function_exit_code -ne 0 ]]; then\n    {\n        echoerr \"Clearing sessions failed with exit code \n         ($function_exit_code).\"\n        error_counter=$((error_counter + 1))\n    } >> \"${LOG_FILE}\" 2>&1\nfi\n\nduration=$SECONDS\necho \"------------------------------------------\" >> ${LOG_FILE}\necho \"The operation took $((duration / 60)) minutes and $((duration % 60)) seconds.\" >> ${LOG_FILE}\nexit $err\nor_counter\n```", "```py\n$ chmod +x *.sh\n```", "```py\n$ ./clear_sessions.sh\n$ ./backup_postgresql_db.sh\n```", "```py\n# /home/myproject/crontab.txt\nMAILTO=\"\"\nHOME=/home/myproject\nPATH=/home/myproject/env/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin\nSHELL=/bin/bash\n00 01 * * * /home/myproject/commands/clear_sessions.sh\n00 02 * * * /home/myproject/commands/backup_postgresql_db.sh\n```", "```py\n(env)$ crontab crontab.txt\n```", "```py\n00 01 * * * /home/myproject/commands/clear_sessions.sh\n```", "```py\n(env)$ pip install django-structlog==1.3.5\n\n```", "```py\n# myproject/settings/_base.py MIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n    \"django.middleware.locale.LocaleMiddleware\",\n \"django_structlog.middlewares.RequestMiddleware\",\n]\n```", "```py\n# myproject/settings/_base.py\nLOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"formatters\": {\n        \"json_formatter\": {\n            \"()\": structlog.stdlib.ProcessorFormatter,\n            \"processor\": structlog.processors.JSONRenderer(),\n        },\n        \"plain_console\": {\n            \"()\": structlog.stdlib.ProcessorFormatter,\n            \"processor\": structlog.dev.ConsoleRenderer(),\n        },\n        \"key_value\": {\n            \"()\": structlog.stdlib.ProcessorFormatter,\n            \"processor\":  \n             structlog.processors.KeyValueRenderer(key_order=\n             ['timestamp', 'level', 'event', 'logger']),\n        },\n    },\n    \"handlers\": {\n        \"console\": {\n            \"class\": \"logging.StreamHandler\",\n            \"formatter\": \"plain_console\",\n        },\n        \"json_file\": {\n            \"class\": \"logging.handlers.WatchedFileHandler\",\n            \"filename\": os.path.join(BASE_DIR, \"tmp\", \"json.log\"),\n            \"formatter\": \"json_formatter\",\n        },\n        \"flat_line_file\": {\n            \"class\": \"logging.handlers.WatchedFileHandler\",\n            \"filename\": os.path.join(BASE_DIR, \"tmp\", \n           \"flat_line.log\"),\n            \"formatter\": \"key_value\",\n        },\n    },\n    \"loggers\": {\n        \"django_structlog\": {\n            \"handlers\": [\"console\", \"flat_line_file\", \"json_file\"],\n            \"level\": \"INFO\",\n        },\n    }\n}\n```", "```py\n# myproject/settings/_base.py\nstructlog.configure(\n    processors=[\n        structlog.stdlib.filter_by_level,\n        structlog.processors.TimeStamper(fmt=\"iso\"),\n        structlog.stdlib.add_logger_name,\n        structlog.stdlib.add_log_level,\n        structlog.stdlib.PositionalArgumentsFormatter(),\n        structlog.processors.StackInfoRenderer(),\n        structlog.processors.format_exc_info,\n        structlog.processors.UnicodeDecoder(),\n        structlog.processors.ExceptionPrettyPrinter(),\n        structlog.stdlib.ProcessorFormatter.wrap_for_formatter,\n    ],\n    context_class=structlog.threadlocal.wrap_dict(dict),\n    logger_factory=structlog.stdlib.LoggerFactory(),\n    wrapper_class=structlog.stdlib.BoundLogger,\n    cache_logger_on_first_use=True,\n) \n```", "```py\n# myproject/apps/likes/views.py\nimport structlog\n\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.http import JsonResponse\nfrom django.views.decorators.cache import never_cache\nfrom django.views.decorators.csrf import csrf_exempt\n\nfrom .models import Like\nfrom .templatetags.likes_tags import liked_count\n\nlogger = structlog.get_logger(\"django_structlog\")\n\n@never_cache\n@csrf_exempt\ndef json_set_like(request, content_type_id, object_id):\n    \"\"\"\n    Sets the object as a favorite for the current user\n    \"\"\"\n    result = {\n        \"success\": False,\n    }\n    if request.user.is_authenticated and request.method == \"POST\":\n        content_type = ContentType.objects.get(id=content_type_id)\n        obj = content_type.get_object_for_this_type(pk=object_id)\n\n        like, is_created = Like.objects.get_or_create(\n            content_type=ContentType.objects.get_for_model(obj),\n            object_id=obj.pk,\n            user=request.user)\n        if is_created:\n            logger.info(\"like_created\",  \n            content_type_id=content_type.pk, \n            object_id=obj.pk)\n        else:\n            like.delete()\n            logger.info(\"like_deleted\",  \n            content_type_id=content_type.pk, \n            object_id=obj.pk) \n\n        result = {\n            \"success\": True,\n            \"action\": \"add\" if is_created else \"remove\",\n            \"count\": liked_count(obj),\n        }\n\n    return JsonResponse(result)\n```", "```py\n{\"request_id\": \"ad0ef355-77ef-4474-a91a-2d9549a0e15d\", \"user_id\": 1, \"ip\": \"127.0.0.1\", \"request\": \"<WSGIRequest: POST '/en/likes/7/1712dfe4-2e77-405c-aa9b-bfa64a1abe98/'>\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36\", \"event\": \"request_started\", \"timestamp\": \"2020-01-18T04:27:00.556135Z\", \"logger\": \"django_structlog.middlewares.request\", \"level\": \"info\"}\n{\"request_id\": \"ad0ef355-77ef-4474-a91a-2d9549a0e15d\", \"user_id\": 1, \"ip\": \"127.0.0.1\", \"content_type_id\": 7, \"object_id\": \"UUID('1712dfe4-2e77-405c-aa9b-bfa64a1abe98')\", \"event\": \"like_created\", \"timestamp\": \"2020-01-18T04:27:00.602640Z\", \"logger\": \"django_structlog\", \"level\": \"info\"}\n{\"request_id\": \"ad0ef355-77ef-4474-a91a-2d9549a0e15d\", \"user_id\": 1, \"ip\": \"127.0.0.1\", \"code\": 200, \"request\": \"<WSGIRequest: POST '/en/likes/7/1712dfe4-2e77-405c-aa9b-bfa64a1abe98/'>\", \"event\": \"request_finished\", \"timestamp\": \"2020-01-18T04:27:00.604577Z\", \"logger\": \"django_structlog.middlewares.request\", \"level\": \"info\"}\n```", "```py\n(env)$ tail -3 tmp/flat_line.log\ntimestamp='2020-01-18T04:27:03.437759Z' level='info' event='request_started' logger='django_structlog.middlewares.request' request_id='a74808ff-c682-4336-aeb9-f043f11a7316' user_id=1 ip='127.0.0.1' request=<WSGIRequest: POST '/en/likes/7/1712dfe4-2e77-405c-aa9b-bfa64a1abe98/'> user_agent='Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36'\ntimestamp='2020-01-18T04:27:03.489198Z' level='info' event='like_deleted' logger='django_structlog' request_id='a74808ff-c682-4336-aeb9-f043f11a7316' user_id=1 ip='127.0.0.1' content_type_id=7 object_id=UUID('1712dfe4-2e77-405c-aa9b-bfa64a1abe98')\ntimestamp='2020-01-18T04:27:03.491927Z' level='info' event='request_finished' logger='django_structlog.middlewares.request' request_id='a74808ff-c682-4336-aeb9-f043f11a7316' user_id=1 ip='127.0.0.1' code=200 request=<WSGIRequest: POST '/en/likes/7/1712dfe4-2e77-405c-aa9b-bfa64a1abe98/'>\n```", "```py\n# myproject/settings/production.py\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'filters': {\n        'require_debug_false': {\n            '()': 'django.utils.log.RequireDebugFalse',\n        },\n        'require_debug_true': {\n            '()': 'django.utils.log.RequireDebugTrue',\n        },\n    },\n    'formatters': {\n        'django.server': {\n            '()': 'django.utils.log.ServerFormatter',\n            'format': '[{server_time}] {message}',\n            'style': '{',\n        }\n    },\n    'handlers': {\n        'console': {\n            'level': 'INFO',\n            'filters': ['require_debug_true'],\n            'class': 'logging.StreamHandler',\n        },\n        'django.server': {\n            'level': 'INFO',\n            'class': 'logging.StreamHandler',\n            'formatter': 'django.server',\n        },\n        'mail_admins': {\n            'level': 'ERROR',\n            'filters': ['require_debug_false'],\n            'class': 'django.utils.log.AdminEmailHandler',\n 'include_html': True,\n        }\n    },\n    'loggers': {\n        'django': {\n            'handlers': ['console', 'mail_admins'],\n            'level': 'INFO',\n        },\n        'django.server': {\n            'handlers': ['django.server'],\n            'level': 'INFO',\n            'propagate': False,\n        },\n    }\n}\n```"]