["```py\n# myproject/apps/idea/models.py import uuid\n\nfrom django.db import models\nfrom django.urls import reverse\nfrom django.conf import settings\nfrom django.utils.translation import gettext_lazy as _\n\nfrom myproject.apps.core.model_fields import TranslatedField\nfrom myproject.apps.core.models import (\n    CreationModificationDateBase, UrlBase\n)\n\nRATING_CHOICES = (\n    (1, \"\u2605\u2606\u2606\u2606\u2606\"), \n    (2, \"\u2605\u2605\u2606\u2606\u2606\"), \n    (3, \"\u2605\u2605\u2605\u2606\u2606\"), \n    (4, \"\u2605\u2605\u2605\u2605\u2606\"),\n    (5, \"\u2605\u2605\u2605\u2605\u2605\"),\n)\n\nclass Idea(CreationModificationDateBase, UrlBase):\n    uuid = models.UUIDField(\n        primary_key=True, default=uuid.uuid4, editable=False\n    )\n    author = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        verbose_name=_(\"Author\"),\n        on_delete=models.SET_NULL,\n        blank=True,\n        null=True,\n        related_name=\"authored_ideas\",\n    )\n    title = models.CharField(_(\"Title\"), max_length=200)\n    content = models.TextField(_(\"Content\"))\n\n    categories = models.ManyToManyField(\n        \"categories.Category\",\n        verbose_name=_(\"Categories\"),\n        related_name=\"category_ideas\",\n    )\n    rating = models.PositiveIntegerField(\n        _(\"Rating\"), choices=RATING_CHOICES, blank=True, null=True\n    )\n    translated_title = TranslatedField(\"title\")\n    translated_content = TranslatedField(\"content\")\n\n    class Meta:\n        verbose_name = _(\"Idea\")\n        verbose_name_plural = _(\"Ideas\")\n\n    def __str__(self):\n        return self.title\n\n    def get_url_path(self):\n        return reverse(\"ideas:idea_detail\", kwargs={\"pk\": self.pk})\n\nclass IdeaTranslations(models.Model):\n    idea = models.ForeignKey(\n        Idea,\n        verbose_name=_(\"Idea\"),\n        on_delete=models.CASCADE,\n        related_name=\"translations\",\n    )\n    language = models.CharField(_(\"Language\"), max_length=7)\n\n    title = models.CharField(_(\"Title\"), max_length=200)\n    content = models.TextField(_(\"Content\"))\n\n    class Meta:\n        verbose_name = _(\"Idea Translations\")\n        verbose_name_plural = _(\"Idea Translations\")\n        ordering = [\"language\"]\n        unique_together = [[\"idea\", \"language\"]]\n\n    def __str__(self):\n        return self.title\n```", "```py\n# myproject/apps/categories/models.py\nfrom django.db import models\nfrom django.utils.translation import gettext_lazy as _\n\nfrom myproject.apps.core.model_fields import TranslatedField\n\nclass Category(models.Model):\n    title = models.CharField(_(\"Title\"), max_length=200)\n\n    translated_title = TranslatedField(\"title\")\n\n    class Meta:\n        verbose_name = _(\"Category\")\n        verbose_name_plural = _(\"Categories\")\n\n    def __str__(self):\n        return self.title\n\nclass CategoryTranslations(models.Model):\n    category = models.ForeignKey(\n        Category,\n        verbose_name=_(\"Category\"),\n        on_delete=models.CASCADE,\n        related_name=\"translations\",\n    )\n    language = models.CharField(_(\"Language\"), max_length=7)\n\n    title = models.CharField(_(\"Title\"), max_length=200)\n\n    class Meta:\n        verbose_name = _(\"Category Translations\")\n        verbose_name_plural = _(\"Category Translations\")\n        ordering = [\"language\"]\n        unique_together = [[\"category\", \"language\"]]\n\n    def __str__(self):\n        return self.title\n```", "```py\n# myprojects/apps/ideas/forms.py from django import forms\nfrom .models import Idea\n\nclass IdeaForm(forms.ModelForm):\n    class Meta:\n        model = Idea\n        fields = \"__all__\"\n```", "```py\n# myproject/apps/ideas/views.py from django.contrib.auth.decorators import login_required\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.views.generic import ListView, DetailView\n\nfrom .forms import IdeaForm\nfrom .models import Idea\n\nclass IdeaList(ListView):\n    model = Idea\n\nclass IdeaDetail(DetailView):\n    model = Idea\n    context_object_name = \"idea\"\n\n@login_required\ndef add_or_change_idea(request, pk=None):\n    idea = None\n    if pk:\n        idea = get_object_or_404(Idea, pk=pk)\n\n    if request.method == \"POST\":\n        form = IdeaForm(\n            data=request.POST, \n            files=request.FILES, \n            instance=idea\n        )\n\n        if form.is_valid():\n            idea = form.save()\n            return redirect(\"ideas:idea_detail\", pk=idea.pk)\n    else:\n        form = IdeaForm(instance=idea)\n\n    context = {\"idea\": idea, \"form\": form}\n    return render(request, \"ideas/idea_form.html\", context)\n\n@login_required\ndef delete_idea(request, pk):\n    idea = get_object_or_404(Idea, pk=pk)\n    if request.method == \"POST\":\n        idea.delete()\n        return redirect(\"ideas:idea_list\")\n    context = {\"idea\": idea}\n    return render(request, \"ideas/idea_deleting_confirmation.html\", context)\n```", "```py\n# myproject/apps/ideas/urls.py from django.urls import path\n\nfrom .views import (\n    IdeaList,\n    IdeaDetail,\n    add_or_change_idea,\n    delete_idea,\n)\n\nurlpatterns = [\n    path(\"\", IdeaList.as_view(), name=\"idea_list\"),\n    path(\"add/\", add_or_change_idea, name=\"add_idea\"),\n    path(\"<uuid:pk>/\", IdeaDetail.as_view(), name=\"idea_detail\"),\n    path(\"<uuid:pk>/change/\", add_or_change_idea,  \n     name=\"change_idea\"),\n    path(\"<uuid:pk>/delete/\", delete_idea, name=\"delete_idea\"),\n]\n```", "```py\n# myproject/urls.py from django.contrib import admin\nfrom django.conf.urls.i18n import i18n_patterns\nfrom django.urls import include, path\nfrom django.conf import settings\nfrom django.conf.urls.static import static\nfrom django.shortcuts import redirect\n\nurlpatterns = i18n_patterns(\n    path(\"\", lambda request: redirect(\"ideas:idea_list\")),\n    path(\"admin/\", admin.site.urls),\n    path(\"accounts/\", include(\"django.contrib.auth.urls\")),\n path(\"ideas/\", include((\"myproject.apps.ideas.urls\", \"ideas\"), \n     namespace=\"ideas\")),\n)\nurlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)\nurlpatterns += static(\"/media/\", document_root=settings.MEDIA_ROOT)\n```", "```py\n{% load i18n %}\n<a href=\"{% url 'ideas:change_idea' pk=idea.pk %}\">{% trans \"Change this idea\" %}</a>\n<a href=\"{% url 'ideas:add_idea' %}\">{% trans \"Add idea\" %}</a>\n```", "```py\n# myprojects/apps/ideas/forms.py from django import forms\nfrom .models import Idea\n\nclass IdeaForm(forms.ModelForm):\n    class Meta:\n        model = Idea\n        exclude = [\"author\"]\n\n def __init__(self, request, *args, **kwargs):\n self.request = request\n super().__init__(*args, **kwargs)\n\n def save(self, commit=True):\n instance = super().save(commit=False)\n instance.author = self.request.user\n if commit:\n instance.save()\n            self.save_m2m()\n return instance\n```", "```py\n# myproject/apps/ideas/views.py from django.contrib.auth.decorators import login_required\nfrom django.shortcuts import render, redirect, get_object_or_404\n\nfrom .forms import IdeaForm\nfrom .models import Idea\n\n@login_required\ndef add_or_change_idea(request, pk=None):\n    idea = None\n    if pk:\n        idea = get_object_or_404(Idea, pk=pk)\n\n    if request.method == \"POST\":\n        form = IdeaForm(request, data=request.POST, \n         files=request.FILES, instance=idea)\n\n        if form.is_valid():\n            idea = form.save()\n            return redirect(\"ideas:idea_detail\", pk=idea.pk)\n    else:\n        form = IdeaForm(request, instance=idea)\n\n    context = {\"idea\": idea, \"form\": form}\n    return render(request, \"ideas/idea_form.html\", context)\n```", "```py\n(env)$ pip install Pillow\n(env)$ pip install django-imagekit==4.0.2\n```", "```py\n# myproject/apps/ideas/models.py\nimport contextlib\nimport os\n\nfrom imagekit.models import ImageSpecField\nfrom pilkit.processors import ResizeToFill\n\nfrom django.db import models\nfrom django.utils.translation import gettext_lazy as _\nfrom django.utils.timezone import now as timezone_now\n\nfrom myproject.apps.core.models import (CreationModificationDateBase, UrlBase)\n\ndef upload_to(instance, filename):\n now = timezone_now()\n base, extension = os.path.splitext(filename)\n extension = extension.lower()\n return f\"ideas/{now:%Y/%m}/{instance.pk}{extension}\"\n\nclass Idea(CreationModificationDateBase, UrlBase):\n    # attributes and fields\u2026\n    picture = models.ImageField(\n        _(\"Picture\"), upload_to=upload_to\n    )\n    picture_social = ImageSpecField(\n        source=\"picture\",\n        processors=[ResizeToFill(1024, 512)],\n        format=\"JPEG\",\n        options={\"quality\": 100},\n    )\n    picture_large = ImageSpecField(\n        source=\"picture\", \n        processors=[ResizeToFill(800, 400)], \n        format=\"PNG\"\n    )\n    picture_thumbnail = ImageSpecField(\n        source=\"picture\", \n        processors=[ResizeToFill(728, 250)], \n        format=\"PNG\"\n    )\n    # other fields, properties, and  methods\u2026\n\n def delete(self, *args, **kwargs):\n from django.core.files.storage import default_storage\n if self.picture:\n with contextlib.suppress(FileNotFoundError):\n default_storage.delete(\n self.picture_social.path\n )\n default_storage.delete(\n self.picture_large.path\n )\n default_storage.delete(\n self.picture_thumbnail.path\n )\n self.picture.delete()\n super().delete(*args, **kwargs)\n```", "```py\n# myproject/apps/ideas/views.py from django.contrib.auth.decorators import login_required\nfrom django.shortcuts import (render, redirect, get_object_or_404)\nfrom django.conf import settings\n\nfrom .forms import IdeaForm\nfrom .models import Idea\n\n@login_required\ndef add_or_change_idea(request, pk=None):\n    idea = None\n    if pk:\n        idea = get_object_or_404(Idea, pk=pk)\n    if request.method == \"POST\":\n        form = IdeaForm(\n            request, \n data=request.POST, \n files=request.FILES, \n            instance=idea,\n        )\n\n        if form.is_valid():\n            idea = form.save()\n            return redirect(\"ideas:idea_detail\", pk=idea.pk)\n    else:\n        form = IdeaForm(request, instance=idea)\n\n    context = {\"idea\": idea, \"form\": form}\n    return render(request, \"ideas/idea_form.html\", context)\n```", "```py\n<form action=\"{{ request.path }}\" method=\"post\" enctype=\"multipart/form-data\">{% csrf_token %}\n{{ form.as_p }}\n<button type=\"submit\">{% trans \"Save\" %}</button>\n</form>\n```", "```py\n<img src=\"img/strong>\" alt=\"\" />\n<img src=\"img/strong>\" alt=\"\" />\n```", "```py\n# myproject/apps/ideas/admin.py from django import forms\nfrom django.contrib import admin\nfrom django.utils.translation import gettext_lazy as _\n\nfrom myproject.apps.core.admin import LanguageChoicesForm\n\nfrom .models import Idea, IdeaTranslations\n\nclass IdeaTranslationsForm(LanguageChoicesForm):\n    class Meta:\n        model = IdeaTranslations\n        fields = \"__all__\"\n\nclass IdeaTranslationsInline(admin.StackedInline):\n    form = IdeaTranslationsForm\n    model = IdeaTranslations\n    extra = 0\n\n@admin.register(Idea)\nclass IdeaAdmin(admin.ModelAdmin):\n inlines = [IdeaTranslationsInline]\n\n fieldsets = [\n (_(\"Author and Category\"), {\"fields\": [\"author\", \"categories\"]}),\n (_(\"Title and Content\"), {\"fields\": [\"title\", \"content\", \n         \"picture\"]}),\n (_(\"Ratings\"), {\"fields\": [\"rating\"]}),\n ]\n```", "```py\n# myproject/settings/_base.py\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n \"django.forms\",\n    # other apps\u2026\n]\n\nTEMPLATES = [\n    {\n        \"BACKEND\": \n        \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [os.path.join(BASE_DIR, \"myproject\", \"templates\")],\n \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",\n\n                \"django.contrib.messages.context_processors\n                 .messages\",\n                \"django.template.context_processors.media\",\n                \"django.template.context_processors.static\",\n                \"myproject.apps.core.context_processors\n                .website_url\",\n            ]\n        },\n    }\n]\n\nFORM_RENDERER = \"django.forms.renderers.TemplatesSetting\"\n```", "```py\n# myproject/apps/ideas/admin.py from django import forms\nfrom django.contrib import admin\nfrom django.utils.translation import gettext_lazy as _\n\nfrom myproject.apps.core.admin import LanguageChoicesForm\n\nfrom myproject.apps.categories.models import Category\nfrom .models import Idea, IdeaTranslations\n\nclass IdeaTranslationsForm(LanguageChoicesForm):\n    class Meta:\n        model = IdeaTranslations\n        fields = \"__all__\"\n\nclass IdeaTranslationsInline(admin.StackedInline):\n    form = IdeaTranslationsForm\n    model = IdeaTranslations\n    extra = 0\n\nclass IdeaForm(forms.ModelForm):\n categories = forms.ModelMultipleChoiceField(\n label=_(\"Categories\"),\n queryset=Category.objects.all(),\n widget=forms.CheckboxSelectMultiple(),\n required=True,\n )\n\n class Meta:\n model = Idea\n fields = \"__all__\"\n\n    def __init__(self, *args, **kwargs):\n super().__init__(*args, **kwargs)\n\n self.fields[\n \"picture\"\n        ].widget.template_name = \"core/widgets/image.html\"\n\n@admin.register(Idea)\nclass IdeaAdmin(admin.ModelAdmin):\n form = IdeaForm\n    inlines = [IdeaTranslationsInline]\n\n    fieldsets = [\n        (_(\"Author and Category\"), {\"fields\": [\"author\", \n         \"categories\"]}),\n        (_(\"Title and Content\"), {\"fields\": [\"title\", \"content\", \n         \"picture\"]}),\n        (_(\"Ratings\"), {\"fields\": [\"rating\"]}),\n    ]\n```", "```py\n{# core/widgets/image.html #} {% load i18n %}\n\n<div style=\"margin-left: 160px; padding-left: 10px;\">\n    {% if widget.is_initial %}\n        <a href=\"{{ widget.value.url }}\">\n <img src=\"img/{{ widget.value.url }}\" width=\"624\" \n             height=\"auto\" alt=\"\" />\n </a>\n        {% if not widget.required %}<br />\n            {{ widget.clear_checkbox_label }}:\n            <input type=\"checkbox\" name=\"{{ widget.checkbox_name \n             }}\" id=\"{{ widget.checkbox_id }}\">\n        {% endif %}<br />\n        {{ widget.input_text }}:\n    {% endif %}\n    <input type=\"{{ widget.type }}\" name=\"{{ widget.name }}\"{% \n     include \"django/forms/widgets/attrs.html\" %}>\n</div>\n<div class=\"help\">\n {% trans \"Available formats are JPG, GIF, and PNG.\" %}\n {% trans \"Minimal size is 800 x 800 px.\" %}\n</div>\n```", "```py\n(env)$ pip install django-crispy-forms\n```", "```py\n# myproject/settings/_base.py\nINSTALLED_APPS = (\n    # ...\n    \"crispy_forms\",\n    \"ideas\",\n)\n# ...\nCRISPY_TEMPLATE_PACK = \"bootstrap4\"\n```", "```py\n# myproject/apps/ideas/forms.py from django import forms\nfrom django.utils.translation import ugettext_lazy as _\nfrom django.conf import settings\nfrom django.db import models\n\nfrom crispy_forms import bootstrap, helper, layout\n\nfrom .models import Idea\n\nclass IdeaForm(forms.ModelForm):\n    class Meta:\n        model = Idea\n        exclude = [\"author\"]\n\n    def __init__(self, request, *args, **kwargs):\n        self.request = request\n        super().__init__(*args, **kwargs)\n\n self.fields[\"categories\"].widget = \n         forms.CheckboxSelectMultiple()\n\n title_field = layout.Field(\n            \"title\", css_class=\"input-block-level\"\n        )\n content_field = layout.Field(\n            \"content\", css_class=\"input-block-level\", rows=\"3\"\n        )\n main_fieldset = layout.Fieldset(\n            _(\"Main data\"), title_field, content_field\n        )\n\n picture_field = layout.Field(\n            \"picture\", css_class=\"input-block-level\"\n        )\n format_html = layout.HTML(\n \"\"\"{% include \"ideas/includes\n                /picture_guidelines.html\" %}\"\"\"\n        )\n\n picture_fieldset = layout.Fieldset(\n _(\"Picture\"),\n picture_field,\n format_html,\n title=_(\"Image upload\"),\n css_id=\"picture_fieldset\",\n )\n\n categories_field = layout.Field(\n            \"categories\", css_class=\"input-block-level\"\n        )\n categories_fieldset = layout.Fieldset(\n _(\"Categories\"), categories_field,\n            css_id=\"categories_fieldset\"\n        )\n\n submit_button = layout.Submit(\"save\", _(\"Save\"))\n actions = bootstrap.FormActions(submit_button)\n\n self.helper = helper.FormHelper()\n self.helper.form_action = self.request.path\n self.helper.form_method = \"POST\"\n        self.helper.layout = layout.Layout(\n main_fieldset,\n picture_fieldset,\n categories_fieldset,\n actions,\n )\n\n    def save(self, commit=True):\n        instance = super().save(commit=False)\n        instance.author = self.request.user\n        if commit:\n            instance.save()\n            self.save_m2m()\n        return instance\n```", "```py\n{# ideas/includes/picture_guidelines.html #} {% load i18n %}\n<p class=\"form-text text-muted\">\n    {% trans \"Available formats are JPG, GIF, and PNG.\" %}\n    {% trans \"Minimal size is 800 \u00d7 800 px.\" %}\n</p>\n```", "```py\n{# ideas/idea_form.html #} {% extends \"base.html\" %}\n{% load i18n crispy_forms_tags static %}\n\n{% block content %}\n    <a href=\"{% url \"ideas:idea_list\" %}\">{% trans \"List of \n     ideas\" %}</a>\n    <h1>\n        {% if idea %}\n            {% blocktrans trimmed with \n             title=idea.translated_title %}\n                Change Idea \"{{ title }}\n            {% endblocktrans %}\n        {% else %}\n            {% trans \"Add Idea\" %}\n        {% endif %}\n```", "```py\n    </h1>\n    {% crispy form %}\n{% endblock %}\n```", "```py\n# myproject/apps/ideas/forms.py from django import forms\nfrom django.utils.translation import ugettext_lazy as _\nfrom django.conf import settings\nfrom django.db import models\n\nfrom crispy_forms import bootstrap, helper, layout\n\nfrom .models import Idea, IdeaTranslations\n\nclass IdeaForm(forms.ModelForm):\n    class Meta:\n        model = Idea\n        exclude = [\"author\"]\n\n    def __init__(self, request, *args, **kwargs):\n        self.request = request\n        super().__init__(*args, **kwargs)\n\n        self.fields[\"categories\"].widget = \n         forms.CheckboxSelectMultiple()\n\n        title_field = layout.Field(\n            \"title\", css_class=\"input-block-level\"\n        )\n        content_field = layout.Field(\n            \"content\", css_class=\"input-block-level\", rows=\"3\"\n        )\n        main_fieldset = layout.Fieldset(\n            _(\"Main data\"), title_field, content_field\n        )\n\n        picture_field = layout.Field(\n            \"picture\", css_class=\"input-block-level\"\n        )\n        format_html = layout.HTML(\n            \"\"\"{% include \"ideas/includes\n                /picture_guidelines.html\" %}\"\"\"\n        )\n\n        picture_fieldset = layout.Fieldset(\n            _(\"Picture\"),\n            picture_field,\n            format_html,\n            title=_(\"Image upload\"),\n            css_id=\"picture_fieldset\",\n        )\n\n        categories_field = layout.Field(\n            \"categories\", css_class=\"input-block-level\"\n        )\n        categories_fieldset = layout.Fieldset(\n            _(\"Categories\"), categories_field,\n            css_id=\"categories_fieldset\"\n        )\n\n        inline_translations = layout.HTML(\n \"\"\"{% include \"ideas/forms/translations.html\" %}\"\"\"\n        )\n\n        submit_button = layout.Submit(\"save\", _(\"Save\"))\n        actions = bootstrap.FormActions(submit_button)\n\n        self.helper = helper.FormHelper()\n        self.helper.form_action = self.request.path\n        self.helper.form_method = \"POST\"\n        self.helper.layout = layout.Layout(\n            main_fieldset,\n            inline_translations,\n            picture_fieldset,\n            categories_fieldset,\n            actions,\n        )\n\n    def save(self, commit=True):\n        instance = super().save(commit=False)\n        instance.author = self.request.user\n        if commit:\n            instance.save()\n            self.save_m2m()\n        return instance\n```", "```py\nclass IdeaTranslationsForm(forms.ModelForm):\n language = forms.ChoiceField(\n label=_(\"Language\"),\n choices=settings.LANGUAGES_EXCEPT_THE_DEFAULT,\n required=True,\n )\n\n class Meta:\n model = IdeaTranslations\n exclude = [\"idea\"]\n\n def __init__(self, request, *args, **kwargs):\n self.request = request\n super().__init__(*args, **kwargs)\n\n id_field = layout.Field(\"id\")\n language_field = layout.Field(\n            \"language\", css_class=\"input-block-level\"\n        )\n title_field = layout.Field(\n            \"title\", css_class=\"input-block-level\"\n        )\n content_field = layout.Field(\n            \"content\", css_class=\"input-block-level\", rows=\"3\"\n        )\n delete_field = layout.Field(\"DELETE\")\n main_fieldset = layout.Fieldset(\n _(\"Main data\"),\n id_field,\n language_field,\n title_field,\n content_field,\n delete_field,\n )\n\n self.helper = helper.FormHelper()\n self.helper.form_tag = False\n        self.helper.disable_csrf = True\n        self.helper.layout = layout.Layout(main_fieldset)\n```", "```py\n# myproject/apps/ideas/views.py from django.contrib.auth.decorators import login_required\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.forms import modelformset_factory\nfrom django.conf import settings\n\nfrom .forms import IdeaForm, IdeaTranslationsForm\nfrom .models import Idea, IdeaTranslations\n\n@login_required\ndef add_or_change_idea(request, pk=None):\n    idea = None\n    if pk:\n        idea = get_object_or_404(Idea, pk=pk)\n    IdeaTranslationsFormSet = modelformset_factory(\n IdeaTranslations, form=IdeaTranslationsForm, \n extra=0, can_delete=True\n    )\n    if request.method == \"POST\":\n        form = IdeaForm(request, data=request.POST, \n         files=request.FILES, instance=idea)\n        translations_formset = IdeaTranslationsFormSet(\n queryset=IdeaTranslations.objects.filter(idea=idea),\n data=request.POST,\n files=request.FILES,\n prefix=\"translations\",\n form_kwargs={\"request\": request},\n )\n        if form.is_valid() and translations_formset.is_valid():\n            idea = form.save()\n translations = translations_formset.save(\n commit=False\n            )\n for translation in translations:\n translation.idea = idea\n translation.save()\n translations_formset.save_m2m()\n for translation in \n             translations_formset.deleted_objects:\n translation.delete()\n            return redirect(\"ideas:idea_detail\", pk=idea.pk)\n    else:\n        form = IdeaForm(request, instance=idea)\n translations_formset = IdeaTranslationsFormSet(\n queryset=IdeaTranslations.objects.filter(idea=idea),\n prefix=\"translations\",\n form_kwargs={\"request\": request},\n )\n\n    context = {\n        \"idea\": idea, \n        \"form\": form, \n \"translations_formset\": translations_formset\n    }\n    return render(request, \"ideas/idea_form.html\", context)\n```", "```py\n{# ideas/idea_form.html #}\n{% extends \"base.html\" %}\n{% load i18n crispy_forms_tags static %}\n\n{% block content %}\n    <a href=\"{% url \"ideas:idea_list\" %}\">{% trans \"List of \n     ideas\" %}</a>\n    <h1>\n        {% if idea %}\n            {% blocktrans trimmed with \n             title=idea.translated_title %}\n                Change Idea \"{{ title }}\"\n            {% endblocktrans %}\n        {% else %}\n            {% trans \"Add Idea\" %}\n        {% endif %}\n    </h1>\n    {% crispy form %}\n{% endblock %}\n\n{% block js %}\n <script src=\"img/inlines.js' %}\"></script>\n{% endblock %}\n```", "```py\n{# ideas/forms/translations.html #} {% load i18n crispy_forms_tags %}\n<section id=\"translations_section\" class=\"formset my-3\">\n    {{ translations_formset.management_form }}\n    <h3>{% trans \"Translations\" %}</h3>\n    <div class=\"formset-forms\">\n        {% for formset_form in translations_formset %}\n            <div class=\"formset-form\">\n                {% crispy formset_form %}\n            </div>\n        {% endfor %}\n    </div>\n    <button type=\"button\" class=\"btn btn-primary btn-sm \n     add-inline-form\">{% trans \"Add translations to another \n     language\" %}</button>\n    <div class=\"empty-form d-none\">\n        {% crispy translations_formset.empty_form %}\n    </div>\n</section>\n```", "```py\n/* site/js/inlines.js */ window.WIDGET_INIT_REGISTER = window.WIDGET_INIT_REGISTER || [];\n\n$(function () {\n    function reinit_widgets($formset_form) {\n        $(window.WIDGET_INIT_REGISTER).each(function (index, func) \n        {\n            func($formset_form);\n        });\n    }\n\n    function set_index_for_fields($formset_form, index) {\n        $formset_form.find(':input').each(function () {\n            var $field = $(this);\n            if ($field.attr(\"id\")) {\n                $field.attr(\n                    \"id\",\n                    $field.attr(\"id\").replace(/-__prefix__-/, \n                     \"-\" + index + \"-\")\n                );\n            }\n            if ($field.attr(\"name\")) {\n                $field.attr(\n                    \"name\",\n                    $field.attr(\"name\").replace(\n                        /-__prefix__-/, \"-\" + index + \"-\"\n                    )\n                );\n            }\n        });\n        $formset_form.find('label').each(function () {\n            var $field = $(this);\n            if ($field.attr(\"for\")) {\n                $field.attr(\n                    \"for\",\n                    $field.attr(\"for\").replace(\n                        /-__prefix__-/, \"-\" + index + \"-\"\n                    )\n                );\n            }\n        });\n        $formset_form.find('div').each(function () {\n            var $field = $(this);\n            if ($field.attr(\"id\")) {\n                $field.attr(\n                    \"id\",\n                    $field.attr(\"id\").replace(\n                        /-__prefix__-/, \"-\" + index + \"-\"\n                    )\n                );\n            }\n        });\n    }\n\n    function add_delete_button($formset_form) {\n        $formset_form.find('input:checkbox[id$=DELETE]')\n         .each(function () {\n            var $checkbox = $(this);\n            var $deleteLink = $(\n                '<button class=\"delete btn btn-sm \n                  btn-danger mb-3\">Remove</button>'\n            );\n            $formset_form.append($deleteLink);\n            $checkbox.closest('.form-group').hide();\n        });\n\n    }\n\n    $('.add-inline-form').click(function (e) {\n        e.preventDefault();\n        var $formset = $(this).closest('.formset');\n        var $total_forms = $formset.find('[id$=\"TOTAL_FORMS\"]');\n        var $new_form = $formset.find('.empty-form')\n        .clone(true).attr(\"id\", null);\n        $new_form.removeClass('empty-form d-none')\n        .addClass('formset-form');\n        set_index_for_fields($new_form, \n         parseInt($total_forms.val(), 10));\n        $formset.find('.formset-forms').append($new_form);\n        add_delete_button($new_form);\n        $total_forms.val(parseInt($total_forms.val(), 10) + 1);\n        reinit_widgets($new_form);\n    });\n    $('.formset-form').each(function () {\n        $formset_form = $(this);\n        add_delete_button($formset_form);\n        reinit_widgets($formset_form);\n    });\n    $(document).on('click', '.delete', function (e) {\n        e.preventDefault();\n        var $formset = $(this).closest('.formset-form');\n        var $checkbox = \n        $formset.find('input:checkbox[id$=DELETE]');\n        $checkbox.attr(\"checked\", \"checked\");\n        $formset.hide();\n    });\n});\n```", "```py\n/* site/js/main.js */ function apply_tooltips($formset_form) {\n    $formset_form.find('[data-toggle=\"tooltip\"]').tooltip();\n}\n\n/* register widget initialization for a formset form */\nwindow.WIDGET_INIT_REGISTER = window.WIDGET_INIT_REGISTER || [];\nwindow.WIDGET_INIT_REGISTER.push(apply_tooltips);\n```", "```py\n<button data-toggle=\"tooltip\" title=\"{% trans 'Remove this translation' %}\">{% trans \"Remove\" %}</button>\n```", "```py\n# myproject/apps/ideas/forms.py from django import forms\nfrom django.utils.translation import ugettext_lazy as _\nfrom django.db import models\nfrom django.contrib.auth import get_user_model\n\nfrom myproject.apps.categories.models import Category\n\nfrom .models import RATING_CHOICES\n\nUser = get_user_model()\n\nclass IdeaFilterForm(forms.Form):\n    author = forms.ModelChoiceField(\n        label=_(\"Author\"),\n        required=False,\n        queryset=User.objects.annotate(\n            idea_count=models.Count(\"authored_ideas\")\n        ).filter(idea_count__gt=0),\n    )\n    category = forms.ModelChoiceField(\n        label=_(\"Category\"),\n        required=False,\n        queryset=Category.objects.annotate(\n            idea_count=models.Count(\"category_ideas\")\n        ).filter(idea_count__gt=0),\n    )\n    rating = forms.ChoiceField(\n        label=_(\"Rating\"), required=False, choices=RATING_CHOICES\n    )\n```", "```py\n# myproject/apps/ideas/views.py\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.conf import settings\n\nfrom .forms import IdeaFilterForm\nfrom .models import Idea, RATING_CHOICES\n\nPAGE_SIZE = getattr(settings, \"PAGE_SIZE\", 24)\n\ndef idea_list(request):\n    qs = Idea.objects.order_by(\"title\")\n    form = IdeaFilterForm(data=request.GET)\n\n    facets = {\n        \"selected\": {},\n        \"categories\": {\n            \"authors\": form.fields[\"author\"].queryset,\n            \"categories\": form.fields[\"category\"].queryset,\n            \"ratings\": RATING_CHOICES,\n        },\n    }\n\n    if form.is_valid():\n        filters = (\n            # query parameter, filter parameter\n            (\"author\", \"author\"),\n            (\"category\", \"categories\"),\n            (\"rating\", \"rating\"),\n        )\n        qs = filter_facets(facets, qs, form, filters)\n\n    context = {\"form\": form, \"facets\": facets, \"object_list\": qs}\n    return render(request, \"ideas/idea_list.html\", context)\n```", "```py\ndef filter_facets(facets, qs, form, filters):\n    for query_param, filter_param in filters:\n        value = form.cleaned_data[query_param]\n        if value:\n            selected_value = value\n            if query_param == \"rating\":\n                rating = int(value)\n                selected_value = (rating, \n                 dict(RATING_CHOICES)[rating])\n            facets[\"selected\"][query_param] = selected_value\n            filter_args = {filter_param: value}\n            qs = qs.filter(**filter_args).distinct()\n    return qs\n```", "```py\n{# ideas/idea_list.html #}\n{% extends \"base.html\" %}\n{% load i18n utility_tags %}\n\n{% block sidebar %}\n    {% include \"ideas/includes/filters.html\" %}\n{% endblock %}\n\n{% block main %}\n    <h1>{% trans \"Ideas\" %}</h1>\n    {% if object_list %}\n        {% for idea in object_list %}\n            <a href=\"{{ idea.get_url_path }}\" class=\"d-block my-3\">\n                <div class=\"card\">\n                  <img src=\"img/{{ idea.picture_thumbnail.url }}\" \n                   alt=\"\" />\n                  <div class=\"card-body\">\n                    <p class=\"card-text\">{{ idea.translated_title \n                     }}</p>\n                  </div>\n                </div>\n            </a>\n        {% endfor %}\n    {% else %}\n        <p>{% trans \"There are no ideas yet.\" %}</p>\n    {% endif %}\n    <a href=\"{% url 'ideas:add_idea' %}\" class=\"btn btn-primary\">\n     {% trans \"Add idea\" %}</a>\n{% endblock %}\n```", "```py\n{# ideas/includes/filters.html #} {% load i18n utility_tags %}\n<div class=\"filters panel-group\" id=\"accordion\">\n    {% with title=_('Author') selected=facets.selected.author %}\n        <div class=\"panel panel-default my-3\">\n            {% include \"misc/includes/filter_heading.html\" with \n             title=title %}\n            <div id=\"collapse-{{ title|slugify }}\"\n                 class=\"panel-collapse{% if not selected %} \n                  collapse{% endif %}\">\n                <div class=\"panel-body\"><div class=\"list-group\">\n                    {% include \"misc/includes/filter_all.html\" with \n                     param=\"author\" %}\n                    {% for cat in facets.categories.authors %}\n                        <a class=\"list-group-item\n                          {% if selected == cat %}\n                          active{% endif %}\"\n                           href=\"{% modify_query \"page\" \n                            author=cat.pk %}\">\n                            {{ cat }}</a>\n                    {% endfor %}\n                </div></div>\n            </div>\n        </div>\n    {% endwith %}\n    {% with title=_('Category') selected=facets.selected\n      .category %}\n        <div class=\"panel panel-default my-3\">\n            {% include \"misc/includes/filter_heading.html\" with \n               title=title %}\n            <div id=\"collapse-{{ title|slugify }}\"\n                 class=\"panel-collapse{% if not selected %} \n                  collapse{% endif %}\">\n                <div class=\"panel-body\"><div class=\"list-group\">\n                    {% include \"misc/includes/filter_all.html\" with \n                      param=\"category\" %}\n                    {% for cat in facets.categories.categories %}\n                        <a class=\"list-group-item\n                          {% if selected == cat %}\n                          active{% endif %}\"\n                           href=\"{% modify_query \"page\" \n                            category=cat.pk %}\">\n                            {{ cat }}</a>\n                    {% endfor %}\n                </div></div>\n            </div>\n        </div>\n    {% endwith %}\n    {% with title=_('Rating') selected=facets.selected.rating %}\n        <div class=\"panel panel-default my-3\">\n            {% include \"misc/includes/filter_heading.html\" with \n              title=title %}\n            <div id=\"collapse-{{ title|slugify }}\"\n                 class=\"panel-collapse{% if not selected %} \n                  collapse{% endif %}\">\n                <div class=\"panel-body\"><div class=\"list-group\">\n                    {% include \"misc/includes/filter_all.html\" with \n                     param=\"rating\" %}\n                    {% for r_val, r_display in \n                      facets.categories.ratings %}\n                        <a class=\"list-group-item\n                          {% if selected.0 == r_val %}\n                          active{% endif %}\"\n                           href=\"{% modify_query \"page\" \n                            rating=r_val %}\">\n                            {{ r_display }}</a>\n                    {% endfor %}\n                </div></div>\n            </div>\n        </div>\n    {% endwith %}\n</div>\n```", "```py\n{# misc/includes/filter_heading.html #} {% load i18n %}\n<div class=\"panel-heading\">\n    <h6 class=\"panel-title\">\n        <a data-toggle=\"collapse\" data-parent=\"#accordion\"\n           href=\"#collapse-{{ title|slugify }}\">\n            {% blocktrans trimmed %}\n                Filter by {{ title }}\n            {% endblocktrans %}\n        </a>\n    </h6>\n</div>\n```", "```py\n{# misc/includes/filter_all.html #} {% load i18n utility_tags %}\n<a class=\"list-group-item {% if not selected %}active{% endif %}\"\n   href=\"{% modify_query \"page\" param %}\">\n    {% trans \"All\" %}\n</a>\n```", "```py\n# myproject/apps/ideas/urls.py from django.urls import path\n\nfrom .views import idea_list\n\nurlpatterns = [\n    path(\"\", idea_list, name=\"idea_list\"),\n    # other paths\u2026\n]\n```", "```py\n# myproject/apps/ideas/views.py\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.conf import settings\nfrom django.core.paginator import (EmptyPage, PageNotAnInteger, Paginator)\n\nfrom .forms import IdeaFilterForm\nfrom .models import Idea, RATING_CHOICES\n\nPAGE_SIZE = getattr(settings, \"PAGE_SIZE\", 24)\n\ndef idea_list(request):\n    qs = Idea.objects.order_by(\"title\")\n    form = IdeaFilterForm(data=request.GET)\n\n    facets = {\n        \"selected\": {},\n        \"categories\": {\n            \"authors\": form.fields[\"author\"].queryset,\n            \"categories\": form.fields[\"category\"].queryset,\n            \"ratings\": RATING_CHOICES,\n        },\n    }\n\n    if form.is_valid():\n        filters = (\n            # query parameter, filter parameter\n            (\"author\", \"author\"),\n            (\"category\", \"categories\"),\n            (\"rating\", \"rating\"),\n        )\n        qs = filter_facets(facets, qs, form, filters)\n\n paginator = Paginator(qs, PAGE_SIZE)\n page_number = request.GET.get(\"page\")\n try:\n page = paginator.page(page_number)\n except PageNotAnInteger:\n # If page is not an integer, show first page.\n page = paginator.page(1)\n except EmptyPage:\n # If page is out of range, show last existing page.\n page = paginator.page(paginator.num_pages)\n\n    context = {\n        \"form\": form,\n        \"facets\": facets, \n        \"object_list\": page,\n    }\n    return render(request, \"ideas/idea_list.html\", context)\n```", "```py\n{# ideas/idea_list.html #}\n{% extends \"base.html\" %}\n{% load i18n utility_tags %}\n\n{% block sidebar %}\n    {% include \"ideas/includes/filters.html\" %}\n{% endblock %}\n\n{% block main %}\n    <h1>{% trans \"Ideas\" %}</h1>\n    {% if object_list %}\n        {% for idea in object_list %}\n            <a href=\"{{ idea.get_url_path }}\" class=\"d-block my-3\">\n                <div class=\"card\">\n                  <img src=\"img/{{ idea.picture_thumbnail.url }}\" \n                   alt=\"\" />\n                  <div class=\"card-body\">\n                    <p class=\"card-text\">{{ idea.translated_title \n                     }}</p>\n                  </div>\n                </div>\n            </a>\n        {% endfor %}\n        {% include \"misc/includes/pagination.html\" %}\n    {% else %}\n        <p>{% trans \"There are no ideas yet.\" %}</p>\n    {% endif %}\n    <a href=\"{% url 'ideas:add_idea' %}\" class=\"btn btn-primary\">\n     {% trans \"Add idea\" %}</a>\n{% endblock %}\n```", "```py\n{# misc/includes/pagination.html #} {% load i18n utility_tags %}\n{% if object_list.has_other_pages %}\n    <nav aria-label=\"{% trans 'Page navigation' %}\">\n\n        <ul class=\"pagination\">\n            {% if object_list.has_previous %}\n                <li class=\"page-item\"><a class=\"page-link\" href=\"{% \n          modify_query page=object_list.previous_page_number %}\">\n                    {% trans \"Previous\" %}</a></li>\n            {% else %}\n                <li class=\"page-item disabled\"><span class=\"page-\n                 link\">{% trans \"Previous\" %}</span></li>\n            {% endif %}\n\n            {% for page_number in object_list.paginator\n             .page_range %}\n                {% if page_number == object_list.number %}\n                    <li class=\"page-item active\">\n                        <span class=\"page-link\">{{ page_number }}\n                            <span class=\"sr-only\">{% trans \n                             \"(current)\" %}</span>\n                        </span>\n                    </li>\n                {% else %}\n                    <li class=\"page-item\">\n                        <a class=\"page-link\" href=\"{% modify_query \n                         page=page_number %}\">\n                            {{ page_number }}</a>\n                    </li>\n                {% endif %}\n            {% endfor %}\n\n            {% if object_list.has_next %}\n                <li class=\"page-item\"><a class=\"page-link\" href=\"{% \n             modify_query page=object_list.next_page_number %}\">\n                    {% trans \"Next\" %}</a></li>\n            {% else %}\n                <li class=\"page-item disabled\"><span class=\"page-\n                 link\">{% trans \"Next\" %}</span></li>\n            {% endif %}\n        </ul>\n    </nav>\n{% endif %}\n```", "```py\n# myproject/apps/ideas/views.py\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.conf import settings\nfrom django.core.paginator import (EmptyPage, PageNotAnInteger, Paginator)\nfrom django.views.generic import View\n\nfrom .forms import IdeaFilterForm\nfrom .models import Idea, RATING_CHOICES\n\nPAGE_SIZE = getattr(settings, \"PAGE_SIZE\", 24)\n\nclass IdeaListView(View):\n    form_class = IdeaFilterForm\n    template_name = \"ideas/idea_list.html\"\n\n    def get(self, request, *args, **kwargs):\n        form = self.form_class(data=request.GET)\n        qs, facets = self.get_queryset_and_facets(form)\n        page = self.get_page(request, qs)\n        context = {\"form\": form, \"facets\": facets, \n         \"object_list\": page}\n        return render(request, self.template_name, context)\n\n    def get_queryset_and_facets(self, form):\n        qs = Idea.objects.order_by(\"title\")\n        facets = {\n            \"selected\": {},\n            \"categories\": {\n                \"authors\": form.fields[\"author\"].queryset,\n                \"categories\": form.fields[\"category\"].queryset,\n                \"ratings\": RATING_CHOICES,\n            },\n        }\n        if form.is_valid():\n            filters = (\n                # query parameter, filter parameter\n                (\"author\", \"author\"),\n                (\"category\", \"categories\"),\n                (\"rating\", \"rating\"),\n            )\n            qs = self.filter_facets(facets, qs, form, filters)\n        return qs, facets\n\n    @staticmethod\n    def filter_facets(facets, qs, form, filters):\n        for query_param, filter_param in filters:\n            value = form.cleaned_data[query_param]\n            if value:\n                selected_value = value\n                if query_param == \"rating\":\n                    rating = int(value)\n                    selected_value = (rating,  \n                     dict(RATING_CHOICES)[rating])\n                facets[\"selected\"][query_param] = selected_value\n                filter_args = {filter_param: value}\n                qs = qs.filter(**filter_args).distinct()\n        return qs\n\n    def get_page(self, request, qs):\n        paginator = Paginator(qs, PAGE_SIZE)\n        page_number = request.GET.get(\"page\")\n        try:\n            page = paginator.page(page_number)\n        except PageNotAnInteger:\n            page = paginator.page(1)\n        except EmptyPage:\n            page = paginator.page(paginator.num_pages)\n        return page\n```", "```py\n# myproject/apps/ideas/urls.py from django.urls import path\n\nfrom .views import IdeaListView\n\nurlpatterns = [\npath(\"\", IdeaListView.as_view(), name=\"idea_list\"),\n    # other paths\u2026\n]\n```", "```py\n# myproject/settings/dev.py from ._base import *\n\nDEBUG = True\nWEBSITE_URL = \"http://127.0.0.1:8000\" # without trailing slash\nMEDIA_URL = f\"{WEBSITE_URL}/media/\"\n\n```", "```py\n# myproject/apps/core/context_processors.py from django.conf import settings\n\ndef website_url(request):\n    return {\n        \"WEBSITE_URL\": settings.WEBSITE_URL,\n    }\n```", "```py\n# myproject/settings/_base.py\nTEMPLATES = [\n    {\n        \"BACKEND\": \n        \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [os.path.join(BASE_DIR, \"myproject\", \"templates\")],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",\n                \"django.contrib.messages.context_processors\n                 .messages\",\n                \"django.template.context_processors.media\",\n                \"django.template.context_processors.static\",\n                \"myproject.apps.core.context_processors\n                .website_url\",\n            ]\n        },\n    }\n]\n```", "```py\n{# ideas/idea_detail.html #} {% extends \"base.html\" %}\n{% load i18n %}\n\n{% block meta_tags %}\n <meta property=\"og:type\" content=\"website\" />\n <meta property=\"og:url\" content=\"{{ WEBSITE_URL }}\n     {{ request.path }}\" />\n <meta property=\"og:title\" content=\"{{ idea.translated_title }}\" \n     />\n {% if idea.picture_social %}\n <meta property=\"og:image\" content=\n         \"{{ idea.picture_social.url }}\" />\n <!-- Next tags are optional but recommended -->\n        <meta property=\"og:image:width\" content=\n         \"{{ idea.picture_social.width }}\" />\n <meta property=\"og:image:height\" content=\n         \"{{ idea.picture_social.height }}\" />\n {% endif %}\n <meta property=\"og:description\" content=\n     \"{{ idea.translated_content }}\" />\n <meta property=\"og:site_name\" content=\"MyProject\" />\n <meta property=\"og:locale\" content=\"{{ LANGUAGE_CODE }}\" />\n\n <meta name=\"twitter:card\" content=\"summary_large_image\">\n <meta name=\"twitter:site\" content=\"@DjangoTricks\">\n <meta name=\"twitter:creator\" content=\"@archatas\">\n <meta name=\"twitter:url\" content=\"{{ WEBSITE_URL }}\n     {{ request.path }}\">\n <meta name=\"twitter:title\" content=\n     \"{{ idea.translated_title }}\">\n <meta name=\"twitter:description\" content=\n     \"{{ idea.translated_content }}\">\n {% if idea.picture_social %}\n <meta name=\"twitter:image\" content=\n         \"{{ idea.picture_social.url }}\">\n {% endif %}\n{% endblock %}\n\n{% block content %}\n    <a href=\"{% url \"ideas:idea_list\" %}\">\n     {% trans \"List of ideas\" %}</a>\n    <h1>\n        {% blocktrans trimmed with title=idea.translated_title %}\n            Idea \"{{ title }}\"\n        {% endblocktrans %}\n    </h1>\n    <img src=\"img/{{ idea.picture_large.url }}\" alt=\"\" />\n    {{ idea.translated_content|linebreaks|urlize }}\n    <p>\n        {% for category in idea.categories.all %}\n            <span class=\"badge badge-pill badge-info\">\n             {{ category.translated_title }}</span>\n        {% endfor %}\n    </p>\n    <a href=\"{% url 'ideas:change_idea' pk=idea.pk %}\" \n     class=\"btn btn-primary\">{% trans \"Change this idea\" %}</a>\n    <a href=\"{% url 'ideas:delete_idea' pk=idea.pk %}\" \n     class=\"btn btn-danger\">{% trans \"Delete this idea\" %}</a>\n{% endblock %} \n```", "```py\n(env)$ pip install django-json-ld==0.0.4\n```", "```py\n# myproject/settings/_base.py\nINSTALLED_APPS = [\n    # other apps\u2026\n \"django_json_ld\",\n]\n```", "```py\n# myproject/apps/ideas/models.py\nfrom django.db import models\nfrom django.utils.translation import gettext_lazy as _\n\nfrom myproject.apps.core.models import ( CreationModificationDateBase, UrlBase )\n\nclass Idea(CreationModificationDateBase, UrlBase):\n    # attributes, fields, properties, and methods\u2026\n\n @property\n    def structured_data(self):\n from django.utils.translation import get_language\n\n lang_code = get_language()\n data = {\n \"@type\": \"CreativeWork\",\n \"name\": self.translated_title,\n \"description\": self.translated_content,\n \"inLanguage\": lang_code,\n }\n if self.author:\n data[\"author\"] = {\n \"@type\": \"Person\",\n \"name\": self.author.get_full_name() or \n                 self.author.username,\n }\n if self.picture:\n data[\"image\"] = self.picture_social.url\n return data\n```", "```py\n{# ideas/idea_detail.html #} {% extends \"base.html\" %}\n{% load i18n json_ld %}\n\n{% block meta_tags %}\n    {# Open Graph and Twitter Card meta tags here\u2026 #}\n\n    {% render_json_ld idea.structured_data %}\n{% endblock %}\n\n{% block content %}\n    <a href=\"{% url \"ideas:idea_list\" %}\">\n     {% trans \"List of ideas\" %}</a>\n    <h1>\n        {% blocktrans trimmed with title=idea.translated_title %}\n            Idea \"{{ title }}\"\n        {% endblocktrans %}\n    </h1>\n    <img src=\"img/{{ idea.picture_large.url }}\" alt=\"\" />\n    {{ idea.translated_content|linebreaks|urlize }}\n    <p>\n        {% for category in idea.categories.all %}\n            <span class=\"badge badge-pill badge-info\">\n             {{ category.translated_title }}</span>\n        {% endfor %}\n    </p>\n    <a href=\"{% url 'ideas:change_idea' pk=idea.pk %}\" \n     class=\"btn btn-primary\">{% trans \"Change this idea\" %}</a>\n    <a href=\"{% url 'ideas:delete_idea' pk=idea.pk %}\" \n     class=\"btn btn-danger\">{% trans \"Delete this idea\" %}</a>\n{% endblock %}\n```", "```py\n<script type=application/ld+json>{\"@type\": \"CreativeWork\", \"author\": {\"@type\": \"Person\", \"name\": \"admin\"}, \"description\": \"Lots of African countries have not enough water. Dig a water channel throughout Africa to provide water to people who have no access to it.\", \"image\": \"http://127.0.0.1:8000/media/CACHE/images/ideas/2019/09/b919eec5-c077-41f0-afb4-35f221ab550c_bOFBDgv/9caa5e61fc832f65ff6382f3d482807a.jpg\", \"inLanguage\": \"en\", \"name\": \"Dig a water channel throughout Africa\"}</script>\n```", "```py\n$ brew install python3 cairo pango gdk-pixbuf libffi\n```", "```py\n(env)$ pip install WeasyPrint==48\n```", "```py\n(env)$ pip install django-qr-code==1.0.0\n```", "```py\n# myproject/settings/_base.py\nINSTALLED_APPS = [    \n    # Django apps\u2026\n    \"qr_code\",\n]\n```", "```py\n# myproject/apps/ideas/views.py\nfrom django.shortcuts import get_object_or_404\nfrom .models import Idea\n\ndef idea_handout_pdf(request, pk):\n    from django.template.loader import render_to_string\n    from django.utils.timezone import now as timezone_now\n    from django.utils.text import slugify\n    from django.http import HttpResponse\n\n    from weasyprint import HTML\n    from weasyprint.fonts import FontConfiguration\n\n    idea = get_object_or_404(Idea, pk=pk)\n    context = {\"idea\": idea}\n    html = render_to_string(\n        \"ideas/idea_handout_pdf.html\", context\n    )\n\n    response = HttpResponse(content_type=\"application/pdf\")\n    response[\n        \"Content-Disposition\"\n    ] = \"inline; filename={date}-{name}-handout.pdf\".format(\n        date=timezone_now().strftime(\"%Y-%m-%d\"),\n        name=slugify(idea.translated_title),\n    )\n\n    font_config = FontConfiguration()\n    HTML(string=html).write_pdf(\n        response, font_config=font_config\n    )\n\n    return response\n```", "```py\n# myproject/apps/ideas/urls.py from django.urls import path\n\nfrom .views import idea_handout_pdf\n\nurlpatterns = [\n    # URL configurations\u2026\n    path(\n \"<uuid:pk>/handout/\",\n idea_handout_pdf,\n name=\"idea_handout\",\n ),\n]\n```", "```py\n{# ideas/idea_handout_pdf.html #} {% extends \"base_pdf.html\" %}\n{% load i18n qr_code %}\n\n{% block content %}\n    <h1 class=\"h3\">{% trans \"Handout\" %}</h1>\n    <h2 class=\"h1\">{{ idea.translated_title }}</h2>\n    <img src=\"img/{{ idea.picture_large.url }}\" alt=\"\" \n     class=\"img-responsive w-100\" />\n    <div class=\"my-3\">{{ idea.translated_content|linebreaks|\n     urlize }}</div>\n    <p>\n        {% for category in idea.categories.all %}\n            <span class=\"badge badge-pill badge-info\">\n             {{ category.translated_title }}</span>\n        {% endfor %}\n    </p>\n    <h4>{% trans \"See more information online:\" %}</h4>\n    {% qr_from_text idea.get_url size=20 border=0 as svg_code %}\n    <img alt=\"\" src=\"img/>     {{ svg_code|urlencode }}\" />\n    <p class=\"mt-3 text-break\">{{ idea.get_url }}</p>\n{% endblock %}\n```", "```py\n{# base_pdf.html #} <!doctype html>\n{% load i18n static %}\n<html lang=\"en\">\n<head>\n    <!-- Required meta tags -->\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, \n     initial-scale=1, shrink-to-fit=no\">\n\n    <!-- Bootstrap CSS -->\n    <link rel=\"stylesheet\"      \n     href=\"https://stackpath.bootstrapcdn.com\n      /bootstrap/4.3.1/css/bootstrap.min.css\"\n          integrity=\"sha384-\n           ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY\n           /iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">\n\n    <title>{% trans \"Hello, World!\" %}</title>\n\n    <style>\n    @page {\n        size: \"A4\";\n        margin: 2.5cm 1.5cm 3.5cm 1.5cm;\n    }\n    footer {\n        position: fixed;\n        bottom: -2.5cm;\n        width: 100%;\n        text-align: center;\n        font-size: 10pt;\n    }\n    footer img {\n        height: 1.5cm;\n    }\n    </style>\n\n    {% block meta_tags %}{% endblock %}\n</head>\n<body>\n    <main class=\"container\">\n        {% block content %}\n        {% endblock %}\n    </main>\n    <footer>\n        <img alt=\"\" src=\"img/>         {# url-encoded SVG logo goes here #}\" />\n        <br />\n        {% trans \"Printed from MyProject\" %}\n    </footer>\n</body>\n</html>\n```", "```py\n(env)$ pip install django-haystack==2.8.1\n(env)$ pip install Whoosh==2.7.4\n```", "```py\n# myproject/apps/search/multilingual_whoosh_backend.py from django.conf import settings\nfrom django.utils import translation\nfrom haystack.backends.whoosh_backend import (\n    WhooshSearchBackend,\n    WhooshSearchQuery,\n    WhooshEngine,\n)\nfrom haystack import connections\nfrom haystack.constants import DEFAULT_ALIAS\n\nclass MultilingualWhooshSearchBackend(WhooshSearchBackend):\n    def update(self, index, iterable, commit=True, \n     language_specific=False):\n        if not language_specific and self.connection_alias == \n         \"default\":\n            current_language = (translation.get_language() or \n             settings.LANGUAGE_CODE)[\n                :2\n            ]\n            for lang_code, lang_name in settings.LANGUAGES:\n                lang_code_underscored = lang_code.replace(\"-\", \"_\")\n                using = f\"default_{lang_code_underscored}\"\n                translation.activate(lang_code)\n                backend = connections[using].get_backend()\n                backend.update(index, iterable, commit, \n                 language_specific=True)\n            translation.activate(current_language)\n        elif language_specific:\n            super().update(index, iterable, commit)\n\nclass MultilingualWhooshSearchQuery(WhooshSearchQuery):\n    def __init__(self, using=DEFAULT_ALIAS):\n        lang_code_underscored =   \n        translation.get_language().replace(\"-\", \"_\")\n        using = f\"default_{lang_code_underscored}\"\n        super().__init__(using=using)\n\nclass MultilingualWhooshEngine(WhooshEngine):\n    backend = MultilingualWhooshSearchBackend\n    query = MultilingualWhooshSearchQuery\n```", "```py\n# myproject/apps/search/search_indexes.py from haystack import indexes\n\nfrom myproject.apps.ideas.models import Idea\n\nclass IdeaIndex(indexes.SearchIndex, indexes.Indexable):\n    text = indexes.CharField(document=True)\n\n    def get_model(self):\n        return Idea\n\n    def index_queryset(self, using=None):\n        \"\"\"\n        Used when the entire index for model is updated.\n        \"\"\"\n        return self.get_model().objects.all()\n\n    def prepare_text(self, idea):\n        \"\"\"\n        Called for each language / backend\n        \"\"\"\n        fields = [\n            idea.translated_title, idea.translated_content\n        ]\n        fields += [\n            category.translated_title \n            for category in idea.categories.all()\n        ]\n        return \"\\n\".join(fields)\n```", "```py\n# myproject/settings/_base.py import os\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(\n    os.path.abspath(__file__)\n)))\n\n#\u2026\n\nINSTALLED_APPS = [\n    # contributed\n    # \u2026\n    # third-party\n    # \u2026\n    \"haystack\",\n    # local\n    \"myproject.apps.core\",\n    \"myproject.apps.categories\",\n    \"myproject.apps.ideas\",\n    \"myproject.apps.search\",\n]\n\nLANGUAGE_CODE = \"en\"\n\n# All official languages of European Union\nLANGUAGES = [\n    (\"bg\", \"Bulgarian\"),\n    (\"hr\", \"Croatian\"),\n    (\"cs\", \"Czech\"),\n    (\"da\", \"Danish\"),\n    (\"nl\", \"Dutch\"),\n    (\"en\", \"English\"),\n    (\"et\", \"Estonian\"),\n    (\"fi\", \"Finnish\"),\n    (\"fr\", \"French\"),\n    (\"de\", \"German\"),\n    (\"el\", \"Greek\"),\n    (\"hu\", \"Hungarian\"),\n    (\"ga\", \"Irish\"),\n    (\"it\", \"Italian\"),\n    (\"lv\", \"Latvian\"),\n    (\"lt\", \"Lithuanian\"),\n    (\"mt\", \"Maltese\"),\n    (\"pl\", \"Polish\"),\n    (\"pt\", \"Portuguese\"),\n    (\"ro\", \"Romanian\"),\n    (\"sk\", \"Slovak\"),\n    (\"sl\", \"Slovene\"),\n    (\"es\", \"Spanish\"),\n    (\"sv\", \"Swedish\"),\n]\n\nHAYSTACK_CONNECTIONS = {}\nfor lang_code, lang_name in LANGUAGES:\n lang_code_underscored = lang_code.replace(\"-\", \"_\")\n HAYSTACK_CONNECTIONS[f\"default_{lang_code_underscored}\"] = {\n \"ENGINE\":   \n \"myproject.apps.search.multilingual_whoosh_backend\n  .MultilingualWhooshEngine\",\n \"PATH\": os.path.join(BASE_DIR, \"tmp\", \n  f\"whoosh_index_{lang_code_underscored}\"),\n }\n lang_code_underscored = LANGUAGE_CODE.replace(\"-\", \"_\")\n HAYSTACK_CONNECTIONS[\"default\"] = HAYSTACK_CONNECTIONS[\n f\"default_{lang_code_underscored}\"\n]\n```", "```py\n# myproject/urls.py from django.contrib import admin\nfrom django.conf.urls.i18n import i18n_patterns\nfrom django.urls import include, path\nfrom django.conf import settings\nfrom django.conf.urls.static import static\nfrom django.shortcuts import redirect\n\nurlpatterns = i18n_patterns(\n    path(\"\", lambda request: redirect(\"ideas:idea_list\")),\n    path(\"admin/\", admin.site.urls),\n    path(\"accounts/\", include(\"django.contrib.auth.urls\")),\n    path(\"ideas/\", include((\"myproject.apps.ideas.urls\", \"ideas\"), \n    namespace=\"ideas\")),\n    path(\"search/\", include(\"haystack.urls\")),\n)\nurlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)\nurlpatterns += static(\"/media/\", document_root=settings.MEDIA_ROOT)\n```", "```py\n{# search/search.html #}\n{% extends \"base.html\" %}\n{% load i18n %}\n\n{% block sidebar %}\n    <form method=\"get\" action=\"{{ request.path }}\">\n        <div class=\"well clearfix\">\n            {{ form.as_p }}\n            <p class=\"pull-right\">\n                <button type=\"submit\" class=\"btn btn-primary\">\n                 {% trans \"Search\" %}</button>\n            </p>\n        </div>\n    </form>\n{% endblock %}\n\n{% block main %}\n    {% if query %}\n        <h1>{% trans \"Search Results\" %}</h1>\n\n        {% for result in page.object_list %}\n            {% with idea=result.object %}\n                <a href=\"{{ idea.get_url_path }}\" \n                 class=\"d-block my-3\">\n                    <div class=\"card\">\n                      <img src=\"img/{{ idea.picture_thumbnail.url }}\" \n                       alt=\"\" />\n                      <div class=\"card-body\">\n                        <p class=\"card-text\">\n                         {{ idea.translated_title }}</p>\n                      </div>\n                    </div>\n                </a>\n            {% endwith %}\n        {% empty %}\n            <p>{% trans \"No results found.\" %}</p>\n        {% endfor %}\n\n        {% include \"misc/includes/pagination.html\" with \n         object_list=page %}\n    {% endif %}\n{% endblock %}\n```", "```py\n(env)$ python manage.py rebuild_index --noinput\n```", "```py\n$ brew install elasticsearch\n```", "```py\n(env)$ pip install django-elasticsearch-dsl==6.4.1\n```", "```py\n# myproject/settings/_base.py \nINSTALLED_APPS = [\n    # other apps\u2026\n    \"django_elasticsearch_dsl\",\n]\n\nELASTICSEARCH_DSL={\n 'default': {\n 'hosts': 'localhost:9200'\n    },\n}\n```", "```py\n# myproject/apps/ideas/documents.py\nfrom django.conf import settings\nfrom django.utils.translation import get_language, activate\nfrom django.db import models\n\nfrom django_elasticsearch_dsl import fields\nfrom django_elasticsearch_dsl.documents import (\n    Document,\n    model_field_class_to_field_class,\n)\nfrom django_elasticsearch_dsl.registries import registry\n\nfrom myproject.apps.categories.models import Category\nfrom .models import Idea\n\ndef _get_url_path(instance, language):\n    current_language = get_language()\n    activate(language)\n    url_path = instance.get_url_path()\n    activate(current_language)\n    return url_path\n\n@registry.register_document\nclass IdeaDocument(Document):\n    author = fields.NestedField(\n        properties={\n            \"first_name\": fields.StringField(),\n            \"last_name\": fields.StringField(),\n            \"username\": fields.StringField(),\n            \"pk\": fields.IntegerField(),\n        },\n        include_in_root=True,\n    )\n    title_bg = fields.StringField()\n    title_hr = fields.StringField()\n    # other title_* fields for each language in the LANGUAGES \n      setting\u2026\n    content_bg = fields.StringField()\n    content_hr = fields.StringField()\n    # other content_* fields for each language in the LANGUAGES \n      setting\u2026\n\n    picture_thumbnail_url = fields.StringField()\n\n    categories = fields.NestedField(\n        properties=dict(\n            pk=fields.IntegerField(),\n            title_bg=fields.StringField(),\n            title_hr=fields.StringField(),\n            # other title_* definitions for each language in the \n              LANGUAGES setting\u2026\n        ),\n        include_in_root=True,\n    )\n\n    url_path_bg = fields.StringField()\n    url_path_hr = fields.StringField()\n    # other url_path_* fields for each language in the LANGUAGES \n      setting\u2026\n\n    class Index:\n        name = \"ideas\"\n        settings = {\"number_of_shards\": 1, \"number_of_replicas\": 0}\n\n    class Django:\n        model = Idea\n        # The fields of the model you want to be indexed in \n          Elasticsearch\n        fields = [\"uuid\", \"rating\"]\n        related_models = [Category]\n\n    def get_instances_from_related(self, related_instance):\n        if isinstance(related_instance, Category):\n            category = related_instance\n            return category.category_ideas.all()\n```", "```py\n    def prepare(self, instance):\n        lang_code_underscored = settings.LANGUAGE_CODE.replace\n         (\"-\", \"_\")\n        setattr(instance, f\"title_{lang_code_underscored}\", \n         instance.title)\n        setattr(instance, f\"content_{lang_code_underscored}\", \n         instance.content)\n        setattr(\n            instance,\n            f\"url_path_{lang_code_underscored}\",\n            _get_url_path(instance=instance, \n              language=settings.LANGUAGE_CODE),\n        )\n        for lang_code, lang_name in \n         settings.LANGUAGES_EXCEPT_THE_DEFAULT:\n            lang_code_underscored = lang_code.replace(\"-\", \"_\")\n            setattr(instance, f\"title_{lang_code_underscored}\", \n             \"\")\n            setattr(instance, f\"content_{lang_code_underscored}\", \n             \"\")\n            translations = instance.translations.filter(language=\n             lang_code).first()\n            if translations:\n                setattr(instance, f\"title_{lang_code_underscored}\", \n                 translations.title)\n                setattr(\n                    instance, f\"content_{lang_code_underscored}\", \n                     translations.content\n                )\n            setattr(\n                instance,\n                f\"url_path_{lang_code_underscored}\",\n                _get_url_path(instance=instance, \n                  language=lang_code),\n            )\n        data = super().prepare(instance=instance)\n        return data\n\n    def prepare_picture_thumbnail_url(self, instance):\n        if not instance.picture:\n            return \"\"\n        return instance.picture_thumbnail.url\n\n    def prepare_author(self, instance):\n        author = instance.author\n        if not author:\n            return []\n        author_dict = {\n            \"pk\": author.pk,\n            \"first_name\": author.first_name,\n            \"last_name\": author.last_name,\n            \"username\": author.username,\n        }\n        return [author_dict]\n\n    def prepare_categories(self, instance):\n        categories = []\n        for category in instance.categories.all():\n            category_dict = {\"pk\": category.pk}\n            lang_code_underscored = \n             settings.LANGUAGE_CODE.replace(\"-\", \"_\")\n            category_dict[f\"title_{lang_code_underscored}\"] = \n             category.title\n            for lang_code, lang_name in \n             settings.LANGUAGES_EXCEPT_THE_DEFAULT:\n                lang_code_underscored = lang_code.replace(\"-\", \"_\")\n                category_dict[f\"title_{lang_code_underscored}\"] = \n                 \"\"\n                translations = \n                 category.translations.filter(language=\n                  lang_code).first()\n                if translations:\n                    category_dict[f\"title_{lang_code_underscored}\"] \n                   = translations.title\n            categories.append(category_dict)\n        return categories\n```", "```py\n    @property\n    def translated_title(self):\n        lang_code_underscored = get_language().replace(\"-\", \"_\")\n        return getattr(self, f\"title_{lang_code_underscored}\", \"\")\n\n    @property\n    def translated_content(self):\n        lang_code_underscored = get_language().replace(\"-\", \"_\")\n        return getattr(self, f\"content_{lang_code_underscored}\", \n         \"\")\n\n    def get_url_path(self):\n        lang_code_underscored = get_language().replace(\"-\", \"_\")\n        return getattr(self, f\"url_path_{lang_code_underscored}\", \n         \"\")\n\n    def get_categories(self):\n        lang_code_underscored = get_language().replace(\"-\", \"_\")\n        return [\n            dict(\n                translated_title=category_dict[f\"title_{lang_\n                 code_underscored}\"],\n                **category_dict,\n            )\n            for category_dict in self.categories\n        ] \n```", "```py\nmodel_field_class_to_field_class[models.UUIDField] = fields.TextField\n```", "```py\n# myproject/apps/ideas/forms.py from django import forms\nfrom django.utils.translation import ugettext_lazy as _\n\nfrom crispy_forms import helper, layout\n\nclass IdeaSearchForm(forms.Form):\n    q = forms.CharField(label=_(\"Search for\"), required=False)\n\n    def __init__(self, request, *args, **kwargs):\n        self.request = request\n        super().__init__(*args, **kwargs)\n\n        self.helper = helper.FormHelper()\n        self.helper.form_action = self.request.path\n        self.helper.form_method = \"GET\"\n        self.helper.layout = layout.Layout(\n            layout.Field(\"q\", css_class=\"input-block-level\"),\n            layout.Submit(\"search\", _(\"Search\")),\n        )\n```", "```py\n# myproject/apps/ideas/views.py from django.shortcuts import render\nfrom django.conf import settings\nfrom django.core.paginator import EmptyPage, PageNotAnInteger, Paginator\nfrom django.utils.functional import LazyObject\n\nfrom .forms import IdeaSearchForm\n\nPAGE_SIZE = getattr(settings, \"PAGE_SIZE\", 24)\n\nclass SearchResults(LazyObject):\n    def __init__(self, search_object):\n        self._wrapped = search_object\n\n    def __len__(self):\n        return self._wrapped.count()\n\n    def __getitem__(self, index):\n        search_results = self._wrapped[index]\n        if isinstance(index, slice):\n            search_results = list(search_results)\n        return search_results\n\ndef search_with_elasticsearch(request):\n    from .documents import IdeaDocument\n    from elasticsearch_dsl.query import Q\n\n    form = IdeaSearchForm(request, data=request.GET)\n\n    search = IdeaDocument.search()\n\n    if form.is_valid():\n        value = form.cleaned_data[\"q\"]\n        lang_code_underscored = request.LANGUAGE_CODE.replace(\"-\", \n          \"_\")\n        search = search.query(\n            Q(\"match_phrase\", **{f\"title_{\n             lang_code_underscored}\": \n             value})\n            | Q(\"match_phrase\", **{f\"content_{\n               lang_code_underscored}\": value})\n            | Q(\n                \"nested\",\n                path=\"categories\",\n                query=Q(\n                    \"match_phrase\",\n                    **{f\"categories__title_{\n                     lang_code_underscored}\": value},\n                ),\n            )\n        )\n    search_results = SearchResults(search)\n\n    paginator = Paginator(search_results, PAGE_SIZE)\n    page_number = request.GET.get(\"page\")\n    try:\n        page = paginator.page(page_number)\n    except PageNotAnInteger:\n        # If page is not an integer, show first page.\n        page = paginator.page(1)\n    except EmptyPage:\n        # If page is out of range, show last existing page.\n        page = paginator.page(paginator.num_pages)\n\n    context = {\"form\": form, \"object_list\": page}\n    return render(request, \"ideas/idea_search.html\", context)\n```", "```py\n{# ideas/idea_search.html #}\n{% extends \"base.html\" %}\n{% load i18n crispy_forms_tags %}\n\n{% block sidebar %}\n    {% crispy form %}\n{% endblock %}\n\n{% block main %}\n    <h1>{% trans \"Search Results\" %}</h1>\n    {% if object_list %}\n        {% for idea in object_list %}\n            <a href=\"{{ idea.get_url_path }}\" class=\"d-block my-3\">\n                <div class=\"card\">\n                  <img src=\"img/{{ idea.picture_thumbnail_url }}\" \n                    alt=\"\" />\n                  <div class=\"card-body\">\n                    <p class=\"card-text\">{{ idea.translated_title \n                      }}</p>\n                  </div>\n                </div>\n            </a>\n        {% endfor %}\n        {% include \"misc/includes/pagination.html\" %}\n    {% else %}\n        <p>{% trans \"No ideas found.\" %}</p>\n    {% endif %}\n{% endblock %}\n```", "```py\n(env)$ python manage.py search_index --rebuild\n```"]