["```py\n# myproject/settings/_base.py\nMIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n    \"django.middleware.locale.LocaleMiddleware\",\n]\n```", "```py\n# myproject/apps/ideas/views.py from django.contrib.auth.decorators import login_required\nfrom django.shortcuts import render\n\n@login_required\ndef add_or_change_idea(request, pk=None):\n    # \u2026\n    return render(request, \"ideas/idea_form.html\", context)\n```", "```py\n{# ideas/idea_form.html #}\n{% extends \"base.html\" %}\n{% load i18n crispy_forms_tags static %}\n\n{% block content %}\n    <h1>\n        {% if idea %}\n            {% blocktrans trimmed with title=idea\n             .translated_title %}\n                Change Idea \"{{ title }}\"\n            {% endblocktrans %}\n        {% else %}\n            {% trans \"Add Idea\" %}\n        {% endif %}\n    </h1>\n    <form action=\"{{ request.path }}\" method=\"post\">\n {% csrf_token %}\n        {{ form.as_p }}\n        <p>\n            <button type=\"submit\">{% trans \"Save\" %}</button>\n        </p>\n    </form>\n{% endblock %}\n```", "```py\n{# ideas/idea_form.html #}\n{% extends \"base.html\" %}\n{% load i18n crispy_forms_tags static %}\n\n{% block content %}\n    <h1>\n        {% if idea %}\n            {% blocktrans trimmed with title=idea\n             .translated_title %}\n                Change Idea \"{{ title }}\"\n            {% endblocktrans %}\n        {% else %}\n            {% trans \"Add Idea\" %}\n        {% endif %}\n    </h1>\n    {% crispy form %}\n{% endblock %}\n```", "```py\nfrom django.views.decorators.csrf import csrf_protect\n\n@csrf_protect\ndef my_protected_form_view():\n    # \u2026\n```", "```py\nfrom django.views.decorators.csrf import csrf_exempt\n\n@csrf_exempt\ndef my_unsecured_form_view():\n    # \u2026\n```", "```py\n<input type=\"hidden\" name=\"csrfmiddlewaretoken\" value=\"29sQH3UhogpseHH60eEaTq0xKen9TvbKe5lpT9xs30cR01dy5QVAtATWmAHvUZFk\">\n```", "```py\nvar input = document.querySelector('[name=\"csrfmiddlewaretoken\"]');\nvar csrfToken = input && input.value; \n```", "```py\nvar csrfToken = Cookies.get('crsftoken');\n```", "```py\nvar CSRF_SAFE_METHODS = ['GET', 'HEAD', 'OPTIONS', 'TRACE'];\n$.ajaxSetup({\n    beforeSend: function(xhr, settings) {\n        if (CSRF_SAFE_METHODS.indexOf(settings.type) < 0\n            && !this.crossDomain) {\n            xhr.setRequestHeader(\"X-CSRFToken\", csrfToken);\n        } \n    }\n});\n```", "```py\n(env)$ pip install django-csp==3.6\n```", "```py\n# myproject/settings/_base.py\nMIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n    \"django.middleware.locale.LocaleMiddleware\",\n    \"csp.middleware.CSPMiddleware\",\n]\n```", "```py\n# myproject/settings/_base.py\nCSP_DEFAULT_SRC = [\n    \"'self'\",\n    \"https://stackpath.bootstrapcdn.com/\",\n]\nCSP_SCRIPT_SRC = [\n    \"'self'\",\n    \"https://stackpath.bootstrapcdn.com/\",\n    \"https://code.jquery.com/\",\n    \"https://cdnjs.cloudflare.com/\",\n]\nCSP_IMG_SRC = [\"*\", \"data:\"]\nCSP_FRAME_SRC = [\"*\"]\n```", "```py\n<script nonce=\"{{ request.csp_nonce }}\">\n    window.settings = {\n        STATIC_URL: '{{ STATIC_URL }}',\n        MEDIA_URL: '{{ MEDIA_URL }}',\n    }\n</script>\n```", "```py\n<meta http-equiv=\"Content-Security-Policy\" content=\"img-src * data:; default-src 'self' https://stackpath.bootstrapcdn.com/ 'nonce-WWNu7EYqfTcVVZDs'; frame-src *; script-src 'self' https://stackpath.bootstrapcdn.com/ https://code.jquery.com/ https://cdnjs.cloudflare.com/\">\n```", "```py\nContent-Security-Policy: img-src * data:; default-src 'self' https://stackpath.bootstrapcdn.com/ 'nonce-WWNu7EYqfTcVVZDs'; frame-src *; script-src 'self' https://stackpath.bootstrapcdn.com/ https://code.jquery.com/ https://cdnjs.cloudflare.com/\n```", "```py\n# myproject/settings/_base.py CSP_IMG_SRC = [\"*\"]\nCSP_MEDIA_SRC = [\"*\"]\nCSP_FRAME_SRC = [\"*\"]\n```", "```py\n(env)$ pip install django-admin-honeypot==1.1.0\n```", "```py\n# myproject/settings/_base.py INSTALLED_APPS = (\n    # \u2026\n    \"admin_honeypot\",\n)\n```", "```py\n# myproject/urls.py from django.contrib import admin\nfrom django.conf.urls.i18n import i18n_patterns\nfrom django.urls import include, path\n\nurlpatterns = i18n_patterns(\n    # \u2026\n    path(\"admin/\", include(\"admin_honeypot.urls\", \n    namespace=\"admin_honeypot\")),\n path(\"management/\", admin.site.urls),\n)\n```", "```py\n# myproject/apps/admin_honeypot_fix/admin.py from django.contrib import admin\n\nfrom admin_honeypot.admin import LoginAttemptAdmin\nfrom admin_honeypot.models import LoginAttempt\nfrom django.utils.safestring import mark_safe\nfrom django.utils.translation import gettext_lazy as _\n\nadmin.site.unregister(LoginAttempt)\n\n@admin.register(LoginAttempt)\nclass FixedLoginAttemptAdmin(LoginAttemptAdmin):\n    def get_session_key(self, instance):\n        return mark_safe('<a href=\"?session_key=\n        %(key)s\">%(key)s</a>' % {'key': instance.session_key})\n    get_session_key.short_description = _('Session')\n\n    def get_ip_address(self, instance):\n        return mark_safe('<a href=\"?ip_address=%(ip)s\">%(ip)s</a>' \n         % {'ip': instance.ip_address})\n    get_ip_address.short_description = _('IP Address')\n\n    def get_path(self, instance):\n        return mark_safe('<a href=\"?path=%(path)s\">%(path)s</a>' \n         % {'path': instance.path})\n    get_path.short_description = _('URL')\n```", "```py\n# myproject/apps/admin_honeypot_fix/apps.py from django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\nclass AdminHoneypotConfig(AppConfig):\n    name = \"admin_honeypot\"\n    verbose_name = _(\"Admin Honeypot\")\n\n    def ready(self):\n from .admin import FixedLoginAttemptAdmin\n```", "```py\n# myproject/settings/_base.py INSTALLED_APPS = [\n    # \u2026\n    #\"admin_honeypot\",\n    \"myproject.apps.admin_honeypot_fix.apps.AdminHoneypotConfig\",\n]\n```", "```py\n# myproject/settings/_base.py\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.\"\n        \"UserAttributeSimilarityValidator\",\n        \"OPTIONS\": {\"max_similarity\": 0.5},\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.\" \n        \"MinimumLengthValidator\",\n        \"OPTIONS\": {\"min_length\": 12},\n    },\n    {\"NAME\": \"django.contrib.auth.password_validation.\" \n    \"CommonPasswordValidator\"},\n    {\"NAME\": \"django.contrib.auth.password_validation.\" \n    \"NumericPasswordValidator\"},\n]\n```", "```py\n# myproject/apps/auth_extra/password_validation.py from django.core.exceptions import ValidationError\nfrom django.utils.translation import gettext as _\n\nclass MaximumLengthValidator:\n    def __init__(self, max_length=24):\n        self.max_length = max_length\n\n    def validate(self, password, user=None):\n        if len(password) > self.max_length:\n            raise ValidationError(\n                self.get_help_text(pronoun=\"this\"),\n                code=\"password_too_long\",\n                params={'max_length': self.max_length},\n            )\n\n    def get_help_text(self, pronoun=\"your\"):\n        return _(f\"{pronoun.capitalize()} password must contain \"\n                 f\"no more than {self.max_length} characters\")\n```", "```py\nclass SpecialCharacterInclusionValidator:\n    DEFAULT_SPECIAL_CHARACTERS = ('$', '%', ':', '#', '!')\n\n    def __init__(self, special_chars=DEFAULT_SPECIAL_CHARACTERS):\n        self.special_chars = special_chars\n\n    def validate(self, password, user=None):\n        has_specials_chars = False\n        for char in self.special_chars:\n            if char in password:\n                has_specials_chars = True\n                break\n        if not has_specials_chars:\n            raise ValidationError(\n                self.get_help_text(pronoun=\"this\"),\n                code=\"password_missing_special_chars\"\n            )\n\n    def get_help_text(self, pronoun=\"your\"):\n        return _(f\"{pronoun.capitalize()} password must contain at\"\n                 \" least one of the following special characters: \"\n                 f\"{', '.join(self.special_chars)}\")\n```", "```py\n# myproject/settings/_base.py\nfrom myproject.apps.auth_extra.password_validation import (\n SpecialCharacterInclusionValidator,\n)\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.\"\n        \"UserAttributeSimilarityValidator\",\n        \"OPTIONS\": {\"max_similarity\": 0.5},\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.\" \n        \"MinimumLengthValidator\",\n        \"OPTIONS\": {\"min_length\": 12},\n    },\n    {\"NAME\": \"django.contrib.auth.password_validation.\" \n    \"CommonPasswordValidator\"},\n    {\"NAME\": \"django.contrib.auth.password_validation.\" \n    \"NumericPasswordValidator\"},\n    {\n \"NAME\": \"myproject.apps.auth_extra.password_validation.\"\n        \"MaximumLengthValidator\",\n \"OPTIONS\": {\"max_length\": 32},\n },\n {\n \"NAME\": \"myproject.apps.auth_extra.password_validation.\"\n        \"SpecialCharacterInclusionValidator\",\n \"OPTIONS\": {\n \"special_chars\": (\"{\", \"}\", \"^\", \"&\")\n + SpecialCharacterInclusionValidator\n              .DEFAULT_SPECIAL_CHARACTERS\n },\n },\n]\n```", "```py\n# myproject/apps/ideas/views.py import os\n\nfrom django.contrib.auth.decorators import login_required\nfrom django.http import FileResponse, HttpResponseNotFound\nfrom django.shortcuts import get_object_or_404\nfrom django.utils.text import slugify\n\nfrom .models import Idea\n\n@login_required\ndef download_idea_picture(request, pk):\n    idea = get_object_or_404(Idea, pk=pk)\n    if idea.picture:\n        filename, extension = \n        os.path.splitext(idea.picture.file.name)\n        extension = extension[1:] # remove the dot\n        response = FileResponse(\n            idea.picture.file, content_type=f\"image/{extension}\"\n        )\n        slug = slugify(idea.title)[:100]\n        response[\"Content-Disposition\"] = (\n            \"attachment; filename=\"\n            f\"{slug}.{extension}\"\n        )\n    else:\n        response = HttpResponseNotFound(\n            content=\"Picture unavailable\"\n        )\n    return response\n```", "```py\n# myproject/apps/ideas/urls.py from django.urls import path\n\nfrom .views import download_idea_picture\n\nurlpatterns = [\n    # \u2026\n    path(\n \"<uuid:pk>/download-picture/\",\n download_idea_picture,\n name=\"download_idea_picture\",\n ),\n]\n```", "```py\n# myproject/urls.py from django.conf.urls.i18n import i18n_patterns\nfrom django.urls import include, path\n\nurlpatterns = i18n_patterns(\n    # \u2026\n    path(\"accounts/\", include(\"django.contrib.auth.urls\")),\n    path(\"ideas/\", include((\"myproject.apps.ideas.urls\", \"ideas\"), \n     namespace=\"ideas\")),\n)\n```", "```py\n{# registration/login.html #} {% extends \"base.html\" %}\n{% load i18n %}\n\n{% block content %}\n    <h1>{% trans \"Login\" %}</h1>\n    <form action=\"{{ request.path }}\" method=\"POST\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" class=\"btn btn-primary\">{% trans \n         \"Log in\" %}</button>\n    </form>\n{% endblock %}\n```", "```py\n{# ideas/idea_detail.html #}\n{% extends \"base.html\" %}\n{% load i18n %}\n\n{% block content %}\n\u2026\n <a href=\"{% url 'ideas:download_idea_picture' pk=idea.pk %}\" \n     class=\"btn btn-primary\">{% trans \"Download picture\" %}</a>\n{% endblock %}\n```", "```py\n# media/ideas/.htaccess Require all denied\n```", "```py\n(env)$ pip install django-imagekit==4.0.2\n```", "```py\n# myproject/settings/_base.py\nINSTALLED_APPS = [\n    # \u2026\n    \"imagekit\",\n]\n```", "```py\n# myproject/apps/core/processors.py\nfrom pilkit.lib import Image\n\nclass WatermarkOverlay(object):\n    def __init__(self, watermark_image):\n        self.watermark_image = watermark_image\n\n    def process(self, img):\n        original = img.convert('RGBA')\n        overlay = Image.open(self.watermark_image)\n        img = Image.alpha_composite(original, \n        overlay).convert('RGB')\n        return img\n```", "```py\n# myproject/apps/ideas/models.py import os\n\nfrom imagekit.models import ImageSpecField\nfrom pilkit.processors import ResizeToFill\n\nfrom django.db import models\nfrom django.conf import settings\nfrom django.utils.translation import gettext_lazy as _\nfrom django.utils.timezone import now as timezone_now\n\nfrom myproject.apps.core.models import CreationModificationDateBase, UrlBase\nfrom myproject.apps.core.processors import WatermarkOverlay\n\ndef upload_to(instance, filename):\n    now = timezone_now()\n    base, extension = os.path.splitext(filename)\n    extension = extension.lower()\n    return f\"ideas/{now:%Y/%m}/{instance.pk}{extension}\"\n\nclass Idea(CreationModificationDateBase, UrlBase):\n    # \u2026\n    picture = models.ImageField(\n        _(\"Picture\"), upload_to=upload_to\n    )\n    watermarked_picture_large = ImageSpecField(\n source=\"picture\",\n processors=[\n ResizeToFill(800, 400),\n WatermarkOverlay(\n watermark_image=os.path.join(settings.STATIC_ROOT, \n                'site', 'img', 'watermark.png'),\n )\n ],\n format=\"PNG\"\n    )\n```", "```py\n(env)$ export DJANGO_SETTINGS_MODULE=myproject.settings.dev\n(env)$ python manage.py collectstatic\n```", "```py\n{# ideas/idea_detail.html #} {% extends \"base.html\" %}\n{% load i18n %}\n\n{% block content %}\n    <a href=\"{% url \"ideas:idea_list\" %}\">{% trans \"List of ideas\" \n     %}</a>\n    <h1>\n        {% blocktrans trimmed with title=idea.translated_title %}\n            Idea \"{{ title }}\"\n        {% endblocktrans %}\n    </h1>\n    <img src=\"img/{{ idea.watermarked_picture_large.url }}\" alt=\"\" />\n    {{ idea.translated_content|linebreaks|urlize }}\n    <p>\n        {% for category in idea.categories.all %}\n            <span class=\"badge badge-pill badge-info\">\n             {{ category.translated_title }}</span>\n        {% endfor %}\n    </p>\n    <a href=\"{% url 'ideas:download_idea_picture' pk=idea.pk %}\" \n     class=\"btn btn-primary\">{% trans \"Download picture\" %}</a>\n{% endblock %}\n```", "```py\n# requirements/_base.txt\nsocial-auth-app-django~=3.1\npython-jose~=3.0\npython-dotenv~=0.9\n```", "```py\n# myproject/settings/_base.py\nINSTALLED_APPS = [\n    # \u2026\n    \"social_django\",\n]\n```", "```py\n# myproject/settings/_base.py\nSOCIAL_AUTH_AUTH0_DOMAIN = get_secret(\"AUTH0_DOMAIN\")\nSOCIAL_AUTH_AUTH0_KEY = get_secret(\"AUTH0_KEY\")\nSOCIAL_AUTH_AUTH0_SECRET = get_secret(\"AUTH0_SECRET\")\nSOCIAL_AUTH_AUTH0_SCOPE = [\"openid\", \"profile\", \"email\"]\nSOCIAL_AUTH_TRAILING_SLASH = False\n\n```", "```py\n# myproject/apps/external_auth/backends.py from urllib import request\nfrom jose import jwt\nfrom social_core.backends.oauth import BaseOAuth2\n\nclass Auth0(BaseOAuth2):\n    \"\"\"Auth0 OAuth authentication backend\"\"\"\n\n    name = \"auth0\"\n    SCOPE_SEPARATOR = \" \"\n    ACCESS_TOKEN_METHOD = \"POST\"\n    REDIRECT_STATE = False\n    EXTRA_DATA = [(\"picture\", \"picture\"), (\"email\", \"email\")]\n\n    def authorization_url(self):\n        return \"https://\" + self.setting(\"DOMAIN\") + \"/authorize\"\n\n    def access_token_url(self):\n        return \"https://\" + self.setting(\"DOMAIN\") + \"/oauth/token\"\n\n    def get_user_id(self, details, response):\n        \"\"\"Return current user id.\"\"\"\n        return details[\"user_id\"]\n\n    def get_user_details(self, response):\n        # Obtain JWT and the keys to validate the signature\n        id_token = response.get(\"id_token\")\n        jwks = request.urlopen(\n            \"https://\" + self.setting(\"DOMAIN\") + \"/.well-\n              known/jwks.json\"\n        )\n        issuer = \"https://\" + self.setting(\"DOMAIN\") + \"/\"\n        audience = self.setting(\"KEY\")  # CLIENT_ID\n        payload = jwt.decode(\n            id_token,\n            jwks.read(),\n            algorithms=[\"RS256\"],\n            audience=audience,\n            issuer=issuer,\n        )\n        first_name, last_name = (payload.get(\"name\") or \n         \" \").split(\" \", 1)\n        return {\n            \"username\": payload.get(\"nickname\") or \"\",\n            \"first_name\": first_name,\n            \"last_name\": last_name,\n            \"picture\": payload.get(\"picture\") or \"\",\n            \"user_id\": payload.get(\"sub\") or \"\",\n            \"email\": payload.get(\"email\") or \"\",\n        }\n```", "```py\n# myproject/settings/_base.py\nAUTHENTICATION_BACKENDS = {\n    \"myproject.apps.external_auth.backends.Auth0\",\n    \"django.contrib.auth.backends.ModelBackend\",\n}\n```", "```py\n# myproject/apps/external_auth/context_processors.py\ndef auth0(request):\n    data = {}\n    if request.user.is_authenticated:\n        auth0_user = request.user.social_auth.filter(\n            provider=\"auth0\",\n        ).first()\n        data = {\n            \"auth0_user\": auth0_user,\n        }\n    return data\n```", "```py\n# myproject/settings/_base.py\nTEMPLATES = [\n    {\n        \"BACKEND\": \n        \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [os.path.join(BASE_DIR, \"myproject\", \"templates\")],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",\n                \"django.contrib.messages.context_processors\n                 .messages\",\n                \"django.template.context_processors.media\",\n                \"django.template.context_processors.static\",\n                \"myproject.apps.core.context_processors\n                 .website_url\",\n                \"myproject.apps.external_auth\n               .context_processors.auth0\",\n            ]\n        },\n    }\n]\n```", "```py\n# myproject/apps/external_auth/views.py\nfrom urllib.parse import urlencode\n\nfrom django.shortcuts import render, redirect\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib.auth import logout as log_out\nfrom django.conf import settings\n\ndef index(request):\n    user = request.user\n    if user.is_authenticated:\n        return redirect(dashboard)\n    else:\n        return render(request, \"index.html\")\n\n@login_required\ndef dashboard(request):\n    return render(request, \"dashboard.html\")\n\ndef logout(request):\n    log_out(request)\n    return_to = urlencode({\"returnTo\": \n     request.build_absolute_uri(\"/\")})\n    logout_url = \"https://%s/v2/logout?client_id=%s&%s\" % (\n        settings.SOCIAL_AUTH_AUTH0_DOMAIN,\n        settings.SOCIAL_AUTH_AUTH0_KEY,\n        return_to,\n    )\n    return redirect(logout_url)\n```", "```py\n{# index.html #}\n{% extends \"base.html\" %}\n{% load i18n utility_tags %}\n\n{% block content %}\n<div class=\"login-box auth0-box before\">\n    <h3>{% trans \"Please log in for the best user experience\" %}</h3>\n    <a class=\"btn btn-primary btn-lg\" href=\"{% url \"social:begin\" \n     backend=\"auth0\" %}\">{% trans \"Log in\" %}</a>\n</div>\n{% endblock %}\n```", "```py\n{# dashboard.html #}\n{% extends \"base.html\" %}\n{% load i18n %}\n\n{% block content %}\n    <div class=\"logged-in-box auth0-box logged-in\">\n        <img alt=\"{% trans 'Avatar' %}\" src=\"img/>         auth0_user.extra_data.picture }}\" \n         width=\"50\" height=\"50\" />\n        <h2>{% blocktrans with name=request.user\n         .first_name %}Welcome, {{ name }}\n         {% endblocktrans %}!</h2>\n\n        <a class=\"btn btn-primary btn-logout\" href=\"{% url \n         \"auth0_logout\" %}\">{% trans \"Log out\" %}</a>\n    </div>\n{% endblock %}\n```", "```py\n# myproject/urls.py\nfrom django.conf.urls.i18n import i18n_patterns\nfrom django.urls import path, include\n\nfrom myproject.apps.external_auth import views as external_auth_views\n\nurlpatterns = i18n_patterns(\n    path(\"\", external_auth_views.index, name=\"index\"),\n    path(\"dashboard/\", external_auth_views.dashboard, \n     name=\"dashboard\"),\n    path(\"logout/\", external_auth_views.logout, \n     name=\"auth0_logout\"),\n    path(\"\", include(\"social_django.urls\")),\n    # \u2026\n)\n```", "```py\nLOGIN_URL = \"/login/auth0\"\nLOGIN_REDIRECT_URL = \"dashboard\"\n```", "```py\nclass SomeModel(models.Model):\n    def some_expensive_function(self):\n        if not hasattr(self, \"_expensive_value_cached\"):\n            # do some heavy calculations...\n            # ... and save the result to result variable\n            self._expensive_value_cached = result\n        return self._expensive_value_cached\n```", "```py\n# myproject/apps/viral_videos/models.py\nimport re\nfrom django.db import models\nfrom django.utils.translation import ugettext_lazy as _\n\nfrom myproject.apps.core.models import CreationModificationDateBase, UrlBase\n\nclass ViralVideo(CreationModificationDateBase, UrlBase):\n    embed_code = models.TextField(\n        _(\"YouTube embed code\"),\n        blank=True)\n\n    # \u2026\n\n    def get_thumbnail_url(self):\n        if not hasattr(self, \"_thumbnail_url_cached\"):\n            self._thumbnail_url_cached = \"\"\n            url_pattern = re.compile(\n                r'src=\"img/([^\"]+)\"'\n            )\n            match = url_pattern.search(self.embed_code)\n            if match:\n                video_id = match.groups()[0]\n                self._thumbnail_url_cached = (\n                    f\"https://img.youtube.com/vi/{video_id}/0.jpg\"\n                )\n        return self._thumbnail_url_cached\n```", "```py\n{% if object.some_expensive_function %}\n    <span class=\"special\">\n        {{ object.some_expensive_function }}\n    </span>\n{% endif %}\n```", "```py\n{% if video.get_thumbnail_url %}\n    <figure>\n        <img src=\"img/{{ video.get_thumbnail_url }}\"\n             alt=\"{{ video.title }}\" \n        />\n        <figcaption>{{ video.title }}</figcaption>\n    </figure>\n{% endif %}\n```", "```py\ndef busy_bee(a, b):\n    # expensive logic\n    return result\n```", "```py\nfrom functools import lru_cache\n\n@lru_cache(maxsize=100, typed=True)\ndef busy_bee(a, b):\n    # expensive logic\n    return result\n```", "```py\n# myproject/apps/viral_videos/models.py\nfrom functools import lru_cache # \u2026\n\nclass ViralVideo(CreationModificationDateMixin, UrlMixin):\n    # \u2026\n    @lru_cache\n    def get_thumbnail_url(self):\n        # \u2026\n```", "```py\n$ brew install memcached\n```", "```py\n$ brew services start memcached\n$ brew services stop memcached\n$ brew services restart memcached\n```", "```py\n(env)$ pip install python-memcached==1.59\n```", "```py\n# myproject/settings/_base.py\nCACHES = {\n    \"memcached\": {\n        \"BACKEND\": \n        \"django.core.cache.backends.memcached.MemcachedCache\",\n        \"LOCATION\": get_secret(\"CACHE_LOCATION\"),\n        \"TIMEOUT\": 60,  # 1 minute\n        \"KEY_PREFIX\": \"myproject\",\n    },\n}\nCACHES[\"default\"] = CACHES[\"memcached\"]\n```", "```py\n# myproject/apps/viral_videos/views.py from django.shortcuts import render\nfrom django.views.decorators.cache import cache_page\nfrom django.views.decorators.vary import vary_on_cookie\n\n@vary_on_cookie\n@cache_page(60)\ndef viral_video_detail(request, pk):\n    # \u2026\n    return render(\n        request,\n        \"viral_videos/viral_video_detail.html\",\n        {'video': video}\n    )\n```", "```py\n$ brew install redis\n```", "```py\n$ brew services start redis\n$ brew services stop redis\n$ brew services restart redis\n```", "```py\n(env)$ pip install redis==3.3.11\n(env)$ pip install hiredis==1.0.1\n(env)$ pip install django-redis-cache==2.1.0\n\n```", "```py\n# myproject/settings/_base.py\nCACHES = {\n    \"redis\": {\n        \"BACKEND\": \"redis_cache.RedisCache\",\n        \"LOCATION\": [get_secret(\"CACHE_LOCATION\")],\n        \"TIMEOUT\": 60, # 1 minute\n        \"KEY_PREFIX\": \"myproject\",\n    },\n}\nCACHES[\"default\"] = CACHES[\"redis\"]\n```", "```py\n# myproject/apps/viral_videos/views.py from django.shortcuts import render\nfrom django.views.decorators.cache import cache_page\nfrom django.views.decorators.vary import vary_on_cookie\n\n@vary_on_cookie\n@cache_page(60)\ndef viral_video_detail(request, pk):\n    # \u2026\n    return render(\n        request,\n        \"viral_videos/viral_video_detail.html\",\n        {'video': video}\n    )\n```", "```py\n# myproject/settings/_base.py\nSESSION_ENGINE = \"django.contrib.sessions.backends.cache\"\nSESSION_CACHE_ALIAS = \"default\"\n```"]