["```py\n# myproject/apps/likes/tests/test_views.py\nimport json\nfrom unittest import mock\nfrom django.contrib.auth.models import User\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.test import TestCase\nfrom myproject.apps.locations.models import Location\n\nclass JSSetLikeViewTest(TestCase):\n    @classmethod\n    def setUpClass(cls):\n        super(JSSetLikeViewTest, cls).setUpClass()\n\n        cls.location = Location.objects.create(\n            name=\"Park G\u00fcell\",\n            description=\"If you want to see something spectacular, \n            come to Barcelona, Catalonia, Spain and visit Park \n            G\u00fcell. Located on a hill, Park G\u00fcell is a public \n            park with beautiful gardens and organic \n            architectural elements.\",\n            picture=\"locations/2020/01/20200101012345.jpg\",  \n            # dummy path\n        )\n        cls.content_type = \n         ContentType.objects.get_for_model(Location)\n        cls.superuser = User.objects.create_superuser(\n            username=\"admin\", password=\"admin\", \n             email=\"admin@example.com\"\n        )\n\n    @classmethod\n    def tearDownClass(cls):\n        super(JSSetLikeViewTest, cls).tearDownClass()\n        cls.location.delete()\n        cls.superuser.delete()\n\n    def test_authenticated_json_set_like(self):\n        from ..views import json_set_like\n\n        mock_request = mock.Mock()\n        mock_request.user = self.superuser\n        mock_request.method = \"POST\"\n\n        response = json_set_like(mock_request, \n         self.content_type.pk, self.location.pk)\n        expected_result = json.dumps(\n            {\"success\": True, \"action\": \"add\", \"count\": \n             Location.objects.count()}\n        )\n        self.assertJSONEqual(response.content, expected_result)\n\n    @mock.patch(\"django.contrib.auth.models.User\")\n    def test_anonymous_json_set_like(self, MockUser):\n        from ..views import json_set_like\n\n        anonymous_user = MockUser()\n        anonymous_user.is_authenticated = False\n\n        mock_request = mock.Mock()\n        mock_request.user = anonymous_user\n        mock_request.method = \"POST\"\n\n        response = json_set_like(mock_request, \n        self.content_type.pk, self.location.pk)\n        expected_result = json.dumps({\"success\": False})\n        self.assertJSONEqual(response.content, expected_result)\n```", "```py\n(env)$ python manage.py test myproject.apps.likes --settings=myproject.settings.test\nCreating test database for alias 'default'...\nSystem check identified no issues (0 silenced).\n..\n----------------------------------------------------------------------\nRan 2 tests in 0.268s\nOK\nDestroying test database for alias 'default'...\n```", "```py\ndef json_set_like(request, content_type_id, object_id):\n    # all the view logic goes here\u2026\n    return JsonResponse(result)\n```", "```py\n>>> from unittest import mock\n>>> m = mock.Mock()\n>>> m.whatever.anything().whatsoever\n<Mock name='mock.whatever.anything().whatsoever' id='4320988368'>\n```", "```py\n(env)$ pip install selenium\n```", "```py\n# myproject/settings/_base.py\nTESTS_SHOW_BROWSER = True\n```", "```py\n# myproject/apps/locations/tests/test_frontend.py\nimport os\nfrom io import BytesIO\nfrom time import sleep\n\nfrom django.core.files.storage import default_storage\nfrom django.test import LiveServerTestCase\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.contrib.auth.models import User\nfrom django.conf import settings\nfrom django.test import override_settings\nfrom django.urls import reverse\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom myproject.apps.likes.models import Like\nfrom ..models import Location\n\nSHOW_BROWSER = getattr(settings, \"TESTS_SHOW_BROWSER\", False)\n\n@override_settings(DEBUG=True)\nclass LiveLocationTest(LiveServerTestCase):\n    @classmethod\n    def setUpClass(cls):\n        super(LiveLocationTest, cls).setUpClass()\n        driver_path = os.path.join(settings.BASE_DIR, \"drivers\", \n        \"chromedriver\")\n        chrome_options = Options()\n        if not SHOW_BROWSER:\n chrome_options.add_argument(\"--headless\")\n        chrome_options.add_argument(\"--window-size=1200,800\")\n\n        cls.browser = webdriver.Chrome(\n            executable_path=driver_path, options=chrome_options\n        )\n        cls.browser.delete_all_cookies()\n\n        image_path = cls.save_test_image(\"test.jpg\")\n        cls.location = Location.objects.create(\n            name=\"Park G\u00fcell\",\n            description=\"If you want to see something spectacular, \n             come to Barcelona, Catalonia, Spain and visit Park \n             G\u00fcell. Located on a hill, Park G\u00fcell is a public \n             park with beautiful gardens and organic \n             architectural elements.\",\n            picture=image_path,  # dummy path\n        )\n        cls.username = \"admin\"\n        cls.password = \"admin\"\n        cls.superuser = User.objects.create_superuser(\n            username=cls.username, password=cls.password, \n             email=\"admin@example.com\"\n        )\n\n    @classmethod\n    def tearDownClass(cls):\n        super(LiveLocationTest, cls).tearDownClass()\n        cls.browser.quit()\n        cls.location.delete()\n        cls.superuser.delete()\n\n    @classmethod\n    def save_test_image(cls, filename):\n        from PIL import Image\n\n        image = Image.new(\"RGB\", (1, 1), 0)\n        image_buffer = BytesIO()\n        image.save(image_buffer, format=\"JPEG\")\n        path = f\"tests/{filename}\"\n        default_storage.save(path, image_buffer)\n        return path\n\n    def wait_a_little(self):\n        if SHOW_BROWSER:\n sleep(2)\n\n    def test_login_and_like(self):\n        # login\n        login_path = reverse(\"admin:login\")\n        self.browser.get(\n            f\"{self.live_server_url}{login_path}?next=\n          {self.location.get_url_path()}\"\n        )\n        username_field = \n        self.browser.find_element_by_id(\"id_username\")\n        username_field.send_keys(self.username)\n        password_field = \n        self.browser.find_element_by_id(\"id_password\")\n        password_field.send_keys(self.password)\n        self.browser.find_element_by_css_selector\n        ('input[type=\"submit\"]').click()\n        WebDriverWait(self.browser, timeout=10).until(\n            lambda x: \n       self.browser.find_element_by_css_selector(\".like-button\")\n        )\n        # click on the \"like\" button\n        like_button = \n       self.browser.find_element_by_css_selector(\".like-button\")\n        is_initially_active = \"active\" in \n         like_button.get_attribute(\"class\")\n        initial_likes = int(\n            self.browser.find_element_by_css_selector\n             (\".like-badge\").text\n        )\n\n        self.assertFalse(is_initially_active)\n        self.assertEqual(initial_likes, 0)\n\n        self.wait_a_little()\n\n        like_button.click()\n        WebDriverWait(self.browser, timeout=10).until(\n            lambda x:  \n            int(self.browser.find_element_by_css_selector\n             (\".like-badge\").text) != initial_likes\n        )\n        likes_in_html = int(\n            self.browser.find_element_by_css_selector\n             (\".like-badge\").text\n        )\n        likes_in_db = Like.objects.filter(\n\n       content_type=ContentType.objects.get_for_model(Location),\n            object_id=self.location.pk,\n        ).count()\n        self.assertEqual(likes_in_html, 1)\n        self.assertEqual(likes_in_html, likes_in_db)\n\n        self.wait_a_little()\n\n        self.assertGreater(likes_in_html, initial_likes)\n\n        # click on the \"like\" button again to switch back to the \n        # previous state\n        like_button.click()\n        WebDriverWait(self.browser, timeout=10).until(\n            lambda x: int(self.browser.find_element_by_css_selector\n            (\".like-badge\").text) == initial_likes\n        )\n\n        self.wait_a_little()\n```", "```py\n(env)$ python manage.py test myproject.apps.locations --settings=myproject.settings.test\nCreating test database for alias 'default'...\nSystem check identified no issues (0 silenced).\n.\n----------------------------------------------------------------------\nRan 1 test in 4.284s\n\nOK\nDestroying test database for alias 'default'...\n```", "```py\n# myproject/apps/music/tests/test_api.py\nfrom django.contrib.auth.models import User\nfrom django.urls import reverse\nfrom rest_framework import status\nfrom rest_framework.test import APITestCase\nfrom ..models import Song\n\nclass SongTests(APITestCase):\n    @classmethod\n    def setUpClass(cls):\n        super().setUpClass()\n\n        cls.superuser = User.objects.create_superuser(\n            username=\"admin\", password=\"admin\", \n             email=\"admin@example.com\"\n        )\n\n        cls.song = Song.objects.create(\n            artist=\"Lana Del Rey\",\n            title=\"Video Games - Remastered\",\n            url=\"https://open.spotify.com/track/5UOo694cVvj\n             cPFqLFiNWGU?si=maZ7JCJ7Rb6WzESLXg1Gdw\",\n        )\n\n        cls.song_to_delete = Song.objects.create(\n            artist=\"Milky Chance\",\n            title=\"Stolen Dance\",\n            url=\"https://open.spotify.com/track/3miMZ2IlJ\n             iaeSWo1DohXlN?si=g-xMM4m9S_yScOm02C2MLQ\",\n        )\n\n    @classmethod\n    def tearDownClass(cls):\n        super().tearDownClass()\n\n        cls.song.delete()\n        cls.superuser.delete()\n```", "```py\n    def test_list_songs(self):\n        url = reverse(\"rest_song_list\")\n        data = {}\n        response = self.client.get(url, data, format=\"json\")\n\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertEqual(response.data[\"count\"], Song.objects.count())\n```", "```py\n    def test_get_song(self):\n        url = reverse(\"rest_song_detail\", kwargs={\"pk\": self.song.pk})\n        data = {}\n        response = self.client.get(url, data, format=\"json\")\n\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertEqual(response.data[\"uuid\"], str(self.song.pk))\n        self.assertEqual(response.data[\"artist\"], self.song.artist)\n        self.assertEqual(response.data[\"title\"], self.song.title)\n        self.assertEqual(response.data[\"url\"], self.song.url)\n```", "```py\n def test_create_song_allowed(self):\n        # login\n        self.client.force_authenticate(user=self.superuser)\n\n        url = reverse(\"rest_song_list\")\n        data = {\n            \"artist\": \"Capital Cities\",\n            \"title\": \"Safe And Sound\",\n            \"url\": \"https://open.spotify.com/track/40Fs0YrUGu\n              wLNQSaHGVfqT?si=2OUawusIT-evyZKonT5GgQ\",\n        }\n        response = self.client.post(url, data, format=\"json\")\n\n        self.assertEqual(response.status_code, \n         status.HTTP_201_CREATED)\n\n        song = Song.objects.filter(pk=response.data[\"uuid\"])\n        self.assertEqual(song.count(), 1)\n\n        # logout\n        self.client.force_authenticate(user=None)\n```", "```py\n def test_create_song_restricted(self):\n        # make sure the user is logged out\n        self.client.force_authenticate(user=None)\n\n        url = reverse(\"rest_song_list\")\n        data = {\n            \"artist\": \"Men I Trust\",\n            \"title\": \"Tailwhip\",\n            \"url\": \"https://open.spotify.com/track/2DoO0sn4S\n              bUrz7Uay9ACTM?si=SC_MixNKSnuxNvQMf3yBBg\",\n        }\n        response = self.client.post(url, data, format=\"json\")\n\n        self.assertEqual(response.status_code, \n         status.HTTP_403_FORBIDDEN)\n```", "```py\ndef test_change_song_allowed(self):\n        # login\n        self.client.force_authenticate(user=self.superuser)\n\n        url = reverse(\"rest_song_detail\", kwargs=\n         {\"pk\": self.song.pk})\n\n        # change only title\n        data = {\n            \"artist\": \"Men I Trust\",\n            \"title\": \"Tailwhip\",\n            \"url\": \"https://open.spotify.com/track/2DoO0sn4S\n              bUrz7Uay9ACTM?si=SC_MixNKSnuxNvQMf3yBBg\",\n        }\n        response = self.client.put(url, data, format=\"json\")\n\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertEqual(response.data[\"uuid\"], str(self.song.pk))\n        self.assertEqual(response.data[\"artist\"], data[\"artist\"])\n        self.assertEqual(response.data[\"title\"], data[\"title\"])\n        self.assertEqual(response.data[\"url\"], data[\"url\"])\n\n        # logout\n        self.client.force_authenticate(user=None)\n```", "```py\ndef test_change_song_restricted(self):\n        # make sure the user is logged out\n        self.client.force_authenticate(user=None)\n\n        url = reverse(\"rest_song_detail\", kwargs=\n         {\"pk\": self.song.pk})\n\n        # change only title\n        data = {\n            \"artist\": \"Capital Cities\",\n            \"title\": \"Safe And Sound\",\n            \"url\": \"https://open.spotify.com/track/40Fs0YrU\n             GuwLNQSaHGVfqT?si=2OUawusIT-evyZKonT5GgQ\",\n        }\n        response = self.client.put(url, data, format=\"json\")\n\n        self.assertEqual(response.status_code, \n         status.HTTP_403_FORBIDDEN)\n```", "```py\n    def test_delete_song_restricted(self):\n        # make sure the user is logged out\n        self.client.force_authenticate(user=None)\n\n        url = reverse(\"rest_song_detail\", kwargs=\n         {\"pk\": self.song_to_delete.pk})\n\n        data = {}\n        response = self.client.delete(url, data, format=\"json\")\n\n        self.assertEqual(response.status_code, \n         status.HTTP_403_FORBIDDEN)\n```", "```py\n  def test_delete_song_allowed(self):\n        # login\n        self.client.force_authenticate(user=self.superuser)\n\n        url = reverse(\"rest_song_detail\", kwargs=\n         {\"pk\": self.song_to_delete.pk})\n\n        data = {}\n        response = self.client.delete(url, data, format=\"json\")\n\n        self.assertEqual(response.status_code, \n         status.HTTP_204_NO_CONTENT)\n\n        # logout\n        self.client.force_authenticate(user=None)\n```", "```py\n(env)$python manage.py test myproject.apps.music --settings=myproject.settings.test\nCreating test database for alias 'default'...\nSystem check identified no issues (0 silenced).\n........\n----------------------------------------------------------------------\nRan 8 tests in 0.370s\n\nOK\nDestroying test database for alias 'default'...\n```", "```py\n(env)$ pip install coverage~=5.0.1\n```", "```py\n# setup.cfg\n[coverage:run]\nsource = .\nomit =\n    media/*\n    static/*\n    tmp/*\n    drivers/*\n    locale/*\n    myproject/site_static/*\n    myprojext/templates/*\n```", "```py\n# .gitignore\nhtmlcov/\n.coverage\n.coverage.*\ncoverage.xml\n*.cover\n```", "```py\n# run_tests_with_coverage.sh\n#!/usr/bin/env bash\ncoverage erase\ncoverage run manage.py test --settings=myproject.settings.test\ncoverage report\n```", "```py\n(env)$ chmod +x run_tests_with_coverage.sh\n```", "```py\n(env)$ ./run_tests_with_coverage.sh \nCreating test database for alias 'default'...\nSystem check identified no issues (0 silenced).\n...........\n----------------------------------------------------------------------\nRan 11 tests in 12.940s\n\nOK\nDestroying test database for alias 'default'...\nName Stmts Miss Cover\n-----------------------------------------------------------------------------------------------\nmanage.py 12 2 83%\nmyproject/__init__.py 0 0 100%\nmyproject/apps/__init__.py 0 0 100%\nmyproject/apps/core/__init__.py 0 0 100%\nmyproject/apps/core/admin.py 16 10 38%\nmyproject/apps/core/context_processors.py 3 0 100%\nmyproject/apps/core/model_fields.py 48 48 0%\nmyproject/apps/core/models.py 87 29 67%\nmyproject/apps/core/templatetags/__init__.py 0 0 100%\nmyproject/apps/core/templatetags/utility_tags.py 171 135 21%\n\nthe statistics go on\u2026\n\nmyproject/settings/test.py 5 0 100%\nmyproject/urls.py 10 0 100%\nmyproject/wsgi.py 4 4 0%\n-----------------------------------------------------------------------------------------------\nTOTAL 1363 712 48%\n```"]