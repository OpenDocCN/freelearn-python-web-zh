["```py\n# myproject/apps/core/templatetags/utility_tags.py from django import template\u2028\n\nregister = template.Library()\n\n\"\"\" TAGS \"\"\"\n\n# Your tags go here\u2026\n\n\"\"\" FILTERS \"\"\"\n\n# Your filters go here\u2026\n```", "```py\n# myproject/apps/core/templatetags/utility_tags.py from datetime import datetime\nfrom django import template\nfrom django.utils import timezone\nfrom django.utils.translation import ugettext_lazy as _\n\nregister = template.Library()\n\n\"\"\" FILTERS \"\"\"\n\nDAYS_PER_YEAR = 365\nDAYS_PER_MONTH = 30\nDAYS_PER_WEEK = 7\n\n@register.filter(is_safe=True)\ndef date_since(specific_date):\n    \"\"\"\n    Returns a human-friendly difference between today and past_date\n    (adapted from https://www.djangosnippets.org/snippets/116/)\n    \"\"\"\n    today = timezone.now().date()\n    if isinstance(specific_date, datetime):\n        specific_date = specific_date.date()\n    diff = today - specific_date\n    diff_years = int(diff.days / DAYS_PER_YEAR)\n    diff_months = int(diff.days / DAYS_PER_MONTH)\n    diff_weeks = int(diff.days / DAYS_PER_WEEK)\n    diff_map = [\n        (\"year\", \"years\", diff_years,),\n        (\"month\", \"months\", diff_months,),\n        (\"week\", \"weeks\", diff_weeks,),\n        (\"day\", \"days\", diff.days,),\n    ]\n    for parts in diff_map:\n        (interval, intervals, count,) = parts\n        if count > 1:\n            return _(f\"{count} {intervals} ago\")\n        elif count == 1:\n            return _(\"yesterday\") \\\n                if interval == \"day\" \\\n                else _(f\"last {interval}\")\n    if diff.days == 0:\n        return _(\"today\")\n    else:\n        # Date is in the future; return formatted date.\n        return f\"{specific_date:%B %d, %Y}\"\n\n```", "```py\n{% load utility_tags %}\n{{ object.published|date_since }}\n```", "```py\n@register.filter(name=\"humanized_date_since\", is_safe=True)\ndef date_since(value):\n    # \u2026\n```", "```py\n# myproject/apps/core/templatetags/utility_tags.py import re\nfrom django import template\nfrom django.utils.safestring import mark_safe\n\nregister = template.Library()\n\n\"\"\" FILTERS \"\"\"\n\nMEDIA_CLOSED_TAGS = \"|\".join([\n    \"figure\", \"object\", \"video\", \"audio\", \"iframe\"])\nMEDIA_SINGLE_TAGS = \"|\".join([\"img\", \"embed\"])\nMEDIA_TAGS_REGEX = re.compile(\n    r\"<(?P<tag>\" + MEDIA_CLOSED_TAGS + \")[\\S\\s]+?</(?P=tag)>|\" +\n    r\"<(\" + MEDIA_SINGLE_TAGS + \")[^>]+>\",\n    re.MULTILINE)\n\n@register.filter\ndef first_media(content):\n    \"\"\"\n    Returns the chunk of media-related markup from the html content\n    \"\"\"\n    tag_match = MEDIA_TAGS_REGEX.search(content)\n    media_tag = \"\"\n    if tag_match:\n        media_tag = tag_match.group()\n    return mark_safe(media_tag)\n```", "```py\n{% load utility_tags %}\n{{ object.content|first_media }} \n```", "```py\n# myproject/apps/core/templatetags/utility_tags.py import re\nfrom django import template\n\nregister = template.Library()\n\n\"\"\" FILTERS \"\"\"\n\n@register.filter\ndef humanize_url(url, letter_count=40):\n    \"\"\"\n    Returns a shortened human-readable URL\n    \"\"\"\n    letter_count = int(letter_count)\n    re_start = re.compile(r\"^https?://\")\n    re_end = re.compile(r\"/$\")\n    url = re_end.sub(\"\", re_start.sub(\"\", url))\n    if len(url) > letter_count:\n        url = f\"{url[:letter_count - 1]}\u2026\"\n    return url\n```", "```py\n{% load utility_tags %}\n<a href=\"{{ object.website }}\" target=\"_blank\">\n    {{ object.website|humanize_url }}\n</a>\n<a href=\"{{ object.website }}\" target=\"_blank\">\n    {{ object.website|humanize_url:30 }}\n</a>\n```", "```py\n# myproject/apps/core/templatetags/utility_tags.py from django import template\nfrom django.template.loader import get_template\n\nregister = template.Library()\n\n\"\"\" TAGS \"\"\"\n\n@register.tag\ndef try_to_include(parser, token):\n    \"\"\"\n    Usage: {% try_to_include \"some_template.html\" %}\n\n    This will fail silently if the template doesn't exist.\n    If it does exist, it will be rendered with the current context.\n    \"\"\"\n    try:\n        tag_name, template_name = token.split_contents()\n    except ValueError:\n        tag_name = token.contents.split()[0]\n        raise template.TemplateSyntaxError(\n            f\"{tag_name} tag requires a single argument\")\n    return IncludeNode(template_name)\n```", "```py\nclass IncludeNode(template.Node):\n    def __init__(self, template_name):\n        self.template_name = template.Variable(template_name)\n\n    def render(self, context):\n        try:\n            # Loading the template and rendering it\n            included_template = self.template_name.resolve(context)\n            if isinstance(included_template, str):\n                included_template = get_template(included_template)\n            rendered_template = included_template.render(\n                context.flatten()\n            )\n        except (template.TemplateDoesNotExist,\n                template.VariableDoesNotExist,\n                AttributeError):\n            rendered_template = \"\"\n        return rendered_template\n\n@register.tag\ndef try_to_include(parser, token):\n    # \u2026\n```", "```py\n{% load utility_tags %}\n{% try_to_include object.template_path %}\n```", "```py\n{# templates/cms/start_page.html #} {% load cms_tags %}\n{% with editorial_content_template_path=\n\"cms/plugins/editorial_content/start_page.html\" %}\n    {% placeholder \"main_content\" %}\n{% endwith %}\n```", "```py\n{# templates/cms/plugins/editorial_content.html #}\n{% load utility_tags %}\n{% if editorial_content_template_path %}\n    {% try_to_include editorial_content_template_path %}\n{% else %}\n    <div>\n        <!-- Some default presentation of\n        editorial content plugin -->\n    </div>\n{% endif %}\n```", "```py\n{% load utility_tags %}\n{% for object in object_list %}\n    {% try_to_include \"artists/includes/artist_item.html\" %}\n{% endfor %}\n```", "```py\n{# templates/artists/includes/artist_item.html #} {% extends \"utils/includes/item_base.html\" %}\n{% block item_title %}\n    {{ object.first_name }} {{ object.last_name }}\n{% endblock %}\n```", "```py\n{# templates/utils/includes/item_base.html #} {% load likes_tags %}\n<h3>{% block item_title %}{% endblock %}</h3>\n{% if request.user.is_authenticated %}\n    {% like_widget for object %}\n{% endif %}\n```", "```py\n# myproject/apps/news/models.py from django.db import models\nfrom django.urls import reverse\nfrom django.utils.translation import ugettext_lazy as _\n\nfrom myproject.apps.core.models import CreationModificationDateBase, UrlBase\n\nclass ArticleManager(models.Manager):\n def random_published(self):\n return self.filter(\n publishing_status=self.model.PUBLISHING_STATUS_PUBLISHED,\n ).order_by(\"?\")\n\nclass Article(CreationModificationDateBase, UrlBase):\n    PUBLISHING_STATUS_DRAFT, PUBLISHING_STATUS_PUBLISHED = \"d\", \"p\"\n    PUBLISHING_STATUS_CHOICES = (\n        (PUBLISHING_STATUS_DRAFT, _(\"Draft\")),\n        (PUBLISHING_STATUS_PUBLISHED, _(\"Published\")),\n    )\n    title = models.CharField(_(\"Title\"), max_length=200)\n    slug = models.SlugField(_(\"Slug\"), max_length=200)\n    content = models.TextField(_(\"Content\"))\n    publishing_status = models.CharField(\n        _(\"Publishing status\"),\n        max_length=1,\n        choices=PUBLISHING_STATUS_CHOICES,\n        default=PUBLISHING_STATUS_DRAFT,\n    )\n\n custom_manager = ArticleManager()\n\n    class Meta:\n        verbose_name = _(\"Article\")\n        verbose_name_plural = _(\"Articles\")\n\n    def __str__(self):\n        return self.title\n\n    def get_url_path(self):\n        return reverse(\"news:article_detail\", kwargs={\"slug\": self.slug})\n```", "```py\n# myproject/apps/core/templatetags/utility_tags.py from django import template\nfrom django.apps import apps\n\nregister = template.Library()\n\n\"\"\" TAGS \"\"\"\n\n@register.tag\ndef load_objects(parser, token):\n    \"\"\"\n    Gets a queryset of objects of the model specified by app and\n    model names\n\n    Usage:\n        {% load_objects [<manager>.]<method>\n                        from <app_name>.<model_name>\n                        [limit <amount>]\n                        as <var_name> %}\n\n    Examples:\n        {% load_objects latest_published from people.Person\n                        limit 3 as people %}\n        {% load_objects site_objects.all from news.Article\n                        as articles %}\n        {% load_objects site_objects.all from news.Article\n                        limit 3 as articles %}\n    \"\"\"\n    limit_count = None\n    try:\n        (tag_name, manager_method,\n         str_from, app_model,\n         str_limit, limit_count,\n         str_as, var_name) = token.split_contents()\n    except ValueError:\n        try:\n            (tag_name, manager_method,\n             str_from, app_model,\n             str_as, var_name) = token.split_contents()\n        except ValueError:\n            tag_name = token.contents.split()[0]\n            raise template.TemplateSyntaxError(\n                f\"{tag_name} tag requires the following syntax: \"\n                f\"{{% {tag_name} [<manager>.]<method> from \"\n                \"<app_name>.<model_name> [limit <amount>] \"\n                \"as <var_name> %}\")\n    try:\n        app_name, model_name = app_model.split(\".\")\n    except ValueError:\n        raise template.TemplateSyntaxError(\n            \"load_objects tag requires application name \"\n            \"and model name, separated by a dot\")\n    model = apps.get_model(app_name, model_name)\n    return ObjectsNode(\n        model, manager_method, limit_count, var_name\n    )\n```", "```py\nclass ObjectsNode(template.Node):\n    def __init__(self, model, manager_method, limit, var_name):\n        self.model = model\n        self.manager_method = manager_method\n        self.limit = template.Variable(limit) if limit else None\n        self.var_name = var_name\n\n    def render(self, context):\n        if \".\" in self.manager_method:\n            manager, method = self.manager_method.split(\".\")\n        else:\n            manager = \"_default_manager\"\n            method = self.manager_method\n\n        model_manager = getattr(self.model, manager)\n        fallback_method = self.model._default_manager.none\n        qs = getattr(model_manager, method, fallback_method)()\n        limit = None\n        if self.limit:\n            try:\n                limit = self.limit.resolve(context)\n            except template.VariableDoesNotExist:\n                limit = None\n        context[self.var_name] = qs[:limit] if limit else qs\n        return \"\"\n\n@register.tag\ndef load_objects(parser, token):\n    # \u2026\n```", "```py\n{% load utility_tags %}\n{% load_objects all from news.Article as all_articles %}\n<ul>\n    {% for article in all_articles %}\n        <li><a href=\"{{ article.get_url_path }}\">\n         {{ article.title }}</a></li>\n    {% endfor %}\n</ul>\n```", "```py\n{% load utility_tags %}\n{% load_objects custom_manager.random_published from news.Article limit 1 as random_published_articles %}\n<ul>\n    {% for article in random_published_articles %}\n        <li><a href=\"{{ article.get_url_path }}\">\n         {{ article.title }}</a></li>\n    {% endfor %}\n</ul>\n```", "```py\n# myproject/apps/core/templatetags/utility_tags.py\nfrom django import template\n\nregister = template.Library()\n\n\"\"\" TAGS \"\"\"\n\n@register.tag\ndef parse(parser, token):\n    \"\"\"\n    Parses a value as a template and prints or saves to a variable\n\n    Usage:\n        {% parse <template_value> [as <variable>] %}\n\n    Examples:\n        {% parse object.description %}\n        {% parse header as header %}\n        {% parse \"{{ MEDIA_URL }}js/\" as js_url %}\n    \"\"\"\n    bits = token.split_contents()\n    tag_name = bits.pop(0)\n    try:\n        template_value = bits.pop(0)\n        var_name = None\n        if len(bits) >= 2:\n            str_as, var_name = bits[:2]\n    except ValueError:\n        raise template.TemplateSyntaxError(\n            f\"{tag_name} tag requires the following syntax: \"\n            f\"{{% {tag_name} <template_value> [as <variable>] %}}\")\n    return ParseNode(template_value, var_name)\n```", "```py\nclass ParseNode(template.Node):\n    def __init__(self, template_value, var_name):\n        self.template_value = template.Variable(template_value)\n        self.var_name = var_name\n\n    def render(self, context):\n        template_value = self.template_value.resolve(context)\n        t = template.Template(template_value)\n        context_vars = {}\n        for d in list(context):\n            for var, val in d.items():\n                context_vars[var] = val\n        req_context = template.RequestContext(\n            context[\"request\"], context_vars\n        )\n        result = t.render(req_context)\n        if self.var_name:\n            context[self.var_name] = result\n            result = \"\"\n        return result\n\n@register.tag\ndef parse(parser, token):\n    # \u2026\n```", "```py\n{% load utility_tags %}\n{% parse object.description %}\n```", "```py\n{% load static utility_tags %}\n{% get_static_prefix as STATIC_URL %}\n{% parse \"{{ STATIC_URL }}site/img/\" as image_directory %}\n<img src=\"img/{{ image_directory }}logo.svg\" alt=\"Logo\" />\n```", "```py\n# myproject/settings/_base.py\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [os.path.join(BASE_DIR, \"myproject\", \"templates\")],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",\n                \"django.contrib.messages.context_processors.messages\",\n                \"django.template.context_processors.media\",\n                \"django.template.context_processors.static\",\n                \"myproject.apps.core.context_processors.website_url\",\n            ]\n        },\n    }\n]\n```", "```py\n# myproject/apps/core/templatetags/utility_tags.py from urllib.parse import urlencode\n\nfrom django import template\nfrom django.utils.encoding import force_str\nfrom django.utils.safestring import mark_safe\n\nregister = template.Library()\n\n\"\"\" TAGS \"\"\"\n\ndef construct_query_string(context, query_params):\n    # empty values will be removed\n    query_string = context[\"request\"].path\n    if len(query_params):\n        encoded_params = urlencode([\n            (key, force_str(value))\n            for (key, value) in query_params if value\n        ]).replace(\"&\", \"&amp;\")\n        query_string += f\"?{encoded_params}\"\n    return mark_safe(query_string)\n```", "```py\n@register.simple_tag(takes_context=True)\ndef modify_query(context, *params_to_remove, **params_to_change):\n    \"\"\"Renders a link with modified current query parameters\"\"\"\n    query_params = []\n    for key, value_list in context[\"request\"].GET.lists():\n        if not key in params_to_remove:\n            # don't add key-value pairs for params_to_remove\n            if key in params_to_change:\n                # update values for keys in params_to_change\n                query_params.append((key, params_to_change[key]))\n                params_to_change.pop(key)\n            else:\n                # leave existing parameters as they were\n                # if not mentioned in the params_to_change\n                for value in value_list:\n                    query_params.append((key, value))\n                    # attach new params\n    for key, value in params_to_change.items():\n        query_params.append((key, value))\n    return construct_query_string(context, query_params)\n```", "```py\n@register.simple_tag(takes_context=True)\ndef add_to_query(context, *params_to_remove, **params_to_add):\n    \"\"\"Renders a link with modified current query parameters\"\"\"\n    query_params = []\n    # go through current query params..\n    for key, value_list in context[\"request\"].GET.lists():\n        if key not in params_to_remove:\n            # don't add key-value pairs which already\n            # exist in the query\n            if (key in params_to_add\n                    and params_to_add[key] in value_list):\n                params_to_add.pop(key)\n            for value in value_list:\n                query_params.append((key, value))\n    # add the rest key-value pairs\n    for key, value in params_to_add.items():\n        query_params.append((key, value))\n    return construct_query_string(context, query_params)\n```", "```py\n@register.simple_tag(takes_context=True)\ndef remove_from_query(context, *args, **kwargs):\n    \"\"\"Renders a link with modified current query parameters\"\"\"\n    query_params = []\n    # go through current query params..\n    for key, value_list in context[\"request\"].GET.lists():\n        # skip keys mentioned in the args\n        if key not in args:\n            for value in value_list:\n                # skip key-value pairs mentioned in kwargs\n                if not (key in kwargs and\n                        str(value) == str(kwargs[key])):\n                    query_params.append((key, value))\n    return construct_query_string(context, query_params)\n```", "```py\n{% load utility_tags %}\n<a href=\"{% modify_query page=6 %}\">6</a>\n```", "```py\n<a href=\"/artists/?category=fine-art&amp;page=6\">6</a>\n```", "```py\n{% load utility_tags %}\n<a href=\"{% modify_query \"page\" category=\"sculpture\" %}\">\n    Sculpture\n</a>\n```", "```py\n<a href=\"/artists/?category=sculpture\">\n    Sculpture\n</a>\n```", "```py\n{% load utility_tags %}\n<a href=\"{% add_to_query category=\"sculpture\" %}\">\n    + Sculpture\n</a> \n```", "```py\n<a href=\"/artists/?category=fine-art&amp;category=sculpture\">\n    + Sculpture\n</a>\n```", "```py\n{% load utility_tags %}\n<a href=\"{% remove_from_query category=\"sculpture\" %}\">\n    - Sculpture\n</a>\n```", "```py\n<a href=\"/artists/?category=fine-art\">\n    - Sculpture\n</a>\n```"]