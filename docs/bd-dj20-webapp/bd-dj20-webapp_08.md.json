["```py\n$ echo \"coverage==4.4.2\" >> requirements.txt\n```", "```py\n$ pip install -r requirements.txt\n```", "```py\nfrom unittest.mock import patch\n\nfrom django.conf import settings\nfrom django.contrib.auth import get_user_model\nfrom django.test import TestCase\nfrom elasticsearch import Elasticsearch\n\nfrom qanda.models import Question\n\nclass QuestionSaveTestCase(TestCase):\n    \"\"\"\n    Tests Question.save()\n    \"\"\"\n\n    @patch('qanda.service.elasticsearch.Elasticsearch')\n    def test_elasticsearch_upsert_on_save(self, ElasticsearchMock):\n        user = get_user_model().objects.create_user(\n            username='unittest',\n            password='unittest',\n        )\n        question_title = 'Unit test'\n        question_body = 'some long text'\n        q = Question(\n            title=question_title,\n            question=question_body,\n            user=user,\n        )\n        q.save()\n\n        self.assertIsNotNone(q.id)\n        self.assertTrue(ElasticsearchMock.called)\n        mock_client = ElasticsearchMock.return_value\n        mock_client.update.assert_called_once_with(\n            settings.ES_INDEX,\n            id=q.id,\n            body={\n                'doc': {\n                    '_type': 'doc',\n                    'text': '{}\\n{}'.format(question_title, question_body),\n                    'question_body': question_body,\n                    'title': question_title,\n                    'id': q.id,\n                    'created': q.created,\n                },\n                'doc_as_upsert': True,\n            }\n        )\n```", "```py\n$ cd django\n$ python manage.py test\nCreating test database for alias 'default'...\nSystem check identified no issues (0 silenced).\n.\n----------------------------------------------------------------------\nRan 1 test in 0.094s\n\nOK\nDestroying test database for alias 'default'...\n```", "```py\n$ pip install factory-boy==2.9.2\n```", "```py\nfrom django.conf import settings\n\nimport factory\n\nclass UserFactory(factory.DjangoModelFactory):\n    username = factory.Sequence(lambda n: 'user %d' % n)\n    password = 'unittest'\n\n    class Meta:\n        model = settings.AUTH_USER_MODEL\n\n    @classmethod\n    def _create(cls, model_class, *args, **kwargs):\n        manager = cls._get_manager(model_class)\n        return manager.create_user(*args, **kwargs)\n```", "```py\n$ cd django\n$ python manage.py shell\nPython 3.6.3 (default, Oct 31 2017, 11:15:24) \nType 'copyright', 'credits' or 'license' for more information\nIPython 6.2.1 -- An enhanced Interactive Python. Type '?' for help.\nIn [1]: from user.factories import UserFactory\nIn [2]:  user = UserFactory()\nIn [3]: user.username\nOut[3]: 'user 0'\nIn [4]:  user2 = UserFactory()\nIn [5]:  assert user.username != user2.username\nIn [6]: user3 = UserFactory(username='custom')\nIn [7]: user3.username\nOut[7]: 'custom'\n```", "```py\nfrom unittest.mock import patch\n\nimport factory\n\nfrom qanda.models import Question\nfrom user.factories import UserFactory\n\nclass QuestionFactory(factory.DjangoModelFactory):\n    title = factory.Sequence(lambda n: 'Question #%d' % n)\n    question = 'what is a question?'\n    user = factory.SubFactory(UserFactory)\n\n    class Meta:\n        model = Question\n\n    @classmethod\n    def _create(cls, model_class, *args, **kwargs):\n        with patch('qanda.service.elasticsearch.Elasticsearch'):\n            return super()._create(model_class, *args, **kwargs)\n```", "```py\nfrom datetime import date\n\nfrom django.test import TestCase, RequestFactory\n\nfrom qanda.factories import QuestionFactory\nfrom qanda.views import DailyQuestionList\n\nQUESTION_CREATED_STRFTIME = '%Y-%m-%d %H:%M'\n\nclass DailyQuestionListTestCase(TestCase):\n\"\"\"\nTests the DailyQuestionList view\n\"\"\"\nQUESTION_LIST_NEEDLE_TEMPLATE = '''\n<li >\n    <a href=\"/q/{id}\" >{title}</a >\n    by {username} on {date}\n</li >\n'''\n\nREQUEST = RequestFactory().get(path='/q/2030-12-31')\nTODAY = date.today()\n\ndef test_GET_on_day_with_many_questions(self):\n    todays_questions = [QuestionFactory() for _ in range(10)]\n\n    response = DailyQuestionList.as_view()(\n        self.REQUEST,\n        year=self.TODAY.year,\n        month=self.TODAY.month,\n        day=self.TODAY.day\n    )\n\n    self.assertEqual(200, response.status_code)\n    self.assertEqual(10, response.context_data['object_list'].count())\n    rendered_content = response.rendered_content\n    for question in todays_questions:\n        needle = self.QUESTION_LIST_NEEDLE_TEMPLATE.format(\n            id=question.id,\n            title=question.title,\n            username=question.user.username,\n            date=question.created.strftime(QUESTION_CREATED_STRFTIME)\n        )\n        self.assertInHTML(needle, rendered_content)\n```", "```py\nfrom django.test import TestCase\n\nfrom qanda.factories import QuestionFactory\nfrom user.factories import UserFactory\n\nQUESTION_CREATED_STRFTIME = '%Y-%m-%d %H:%M'\n\nclass QuestionDetailViewTestCase(TestCase):\n    QUESTION_DISPLAY_SNIPPET = '''\n    <div class=\"question\" >\n      <div class=\"meta col-sm-12\" >\n        <h1 >{title}</h1 >\n        Asked by {user} on {date}\n      </div >\n      <div class=\"body col-sm-12\" >\n        {body}\n      </div >\n    </div >'''\n    LOGIN_TO_POST_ANSWERS = 'Login to post answers.'\n\n    def test_logged_in_user_can_post_answers(self):\n        question = QuestionFactory()\n\n        self.assertTrue(self.client.login(\n            username=question.user.username,\n            password=UserFactory.password)\n        )\n        response = self.client.get('/q/{}'.format(question.id))\n        rendered_content = response.rendered_content\n\n        self.assertEqual(200, response.status_code)\n\n         self.assertInHTML(self.NO_ANSWERS_SNIPPET, rendered_content)\n\n        template_names = [t.name for t in response.templates]\n        self.assertIn('qanda/common/post_answer.html', template_names)\n\n        question_needle = self.QUESTION_DISPLAY_SNIPPET.format(\n            title=question.title,\n            user=question.user.username,\n            date=question.created.strftime(QUESTION_CREATED_STRFTIME),\n            body=QuestionFactory.question,\n        )\n        self.assertInHTML(question_needle, rendered_content)\n```", "```py\n$pip install selenium==3.8.0\n```", "```py\nCHROMEDRIVER = os.path.join(BASE_DIR, '../chromedriver')\n```", "```py\nfrom django.contrib.staticfiles.testing import StaticLiveServerTestCase\n\nfrom selenium.webdriver.chrome.webdriver import WebDriver\n\nfrom user.factories import UserFactory\n\nclass AskQuestionTestCase(StaticLiveServerTestCase):\n\n    @classmethod\n    def setUpClass(cls):\n        super().setUpClass()\n        cls.selenium = WebDriver(executable_path=settings.CHROMEDRIVER)\n        cls.selenium.implicitly_wait(10)\n\n    @classmethod\n    def tearDownClass(cls):\n        cls.selenium.quit()\n        super().tearDownClass()\n\n    def setUp(self):\n        self.user = UserFactory()\n\n    def test_cant_ask_blank_question(self):\n        initial_question_count = Question.objects.count()\n\n        self.selenium.get('%s%s' % (self.live_server_url, '/user/login'))\n\n        username_input = self.selenium.find_element_by_name(\"username\")\n        username_input.send_keys(self.user.username)\n        password_input = self.selenium.find_element_by_name(\"password\")\n        password_input.send_keys(UserFactory.password)\n        self.selenium.find_element_by_id('log_in').click()\n\n        self.selenium.find_element_by_link_text(\"Ask\").click()\n        ask_question_url = self.selenium.current_url\n        submit_btn = self.selenium.find_element_by_id('ask')\n        submit_btn.click()\n        after_empty_submit_click = self.selenium.current_url\n\n        self.assertEqual(ask_question_url, after_empty_submit_click)\n        self.assertEqual(initial_question_count, Question.objects.count())\n```"]