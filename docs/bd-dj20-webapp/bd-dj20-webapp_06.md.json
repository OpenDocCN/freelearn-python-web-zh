["```py\n$ mkdir answerly\n$ cd answerly\n```", "```py\ndjango<2.1\npsycopg2<2.8\n```", "```py\n$ pip install -r requirements.txt\n```", "```py\n$ django-admin startproject config\n$ mv config django\n```", "```py\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'answerly',\n        'USER': 'answerly',\n        'PASSWORD': 'development',\n        'HOST': '127.0.0.1',\n        'PORT': '5432',\n    }\n}\n```", "```py\n$ cd django\n$ python manage.py startapp user\n$ python manage.py startapp qanda\n```", "```py\nINSTALLED_APPS = [\n    'user',\n    'qanda',\n\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n```", "```py\nfrom django.conf import settings\nfrom django.db import models\nfrom django.urls.base import reverse\n\nclass Question(models.Model):\n    title = models.CharField(max_length=140)\n    question = models.TextField()\n    user = models.ForeignKey(to=settings.AUTH_USER_MODEL,\n                             on_delete=models.CASCADE)\n    created = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.title\n\n    def get_absolute_url(self):\n        return reverse('questions:question_detail', kwargs={'pk': self.id})\n\n    def can_accept_answers(self, user):\n        return user == self.user\n```", "```py\nfrom django.conf import settings\nfrom django.db import models\n\nclass Question(model.Models):\n    # skipped\n\nclass Answer(models.Model):\n    answer = models.TextField()\n    user = models.ForeignKey(to=settings.AUTH_USER_MODEL,\n                             on_delete=models.CASCADE)\n    created = models.DateTimeField(auto_now_add=True)\n    question = models.ForeignKey(to=Question,\n                                 on_delete=models.CASCADE)\n    accepted = models.BooleanField(default=False)\n\n    class Meta:\n        ordering = ('-created', )\n```", "```py\n$ python manage.py makemigrations\n Migrations for 'qanda':\n  qanda/migrations/0001_initial.py\n    - Create model Answer\n    - Create model Question\n    - Add field question to answer\n    - Add field user to answer\n$ python manage.py migrate\nOperations to perform:\n  Apply all migrations: admin, auth, contenttypes, qanda, sessions\nRunning migrations:\n  Applying qanda.0001_initial... OK\n```", "```py\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            os.path.join(BASE_DIR, 'templates')\n        ],\n        'APP_DIRS': True,\n        'OPTIONS': {\n                # skipping rest of options.\n        },\n    },\n]\n```", "```py\n{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\" >\n<head >\n  <meta charset=\"UTF-8\" >\n  <title >{% block title %}Answerly{% endblock %}</title >\n  <link\n      href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\"\n      rel=\"stylesheet\">\n  <link\n      href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\"\n      rel=\"stylesheet\">\n  <link rel=\"stylesheet\" href=\"{% static \"base.css\" %}\" >\n</head >\n<body >\n<nav class=\"navbar navbar-expand-lg  bg-light\" >\n  <div class=\"container\" >\n    <a class=\"navbar-brand\" href=\"/\" >Answerly</a >\n    <ul class=\"navbar-nav\" >\n    </ul >\n  </div >\n</nav >\n<div class=\"container\" >\n  {% block body %}{% endblock %}\n</div >\n</body >\n</html >\n```", "```py\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n```", "```py\nnav.navbar {\n  margin-bottom: 1em;\n}\n```", "```py\nfrom django import forms\nfrom django.contrib.auth import get_user_model\n\nfrom qanda.models import Question\n\nclass QuestionForm(forms.ModelForm):\n    user = forms.ModelChoiceField(\n        widget=forms.HiddenInput,\n        queryset=get_user_model().objects.all(),\n        disabled=True,\n    )\n\n    class Meta:\n        model = Question\n        fields = ['title', 'question', 'user', ]\n```", "```py\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom django.views.generic import CreateView\n\nfrom qanda.forms import QuestionForm\nfrom qanda.models import Question\n\nclass AskQuestionView(LoginRequiredMixin, CreateView):\n    form_class = QuestionForm\n    template_name = 'qanda/ask.html'\n\n    def get_initial(self):\n        return {\n            'user': self.request.user.id\n        }\n\n    def form_valid(self, form):\n        action = self.request.POST.get('action')\n        if action == 'SAVE':\n            # save and redirect as usual.\n            return super().form_valid(form)\n        elif action == 'PREVIEW':\n            preview = Question(\n                question=form.cleaned_data['question'],\n                title=form.cleaned_data['title'])\n            ctx = self.get_context_data(preview=preview)\n            return self.render_to_response(context=ctx)\n        return HttpResponseBadRequest()\n```", "```py\n{% extends \"base.html\" %}\n\n{% load markdownify %}\n{% load crispy_forms_tags %}\n\n{% block title %} Ask a question {% endblock %}\n\n{% block body %}\n  <div class=\"col-md-12\" >\n    <h1 >Ask a question</h1 >\n    {% if preview %}\n      <div class=\"card question-preview\" >\n        <div class=\"card-header\" >\n          Question Preview\n        </div >\n        <div class=\"card-body\" >\n          <h1 class=\"card-title\" >{{ preview.title }}</h1>\n          {{ preview.question |  markdownify }}\n        </div >\n      </div >\n    {% endif %}\n\n    <form method=\"post\" >\n      {{ form | crispy }}\n      {% csrf_token %}\n      <button class=\"btn btn-primary\" type=\"submit\" name=\"action\"\n              value=\"PREVIEW\" >\n        Preview\n      </button >\n      <button class=\"btn btn-primary\" type=\"submit\" name=\"action\"\n              value=\"SAVE\" >\n        Ask!\n      </button >\n    </form >\n  </div >\n{% endblock %}\n```", "```py\ndjango-markdownify==0.2.2\n```", "```py\n$ pip install -r requirements.txt\n```", "```py\nMARKDOWNIFY_STRIP = False\nMARKDOWNIFY_WHITELIST_TAGS = [\n    'a', 'blockquote', 'code', 'em', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', \n    'h7', 'li', 'ol', 'p', 'strong', 'ul',\n]\n```", "```py\n<label for=\"id_title\">Title:</label>\n<input \n      type=\"text\" name=\"title\" maxlength=\"140\" required id=\"id_title\" />\n```", "```py\n<div class=\"form-group\"> \n<label for=\"id_title\" class=\"form-control-label  requiredField\">\n   Title\n</label> \n<input type=\"text\" name=\"title\" maxlength=\"140\" \n  class=\"textinput textInput form-control\" required=\"\" id=\"id_title\">  \n</div>\n```", "```py\n$ echo \"django-crispy-forms==1.7.0\" >> requirements.txt\n$ pip install -r requirements.txt\n```", "```py\nCRISPY_TEMPLATE_PACK = 'bootstrap4'\n```", "```py\nfrom django.urls.conf import path\n\nfrom qanda import views\n\napp_name = 'qanda'\nurlpatterns = [\n    path('ask', views.AskQuestionView.as_view(), name='ask'),\n]\n```", "```py\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nimport qanda.urls\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include(qanda.urls, namespace='qanda')),\n]\n```", "```py\nfrom django import forms\nfrom django.contrib.auth import get_user_model\n\nfrom qanda.models import Answers\n\nclass AnswerForm(forms.ModelForm):\n    user = forms.ModelChoiceField(\n        widget=forms.HiddenInput,\n        queryset=get_user_model().objects.all(),\n        disabled=True,\n    )\n    question = forms.ModelChoiceField(\n        widget=forms.HiddenInput,\n        queryset=Question.objects.all(),\n        disabled=True,\n    )\n\n    class Meta:\n        model = Answer\n        fields = ['answer', 'user', 'question', ]\n```", "```py\nclass AnswerAcceptanceForm(forms.ModelForm):\n    accepted = forms.BooleanField(\n        widget=forms.HiddenInput,\n        required=False,\n    )\n\n    class Meta:\n        model = Answer\n        fields = ['accepted', ]\n```", "```py\nfrom django.views.generic import DetailView\n\nfrom qanda.forms import AnswerForm, AnswerAcceptanceForm\nfrom qanda.models import Question\n\nclass QuestionDetailView(DetailView):\n    model = Question\n\n    ACCEPT_FORM = AnswerAcceptanceForm(initial={'accepted': True})\n    REJECT_FORM = AnswerAcceptanceForm(initial={'accepted': False})\n\n    def get_context_data(self, **kwargs):\n        ctx = super().get_context_data(**kwargs)\n        ctx.update({\n            'answer_form': AnswerForm(initial={\n                'user': self.request.user.id,\n                'question': self.object.id,\n            })\n        })\n        if self.object.can_accept_answers(self.request.user):\n            ctx.update({\n                'accept_form': self.ACCEPT_FORM,\n                'reject_form': self.REJECT_FORM,\n            })\n        return ctx\n```", "```py\n{% extends \"base.html\" %}\n\n{% block title %}{{ question.title }} - {{ block.super }}{% endblock %}\n\n{% block body %}\n  {% include \"qanda/common/display_question.html\" %}\n  {% include \"qanda/common/list_answers.html\" %}\n  {% if user.is_authenticated %}\n    {% include \"qanda/common/question_post_answer.html\" %}\n  {% else %}\n    <div >Login to post answers.</div >\n  {% endif %}\n{% endblock %}\n```", "```py\n{% load markdownify %}\n<div class=\"question\" >\n  <div class=\"meta col-sm-12\" >\n    <h1 >{{ question.title }}</h1 >\n    Asked by {{ question.user }} on {{ question.created }}\n  </div >\n  <div class=\"body col-sm-12\" >\n    {{ question.question|markdownify }}\n  </div >\n</div >\n```", "```py\n{% load markdownify %}\n<h3 >Answers</h3 >\n<ul class=\"list-unstyled answers\" >\n  {% for answer in question.answer_set.all %}\n    <li class=\"answer row\" >\n      <div class=\"col-sm-3 col-md-2 text-center\" >\n        {% if answer.accepted %}\n          <span class=\"badge badge-pill badge-success\" >Accepted</span >\n        {% endif %}\n        {% if answer.accepted and reject_form %}\n          <form method=\"post\"\n                action=\"{% url \"qanda:update_answer_acceptance\" pk=answer.id %}\" >\n            {% csrf_token %}\n            {{ reject_form }}\n            <button type=\"submit\" class=\"btn btn-link\" >\n              <i class=\"fa fa-times\" aria-hidden=\"true\" ></i>\n              Reject\n            </button >\n          </form >\n        {% elif accept_form %}\n          <form method=\"post\"\n                action=\"{% url \"qanda:update_answer_acceptance\" pk=answer.id %}\" >\n            {% csrf_token %}\n            {{ accept_form }}\n            <button type=\"submit\" class=\"btn btn-link\" title=\"Accept answer\" >\n              <i class=\"fa fa-check-circle\" aria-hidden=\"true\"></i >\n              Accept\n            </button >\n          </form >\n        {% endif %}\n      </div >\n      <div class=\"col-sm-9 col-md-10\" >\n        <div class=\"body\" >{{ answer.answer|markdownify }}</div >\n        <div class=\"meta font-weight-light\" >\n          Answered by {{ answer.user }} on {{ answer.created }}\n        </div >\n      </div >\n    </li >\n  {% empty %}\n    <li class=\"answer\" >No answers yet!</li >\n  {% endfor %}\n</ul >\n```", "```py\n{% load crispy_forms_tags %}\n\n<div class=\"col-sm-12\" >\n  <h3 >Post your answer</h3 >\n  <form method=\"post\"\n        action=\"{% url \"qanda:answer_question\" pk=question.id %}\" >\n    {{ answer_form | crispy }}\n    {% csrf_token %}\n    <button class=\"btn btn-primary\" type=\"submit\" name=\"action\"\n            value=\"PREVIEW\" >Preview\n    </button >\n    <button class=\"btn btn-primary\" type=\"submit\" name=\"action\"\n            value=\"SAVE\" >Answer\n    </button >\n  </form >\n</div >\n```", "```py\n    path('q/<int:pk>', views.QuestionDetailView.as_view(),\n         name='question_detail'),\n```", "```py\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom django.views.generic import CreateView\n\nfrom qanda.forms import AnswerForm\n\nclass CreateAnswerView(LoginRequiredMixin, CreateView):\n    form_class = AnswerForm\n    template_name = 'qanda/create_answer.html'\n\n    def get_initial(self):\n        return {\n            'question': self.get_question().id,\n            'user': self.request.user.id,\n        }\n\n    def get_context_data(self, **kwargs):\n        return super().get_context_data(question=self.get_question(),\n                                        **kwargs)\n\n    def get_success_url(self):\n        return self.object.question.get_absolute_url()\n\n    def form_valid(self, form):\n        action = self.request.POST.get('action')\n        if action == 'SAVE':\n            # save and redirect as usual.\n            return super().form_valid(form)\n        elif action == 'PREVIEW':\n            ctx = self.get_context_data(preview=form.cleaned_data['answer'])\n            return self.render_to_response(context=ctx)\n        return HttpResponseBadRequest()\n\n    def get_question(self):\n        return Question.objects.get(pk=self.kwargs['pk'])\n```", "```py\n{% extends \"base.html\" %}\n{% load markdownify %}\n\n{% block body %}\n  {% include 'qanda/common/display_question.html' %}\n  {% if preview %}\n    <div class=\"card question-preview\" >\n      <div class=\"card-header\" >\n        Answer Preview\n      </div >\n      <div class=\"card-body\" >\n        {{ preview|markdownify }}\n      </div >\n    </div >\n  {% endif %}\n  {% include 'qanda/common/post_answer.html' with answer_form=form %}\n{% endblock %}\n```", "```py\n   path('q/<int:pk>/answer', views.CreateAnswerView.as_view(),\n         name='answer_question'),\n```", "```py\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom django.views.generic import UpdateView\n\nfrom qanda.forms import AnswerAcceptanceForm\nfrom qanda.models import Answer\n\nclass UpdateAnswerAcceptance(LoginRequiredMixin, UpdateView):\n    form_class = AnswerAcceptanceForm\n    queryset = Answer.objects.all()\n\n    def get_success_url(self):\n        return self.object.question.get_absolute_url()\n\n    def form_invalid(self, form):\n        return HttpResponseRedirect(\n            redirect_to=self.object.question.get_absolute_url())\n```", "```py\n   path('a/<int:pk>/accept', views.UpdateAnswerAcceptance.as_view(),\n         name='update_answer_acceptance'),\n```", "```py\nfrom django.views.generic import DayArchiveView\n\nfrom qanda.models import Question\n\nclass DailyQuestionList(DayArchiveView):\n    queryset = Question.objects.all()\n    date_field = 'created'\n    month_format = '%m'\n    allow_empty = True\n```", "```py\n{% extends \"base.html\" %}\n\n{% block title %} Questions on {{ day }} {% endblock %}\n\n{% block body %}\n  <div class=\"col-sm-12\" >\n    <h1 >Highest Voted Questions of {{ day }}</h1 >\n    <ul >\n      {% for question in object_list %}\n        <li >\n          {{ question.votes }}\n          <a href=\"{{ question.get_absolute_url }}\" >\n            {{ question }}\n          </a >\n          by\n            {{ question.user }}\n          on {{ question.created }}\n        </li >\n      {% empty %}\n        <li>Hmm... Everyone thinks they know everything today.</li>\n      {% endfor %}\n    </ul >\n    <div>\n      {% if previous_day %}\n        <a href=\"{% url \"qanda:daily_questions\" year=previous_day.year month=previous_day.month day=previous_day.day %}\" >\n           << Previous Day\n        </a >\n      {% endif %}\n      {% if next_day %}\n        <a href=\"{% url \"qanda:daily_questions\" year=next_day.year month=next_day.month day=next_day.day %}\" >\n          Next Day >>\n        </a >\n      {% endif %}\n    </div >\n  </div >\n{% endblock %}\n```", "```py\n    path('daily/<int:year>/<int:month>/<int:day>/',\n         views.DailyQuestionList.as_view(),\n         name='daily_questions'),\n```", "```py\nclass TodaysQuestionList(RedirectView):\n    def get_redirect_url(self, *args, **kwargs):\n        today = timezone.now()\n        return reverse(\n            'questions:daily_questions',\n            kwargs={\n                'day': today.day,\n                'month': today.month,\n                'year': today.year,\n            }\n        )\n```", "```py\n$ python manage.py startapp user\n```", "```py\nINSTALLED_APPS = [\n    'user',\n    'qanda',\n\n    'markdownify',\n    'crispy_forms',\n\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n```", "```py\nfrom django.urls import path\n\nimport user.views\n\napp_name = 'user'\nurlpatterns = [\n]\n```", "```py\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nimport qanda.urls\nimport user.urls\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('user/', include(user.urls, namespace='user')),\n    path('', include(qanda.urls, namespace='questions')),\n]\n```", "```py\nfrom django.urls import path\n\nimport user.views\n\napp_name = 'user'\nurlpatterns = [\n    path('login', LoginView.as_view(), name='login'),\n    path('logout', LogoutView.as_view(), name='logout'),\n]\n```", "```py\n{% extends \"base.html\" %}\n{% load crispy_forms_tags %}\n\n{% block title %} Login - {{ block.super }} {% endblock %}\n\n{% block body %}\n  <h1>Login</h1>\n  <form method=\"post\" class=\"col-sm-6\">\n    {% csrf_token %}\n    {{ form|crispy }}\n    <button type=\"submit\" class=\"btn btn-primary\">Login</button>\n  </form>\n{% endblock %}\n```", "```py\nLOGIN_URL = 'user:login'\nLOGIN_REDIRECT_URL = 'questions:index'\nLOGOUT_REDIRECT_URL = 'questions:index'\n```", "```py\nfrom django.contrib.auth.forms import UserCreationForm\nfrom django.views.generic.edit import CreateView\n\nclass RegisterView(CreateView):\n    template_name = 'user/register.html'\n    form_class = UserCreationForm\n```", "```py\n{% extends \"base.html\" %}\n{% load crispy_forms_tags %}\n{% block body %}\n  <div class=\"col-sm-12\">\n    <h1 >Register for MyQA</h1 >\n    <form method=\"post\" >\n      {% csrf_token %}\n      {{ form | crispy }}\n      <button type=\"submit\" class=\"btn btn-primary\" >\n        Register\n      </button >\n    </form >\n  </div >\n{% endblock %}\n```", "```py\npath('register', user.views.RegisterView.as_view(), name='register'),\n```", "```py\n{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\" >\n<head >\n{# skipping unchanged head contents #}\n</head >\n<body >\n<nav class=\"navbar navbar-expand-lg  bg-light\" >\n  <div class=\"container\" >\n    <a class=\"navbar-brand\" href=\"/\" >Answerly</a >\n    <ul class=\"navbar-nav\" >\n      <li class=\"nav-item\" >\n        <a class=\"nav-link\" href=\"{% url \"qanda:ask\" %}\" >Ask</a >\n      </li >\n      <li class=\"nav-item\" >\n        <a\n            class=\"nav-link\"\n            href=\"{% url \"qanda:index\" %}\" >\n          Today's  Questions\n        </a >\n      </li >\n      {% if user.is_authenticated %}\n        <li class=\"nav-item\" >\n          <a class=\"nav-link\" href=\"{% url \"user:logout\" %}\" >Logout</a >\n        </li >\n      {% else %}\n        <li class=\"nav-item\" >\n          <a class=\"nav-link\" href=\"{% url \"user:login\" %}\" >Login</a >\n        </li >\n        <li class=\"nav-item\" >\n          <a class=\"nav-link\" href=\"{% url \"user:register\" %}\" >Register</a >\n        </li >\n      {% endif %}\n    </ul >\n  </div >\n</nav >\n<div class=\"container\" >\n  {% block body %}{% endblock %}\n</div >\n</body >\n</html >\n```", "```py\n$ cd django\n$ python manage.py runserver\n```"]