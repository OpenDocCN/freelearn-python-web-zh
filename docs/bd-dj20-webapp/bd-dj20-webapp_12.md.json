["```py\ndjangorestframework<3.8\n```", "```py\n$ pip install -r requirements.txt\n```", "```py\nINSTALLED_APPS = [\n# previously unchanged list\n    'rest_framework',\n]\n```", "```py\nREST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': (\n        'rest_framework.permissions.IsAuthenticated',\n    ),\n    'DEFAULT_THROTTLE_CLASSES': (\n        'rest_framework.throttling.UserRateThrottle',\n        'rest_framework.throttling.AnonRateThrottle',\n    ),\n    'DEFAULT_THROTTLE_RATES': {\n        'user': '60/minute',\n        'anon': '30/minute',\n    },\n}\n```", "```py\nfrom django.contrib.auth import get_user_model\nfrom rest_framework import serializers\n\nfrom mailinglist.models import MailingLIst\n\nclass MailingListSerializer(serializers.HyperlinkedModelSerializer):\n    owner = serializers.PrimaryKeyRelatedField(\n        queryset=get_user_model().objects.all())\n\n    class Meta:\n        model = MailingList\n        fields = ('url', 'id', 'name', 'subscriber_set')\n        read_only_fields = ('subscriber_set', )\n        extra_kwargs = {\n            'url': {'view_name': 'mailinglist:api-mailing-list-detail'},\n            'subscriber_set': {'view_name': 'mailinglist:api-subscriber-detail'},\n        }\n```", "```py\nfrom rest_framework import serializers\n\nfrom mailinglist.models import Subscriber\n\nclass SubscriberSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = Subscriber\n        fields = ('url', 'id', 'email', 'confirmed', 'mailing_list')\n        extra_kwargs = {\n            'url': {'view_name': 'mailinglist:api-subscriber-detail'},\n            'mailing_list': {'view_name': 'mailinglist:api-mailing-list-detail'},\n        }\n```", "```py\nfrom rest_framework import serializers\n\nfrom mailinglist.models import Subscriber\n\nclass ReadOnlyEmailSubscriberSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = Subscriber\n        fields = ('url', 'id', 'email', 'confirmed', 'mailing_list')\n        read_only_fields = ('email', 'mailing_list',)\n        extra_kwargs = {\n            'url': {'view_name': 'mailinglist:api-subscriber-detail'},\n            'mailing_list': {'view_name': 'mailinglist:api-mailing-list-detail'},\n        }\n```", "```py\nfrom rest_framework.permissions import BasePermission\n\nfrom mailinglist.models import Subscriber, MailingList\n\nclass CanUseMailingList(BasePermission):\n\n    message = 'User does not have access to this resource.'\n\n    def has_object_permission(self, request, view, obj):\n        user = request.user\n        if isinstance(obj, Subscriber):\n            return obj.mailing_list.user_can_use_mailing_list(user)\n        elif isinstance(obj, MailingList):\n            return obj.user_can_use_mailing_list(user)\n        return False\n```", "```py\nfrom rest_framework import generics\nfrom rest_framework.permissions import IsAuthenticated\n\nfrom mailinglist.permissions import CanUseMailingList\nfrom mailinglist.serializers import MailingListSerializer\n\nclass MailingListCreateListView(generics.ListCreateAPIView):\n    permission_classes = (IsAuthenticated, CanUseMailingList)\n    serializer_class = MailingListSerializer\n\n    def get_queryset(self):\n        return self.request.user.mailinglist_set.all()\n\n    def get_serializer(self, *args, **kwargs):\n        if kwargs.get('data', None):\n            data = kwargs.get('data', None)\n            owner = {\n                'owner': self.request.user.id,\n            }\n            data.update(owner)\n        return super().get_serializer(*args, **kwargs)\n```", "```py\n   path('api/v1/mailing-list', views.MailingListCreateListView.as_view(),\n         name='api-mailing-list-list'),\n```", "```py\nfrom rest_framework import generics\nfrom rest_framework.permissions import IsAuthenticated\n\nfrom mailinglist.permissions import CanUseMailingList\nfrom mailinglist.serializers import MailingListSerializer\nfrom mailinglist.models import MailingList\n\nclass MailingListRetrieveUpdateDestroyView(\n    generics.RetrieveUpdateDestroyAPIView):\n\n    permission_classes = (IsAuthenticated, CanUseMailingList)\n    serializer_class = MailingListSerializer\n    queryset = MailingList.objects.all()\n```", "```py\n   path('api/v1/mailinglist/<uuid:pk>',\n         views.MailingListRetrieveUpdateDetroyView.as_view(),\n         name='api-mailing-list-detail'),\n```", "```py\nfrom rest_framework import generics\nfrom rest_framework.permissions import IsAuthenticated\n\nfrom mailinglist.permissions import CanUseMailingList\nfrom mailinglist.serializers import SubscriberSerializer\nfrom mailinglist.models import MailingList, Subscriber\n\nclass SubscriberListCreateView(generics.ListCreateAPIView):\n    permission_classes = (IsAuthenticated, CanUseMailingList)\n    serializer_class = SubscriberSerializer\n\n    def get_queryset(self):\n        mailing_list_pk = self.kwargs['mailing_list_pk']\n        mailing_list = get_object_or_404(MailingList, id=mailing_list_pk)\n        return mailing_list.subscriber_set.all()\n\n    def get_serializer(self, *args, **kwargs):\n        if kwargs.get('data'):\n            data = kwargs.get('data')\n            mailing_list = {\n                'mailing_list': reverse(\n                    'mailinglist:api-mailing-list-detail',\n                    kwargs={'pk': self.kwargs['mailing_list_pk']})\n            }\n            data.update(mailing_list)\n        return super().get_serializer(*args, **kwargs)\n```", "```py\n   path('api/v1/mailinglist/<uuid:mailing_list_pk>/subscribers',\n         views.SubscriberListCreateView.as_view(),\n         name='api-subscriber-list'),\n```", "```py\nclass Subscriber(models.Model):\n    # skipping unchanged attributes and methods\n\n    def save(self, force_insert=False, force_update=False, using=None,\n             update_fields=None):\n        is_new = self._state.adding or force_insert\n        super().save(force_insert=force_insert, force_update=force_update,\n                     using=using, update_fields=update_fields)\n        if is_new and not self.confirmed:\n            self.send_confirmation_email()\n```", "```py\nfrom rest_framework import generics\nfrom rest_framework.permissions import IsAuthenticated\n\nfrom mailinglist.permissions import CanUseMailingList\nfrom mailinglist.serializers import ReadOnlyEmailSubscriberSerializer\nfrom mailinglist.models import Subscriber\n\nclass SubscriberRetrieveUpdateDestroyView(\n    generics.RetrieveUpdateDestroyAPIView):\n\n    permission_classes = (IsAuthenticated, CanUseMailingList)\n    serializer_class = ReadOnlyEmailSubscriberSerializer\n    queryset = Subscriber.objects.all()\n```", "```py\n   path('api/v1/subscriber/<uuid:pk>',\n         views.SubscriberRetrieveUpdateDestroyView.as_view(),\n         name='api-subscriber-detail'),\n```", "```py\n$ cd django\n$ python manage.py shell\nPython 3.6.3 (default) \nType 'copyright', 'credits' or 'license' for more information\nIPython 6.2.1 -- An enhanced Interactive Python. Type '?' for help.\nIn [1]: from django.contrib.auth import get_user_model\n\nIn [2]: user = get_user_model().objects.create_user(username='user', password='secret')\nIn [3]: user.id\n2\n```", "```py\n$ cd django\n$ python manage.py runserver\n```", "```py\n$ curl \"http://localhost:8000/mailinglist/api/v1/mailing-list\" \\\n     -u 'user:secret'\n[]\n```", "```py\n$ curl -X \"POST\" \"http://localhost:8000/mailinglist/api/v1/mailing-list\" \\\n     -H 'Content-Type: application/json; charset=utf-8' \\\n     -u 'user:secret' \\\n     -d $'{\n  \"name\": \"New List\"\n}'\n{\"url\":\"http://localhost:8000/mailinglist/api/v1/mailinglist/cd983e25-c6c8-48fa-9afa-1fd5627de9f1\",\"id\":\"cd983e25-c6c8-48fa-9afa-1fd5627de9f1\",\"name\":\"New List\",\"owner\":2,\"subscriber_set\":[]}\n```", "```py\n$ curl \"http://localhost:8000/mailinglist/api/v1/mailing-list\" \\\n     -u 'user:secret'\n[{\"url\":\"http://localhost:8000/mailinglist/api/v1/mailinglist/cd983e25-c6c8-48fa-9afa-1fd5627de9f1\",\"id\":\"cd983e25-c6c8-48fa-9afa-1fd5627de9f1\",\"name\":\"New List\",\"owner\":2,\"subscriber_set\":[]}]\n```", "```py\nclass ListMailingListsWithAPITestCase(APITestCase):\n\n    def setUp(self):\n        password = 'password'\n        username = 'unit test'\n        self.user = get_user_model().objects.create_user(\n            username=username,\n            password=password\n        )\n        cred_bytes = '{}:{}'.format(username, password).encode('utf-8')\n        self.basic_auth = base64.b64encode(cred_bytes).decode('utf-8')\n\n    def test_listing_all_my_mailing_lists(self):\n        mailing_lists = [\n            MailingList.objects.create(\n                name='unit test {}'.format(i),\n                owner=self.user)\n            for i in range(3)\n        ]\n\n        self.client.credentials(\n            HTTP_AUTHORIZATION='Basic {}'.format(self.basic_auth))\n\n        response = self.client.get('/mailinglist/api/v1/mailing-list')\n\n        self.assertEqual(200, response.status_code)\n        parsed = json.loads(response.content)\n        self.assertEqual(3, len(parsed))\n\n        content = str(response.content)\n        for ml in mailing_lists:\n            self.assertIn(str(ml.id), content)\n            self.assertIn(ml.name, content)\n```"]