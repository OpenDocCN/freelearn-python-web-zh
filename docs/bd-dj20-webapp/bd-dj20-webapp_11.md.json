["```py\n<!DOCTYPE html>\n<html lang=\"en\" >\n<head >\n<body >\n{% block body %}\n{% endblock %}\n\nClick <a href=\"{{ unsubscription_link }}\">here</a> to unsubscribe from this\nmailing list.\nSent with Mail Ape .\n</body >\n</html >\n```", "```py\nfrom django.conf import settings\n\nfrom django.template import Context\n\nclass EmailTemplateContext(Context):\n\n    @staticmethod\n    def make_link(path):\n        return settings.MAILING_LIST_LINK_DOMAIN + path\n\n    def __init__(self, subscriber, dict_=None, **kwargs):\n        if dict_ is None:\n            dict_ = {}\n        email_ctx = self.common_context(subscriber)\n        email_ctx.update(dict_)\n        super().__init__(email_ctx, **kwargs)\n\n    def common_context(self, subscriber):\n        subscriber_pk_kwargs = {'pk': subscriber.id}\n        unsubscribe_path = reverse('mailinglist:unsubscribe',\n                                   kwargs=subscriber_pk_kwargs)\n        return {\n            'subscriber': subscriber,\n            'mailing_list': subscriber.mailing_list,\n            'unsubscribe_link': self.make_link(unsubscribe_path),\n        }\n```", "```py\nEMAIL_HOST = 'smtp.example.com'\nEMAIL_HOST_USER = 'username'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_PASSWORD = os.getenv('EMAIL_PASSWORD')\n\nMAILING_LIST_FROM_EMAIL = 'noreply@example.com'\nMAILING_LIST_LINK_DOMAIN = 'http://localhost:8000'\n```", "```py\nfrom django.conf import settings\nfrom django.core.mail import send_mail\nfrom django.template import engines, Context\nfrom django.urls import reverse\n\nCONFIRM_SUBSCRIPTION_HTML = 'mailinglist/email/confirmation.html'\n\nCONFIRM_SUBSCRIPTION_TXT = 'mailinglist/email/confirmation.txt'\n\nclass EmailTemplateContext(Context):\n    # skipped unchanged class\n\ndef send_confirmation_email(subscriber):\n    mailing_list = subscriber.mailing_list\n    confirmation_link = EmailTemplateContext.make_link(\n        reverse('mailinglist:confirm_subscription',\n                kwargs={'pk': subscriber.id}))\n    context = EmailTemplateContext(\n        subscriber,\n        {'confirmation_link': confirmation_link}\n    )\n    subject = 'Confirming subscription to {}'.format(mailing_list.name)\n\n    dt_engine = engines['django'].engine\n    text_body_template = dt_engine.get_template(CONFIRM_SUBSCRIPTION_TXT)\n    text_body = text_body_template.render(context=context)\n    html_body_template = dt_engine.get_template(CONFIRM_SUBSCRIPTION_HTML)\n    html_body = html_body_template.render(context=context)\n\n    send_mail(\n        subject=subject,\n        message=text_body,\n        from_email=settings.MAILING_LIST_FROM_EMAIL,\n        recipient_list=(subscriber.email,),\n        html_message=html_body)\n```", "```py\n{% extends \"mailinglist/email_templates/email_base.html\" %}\n\n{% block body %}\n  <h1>Confirming subscription to {{ mailing_list }}</h1 >\n  <p>Someone (hopefully you) just subscribed to {{ mailinglist }}.</p >\n  <p>To confirm your subscription click <a href=\"{{ confirmation_link }}\">here</a>.</p >\n  <p>If you don't confirm, you won't hear from {{ mailinglist }} ever again.</p >\n  <p>Thanks,</p >\n  <p>Your friendly internet Mail Ape !</p>\n{% endblock %}\n```", "```py\nHello {{subscriber.email}},\n\nSomeone (hopefully you) just subscribed to {{ mailinglist }}.\n\nTo confirm your subscription go to {{confirmation_link}}.\n\nIf you don't confirm you won't hear from {{ mailinglist }} ever again.\n\nThanks,\n\nYour friendly internet Mail Ape !\n```", "```py\nfrom django.db import models\nfrom mailinglist import emails\n\nclass Subscriber(models.Model):\n    # skipping unchanged model body\n\n    def save(self, force_insert=False, force_update=False, using=None,\n             update_fields=None):\n        is_new = self._state.adding or force_insert\n        super().save(force_insert=force_insert, force_update=force_update,\n                     using=using, update_fields=update_fields)\n        if is_new:\n            self.send_confirmation_email()\n\n    def send_confirmation_email(self):        \n           emails.send_confirmation_email(self)\n```", "```py\ncelery<4.2\ncelery[redis]\ndjango-celery-results<2.0\n```", "```py\n$ pip install -r requirements.txt\n```", "```py\nINSTALLED_APPS = [\n    'user',\n    'mailinglist',\n\n    'crispy_forms',\n    'markdownify',\n    'django_celery_results',\n\n    'django.contrib.admin',\n    # other built in django apps unchanged.\n]\n\nCELERY_BROKER_URL = 'redis://localhost:6379/0'\nCELERY_RESULT_BACKEND = 'django-db'\n```", "```py\n$ cd django\n$ python manage.py migrate django_celery_results\n```", "```py\nimport os\nfrom celery import Celery\n\n# set the default Django settings module for the 'celery' program.\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')\n\napp = Celery('mailape')\napp.config_from_object('django.conf:settings', namespace='CELERY')\napp.autodiscover_tasks()\n```", "```py\nfrom celery import shared_task\n\nfrom mailinglist import emails\n\n@shared_task\ndef send_confirmation_email_to_subscriber(subscriber_id):\n    from mailinglist.models import Subscriber\n    subscriber = Subscriber.objects.get(id=subscriber_id)\n    emails.send_confirmation_email(subscriber)\n```", "```py\nfrom django.db import models\nfrom mailinglist import tasks\n\nclass Subscriber(models.Model):\n    # skipping unchanged model \n\n     def send_confirmation_email(self):\n        tasks.send_confirmation_email_to_subscriber.delay(self.id)\n```", "```py\n$ cd django\n$ celery worker -A config.celery -l info\n```", "```py\nclass SubscriberManager(models.Manager):\n\n    def confirmed_subscribers_for_mailing_list(self, mailing_list):\n        qs = self.get_queryset()\n        qs = qs.filter(confirmed=True)\n        qs = qs.filter(mailing_list=mailing_list)\n        return qs\n\nclass Subscriber(models.Model):\n    # skipped fields \n\n    objects = SubscriberManager()\n\n    class Meta:\n        unique_together = ['email', 'mailing_list', ]\n\n    # skipped methods\n```", "```py\nimport uuid\n\nfrom django.conf import settings\nfrom django.db import models\n\nfrom mailinglist import tasks\n\nclass SubscriberMessage(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    message = models.ForeignKey(to=Message, on_delete=models.CASCADE)\n    subscriber = models.ForeignKey(to=Subscriber, on_delete=models.CASCADE)\n    created = models.DateTimeField(auto_now_add=True)\n    sent = models.DateTimeField(default=None, null=True)\n    last_attempt = models.DateTimeField(default=None, null=True)\n\n    objects = SubscriberMessageManager()\n\n    def save(self, force_insert=False, force_update=False, using=None,\n             update_fields=None):\n        is_new = self._state.adding or force_insert\n        super().save(force_insert=force_insert, force_update=force_update, using=using,\n             update_fields=update_fields)\n        if is_new:\n            self.send()\n\n    def send(self):\n        tasks.send_subscriber_message.delay(self.id)\n```", "```py\nfrom django.db import models\n\nclass SubscriberMessageManager(models.Manager):\n\n    def create_from_message(self, message):\n        confirmed_subs = Subscriber.objects.\\\n            confirmed_subscribers_for_mailing_list(message.mailing_list)\n        return [\n            self.create(message=message, subscriber=subscriber)\n            for subscriber in confirmed_subs\n        ]\n```", "```py\n$ cd django\n$ python manage.py makemigrations mailinglist\n$ python manage.py migrate mailinglist\n```", "```py\nclass Message(models.Model):\n    # skipped fields\n\n    def save(self, force_insert=False, force_update=False, using=None,\n             update_fields=None):\n        is_new = self._state.adding or force_insert\n        super().save(force_insert=force_insert, force_update=force_update,\n                     using=using, update_fields=update_fields)\n        if is_new:\n            tasks.build_subscriber_messages_for_message.delay(self.id)\n```", "```py\nfrom celery import shared_task\n\n@shared_task\ndef build_subscriber_messages_for_message(message_id):\n    from mailinglist.models import Message, SubscriberMessage\n    message = Message.objects.get(id=message_id)\n    SubscriberMessage.objects.create_from_message(message)\n```", "```py\nfrom celery import shared_task\n\n@shared_task\ndef send_subscriber_message(subscriber_message_id):\n    from mailinglist.models import SubscriberMessage\n    subscriber_message = SubscriberMessage.objects.get(\n        id=subscriber_message_id)\n    emails.send_subscriber_message(subscriber_message)\n```", "```py\nfrom datetime import datetime\n\nfrom django.conf import settings\nfrom django.core.mail import send_mail\nfrom django.template import engines \nfrom django.utils.datetime_safe import datetime\n\nSUBSCRIBER_MESSAGE_TXT = 'mailinglist/email/subscriber_message.txt'\n\nSUBSCRIBER_MESSAGE_HTML = 'mailinglist/email/subscriber_message.html'\n\ndef send_subscriber_message(subscriber_message):\n    message = subscriber_message.message\n    context = EmailTemplateContext(subscriber_message.subscriber, {\n        'body': message.body,\n    })\n\n    dt_engine = engines['django'].engine\n    text_body_template = dt_engine.get_template(SUBSCRIBER_MESSAGE_TXT)\n    text_body = text_body_template.render(context=context)\n    html_body_template = dt_engine.get_template(SUBSCRIBER_MESSAGE_HTML)\n    html_body = html_body_template.render(context=context)\n\n    utcnow = datetime.utcnow()\n    subscriber_message.last_attempt = utcnow\n    subscriber_message.save()\n\n    success = send_mail(\n        subject=message.subject,\n        message=text_body,\n        from_email=settings.MAILING_LIST_FROM_EMAIL,\n        recipient_list=(subscriber_message.subscriber.email,),\n        html_message=html_body)\n\n    if success == 1:\n        subscriber_message.sent = utcnow\n        subscriber_message.save()\n```", "```py\n{% extends \"mailinglist/email_templates/email_base.html\" %}\n{% load markdownify %}\n\n{% block body %}\n  {{ body | markdownify }}\n{% endblock %}\n```", "```py\n{{ body }}\n\n---\n\nYou're receiving this message because you previously subscribed to {{ mailinglist }}.\n\nIf you'd like to unsubsribe go to {{ unsubscription_link }} and click unsubscribe.\n\nSent with Mail Ape .\n```", "```py\nfrom unittest.mock import patch\n\nclass MockSendEmailToSubscriberTask:\n\n    def setUp(self):\n        self.send_confirmation_email_patch = patch(\n            'mailinglist.tasks.send_confirmation_email_to_subscriber')\n        self.send_confirmation_email_mock = self.send_confirmation_email_patch.start()\n        super().setUp()\n\n    def tearDown(self):\n        self.send_confirmation_email_patch.stop()\n        self.send_confirmation_email_mock = None\n        super().tearDown()\n```", "```py\nfrom mailinglist.models import Subscriber, MailingList\n\nfrom django.contrib.auth import get_user_model\nfrom django.test import TestCase\n\nclass SubscriberCreationTestCase(\n    MockSendEmailToSubscriberTask,\n    TestCase):\n\n    def test_calling_create_queues_confirmation_email_task(self):\n        user = get_user_model().objects.create_user(\n            username='unit test runner'\n        )\n        mailing_list = MailingList.objects.create(\n            name='unit test',\n            owner=user,\n        )\n        Subscriber.objects.create(\n            email='unittest@example.com',\n            mailing_list=mailing_list)\n        self.assertEqual(self.send_confirmation_email_mock.delay.call_count, 1)\n```", "```py\nfrom unittest.mock import patch\n\nimport factory\n\nfrom mailinglist.models import Subscriber\n\nclass SubscriberFactory(factory.DjangoModelFactory):\n    email = factory.Sequence(lambda n: 'foo.%d@example.com' % n)\n\n    class Meta:\n        model = Subscriber\n\n    @classmethod\n    def _create(cls, model_class, *args, **kwargs):\n        with patch('mailinglist.models.tasks.send_confirmation_email_to_subscriber'):\n            return super()._create(model_class=model_class, *args, **kwargs)\n```", "```py\nfrom django.contrib.auth import get_user_model\nfrom django.test import TestCase\n\nfrom mailinglist.factories import SubscriberFactory\nfrom mailinglist.models import Subscriber, MailingList\n\nclass SubscriberManagerTestCase(TestCase):\n\n    def testConfirmedSubscribersForMailingList(self):\n        mailing_list = MailingList.objects.create(\n            name='unit test',\n            owner=get_user_model().objects.create_user(\n                username='unit test')\n        )\n        confirmed_users = [\n            SubscriberFactory(confirmed=True, mailing_list=mailing_list)\n            for n in range(3)]\n        unconfirmed_users = [\n            SubscriberFactory(mailing_list=mailing_list)\n            for n in range(3)]\n        confirmed_users_qs = Subscriber.objects.confirmed_subscribers_for_mailing_list(\n            mailing_list=mailing_list)\n        self.assertEqual(len(confirmed_users), confirmed_users_qs.count())\n        for user in confirmed_users_qs:\n            self.assertIn(user, confirmed_users)\n```"]