["```py\nfrom django.db.models.aggregates import (\n    Sum\n)\n\nclass MovieManager(models.Manager):\n\n    # other methods omitted\n\n    def top_movies(self, limit=10):\n        qs = self.get_queryset()\n        qs = qs.annotate(\n            vote_sum=Sum('vote__value'))\n        qs = qs.exclude(\n            vote_sum=None)\n        qs = qs.order_by('-vote_sum')\n        qs = qs[:limit]\n        return qs\n```", "```py\nfrom django.views.generic import ListView\nfrom core.models import Movie\n\nclass TopMovies(ListView):\n    template_name = 'core/top_movies_list.html'\n    queryset = Movie.objects.top_movies(\n        limit=10)\n```", "```py\n{% extends \"base.html\" %}\n\n{% block title %}\n  Top 10 Movies\n{% endblock %}\n\n{% block main %}\n  <h1 >Top 10 Movies</h1 >\n  <ol >\n    {% for movie in object_list %}\n      <li >\n        <a href=\"{% url \"core:MovieDetail\" pk=movie.id %}\" >\n          {{ movie }}\n        </a >\n      </li >\n    {% endfor %}\n  </ol >\n{% endblock %}\n```", "```py\n{# rest of template omitted #}\n<div class=\"mymdb-masthead\">\n  <div class=\"container\">\n    <nav class=\"nav\">\n       {# skipping other nav items #}\n       <a\n          class=\"nav-link\"\n          href=\"{% url 'core:TopMovies' %}\"\n        >\n        Top 10 Movies\n       </a>\n       {# skipping other nav items #}\n      </nav>\n   </div>\n</div>\n{# rest of template omitted #}\n```", "```py\nfrom django.urls import path\n\nfrom . import views\n\napp_name = 'core'\nurlpatterns = [\n    path('movies',\n         views.MovieList.as_view(),\n         name='MovieList'),\n    path('movies/top',\n         views.TopMovies.as_view(),\n         name=\"TopMovies\"),\n    # other paths omitted\n ]\n```", "```py\nCACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.memcached.PyLibMCCache',\n        'LOCATION':  [\n            '127.0.0.1:11211',\n        ],\n    }\n}\n```", "```py\nCACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.dummy.DummyCache',\n    }\n}\n```", "```py\nCACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',\n        'LOCATION': 'defaultcache',\n\n    },\n    'otherCache': {\n        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',\n        'LOCATION': 'othercache',\n    }\n}\n```", "```py\nCACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',\n        'LOCATION': os.path.join(BASE_DIR, '../file_cache'),\n    }\n}\n```", "```py\n$ cd django\n$ python manage.py createcachetable\n```", "```py\nCACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',\n        'LOCATION': 'django_cache_table',\n    }\n}\n```", "```py\n CACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',\n        'LOCATION': 'default-locmemcache',\n        'TIMEOUT': 5, # 5 seconds\n    }\n }\n```", "```py\nfrom django.core.cache import caches\nfrom django.views.decorators.cache import (\n    cache_page)\n\nclass CachePageVaryOnCookieMixin:\n    \"\"\"\n    Mixin caching a single page.\n\n    Subclasses can provide these attributes:\n\n    `cache_name` - name of cache to use.\n    `timeout` - cache timeout for this\n    page. When not provided, the default\n    cache timeout is used. \n    \"\"\"\n    cache_name = 'default'\n\n    @classmethod\n    def get_timeout(cls):\n        if hasattr(cls, 'timeout'):\n            return cls.timeout\n        cache = caches[cls.cache_name]\n        return cache.default_timeout\n\n    @classmethod\n    def as_view(cls, *args, **kwargs):\n        view = super().as_view(\n            *args, **kwargs)\n        view = vary_on_cookie(view)\n        view = cache_page(\n            timeout=cls.get_timeout(),\n            cache=cls.cache_name,\n        )(view)\n        return view\n```", "```py\nCSRF_USE_SESSIONS = True\n```", "```py\nfrom django.views.generic import ListView\nfrom core.mixins import (\n    VaryCacheOnCookieMixin)\n\nclass MovieList(VaryCacheOnCookieMixin, ListView):\n    model = Movie\n    paginate_by = 10\n\n    def get_context_data(self, **kwargs):\n        # omitted due to no change\n```", "```py\n{% extends \"base.html\" %}\n{% load cache %}\n\n{% block title %}\n  Top 10 Movies\n{% endblock %}\n\n{% block main %}\n  <h1 >Top 10 Movies</h1 >\n  {% cache 300 top10 %}\n  <ol >\n    {% for movie in object_list %}\n      <li >\n        <a href=\"{% url \"core:MovieDetail\" pk=movie.id %}\" >\n          {{ movie }}\n        </a >\n      </li >\n    {% endfor %}\n  </ol >\n  {% endcache %}\n{% endblock %}\n```", "```py\nimport django\nfrom django.core.cache import cache\nfrom django.views.generic import ListView\n\nfrom core.models import Movie\n\nclass TopMovies(ListView):\n    template_name = 'core/top_movies_list.html'\n\n    def get_queryset(self):\n        limit = 10\n        key = 'top_movies_%s' % limit\n        cached_qs = cache.get(key)\n        if cached_qs:\n            same_django = cached_qs._django_version == django.get_version()\n            if same_django:\n                return cached_qs\n        qs = Movie.objects.top_movies(\n            limit=limit)\n        cache.set(key, qs)\n        return qs\n```"]