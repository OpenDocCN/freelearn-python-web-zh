["```py\ndjango<2.1\npsycopg2\nPillow<4.4.0\n```", "```py\n-r requirements.common.txt\ndjango-debug-toolbar==1.8\n```", "```py\n-r requirements.common.txt\ndjango-storages==1.6.5\nboto3==1.4.7\nuwsgi==2.0.15\n```", "```py\n$ pip install -r requirements.production.txt\n```", "```py\nSECRET_KEY = os.getenv('DJANGO_SECRET_KEY')\n```", "```py\nSTATIC_ROOT = os.path.join(BASE_DIR, 'gathered_static_files')\n```", "```py\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n    }\n}\n```", "```py\nfrom config.common_settings import *\n```", "```py\nDEBUG = True\nSECRET_KEY = 'some secret'\n```", "```py\nINSTALLED_APPS += [\n    'debug_toolbar',\n]\n```", "```py\nDATABASES['default'].update({\n    'NAME': 'mymdb',\n    'USER': 'mymdb',\n    'PASSWORD': 'development',\n    'HOST': 'localhost',\n    'PORT': '5432',\n})\n```", "```py\nCACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',\n        'LOCATION': 'default-locmemcache',\n        'TIMEOUT': 5,\n    }\n}\n```", "```py\n# file uploads\nMEDIA_ROOT = os.path.join(BASE_DIR, '../media_root')\n```", "```py\n# Django Debug Toolbar\nINTERNAL_IPS = [\n    '127.0.0.1',\n]\n```", "```py\nfrom config.common_settings import * \nDEBUG = False\nassert SECRET_KEY is not None, (\n    'Please provide DJANGO_SECRET_KEY '\n    'environment variable with a value')\nALLOWED_HOSTS += [\n    os.getenv('DJANGO_ALLOWED_HOSTS'),\n]\n```", "```py\nDATABASES['default'].update({\n    'NAME': os.getenv('DJANGO_DB_NAME'),\n    'USER': os.getenv('DJANGO_DB_USER'),\n    'PASSWORD': os.getenv('DJANGO_DB_PASSWORD'),\n    'HOST': os.getenv('DJANGO_DB_HOST'),\n    'PORT': os.getenv('DJANGO_DB_PORT'),\n})\n```", "```py\nCACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',\n        'LOCATION': 'default-locmemcache',\n        'TIMEOUT': int(os.getenv('DJANGO_CACHE_TIMEOUT'), ),\n    }\n}\n```", "```py\n# file uploads\nDEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'\nAWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')\nAWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY_ID')\nAWS_STORAGE_BUCKET_NAME = os.getenv('DJANGO_UPLOAD_S3_BUCKET')\n```", "```py\nFROM phusion/baseimage\n\n# add code and directories\nRUN mkdir /mymdb\nWORKDIR /mymdb\nCOPY requirements* /mymdb/\nCOPY django/ /mymdb/django\nCOPY scripts/ /mymdb/scripts\nRUN mkdir /var/log/mymdb/\nRUN touch /var/log/mymdb/mymdb.log\n```", "```py\n$ mkdir scripts\n```", "```py\nRUN apt-get -y update\nRUN apt-get install -y \\\n    nginx \\\n    postgresql-client \\\n    python3 \\\n    python3-pip\nRUN pip3 install virtualenv\nRUN virtualenv /mymdb/venv\nRUN bash /mymdb/scripts/pip_install.sh /mymdb\n```", "```py\n#!/usr/bin/env bash\n\nroot=$1\nsource $root/venv/bin/activate\n\npip3 install -r $root/requirements.production.txt\n```", "```py\n# collect the static files\nRUN bash /mymdb/scripts/collect_static.sh /mymdb\n```", "```py\n#!/usr/bin/env bash\n\nroot=$1\nsource $root/venv/bin/activate\n\nexport DJANGO_CACHE_TIMEOUT=100\nexport DJANGO_SECRET_KEY=FAKE_KEY\nexport DJANGO_SETTINGS_MODULE=config.production_settings\n\ncd $root/django/\n\npython manage.py collectstatic\n```", "```py\nCOPY nginx/mymdb.conf /etc/nginx/sites-available/mymdb.conf\nRUN rm /etc/nginx/sites-enabled/*\nRUN ln -s /etc/nginx/sites-available/mymdb.conf /etc/nginx/sites-enabled/mymdb.conf\n\nCOPY runit/nginx /etc/service/nginx\nRUN chmod +x /etc/service/nginx/run\n```", "```py\n# the upstream component nginx needs\n# to connect to\nupstream django {\n    server 127.0.0.1:3031;\n}\n\n# configuration of the server\nserver {\n\n    # listen on all IPs on port 80\n    server_name 0.0.0.0;\n    listen      80;\n    charset     utf-8;\n\n    # max upload size\n    client_max_body_size 2M;\n\n    location /static {\n        alias /mymdb/django/gathered_static_files;\n    }\n\n    location / {\n        uwsgi_pass  django;\n        include     /etc/nginx/uwsgi_params;\n    }\n\n}\n```", "```py\n#!/usr/bin/env bash\n\nexec /usr/sbin/nginx \\\n    -c /etc/nginx/nginx.conf \\\n    -g \"daemon off;\"\n```", "```py\n# configure uwsgi\nCOPY uwsgi/mymdb.ini /etc/uwsgi/apps-enabled/mymdb.ini\nRUN mkdir -p /var/log/uwsgi/\nRUN touch /var/log/uwsgi/mymdb.log\nRUN chown www-data /var/log/uwsgi/mymdb.log\nRUN chown www-data /var/log/mymdb/mymdb.log\n\nCOPY runit/uwsgi /etc/service/uwsgi\nRUN chmod +x /etc/service/uwsgi/run\n```", "```py\n[uwsgi]\nsocket = 127.0.0.1:3031\nchdir = /mymdb/django/\nvirtualenv = /mymdb/venv\nwsgi-file = config/wsgi.py\nenv = DJANGO_SECRET_KEY=$(DJANGO_SECRET_KEY)\nenv = DJANGO_LOG_LEVEL=$(DJANGO_LOG_LEVEL)\nenv = DJANGO_ALLOWED_HOSTS=$(DJANGO_ALLOWED_HOSTS)\nenv = DJANGO_DB_NAME=$(DJANGO_DB_NAME)\nenv = DJANGO_DB_USER=$(DJANGO_DB_USER)\nenv = DJANGO_DB_PASSWORD=$(DJANGO_DB_PASSWORD)\nenv = DJANGO_DB_HOST=$(DJANGO_DB_HOST)\nenv = DJANGO_DB_PORT=$(DJANGO_DB_PORT)\nenv = DJANGO_CACHE_TIMEOUT=$(DJANGO_CACHE_TIMEOUT)\nenv = AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)\nenv = AWS_SECRET_ACCESS_KEY_ID=$(AWS_SECRET_ACCESS_KEY_ID)\nenv = DJANGO_UPLOAD_S3_BUCKET=$(DJANGO_UPLOAD_S3_BUCKET)\nenv = DJANGO_LOG_FILE=$(DJANGO_LOG_FILE)\nprocesses = 4\nthreads = 4\n```", "```py\n#!/usr/bin/env bash\n\nsource /mymdb/venv/bin/activate\n\nexport PGPASSWORD=\"$DJANGO_DB_PASSWORD\"\npsql \\\n    -h \"$DJANGO_DB_HOST\" \\\n    -p \"$DJANGO_DB_PORT\" \\\n    -U \"$DJANGO_DB_USER\" \\\n    -d \"$DJANGO_DB_NAME\"\n\nif [[ $? != 0 ]]; then\n    echo \"no db server\"\n    exit 1\nfi\n\npushd /mymdb/django\n\npython manage.py migrate\n\nif [[ $? != 0 ]]; then\n    echo \"can't migrate\"\n    exit 2\nfi\npopd\n\nexec /sbin/setuser www-data \\\n    uwsgi \\\n    --ini /etc/uwsgi/apps-enabled/mymdb.ini \\\n    >> /var/log/uwsgi/mymdb.log \\\n    2>&1\n```", "```py\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nEXPOSE 80\n```", "```py\nFROM postgres:10.1\n\nADD make_database.sh /docker-entrypoint-initdb.d/make_database.sh\n```", "```py\n#!/usr/bin/env bash\n\npsql -v ON_ERROR_STOP=1 --username \"$POSTGRES_USER\" <<-EOSQL\n    CREATE DATABASE $DJANGO_DB_NAME;\n    CREATE USER $DJANGO_DB_USER;\n    GRANT ALL ON DATABASE $DJANGO_DB_NAME TO \"$DJANGO_DB_USER\";\n    ALTER USER $DJANGO_DB_USER PASSWORD '$DJANGO_DB_PASSWORD';\n    ALTER USER $DJANGO_DB_USER CREATEDB;\nEOSQL\n```", "```py\n$ pip install awscli\n```", "```py\n$ aws configure\n AWS Access Key ID [None]: <Your ACCESS key>\n AWS Secret Access Key [None]: <Your secret key>\n Default region name [None]: us-west-2\n Default output format [None]: json\n```", "```py\n$ aws ec2 describe-instances\n{\n    \"Reservations\": []\n}\n```", "```py\n$ export AWS_ACCESS_KEY=#your value\n$ export AWS_SECRET_ACCESS_KEY=#yourvalue\n$ aws s3 mb s3://BUCKET_NAME\n```", "```py\n{\n    \"Version\": \"2012-10-17\",\n    \"Id\": \"mymdb-bucket-policy\",\n    \"Statement\": [\n        {\n            \"Sid\": \"allow-file-download-stmt\",\n            \"Effect\": \"Allow\",\n            \"Principal\": \"*\",\n            \"Action\": \"s3:GetObject\",\n            \"Resource\": \"arn:aws:s3:::BUCKET_NAME/*\"\n        }\n    ]\n}\n```", "```py\n$ aws s3api put-bucket-policy --bucket BUCKET_NAME --policy \"$(cat AWS/mymdb-bucket-policy.json)\"\n```", "```py\n# Django settings\nDJANGO_SETTINGS_MODULE=config.production_settings\nDJANGO_SECRET_KEY=#put your secret key here\nDJANGO_LOG_LEVEL=DEBUG\nDJANGO_LOG_FILE=/var/log/mymdb/mymdb.log\nDJANGO_ALLOWED_HOSTS=# put your domain here\nDJANGO_DB_NAME=mymdb\nDJANGO_DB_USER=mymdb\nDJANGO_DB_PASSWORD=#put your password here\nDJANGO_DB_HOST=db\nDJANGO_DB_PORT=5432\nDJANGO_CACHE_TIMEOUT=200\n\nAWS_ACCESS_KEY_ID=# put aws key here\nAWS_SECRET_ACCESS_KEY_ID=# put your secret key here\nDJANGO_UPLOAD_S3_BUCKET=# put BUCKET_NAME here\n\n# Postgres settings\nPOSTGRES_PASSWORD=# put your postgress admin password here\n```", "```py\nversion: '3'\n\nservices:\n  db:\n    build: docker/psql\n    restart: always\n    ports:\n      - \"5432:5432\"\n    environment:\n      - DJANGO_DB_USER\n      - DJANGO_DB_NAME\n      - DJANGO_DB_PASSWORD\n  web:\n    build: .\n    restart: always\n    ports:\n      - \"80:80\"\n    depends_on:\n      - db\n    environment:\n      - DJANGO_SETTINGS_MODULE\n      - DJANGO_SECRET_KEY\n      - DJANGO_LOG_LEVEL\n      - DJANGO_LOG_FILE\n      - DJANGO_ALLOWED_HOSTS\n      - DJANGO_DB_NAME\n      - DJANGO_DB_USER\n      - DJANGO_DB_PASSWORD\n      - DJANGO_DB_HOST\n      - DJANGO_DB_PORT\n      - DJANGO_CACHE_TIMEOUT\n      - AWS_ACCESS_KEY_ID\n      - AWS_SECRET_ACCESS_KEY_ID\n      - DJANGO_UPLOAD_S3_BUCKET\n```", "```py\n$ docker-compose up -d \n```", "```py\n$ docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                          NAMES\n0bd7f7203ea0        mymdb_web           \"/sbin/my_init\"          52 seconds ago      Up 51 seconds       0.0.0.0:80->80/tcp, 8031/tcp   mymdb_web_1\n3b9ecdcf1031        mymdb_db            \"docker-entrypoint...\"   46 hours ago        Up 52 seconds       0.0.0.0:5432->5432/tcp         mymdb_db_1\n```", "```py\n$ docker logs mymdb_web_1\n```", "```py\n$ docker exec -it mymdb_web_1 bash -l\n```", "```py\n$ docker-compose stop\n```", "```py\n$ docker-compose down\n```", "```py\n$ docker login -u USERNAME -p PASSWORD docker.io\n```", "```py\n$ docker build . -t USERNAME/REPOSITORY:latest\n```", "```py\n$ docker push USERNAME/REPOSITORY:latest\n```", "```py\n$ export AWS_ACCESS_KEY=#your value\n$ export AWS_SECRET_ACCESS_KEY=#yourvalue\n$ export AWS_DEFAULT_REGION=us-west-2\n$ aws ec2 describe-vpcs | grep VpcId\n            \"VpcId\": \"vpc-a1b2c3d4\",\n```", "```py\n$ docker-machine create \\\n     --driver amazonec2 \\\n     --amazonec2-instance-type t2.micro \\\n     --amazonec2-vpc-id vpc-a1b2c3d4 \\\n     --amazonec2-region us-west-2 \\\n     mymdb-host\n```", "```py\n$ aws ec2 describe-instances | grep -i publicDnsName\n```", "```py\n$ aws ec2 authorize-security-group-ingress \\\n    --group-name docker-machine \\\n    --protocol tcp \\\n    --port 80 \\\n    --cidr 0.0.0.0/0\n```", "```py\n$ eval $(docker-machine env mymdb-host)\n$ docker-compose up -d\n```", "```py\n$ export AWS_ACCESS_KEY=#your value\n$ export AWS_SECRET_ACCESS_KEY=#yourvalue\n$ export AWS_DEFAULT_REGION=us-west-2\n$ eval $(docker-machine env mymdb-host)\n$ docker-machine stop mymdb-host \n```"]