["```py\ndjango<2.1\npsycopg2<2.8\ndjango-markdownify==0.3.0\ndjango-crispy-forms==1.7.0\ncelery<4.2\ndjango-celery-results<2.0\ndjangorestframework<3.8\nfactory_boy<3.0\n```", "```py\n-r requirements.common.txt\ncelery[redis]\n```", "```py\n-r requirements.common.txt\ncelery[sqs]\nboto3\npycurl\n```", "```py\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n    }\n}\n```", "```py\nfrom .common_settings import *\n\nDEBUG = True\n\nSECRET_KEY = 'secret key'\n\nDATABASES['default']['NAME'] = 'mailape'\nDATABASES['default']['USER'] = 'mailape'\nDATABASES['default']['PASSWORD'] = 'development'\nDATABASES['default']['HOST'] = 'localhost'\nDATABASES['default']['PORT'] = '5432'\n\nMAILING_LIST_FROM_EMAIL = 'mailape@example.com'\nMAILING_LIST_LINK_DOMAIN = 'http://localhost'\n\nEMAIL_HOST = 'smtp.example.com'\nEMAIL_HOST_USER = 'username'\nEMAIL_HOST_PASSWORD = os.getenv('EMAIL_PASSWORD')\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\n\nCELERY_BROKER_URL = 'redis://localhost:6379/0'\n```", "```py\nfrom .common_settings import *\n\nDEBUG = False\n\nassert SECRET_KEY is not None, (\n    'Please provide DJANGO_SECRET_KEY environment variable with a value')\n\nALLOWED_HOSTS += [\n    os.getenv('DJANGO_ALLOWED_HOSTS'),\n]\n\nDATABASES['default'].update({\n    'NAME': os.getenv('DJANGO_DB_NAME'),\n    'USER': os.getenv('DJANGO_DB_USER'),\n    'PASSWORD': os.getenv('DJANGO_DB_PASSWORD'),\n    'HOST': os.getenv('DJANGO_DB_HOST'),\n    'PORT': os.getenv('DJANGO_DB_PORT'),\n})\n\nLOGGING['handlers']['main'] = {\n    'class': 'logging.handlers.WatchedFileHandler',\n    'level': 'DEBUG',\n    'filename': os.getenv('DJANGO_LOG_FILE')\n}\n\nMAILING_LIST_FROM_EMAIL = os.getenv('MAIL_APE_FROM_EMAIL')\nMAILING_LIST_LINK_DOMAIN = os.getenv('DJANGO_ALLOWED_HOSTS')\n\nEMAIL_HOST = os.getenv('EMAIL_HOST')\nEMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')\nEMAIL_PORT = os.getenv('EMAIL_HOST_PORT')\nEMAIL_USE_TLS = os.getenv('EMAIL_HOST_TLS', 'false').lower() == 'true'\n\nCELERY_BROKER_TRANSPORT_OPTIONS = {\n    'region': 'us-west-2',\n    'queue_name_prefix': 'mailape-',\nCELERY_BROKER_URL = 'sqs://'\n}\n```", "```py\nAWSTemplateFormatVersion: \"2010-09-09\"\nDescription: Mail Ape Infrastructure\n```", "```py\nAWSTemplateFormatVersion: \"2010-09-09\"\nDescription: Mail Ape Infrastructure\nParameters:\n  MasterDBPassword:\n    Description: Master Password for the RDS instance\n    Type: String\n```", "```py\nAWSTemplateFormatVersion: \"2010-09-09\"\nDescription: Mail Ape Infrastructure\nParameters:\n  ...\nResources:\n  SSHSecurityGroup:\n    Type: \"AWS::EC2::SecurityGroup\"\n    Properties:\n      GroupName: ssh-access\n      GroupDescription: permit ssh access\n      SecurityGroupIngress:\n        -\n          IpProtocol: \"tcp\"\n          FromPort: \"22\"\n          ToPort: \"22\"\n          CidrIp: \"0.0.0.0/0\"\n  WebSecurityGroup:\n    Type: \"AWS::EC2::SecurityGroup\"\n    Properties:\n      GroupName: web-access\n      GroupDescription: permit http access\n      SecurityGroupIngress:\n        -\n          IpProtocol: \"tcp\"\n          FromPort: \"80\"\n          ToPort: \"80\"\n          CidrIp: \"0.0.0.0/0\"\n  DatabaseSecurityGroup:\n    Type: \"AWS::EC2::SecurityGroup\"\n    Properties:\n      GroupName: db-access\n      GroupDescription: permit db access\n      SecurityGroupIngress:\n        -\n          IpProtocol: \"tcp\"\n          FromPort: \"5432\"\n          ToPort: \"5432\"\n          CidrIp: \"0.0.0.0/0\"\n```", "```py\nAWSTemplateFormatVersion: \"2010-09-09\"\nDescription: Mail Ape Infrastructure\nParameters:\n  ...\nResources:\n  ...\n  DatabaseServer:\n    Type: AWS::RDS::DBInstance\n    Properties:\n      DBName: mailape\n      DBInstanceClass: db.t2.micro\n      MasterUsername: master\n      MasterUserPassword: !Ref MasterDBPassword\n      Engine: postgres\n      AllocatedStorage: 20\n      PubliclyAccessible: true\n      VPCSecurityGroups: !GetAtt DatabaseSecurityGroup.GroupId\n```", "```py\nAWSTemplateFormatVersion: \"2010-09-09\"\nDescription: Mail Ape Infrastructure\nParameters:\n  ...\nResources:\n  ...\n  MailApeQueue:\n    Type: \"AWS::SQS::Queue\"\n    Properties:\n      QueueName: mailape-celery\n```", "```py\nAWSTemplateFormatVersion: \"2010-09-09\"\nDescription: Mail Ape Infrastructure\nParameters:\n  ...\nResources:\n  ...\n   SQSAccessRole:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          -\n            Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"ec2.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      Policies:\n        -\n          PolicyName: \"root\"\n          PolicyDocument:\n            Version: \"2012-10-17\"\n            Statement:\n              -\n                Effect: Allow\n                Action: \"sqs:*\"\n                Resource: !GetAtt MailApeQueue.Arn\n              -\n                Effect: Allow\n                Action: sqs:ListQueues\n                Resource: \"*\"\n```", "```py\nAWSTemplateFormatVersion: \"2010-09-09\"\nDescription: Mail Ape Infrastructure\nParameters:\n  ...\nResources:\n  ...\n  SQSClientInstance:\n    Type: \"AWS::IAM::InstanceProfile\"\n    Properties:\n      Roles:\n        - !Ref SQSAccessRole\n```", "```py\nAWSTemplateFormatVersion: \"2010-09-09\"\nDescription: Mail Ape Infrastructure\nParameters:\n  ...\nResources:\n  ...\nOutputs:\n  DatabaseDNS:\n    Description: Public DNS of RDS database\n    Value: !GetAtt DatabaseServer.Endpoint.Address\n  SQSClientProfile:\n    Description: Instance Profile for EC2 instances that need SQS Access\n    Value: !GetAtt SQSClientInstance.Arn\n```", "```py\n$ pip install awscli\n```", "```py\n$ aws configure\nAWS Access Key ID [None]: <Your ACCESS key>\nAWS Secret Access Key [None]: <Your secret key>\nDefault region name [None]: us-west-2\nDefault output format [None]: json\n```", "```py\n$ aws cloudformation create-stack \\\n    --stack-name \"infrastructure\" \\\n    --template-body \"file:///path/to/mailape/cloudformation/infrastrucutre.yaml\" \\\n    --capabilities CAPABILITY_NAMED_IAM \\\n    --parameters \\\n      \"ParameterKey=MasterDBPassword,ParameterValue=password\" \\\n    --region us-west-2\n```", "```py\n$ aws cloudformation describe-stacks \\\n    --stack-name \"infrastructure\" \\\n    --region us-west-2\n```", "```py\n{\n    \"Stacks\": [\n        {\n            \"StackId\": \"arn:aws:cloudformation:us-west-2:XXX:stack/infrastructure/NNN\",\n            \"StackName\": \"infrastructure\",\n            \"Description\": \"Mail Ape Infrastructure\",\n            \"Parameters\": [\n                {\n                    \"ParameterKey\": \"MasterDBPassword\",\n                    \"ParameterValue\": \"password\"\n                }\n            ],\n            \"StackStatus\": \"CREATE_COMPLETE\",\n            \"Outputs\": [\n                {\n                    \"OutputKey\": \"SQSClientProfile\",\n                    \"OutputValue\": \"arn:aws:iam::XXX:instance-profile/infrastructure-SQSClientInstance-XXX\",\n                    \"Description\": \"Instance Profile for EC2 instances that need SQS Access\"\n                },\n                {\n                    \"OutputKey\": \"DatabaseDNS\",\n                    \"OutputValue\": \"XXX.XXX.us-west-2.rds.amazonaws.com\",\n                    \"Description\": \"Public DNS of RDS database\"\n                }\n            ],\n        }\n    ]\n}\n```", "```py\n$ aws cloudformation delete-stack --stack-name \"infrastructure\"\n```", "```py\n#!/usr/bin/env bash\nset -e\n\nsudo mkdir -p \\\n    /mailape/ubuntu \\\n    /mailape/apache \\\n    /mailape/django \\\n    /var/log/celery \\\n    /etc/mailape \\\n    /var/log/mailape\n\nsudo chown -R ubuntu /mailape\n```", "```py\npython3\npython3-pip\npython3-dev\nvirtualenv\napache2\nlibapache2-mod-wsgi-py3\npostgresql-client\nlibcurl4-openssl-dev\nlibssl-dev\n```", "```py\n#!/usr/bin/env bash\nset -e\n\nsudo apt-get update\nsudo apt install -y $(cat /mailape/ubuntu/packages.txt | grep -i '^[a-z]')\n\nvirtualenv -p $(which python3) /mailape/virtualenv\nsource /mailape/virtualenv/bin/activate\n\npip install -r /mailape/requirements.production.txt\n\nsudo chown -R www-data /var/log/mailape \\\n    /etc/mailape \\\n    /var/run/celery \\\n    /var/log/celery\n```", "```py\nLogLevel info\nWSGIRestrictEmbedded On\n\n<VirtualHost *:80>\n\n    WSGIDaemonProcess mailape \\\n        python-home=/mailape/virtualenv \\\n        python-path=/mailape/django \\\n        processes=2 \\\n        threads=2\n\n    WSGIProcessGroup mailape\n\n    WSGIScriptAlias / /mailape/django/config/wsgi.py\n    <Directory /mailape/django/config>\n        <Files wsgi.py>\n            Require all granted\n        </Files>\n    </Directory>\n\n    Alias /static/ /mailape/django/static_root\n    <Directory /mailape/django/static_root>\n        Require all granted\n    </Directory>\n    ErrorLog ${APACHE_LOG_DIR}/error.log\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\n\n</VirtualHost>\n```", "```py\nimport os\nimport configparser\n\nfrom django.core.wsgi import get_wsgi_application\n\nif not os.environ.get('DJANGO_SETTINGS_MODULE'):\n    parser = configparser.ConfigParser()\n    parser.read('/etc/mailape/mailape.ini')\n    for name, val in parser['mod_wsgi'].items():\n        os.environ[name.upper()] = val\n\napplication = get_wsgi_application()\n```", "```py\n#!/usr/bin/env bash\n\nsudo rm /etc/apache2/sites-enabled/*\nsudo ln -s /mailape/apache/mailape.apache.conf /etc/apache2/sites-enabled/000-mailape.conf\n```", "```py\n[Unit]\nDescription=Mail Ape Celery Service\nAfter=network.target\n\n[Service]\nType=forking\nUser=www-data\nGroup=www-data\nEnvironmentFile=/etc/mailape/celery.env\nWorkingDirectory=/mailape/django\nExecStart=/bin/sh -c '/mailape/virtualenv/bin/celery multi start worker \\\n    -A \"config.celery:app\" \\\n    --logfile=/var/log/celery/%n%I.log --loglevel=\"INFO\" \\\n    --pidfile=/run/celery/%n.pid'\nExecStop=/bin/sh -c '/mailape/virtualenv/bin/celery multi stopwait worker \\\n    --pidfile=/run/celery/%n.pid'\nExecReload=/bin/sh -c '/mailape/virtualenv/bin/celery multi restart worker \\\n   -A \"config.celery:app\" \\\n   --logfile=/var/log/celery/%n%I.log --loglevel=\"INFO\" \\\n   --pidfile=/run/celery/%n.pid'\n\n[Install]\nWantedBy=multi-user.target\n```", "```py\nd    /run/celery   0755 www-data www-data - -\n```", "```py\n#!/usr/bin/env bash\n\nsudo ln -s /mailape/ubuntu/celery.service /etc/systemd/system/celery.service\nsudo ln -s /mailape/ubuntu/celery.service /etc/systemd/system/multi-user.target.wants/celery.service\nsudo ln -s /mailape/ubuntu/tmpfiles-celery.conf /etc/tmpfiles.d/celery.conf\n```", "```py\n#!/usr/bin/env bash\n\nENVIRONMENT=\"\nDJANGO_ALLOWED_HOSTS=${WEB_DOMAIN}\nDJANGO_DB_NAME=mailape\nDJANGO_DB_USER=mailape\nDJANGO_DB_PASSWORD=${DJANGO_DB_PASSWORD}\nDJANGO_DB_HOST=${DJANGO_DB_HOST}\nDJANGO_DB_PORT=5432\nDJANGO_LOG_FILE=/var/log/mailape/mailape.log\nDJANGO_SECRET_KEY=${DJANGO_SECRET}\nDJANGO_SETTINGS_MODULE=config.production_settings\nMAIL_APE_FROM_EMAIL=admin@blvdplatform.com\nEMAIL_HOST=${EMAIL_HOST}\nEMAIL_HOST_USER=mailape\nEMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}\nEMAIL_HOST_PORT=587\nEMAIL_HOST_TLS=true\n\nINI_FILE=\"[mod_wsgi]\n${ENVIRONMENT}\n\"\n\necho \"${INI_FILE}\" | sudo tee \"/etc/mailape/mailape.ini\"\necho \"${ENVIRONMENT}\" | sudo tee \"/etc/mailape/celery.env\"\n```", "```py\n{\n  \"variables\": {\n    \"aws_access_key\": \"\",\n    \"aws_secret_key\": \"\",\n    \"django_db_password\":\"\",\n    \"django_db_host\":\"\",\n    \"django_secret\":\"\",\n    \"email_host\":\"\",\n    \"email_host_password\":\"\",\n    \"mail_ape_aws_key\":\"\",\n    \"mail_ape_secret_key\":\"\",\n    \"sqs_celery_queue\":\"\",\n    \"web_domain\":\"\"\n  }\n}\n```", "```py\n{\n  \"variables\": {...},\n  \"builders\": [\n    {\n      \"type\": \"amazon-ebs\",\n      \"access_key\": \"{{user `aws_access_key`}}\",\n      \"secret_key\": \"{{user `aws_secret_key`}}\",\n      \"region\": \"us-west-2\",\n      \"source_ami\": \"ami-78b82400\",\n      \"instance_type\": \"t2.micro\",\n      \"ssh_username\": \"ubuntu\",\n      \"ami_name\": \"mailape-{{timestamp}}\",\n      \"tags\": {\n        \"project\": \"mailape\"\n      }\n    }\n  ]\n}\n```", "```py\n{\n  \"variables\": {...},\n  \"builders\": [...],\n  \"provisioners\": [\n    {\n      \"type\": \"shell\",\n      \"script\": \"{{template_dir}}/../scripts/make_aws_directories.sh\"\n    }\n  ]\n}\n```", "```py\n{\n  \"variables\": {...},\n  \"builders\": [...],\n  \"provisioners\": [\n    ...,\n    {\n      \"type\": \"file\",\n      \"source\": \"{{template_dir}}/../requirements.common.txt\",\n      \"destination\": \"/mailape/requirements.common.txt\"\n    },\n    {\n      \"type\": \"file\",\n      \"source\": \"{{template_dir}}/../requirements.production.txt\",\n      \"destination\": \"/mailape/requirements.production.txt\"\n    },\n    {\n      \"type\": \"file\",\n      \"source\": \"{{template_dir}}/../ubuntu\",\n      \"destination\": \"/mailape/ubuntu\"\n    },\n    {\n      \"type\": \"file\",\n      \"source\": \"{{template_dir}}/../apache\",\n      \"destination\": \"/mailape/apache\"\n    },\n    {\n      \"type\": \"file\",\n      \"source\": \"{{template_dir}}/../django\",\n      \"destination\": \"/mailape/django\"\n    },\n  ]\n}\n```", "```py\n{\n  \"variables\": {...},\n  \"builders\": [...],\n  \"provisioners\": [\n    ...,\n   {\n      \"type\": \"shell\",\n      \"inline\": \"find /mailape/django -name '*.pyc' -delete\"\n   },\n   ]\n}\n```", "```py\n{\n  \"variables\": {...},\n  \"builders\": [...],\n  \"provisioners\": [\n    ...,\n    {\n      \"type\": \"shell\",\n      \"scripts\": [\n        \"{{template_dir}}/../scripts/install_all_packages.sh\",\n        \"{{template_dir}}/../scripts/configure_apache.sh\",\n        \"{{template_dir}}/../scripts/make_mailape_environment_ini.sh\",\n        \"{{template_dir}}/../scripts/configure_celery.sh\"\n        ],\n      \"environment_vars\": [\n        \"DJANGO_DB_HOST={{user `django_db_host`}}\",\n        \"DJANGO_DB_PASSWORD={{user `django_db_password`}}\",\n        \"DJANGO_SECRET={{user `django_secret`}}\",\n        \"EMAIL_HOST={{user `email_host`}}\",\n        \"EMAIL_HOST_PASSWORD={{user `email_host_password`}}\",\n        \"WEB_DOMAIN={{user `web_domain`}}\"\n      ]\n}\n```", "```py\n$ packer build \\\n    -var \"aws_access_key=...\" \\\n    -var \"aws_secret_key=...\" \\\n    -var \"django_db_password=...\" \\\n    -var \"django_db_host=A.B.us-west-2.rds.amazonaws.com\" \\\n    -var \"django_secret=...\" \\\n    -var \"email_host=smtp.example.com\" \\\n    -var \"email_host_password=...\" \\\n    -var \"web_domain=mailape.example.com\" \\\n    packer/web_worker.json\nBuild 'amazon-ebs' finished.\n\n==> Builds finished. The artifacts of successful builds are:\n--> amazon-ebs: AMIs were created:\nus-west-2: ami-XXXXXXXX\n```", "```py\n$ aws ec2 create-key-pair --key-name mail_ape_production --region us-west-2\n{\n    \"KeyFingerprint\": \"XXX\",\n    \"KeyMaterial\": \"-----BEGIN RSA PRIVATE KEY-----\\nXXX\\n-----END RSA PRIVATE KEY-----\",\n    \"KeyName\": \"tom-cli-test\"\n}\n```", "```py\nAWSTemplateFormatVersion: \"2010-09-09\"\nDescription: Mail Ape web worker\nParameters:\n  WorkerAMI:\n    Description: Worker AMI\n    Type: String\n  InstanceProfile:\n    Description: the instance profile\n    Type: String\n```", "```py\nAWSTemplateFormatVersion: \"2010-09-09\"\nDescription: Mail Ape web worker\nParameters:\n  ...\nResources:\n  LoadBalancer:\n    Type: \"AWS::ElasticLoadBalancing::LoadBalancer\"\n    Properties:\n      LoadBalancerName: MailApeLB\n      Listeners:\n        -\n          InstancePort: 80\n          LoadBalancerPort: 80\n          Protocol: HTTP\n```", "```py\nAWSTemplateFormatVersion: \"2010-09-09\"\nDescription: Mail Ape web worker\nParameters:\n  ...\nResources:\n  LoadBalancer:\n    ...\n  LaunchConfig:\n    Type: \"AWS::AutoScaling::LaunchConfiguration\"\n    Properties:\n      ImageId: !Ref WorkerAMI\n      KeyName: mail_ape_production\n      SecurityGroups:\n        - ssh-access\n        - web-access\n      InstanceType: t2.micro\n      IamInstanceProfile: !Ref InstanceProfile\n```", "```py\nAWSTemplateFormatVersion: \"2010-09-09\"\nDescription: Mail Ape web worker\nParameters:\n  ...\nResources:\n  LoadBalancer:\n    ...\n  LaunchConfig:\n    ...\n  WorkerGroup:\n    Type: \"AWS::AutoScaling::AutoScalingGroup\"\n    Properties:\n      LaunchConfigurationName: !Ref LaunchConfig\n      MinSize: 1\n      MaxSize: 3\n      DesiredCapacity: 1\n      LoadBalancerNames:\n        - !Ref LoadBalancer\n```", "```py\nAWSTemplateFormatVersion: \"2010-09-09\"\nDescription: Mail Ape web worker\nParameters:\n  ...\nResources:\n  LoadBalancer:\n    ...\n  LaunchConfig:\n    ...\n  WorkerGroup:\n    ...\nOutputs:\n  LoadBalancerDNS:\n    Description: Load Balancer DNS name\n    Value: !GetAtt LoadBalancer.DNSName\n  AutoScalingGroupName:\n    Description: Auto Scaling Group name\n    Value: !Ref WorkerGroup\n```", "```py\n$ aws cloudformation create-stack \\\n    --stack-name \"mail_ape_1_0\" \\\n    --template-body \"file:///path/to/mailape/cloudformation/web_worker.yaml\" \\\n    --parameters \\\n      \"ParameterKey=WorkerAMI,ParameterValue=AMI-XXX\" \\\n      \"ParameterKey=InstanceProfile,ParameterValue=arn:aws:iam::XXX:instance-profile/XXX\" \\\n    --region us-west-2\n```", "```py\n$ aws cloudformation describe-stacks \\\n    --stack-name mail_ape_1_0 \\\n    --region us-west-2\n```", "```py\n{\n    \"Stacks\": [\n        {\n            \"StackId\": \"arn:aws:cloudformation:us-west-2:XXXX:stack/mail_ape_1_0/XXX\",\n            \"StackName\": \"mail_ape_1_0\",\n            \"Description\": \"Mail Ape web worker\",\n            \"Parameters\": [\n                {\n                    \"ParameterKey\": \"InstanceProfile\",\n                    \"ParameterValue\": \"arn:aws:iam::XXX:instance-profile/XXX\"\n                },\n                {\n                    \"ParameterKey\": \"WorkerAMI\",\n                    \"ParameterValue\": \"ami-XXX\"\n                }\n            ],\n            \"StackStatus\": \"CREATE_COMPLETE\",\n            \"Outputs\": [\n                {\n                    \"OutputKey\": \"AutoScalingGroupName\",\n                    \"OutputValue\": \"mail_ape_1_0-WebServerGroup-XXX\",\n                    \"Description\": \"Auto Scaling Group name\"\n                },\n                {\n                    \"OutputKey\": \"LoadBalancerDNS\",\n                    \"OutputValue\": \"MailApeLB-XXX.us-west-2.elb.amazonaws.com\",\n                    \"Description\": \"Load Balancer DNS name\"\n                }\n            ],\n        }\n    ]\n}\n```", "```py\n$ aws ec2 describe-instances \\\n --region=us-west-2 \\\n --filters='Name=tag:aws:cloudformation:stack-name,Values=mail_ape_1_0' \n```", "```py\n{\n  \"Reservations\": [\n    {\n      \"Groups\": [],\n      \"Instances\": [\n        {\n          \"ImageId\": \"ami-XXX\",\n          \"InstanceId\": \"i-XXX\",\n          \"InstanceType\": \"t2.micro\",\n          \"KeyName\": \"mail_ape_production\",\n          \"PublicDnsName\": \"ec2-XXX-XXX-XXX-XXX.us-west-2.compute.amazonaws.com\",\n          \"PublicIpAddress\": \"XXX\",\n          \"State\": {\n            \"Name\": \"running\"\n          },\n          \"IamInstanceProfile\": {\n            \"Arn\": \"arn:aws:iam::XXX:instance-profile/infrastructure-SQSClientInstance-XXX\"\n          },\n          \"SecurityGroups\": [\n            {\n              \"GroupName\": \"ssh-access\"\n            },\n            {\n              \"GroupName\": \"web-access\"\n            }\n          ],\n          \"Tags\": [\n            {\n              \"Key\": \"aws:cloudformation:stack-name\",\n              \"Value\": \"mail_ape_1_0\"\n            } ] } ] } ] }\n```", "```py\n$ ssh -i /path/to/saved/ssh/key ubuntu@ec2-XXX-XXX-XXX-XXX.us-west-2.compute.amazonaws.com\n```", "```py\n#!/usr/bin/env bash\n\npsql -v ON_ERROR_STOP=1 postgresql://$USER:$PASSWORD@$HOST/postgres <<-EOSQL\n    CREATE DATABASE mailape;\n    CREATE USER mailape;\n    GRANT ALL ON DATABASE mailape to \"mailape\";\n    ALTER USER mailape PASSWORD '$DJANGO_DB_PASSWORD';\n    ALTER USER mailape CREATEDB;\nEOSQL\n```", "```py\n$ export USER=master\n$ export PASSWORD=...\n$ export DJANGO_DB_PASSWORD=...\n$ bash database/make_database.sh\n```", "```py\n$ ssh -i /path/to/saved/ssh/key ubuntu@ec2-XXX-XXX-XXX-XXX.us-west-2.compute.amazonaws.com\n$ source /mailape/virtualenv/bin/activate\n$ cd /mailape/django\n$ export DJANGO_DB_NAME=mailape\n$ export DJANGO_DB_USER=mailape\n$ export DJANGO_DB_PASSWORD=...\n$ export DJANGO_DB_HOST=XXX.XXX.us-west-2.rds.amazonaws.com\n$ export DJANGO_DB_PORT=5432\n$ export DJANGO_LOG_FILE=/var/log/mailape/mailape.log\n$ export DJANGO_SECRET_KEY=...\n$ export DJANGO_SETTINGS_MODULE=config.production_settings\n$ python manage.py migrate\n```", "```py\nAWSTemplateFormatVersion: \"2010-09-09\"\nDescription: Mail Ape web worker\nParameters:\n  ..\nResources:\n  LoadBalancer:\n    ...\n  LaunchConfig:\n    ...\n  WorkerGroup:\n    Type: \"AWS::AutoScaling::AutoScalingGroup\"\n    Properties:\n      LaunchConfigurationName: !Ref LaunchConfig\n      MinSize: 1\n      MaxSize: 3\n      DesiredCapacity: 2\n      LoadBalancerNames:\n        - !Ref LoadBalancer\nOutputs:\n  ..\n```", "```py\n$ aws cloudformation update-stack \\\n    --stack-name \"mail_ape_1_0\" \\\n    --template-body \"file:///path/to/mailape/cloudformation/web_worker.yaml\" \\\n    --parameters \\\n      \"ParameterKey=WorkerAMI,UsePreviousValue=true\" \\\n      \"ParameterKey=InstanceProfile,UsePreviousValue=true\" \\\n    --region us-west-2\n```", "```py\naws cloudformation describe-stacks \\\n    --stack-name mail_ape_1_0 \\\n    --region us-west-2\n```", "```py\n{\n    \"Stacks\": [\n        {\n            \"StackId\": \"arn:aws:cloudformation:us-west-2:XXXX:stack/mail_ape_1_0/XXX\",\n            \"StackName\": \"mail_ape_1_0\",\n            \"Description\": \"Mail Ape web worker\",\n            \"StackStatus\": \"UPDATE_COMPLETE\"\n        }\n    ]\n}\n```", "```py\n$ aws ec2 describe-instances \\\n --region=us-west-2 \\\n --filters='Name=tag:aws:cloudformation:stack-name,Values=mail_ape_1_0'\n```", "```py\n{\n  \"Reservations\": [\n    {\n      \"Groups\": [],\n      \"Instances\": [\n        {\n          \"ImageId\": \"ami-XXX\",\n          \"InstanceId\": \"i-XXX\",\n          \"PublicDnsName\": \"ec2-XXX-XXX-XXX-XXX.us-west-2.compute.amazonaws.com\",\n          \"State\": { \"Name\": \"running\" }\n        },\n        {\n          \"ImageId\": \"ami-XXX\",\n          \"InstanceId\": \"i-XXX\",\n          \"PublicDnsName\": \"ec2-XXX-XXX-XXX-XXX.us-west-2.compute.amazonaws.com\",\n          \"State\": { \"Name\": \"running\" }\n        } ] } ] }\n```"]