["```py\n$ docker run -d -p 9200:9200 -p 9300:9300 -e \"discovery.type=single-node\" docker.elastic.co/elasticsearch/elasticsearch:6.0.0\n```", "```py\n$ curl http://localhost:9200/?pretty\n{\n  \"name\" : \"xgf60cc\",\n  \"cluster_name\" : \"docker-cluster\",\n  \"cluster_uuid\" : \"HZAnjZefSjqDOxbMU99KOw\",\n  \"version\" : {\n    \"number\" : \"6.0.0\",\n    \"build_hash\" : \"8f0685b\",\n    \"build_date\" : \"2017-11-10T18:41:22.859Z\",\n    \"build_snapshot\" : false,\n    \"lucene_version\" : \"7.0.1\",\n    \"minimum_wire_compatibility_version\" : \"5.6.0\",\n    \"minimum_index_compatibility_version\" : \"5.0.0\"\n  },\n  \"tagline\" : \"You Know, for Search\"\n}\n```", "```py\nES_INDEX = 'answerly'\nES_HOST = 'localhost'\nES_PORT = '9200'\n```", "```py\nelasticsearch==6.0.0\n```", "```py\n$ curl -XPUT \"localhost:9200/answerly?pretty\"\n```", "```py\nimport logging\n\nfrom django.conf import settings\nfrom elasticsearch import Elasticsearch, TransportError\nfrom elasticsearch.helpers import streaming_bulk\n\nFAILED_TO_LOAD_ERROR = 'Failed to load {}: {!r}'\n\nlogger = logging.getLogger(__name__)\n\ndef get_client():\n    return Elasticsearch(hosts=[\n        {'host': settings.ES_HOST, 'port': settings.ES_PORT,}\n    ])\n\ndef bulk_load(questions):\n    all_ok = True\n    es_questions = (q.as_elasticsearch_dict() for q in questions)\n    for ok, result in streaming_bulk(\n            get_client(),\n            es_questions,\n            index=settings.ES_INDEX,\n            raise_on_error=False,\n    ):\n        if not ok:\n            all_ok = False\n            action, result = result.popitem()\n            logger.error(FAILED_TO_LOAD_ERROR.format(result['_id'], result))\n    return all_ok\n```", "```py\nfrom django.db import models\n\nclass Question(models.Model):\n    # fields and methods unchanged \n\n    def as_elasticsearch_dict(self):\n        return {\n            '_id': self.id,\n            '_type': 'doc',\n            'text': '{}\\n{}'.format(self.title, self.question),\n            'question_body': self.question,\n            'title': self.title,\n            'id': self.id,\n            'created': self.created,\n        }\n```", "```py\nfrom django.core.management import BaseCommand\n\nfrom qanda.service import elasticsearch\nfrom qanda.models import Question\n\nclass Command(BaseCommand):\n    help = 'Load all questions into Elasticsearch'\n\n    def handle(self, *args, **options):\n        queryset = Question.objects.all()\n        all_loaded = elasticsearch.bulk_load(queryset)\n        if all_loaded:\n            self.stdout.write(self.style.SUCCESS(\n                'Successfully loaded all questions into Elasticsearch.'))\n        else:\n            self.stdout.write(\n                self.style.WARNING('Some questions not loaded '\n                                   'successfully. See logged errors'))\n```", "```py\n$ cd django\n$ python manage.py load_questions_into_elastic_search\nSuccessfully loaded all questions into Elasticsearch.\n```", "```py\n$ curl http://localhost:9200/answerly/_search?pretty\n```", "```py\ndef search_for_questions(query):\n    client = get_client()\n    result = client.search(index=settings.ES_INDEX, body={\n      'query': {\n          'match': {\n              'text': query,\n          },\n      },\n    })\n    return (h['_source'] for h in result['hits']['hits'])\n```", "```py\nfrom django.views.generic import TemplateView\n\nfrom qanda.service.elasticsearch import search_for_questions\n\nclass SearchView(TemplateView):\n    template_name = 'qanda/search.html'\n\n    def get_context_data(self, **kwargs):\n        query = self.request.GET.get('q', None)\n        ctx = super().get_context_data(query=query, **kwargs)\n        if query:\n            results = search_for_questions(query)\n            ctx['hits'] = results\n        return ctx\n```", "```py\nfrom django.urls.conf import path, include\n\nfrom qanda import views\n\napp_name = 'qanda'\n\nurlpatterns = [\n    # skipping previous code\n    path('q/search', views.SearchView.as_view(),\n         name='question_search'),\n]\n```", "```py\n{% extends \"base.html\" %}\n\n{% load markdownify %}\n\n{% block body %}\n  <h2 >Search</h2 >\n  <form method=\"get\" class=\"form-inline\" >\n    <input class=\"form-control mr-2\"\n           placeholder=\"Search\"\n           type=\"search\"\n           name=\"q\" value=\"{{ query }}\" >\n    <button type=\"submit\" class=\"btn btn-primary\" >Search</button >\n  </form >\n  {% if query %}\n    <h3>Results from search query '{{ query }}'</h3 >\n    <ul class=\"list-unstyled search-results\" >\n      {% for hit in hits %}\n        <li >\n          <a href=\"{% url \"qanda:question_detail\" pk=hit.id %}\" >\n            {{ hit.title }}\n          </a >\n          <div >\n            {{ hit.question_body|markdownify|truncatewords_html:20 }}\n          </div >\n        </li >\n      {% empty %}\n        <li >No results.</li >\n      {% endfor %}\n    </ul >\n  {% endif %}\n{% endblock %}\n```", "```py\n{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\" >\n<head >{# head unchanged #}</head >\n<body >\n<nav class=\"navbar navbar-expand-lg  bg-light\" >\n  <div class=\"container\" >\n    <a class=\"navbar-brand\" href=\"/\" >Answerly</a >\n    <ul class=\"navbar-nav\" >\n      {# previous nav unchanged #}  \n      <li class=\"nav-item\" >\n        <form class=\"form-inline\"\n              action=\"{% url \"qanda:question_search\" %}\"\n              method=\"get\">\n          <input class=\"form-control mr-sm-2\" type=\"search\"\n                 name=\"q\"\n                 placeholder=\"Search\">\n          <button class=\"btn btn-outline-primary my-2 my-sm-0\" \n                 type=\"submit\" >\n            Search\n          </button >\n        </form >\n      </li >\n    </ul >\n  </div >\n</nav >\n{# rest of body unchanged #}\n</body >\n</html >\n```", "```py\nfrom django.db import models\nfrom qanda.service import elasticsearch\nclass Question(models.Model):\n    # other fields and methods unchanged. \n    def save(self, force_insert=False, force_update=False, using=None,\n             update_fields=None):\n        super().save(force_insert=force_insert,\n                     force_update=force_update,\n                     using=using,\n                     update_fields=update_fields)\n        elasticsearch.upsert(self)\n```", "```py\n$ coverage run --branch --source=qanda,user manage.py test \nCreating test database for alias 'default'...\nSystem check identified no issues (0 silenced).\n\n----------------------------------------------------------------------\nRan 0 tests in 0.000s\n\nOK\nDestroying test database for alias 'default'...\n```", "```py\n$ coverage report \nName                                 Stmts   Miss Branch BrPart  Cover\n----------------------------------------------------------------------\nqanda/__init__.py                      0      0      0      0   100%\nqanda/admin.py                         1      0      0      0   100%\nqanda/apps.py                          3      3      0      0     0%\nqanda/forms.py                        19      0      0      0   100%\nqanda/management/__init__.py           0      0      0      0   100%\nqanda/migrations/0001_initial.py       7      0      0      0   100%\nqanda/migrations/__init__.py           0      0      0      0   100%\nqanda/models.py                       28      6      0      0    79%\nqanda/search_indexes.py                0      0      0      0   100%\nqanda/service/__init__.py              0      0      0      0   100%\nqanda/service/elasticsearch.py        47     32     14      0    25%\nqanda/tests.py                         1      0      0      0   100%\nqanda/urls.py                          4      0      0      0   100%\nqanda/views.py                        76     35     12      0    47%\nuser/__init__.py                         0      0      0      0   100%\nuser/admin.py                            4      0      0      0   100%\nuser/apps.py                             3      3      0      0     0%\nuser/migrations/__init__.py              0      0      0      0   100%\nuser/models.py                           1      0      0      0   100%\nuser/tests.py                            1      0      0      0   100%\nuser/urls.py                             5      0      0      0   100%\nuser/views.py                            5      0      0      0   100%\n----------------------------------------------------------------------\nTOTAL                                  205     79     26      0    55%\n```", "```py\n$ cd django\n$ coverage html\n```", "```py\ndef upsert(question_model):\n    client = get_client()\n    question_dict = question_model.as_elasticsearch_dict()\n    doc_type = question_dict['_type']\n    del question_dict['_id']\n    del question_dict['_type']\n    response = client.update(\n        settings.ES_INDEX,\n        doc_type,\n        id=question_model.id,\n        body={\n            'doc': question_dict,\n            'doc_as_upsert': True,\n        }\n    )\n    return response\n```", "```py\n$ cd django\n$ python manage.py runserver\n```"]