["```py\n$ cd django\n$ python manage.py startapp user\n$ cd user\n$ ls\n__init__.py     admin.py        apps.py         migrations      models.py       tests.py        views.py\n```", "```py\nINSTALLED_APPS = [\n    'user',  # must come before admin\n    'core',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n```", "```py\nfrom django.contrib.auth.forms import (\n    UserCreationForm,\n)\nfrom django.urls import (\n    reverse_lazy,\n)\nfrom django.views.generic import (\n    CreateView,\n)\n\nclass RegisterView(CreateView):\n    template_name = 'user/register.html'\n    form_class = UserCreationForm\n    success_url = reverse_lazy(\n        'core:MovieList')\n```", "```py\n{% extends \"base.html\" %}\n\n{% block main %}\n  <h1>Register for MyMDB</h1>\n  <form method=\"post\">\n    {{ form.as_p}}\n    {% csrf_token %}\n    <button\n        type=\"submit\"\n        class=\"btn btn-primary\">\n      Register\n    </button>\n  </form>\n{% endblock %}\n```", "```py\nfrom django.urls import path\n\nfrom user import views\n\napp_name = 'user'\nurlpatterns = [\n    path('register',\n         views.RegisterView.as_view(),\n         name='register'),\n]\n```", "```py\nfrom django.urls import path, include\nfrom django.contrib import admin\n\nimport core.urls\nimport user.urls\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('user/', include(\n        user.urls, namespace='user')),\n    path('', include(\n        core.urls, namespace='core')),\n]\n```", "```py\nfrom django.urls import path\nfrom django.contrib.auth import views as auth_views\n\nfrom user import views\n\napp_name = 'user'\nurlpatterns = [\n    path('register',\n         views.RegisterView.as_view(),\n         name='register'),\n    path('login/',\n         auth_views.LoginView.as_view(),\n         name='login'),\n    path('logout/',\n         auth_views.LogoutView.as_view(),\n         name='logout'),\n]\n```", "```py\nfrom django.contrib.auth import urls\napp_name = 'user'\nurlpatterns = [\n    path('', include(urls)),\n]\n```", "```py\n{% extends \"base.html\" %}\n\n{% block title %}\nLogin - {{ block.super }}\n{% endblock %}\n\n{% block main %}\n  <form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button\n        class=\"btn btn-primary\">\n      Log In\n    </button>\n  </form>\n{% endblock %}\n```", "```py\nLOGIN_REDIRECT_URL = 'core:MovieList'\n```", "```py\nclass Vote(models.Model):\n    UP = 1\n    DOWN = -1\n    VALUE_CHOICES = (\n        (UP, \"\",),\n        (DOWN, \"\",),\n    )\n\n    value = models.SmallIntegerField(\n        choices=VALUE_CHOICES,\n    )\n    user = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        on_delete=models.CASCADE\n    )\n    movie = models.ForeignKey(\n        Movie,\n        on_delete=models.CASCADE,\n    )\n    voted_on = models.DateTimeField(\n        auto_now=True\n    )\n\n    class Meta:\n        unique_together = ('user', 'movie')\n```", "```py\n$ python manage.py makemigrations core\nMigrations for 'core':\n  core/migrations/0003_auto_20171003_1955.py\n    - Create model Vote\n    - Alter field rating on movie\n    - Add field movie to vote\n    - Add field user to vote\n    - Alter unique_together for vote (1 constraint(s))\n```", "```py\n$ python manage.py migrate core\nOperations to perform:\n  Apply all migrations: core\nRunning migrations:\n  Applying core.0003_auto_20171003_1955... OK\n```", "```py\nfrom django import forms\n\nfrom core.models import Vote\n\nclass VoteForm(forms.ModelForm):\n    class Meta:\n        model = Vote\n        fields = (\n            'value', 'user', 'movie',)\n```", "```py\nfrom django import forms\nfrom django.contrib.auth import get_user_model\n\nfrom core.models import Vote, Movie\n\nclass VoteForm(forms.ModelForm):\n\n    user = forms.ModelChoiceField(\n        widget=forms.HiddenInput,\n        queryset=get_user_model().\n            objects.all(),\n        disabled=True,\n    )\n    movie = forms.ModelChoiceField(\n        widget=forms.HiddenInput,\n        queryset=Movie.objects.all(),\n        disabled=True\n    )\n    value = forms.ChoiceField(\n        label='Vote',\n        widget=forms.RadioSelect,\n        choices=Vote.VALUE_CHOICES,\n    )\n\n    class Meta:\n        model = Vote\n        fields = (\n            'value', 'user', 'movie',)\n```", "```py\nclass VoteManager(models.Manager):\n\n    def get_vote_or_unsaved_blank_vote(self, movie, user):\n        try:\n            return Vote.objects.get(\n                movie=movie,\n                user=user)\n        except Vote.DoesNotExist:\n            return Vote(\n                movie=movie,\n                user=user)\n\nclass Vote(models.Model):\n    # constants and field omitted\n\n    objects = VoteManager()\n\n    class Meta:\n        unique_together = ('user', 'movie')\n```", "```py\nclass MovieDetail(DetailView):\n    queryset = (\n        Movie.objects\n           .all_with_related_persons())\n\n    def get_context_data(self, **kwargs):\n        ctx = super().get_context_data(**kwargs)\n        if self.request.user.is_authenticated:\n            vote = Vote.objects.get_vote_or_unsaved_blank_vote(\n                movie=self.object,\n                user=self.request.user\n            )\n                    if vote.id:\n                vote_form_url = reverse(\n                    'core:UpdateVote',\n                    kwargs={\n                        'movie_id': vote.movie.id,\n                        'pk': vote.id})\n            else:\n                vote_form_url = (\n                    reverse(\n                        'core:CreateVote',\n                        kwargs={\n                            'movie_id': self.object.id}\n                    )\n                )\n            vote_form = VoteForm(instance=vote)\n            ctx['vote_form'] = vote_form\n            ctx['vote_form_url'] = \\\n                vote_form_url\n        return ctx\n```", "```py\n{% block sidebar %}\n {# rating div omitted #}\n  <div>\n    {% if vote_form %}\n      <form\n          method=\"post\"\n          action=\"{{ vote_form_url }}\" >\n        {% csrf_token %}\n        {{ vote_form.as_p }}\n        <button\n            class=\"btn btn-primary\" >\n          Vote\n        </button >\n      </form >\n    {% else %}\n      <p >Log in to vote for this\n        movie</p >\n    {% endif %}\n  </div >\n{% endblock %}\n```", "```py\nfrom django.contrib.auth.mixins import (\n    LoginRequiredMixin, )\nfrom django.shortcuts import redirect\nfrom django.urls import reverse\nfrom django.views.generic import (\n    CreateView, )\n\nfrom core.forms import VoteForm\n\nclass CreateVote(LoginRequiredMixin, CreateView):\n    form_class = VoteForm\n\n    def get_initial(self):\n        initial = super().get_initial()\n        initial['user'] = self.request.user.id\n        initial['movie'] = self.kwargs[\n            'movie_id']\n        return initial\n\n    def get_success_url(self):\n        movie_id = self.object.movie.id\n        return reverse(\n            'core:MovieDetail',\n            kwargs={\n                'pk': movie_id})\n\n    def render_to_response(self, context, **response_kwargs):\n        movie_id = context['object'].id\n        movie_detail_url = reverse(\n            'core:MovieDetail',\n            kwargs={'pk': movie_id})\n        return redirect(\n            to=movie_detail_url)\n```", "```py\nLOGIN_REDIRECT_URL = 'user:login'\n```", "```py\nfrom django.contrib.auth.mixins import (\n    LoginRequiredMixin, )\nfrom django.core.exceptions import (\n    PermissionDenied)\nfrom django.shortcuts import redirect\nfrom django.urls import reverse\nfrom django.views.generic import (\n    UpdateView, )\n\nfrom core.forms import VoteForm\n\nclass UpdateVote(LoginRequiredMixin, UpdateView):\n    form_class = VoteForm\n    queryset = Vote.objects.all()\n\n    def get_object(self, queryset=None):\n        vote = super().get_object(\n            queryset)\n        user = self.request.user\n        if vote.user != user:\n            raise PermissionDenied(\n                'cannot change another '\n                'users vote')\n        return vote\n\n    def get_success_url(self):\n        movie_id = self.object.movie.id\n        return reverse(\n            'core:MovieDetail',\n            kwargs={'pk': movie_id})\n\n    def render_to_response(self, context, **response_kwargs):\n        movie_id = context['object'].id\n        movie_detail_url = reverse(\n            'core:MovieDetail',\n            kwargs={'pk': movie_id})\n        return redirect(\n            to=movie_detail_url)\n\n```", "```py\nurlpatterns = [\n    # previous paths omitted\n    path('movie/<int:movie_id>/vote',\n         views.CreateVote.as_view(),\n         name='CreateVote'),\n    path('movie/<int:movie_id>/vote/<int:pk>',\n         views.UpdateVote.as_view(),\n         name='UpdateVote'),\n]\n```", "```py\nfrom django.db.models.aggregates import (\n    Sum\n)\n\nclass MovieManager(models.Manager):\n\n    def all_with_related_persons(self):\n        qs = self.get_queryset()\n        qs = qs.select_related(\n            'director')\n        qs = qs.prefetch_related(\n            'writers', 'actors')\n        return qs\n\n    def all_with_related_persons_and_score(self):\n        qs = self.all_with_related_persons()\n        qs = qs.annotate(score=Sum('vote__value'))\n        return qs\n```", "```py\n class MovieDetail(DetailView):\n    queryset = Movie.objects.all_with_related_persons_and_score() \n    def get_context_data(self, **kwargs):\n        # body omitted for brevity\n```", "```py\n{% block sidebar %}\n  {# movie rating div omitted #}\n  <div >\n    <h2 >\n      Score: {{ object.score|default_if_none:\"TBD\" }}\n    </h2 >\n  </div>\n  {# voting form div omitted #}\n{% endblock %}\n```"]