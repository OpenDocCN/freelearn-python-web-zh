["```py\nMEDIA_URL = '/uploaded/'\nMEDIA_ROOT = os.path.join(BASE_DIR, '../media_root')\n```", "```py\n$ mkdir media_root\n$ ls\ndjango                 media_root              requirements.dev.txt\n```", "```py\nPillow<4.4.0\n```", "```py\n$ pip install -r requirements.dev.txt\n```", "```py\nfrom uuid import uuid4\n\nfrom django.conf import settings\nfrom django.db import models\n\ndef movie_directory_path_with_uuid(\n        instance, filename):\n    return '{}/{}'.format(\n        instance.movie_id, uuid4())\n\nclass MovieImage(models.Model):\n    image = models.ImageField(\n        upload_to=movie_directory_path_with_uuid)\n    uploaded = models.DateTimeField(\n        auto_now_add=True)\n    movie = models.ForeignKey(\n        'Movie', on_delete=models.CASCADE)\n    user = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        on_delete=models.CASCADE)\n```", "```py\n$ python manage.py makemigrations core\nMigrations for 'core':\n  core/migrations/0004_movieimage.py\n    - Create model MovieImage\n$ python manage.py migrate core\nOperations to perform:\n  Apply all migrations: core\nRunning migrations:\n  Applying core.0004_movieimage... OK\n```", "```py\nfrom django import forms\n\nfrom core.models import MovieImage\n\nclass MovieImageForm(forms.ModelForm):\n\n    movie = forms.ModelChoiceField(\n        widget=forms.HiddenInput,\n        queryset=Movie.objects.all(),\n        disabled=True\n    )\n\n    user = forms.ModelChoiceField(\n        widget=forms.HiddenInput,\n        queryset=get_user_model().\n            objects.all(),\n        disabled=True,\n    )\n\n    class Meta:\n        model = MovieImage\n        fields = ('image', 'user', 'movie')\n```", "```py\nfrom django.views.generic import DetailView\n\nfrom core.forms import (VoteForm, \n    MovieImageForm,)\nfrom core.models import Movie\n\nclass MovieDetail(DetailView):\n    queryset = Movie.objects.all_with_related_persons_and_score()\n\n    def get_context_data(self, **kwargs):\n        ctx = super().get_context_data(**kwargs)\n        ctx['image_form'] = self.movie_image_form()\n        if self.request.user.is_authenticated:\n            # omitting VoteForm code.\n        return ctx\n\n def movie_image_form(self):\n        if self.request.user.is_authenticated:\n            return MovieImageForm()\n        return None\n```", "```py\n{% block main %}\n  <div class=\"col\" >\n    <h1 >{{ object }}</h1 >\n    <p class=\"lead\" >\n      {{ object.plot }}\n    </p >\n  </div >\n  <ul class=\"movie-image list-inline\" >\n    {% for i in object.movieimage_set.all %}\n      <li class=\"list-inline-item\" >\n          <img src=\"img/{{ i.image.url }}\" >\n      </li >\n    {% endfor %}\n  </ul >\n  <p >Directed\n    by {{ object.director }}</p >\n {# writers and actors html omitted #}\n{% end block %}\n```", "```py\n{% block sidebar %}\n  {# rating div omitted #}\n  {% if image_form %}\n    <div >\n      <h2 >Upload New Image</h2 >\n      <form method=\"post\"\n            enctype=\"multipart/form-data\"\n            action=\"{% url 'core:MovieImageUpload' movie_id=object.id %}\" >\n        {% csrf_token %}\n        {{ image_form.as_p }}\n        <p >\n          <button\n              class=\"btn btn-primary\" >\n            Upload\n          </button >\n        </p >\n      </form >\n    </div >\n  {% endif %}\n  {# score and voting divs omitted #}\n{% endblock %}\n```", "```py\nfrom django.contrib.auth.mixins import (\n    LoginRequiredMixin) \nfrom django.views.generic import CreateView\n\nfrom core.forms import MovieImageForm\n\nclass MovieImageUpload(LoginRequiredMixin, CreateView):\n    form_class = MovieImageForm\n\n    def get_initial(self):\n        initial = super().get_initial()\n        initial['user'] = self.request.user.id\n        initial['movie'] = self.kwargs['movie_id']\n        return initial\n\n    def render_to_response(self, context, **response_kwargs):\n        movie_id = self.kwargs['movie_id']\n        movie_detail_url = reverse(\n            'core:MovieDetail',\n            kwargs={'pk': movie_id})\n        return redirect(\n            to=movie_detail_url)\n\n    def get_success_url(self):\n        movie_id = self.kwargs['movie_id']\n        movie_detail_url = reverse(\n            'core:MovieDetail',\n            kwargs={'pk': movie_id})\n        return movie_detail_url\n```", "```py\nfrom django.urls import path\n\nfrom . import views\n\napp_name = 'core'\nurlpatterns = [\n    # omitted existing paths\n    path('movie/<int:movie_id>/image/upload',\n         views.MovieImageUpload.as_view(),\n         name='MovieImageUpload'),\n    # omitted existing paths\n]\n```", "```py\nfrom django.conf import settings\nfrom django.conf.urls.static import (\n    static, )\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nimport core.urls\nimport user.urls\n\nMEDIA_FILE_PATHS = static(\n    settings.MEDIA_URL,\n    document_root=settings.MEDIA_ROOT)\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('user/', include(\n        user.urls, namespace='user')),\n    path('', include(\n        core.urls, namespace='core')),\n] + MEDIA_FILE_PATHS\n```"]