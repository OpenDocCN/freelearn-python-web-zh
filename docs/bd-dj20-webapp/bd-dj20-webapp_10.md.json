["```py\n$ mkdir mailape\n$ cd mailape\n```", "```py\ndjango<2.1\npsycopg2<2.8\ndjango-markdownify==0.3.0\ndjango-crispy-forms==1.7.0\n```", "```py\n$ pip install -r requirements.txt\n```", "```py\n$ django-admin startporject config\n$ mv config django\n$ tree django\ndjango\n\u251c\u2500\u2500 config\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 settings.py\n\u2502   \u251c\u2500\u2500 urls.py\n\u2502   \u2514\u2500\u2500 wsgi.py\n\u2514\u2500\u2500 manage.py\n```", "```py\n$ python manage.py startapp mailinglist\n$ python manage.py startapp user\n```", "```py\nfrom django.urls import path\n\nfrom mailinglist import views\n\napp_name = 'mailinglist'\n\nurlpatterns = [\n]\n```", "```py\nfrom django.contrib.auth.views import LoginView, LogoutView\nfrom django.urls import path\n\nimport user.views\n\napp_name = 'user'\nurlpatterns = [\n]\n```", "```py\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nimport mailinglist.urls\nimport user.urls\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('user/', include(user.urls, namespace='user')),\n    path('mailinglist/', include(mailinglist.urls, namespace='mailinglist')),\n]\n```", "```py\nINSTALLED_APPS = [\n    'user',\n    'mailinglist',\n\n    'crispy_forms',\n    'markdownify',\n\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n```", "```py\nimport uuid\n\nfrom django.conf import settings\nfrom django.db import models\nfrom django.urls import reverse\n\nclass MailingList(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    name = models.CharField(max_length=140)\n    owner = models.ForeignKey(to=settings.AUTH_USER_MODEL,\n                              on_delete=models.CASCADE)\n\n    def __str__(self):\n        return self.name\n\n    def get_absolute_url(self):\n        return reverse(\n            'mailinglist:manage_mailinglist',\n            kwargs={'pk': self.id}\n        )\n\n    def user_can_use_mailing_list(self, user):\n        return user == self.owner\n```", "```py\nclass Subscriber(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    email = models.EmailField()\n    confirmed = models.BooleanField(default=False)\n    mailing_list = models.ForeignKey(to=MailingList, on_delete=models.CASCADE)\n\n    class Meta:\n        unique_together = ['email', 'mailing_list', ]\n```", "```py\nclass Message(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    mailing_list = models.ForeignKey(to=MailingList, on_delete=models.CASCADE)\n    subject = models.CharField(max_length=140)\n    body = models.TextField()\n    started = models.DateTimeField(default=None, null=True)\n    finished = models.DateTimeField(default=None, null=True)\n```", "```py\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'mailape',\n        'USER': 'mailape',\n        'PASSWORD': 'development',\n        'HOST': 'localhost',\n        'PORT': '5432',\n    }\n}\n```", "```py\n$ cd django\n$ python manage.py makemigrations\nMigrations for 'mailinglist':\n  mailinglist/migrations/0001_initial.py\n    - Create model MailingList\n    - Create model Message\n    - Create model Subscriber\n    - Alter unique_together for subscriber (1 constraint(s))\n```", "```py\n$ cd django\n$ python manage.py migrate\nOperations to perform:\n  Apply all migrations: admin, auth, contenttypes, mailinglist, sessions\nRunning migrations:\n  Applying contenttypes.0001_initial... OK\n  Applying auth.0001_initial... OK\n  Applying admin.0001_initial... OK\n  Applying admin.0002_logentry_remove_auto_add... OK\n  Applying contenttypes.0002_remove_content_type_name... OK\n  Applying auth.0002_alter_permission_name_max_length... OK\n  Applying auth.0003_alter_user_email_max_length... OK\n  Applying auth.0004_alter_user_username_opts... OK\n  Applying auth.0005_alter_user_last_login_null... OK\n  Applying auth.0006_require_contenttypes_0002... OK\n  Applying auth.0007_alter_validators_add_error_messages... OK\n  Applying auth.0008_alter_user_username_max_length... OK\n  Applying auth.0009_alter_user_last_name_max_length... OK\n  Applying mailinglist.0001_initial... OK\n  Applying sessions.0001_initial... OK\n```", "```py\nfrom django import forms\n\nfrom mailinglist.models import MailingList, Subscriber\n\nclass SubscriberForm(forms.ModelForm):\n    mailing_list = forms.ModelChoiceField(\n        widget=forms.HiddenInput,\n        queryset=MailingList.objects.all(),\n        disabled=True,\n    )\n\n    class Meta:\n        model = Subscriber\n        fields = ['mailing_list', 'email', ]\n```", "```py\nfrom django import forms\n\nfrom mailinglist.models import MailingList, Message\n\nclass MessageForm(forms.ModelForm):\n    mailing_list = forms.ModelChoiceField(\n        widget=forms.HiddenInput,\n        queryset=MailingList.objects.all(),\n        disabled=True,\n    )\n\n    class Meta:\n        model = Message\n        fields = ['mailing_list', 'subject', 'body', ]\n```", "```py\nfrom django import forms\nfrom django.contrib.auth import get_user_model\n\nfrom mailinglist.models import MailingList\n\nclass MailingListForm(forms.ModelForm):\n    owner = forms.ModelChoiceField(\n        widget=forms.HiddenInput,\n        queryset=get_user_model().objects.all(),\n        disabled=True,\n    )\n\n    class Meta:\n        model = MailingList\n        fields = ['owner', 'name']\n```", "```py\n<!DOCTYPE html>\n<html lang=\"en\" >\n<head >\n  <meta charset=\"UTF-8\" >\n  <title >{% block title %}{% endblock %}</title >\n  <link rel=\"stylesheet\"\n        href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.3/css/bootstrap.min.css\"\n  />\n</head >\n<body >\n<div class=\"container\" >\n  <nav class=\"navbar navbar-light bg-light\" >\n    <a class=\"navbar-brand\" href=\"#\" >Mail Ape </a >\n    <ul class=\"navbar-nav\" >\n      <li class=\"nav-item\" >\n        <a class=\"nav-link\"\n           href=\"{% url \"mailinglist:mailinglist_list\" %}\" >\n          Your Mailing Lists\n        </a >\n      </li >\n      {% if request.user.is_authenticated %}\n        <li class=\"nav-item\" >\n          <a class=\"nav-link\"\n             href=\"{% url \"user:logout\" %}\" >\n            Logout\n          </a >\n        </li >\n      {% else %}\n        <li class=\"nav-item\" >\n          <a class=\"nav-link\"\n             href=\"{% url \"user:login\" %}\" >\n            Your Mailing Lists\n          </a >\n        </li >\n        <li class=\"nav-item\" >\n          <a class=\"nav-link\"\n             href=\"{% url \"user:register\" %}\" >\n            Your Mailing Lists\n          </a >\n        </li >\n      {% endif %}\n    </ul >\n  </nav >\n  {% block body %}\n  {% endblock %}\n</div >\n</body >\n</html >\n```", "```py\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            os.path.join(BASE_DIR, 'templates'),\n        ],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            # do not change OPTIONS, omitted for brevity\n        },\n    },\n]\n```", "```py\nCRISPY_TEMPLATE_PACK = 'bootstrap4'\n```", "```py\nfrom django.core.exceptions import PermissionDenied, FieldDoesNotExist\n\nfrom mailinglist.models import MailingList\n\nclass UserCanUseMailingList:\n\n    def get_object(self, queryset=None):\n        obj = super().get_object(queryset)\n        user = self.request.user\n        if isinstance(obj, MailingList):\n            if obj.user_can_use_mailing_list(user):\n                return obj\n            else:\n                raise PermissionDenied()\n\n        mailing_list_attr = getattr(obj, 'mailing_list')\n        if isinstance(mailing_list_attr, MailingList):\n            if mailing_list_attr.user_can_use_mailing_list(user):\n                return obj\n            else:\n                raise PermissionDenied()\n        raise FieldDoesNotExist('view does not know how to get mailing '\n                                   'list.')\n```", "```py\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom django.views.generic import ListView\n\nfrom mailinglist.models import  MailingList\n\nclass MailingListListView(LoginRequiredMixin, ListView):\n\n    def get_queryset(self):\n        return MailingList.objects.filter(owner=self.request.user)\n```", "```py\n{% extends \"base.html\" %}\n\n{% block title %}\n  Your Mailing Lists\n{% endblock %}\n\n{% block body %}\n  <div class=\"row user-mailing-lists\" >\n    <div class=\"col-sm-12\" >\n      <h1 >Your Mailing Lists</h1 >\n      <div >\n        <a class=\"btn btn-primary\"\n           href=\"{% url \"mailinglist:create_mailinglist\" %}\" >New List</a >\n      </div >\n      <p > Your mailing lists:</p >\n      <ul class=\"mailing-list-list\">\n        {% for mailinglist in mailinglist_list %}\n          <li class=\"mailinglist-item\">\n            <a href=\"{% url \"mailinglist:manage_mailinglist\" pk=mailinglist.id %}\" >\n              {{ mailinglist.name }}\n            </a >\n          </li >\n        {% endfor %}\n      </ul >\n    </div >\n  </div >\n{% endblock %}\n```", "```py\nfrom django.urls import path\n\nfrom mailinglist import views\n\napp_name = 'mailinglist'\n\nurlpatterns = [\n    path('',\n         views.MailingListListView.as_view(),\n         name='mailinglist_list'),\n]\n```", "```py\nclass CreateMailingListView(LoginRequiredMixin, CreateView):\n    form_class = MailingListForm\n    template_name = 'mailinglist/mailinglist_form.html'\n\n    def get_initial(self):\n        return {\n            'owner': self.request.user.id,\n        }\n```", "```py\n{% extends \"base.html\" %}\n\n{% load crispy_forms_tags %}\n\n{% block title %}\n  Create Mailing List\n{% endblock %}\n\n{% block body %}\n  <h1 >Create Mailing List</h1 >\n  <form method=\"post\" class=\"col-sm-4\" >\n    {% csrf_token %}\n    {{ form | crispy }}\n    <button class=\"btn btn-primary\" type=\"submit\" >Submit</button >\n  </form >\n{% endblock %}\n```", "```py\n    path('new',\n         views.CreateMailingListView.as_view(),\n         name='create_mailinglist')\n```", "```py\nclass DeleteMailingListView(LoginRequiredMixin, UserCanUseMailingList,\n                            DeleteView):\n    model = MailingList\n    success_url = reverse_lazy('mailinglist:mailinglist_list')\n```", "```py\n{% extends \"base.html\" %}\n\n{% block title %}\n  Confirm delete {{ mailinglist.name }}\n{% endblock %}\n\n{% block body %}\n  <h1 >Confirm Delete?</h1 >\n  <form action=\"\" method=\"post\" >\n    {% csrf_token %}\n    <p >Are you sure you want to delete {{ mailinglist.name }}?</p >\n    <input type=\"submit\" value=\"Yes\" class=\"btn btn-danger btn-sm \">\n    <a class=\"btn btn-primary btn-lg\" href=\"{% url \"mailinglist:manage_mailinglist\" pk=mailinglist.id %}\">No</a>\n  </form >\n{% endblock %}\n```", "```py\n path('<uuid:pk>/delete',\n     views.DeleteMailingListView.as_view(),\n     name='delete_mailinglist'),\n```", "```py\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom django.views.generic import DetailView\n\nfrom mailinglist.mixins import UserCanUseMailingList\nfrom mailinglist.models import MailingList\n\nclass MailingListDetailView(LoginRequiredMixin, UserCanUseMailingList,\n                            DetailView):\n    model = MailingList\n```", "```py\n{% extends \"base.html\" %}\n\n{% block title %}\n  {{ mailinglist.name }} Management\n{% endblock %}\n\n{% block body %}\n  <h1 >{{ mailinglist.name }} Management\n    <a class=\"btn btn-danger\"\n       href=\"{% url \"mailinglist:delete_mailinglist\" pk=mailinglist.id %}\" >\n      Delete</a >\n  </h1 >\n\n  <div >\n    <a href=\"{% url \"mailinglist:create_subscriber\" mailinglist_pk=mailinglist.id %}\" >Subscription\n      Link</a >\n\n  </div >\n\n  <h2 >Messages</h2 >\n  <div > Send new\n    <a class=\"btn btn-primary\"\n       href=\"{% url \"mailinglist:create_message\" mailinglist_pk=mailinglist.id %}\">\n      Send new Message</a >\n  </div >\n  <ul >\n    {% for message in mailinglist.message_set.all %}\n      <li >\n        <a href=\"{% url \"mailinglist:view_message\" pk=message.id %}\" >{{ message.subject }}</a >\n      </li >\n    {% endfor %}\n  </ul >\n\n  <h2 >Subscribers</h2 >\n  <ul >\n    {% for subscriber in mailinglist.subscriber_set.all %}\n      <li >\n        {{ subscriber.email }}\n        {{ subscriber.confirmed|yesno:\"confirmed,unconfirmed\" }}\n        <a href=\"{% url \"mailinglist:unsubscribe\" pk=subscriber.id %}\" >\n          Unsubscribe\n        </a >\n      </li >\n    {% endfor %}\n  </ul >\n{% endblock %}\n```", "```py\n    path('<uuid:pk>/manage',\n         views.MailingListDetailView.as_view(),\n         name='manage_mailinglist')\n```", "```py\nclass SubscribeToMailingListView(CreateView):\n    form_class = SubscriberForm\n    template_name = 'mailinglist/subscriber_form.html'\n\n    def get_initial(self):\n        return {\n            'mailing_list': self.kwargs['mailinglist_id']\n        }\n\n    def get_success_url(self):\n        return reverse('mailinglist:subscriber_thankyou', kwargs={\n            'pk': self.object.mailing_list.id,\n        })\n\n    def get_context_data(self, **kwargs):\n        ctx = super().get_context_data(**kwargs)\n        mailing_list_id = self.kwargs['mailinglist_id']\n        ctx['mailing_list'] = get_object_or_404(\n            MailingList,\n            id=mailing_list_id)\n        return ctx\n```", "```py\n{% extends \"base.html\" %}\n{% load crispy_forms_tags %}\n{% block title %}\nSubscribe to {{ mailing_list }}\n{% endblock %}\n\n{% block body %}\n<h1>Subscribe to {{ mailing_list }}</h1>\n<form method=\"post\" class=\"col-sm-6 \">\n  {% csrf_token %}\n  {{ form | crispy }}\n  <button class=\"btn btn-primary\" type=\"submit\">Submit</button>\n</form>\n{% endblock %}\n```", "```py\n    path('<uuid:mailinglist_id>/subscribe',\n         views.SubscribeToMailingListView.as_view(),\n         name='subscribe'),\n```", "```py\nfrom django.views.generic import DetailView\n\nfrom mailinglist.models import  MailingList\n\nclass ThankYouForSubscribingView(DetailView):\n    model = MailingList\n    template_name = 'mailinglist/subscription_thankyou.html'\n```", "```py\n{% extends \"base.html\" %}\n\n{% block title %}\n  Thank you for subscribing to {{ mailinglist }}\n{% endblock %}\n\n{% block body %}\n  <div class=\"col-sm-12\" ><h1 >Thank you for subscribing\n    to {{ mailinglist }}</h1 >\n    <p >Check your email for a confirmation email.</p >\n  </div >\n{% endblock %}\n```", "```py\n    path('<uuid:pk>/thankyou',\n         views.ThankYouForSubscribingView.as_view(),\n         name='subscriber_thankyou'),\n```", "```py\nfrom django.views.generic import DetailView\n\nfrom mailinglist.models import  Subscriber\n\nclass ConfirmSubscriptionView(DetailView):\n    model = Subscriber\n    template_name = 'mailinglist/confirm_subscription.html'\n\n    def get_object(self, queryset=None):\n        subscriber = super().get_object(queryset=queryset)\n        subscriber.confirmed = True\n        subscriber.save()\n        return subscriber\n```", "```py\n{% extends \"base.html\" %}\n\n{% block title %}\n  Subscription to {{ subscriber.mailing_list }} confirmed.\n{% endblock %}\n\n{% block body %}\n  <h1 >Subscription to {{ subscriber.mailing_list }} confirmed!</h1 >\n{% endblock %}\n```", "```py\n    path('subscribe/confirmation/<uuid:pk>',\n         views.ConfirmSubscriptionView.as_view(),\n         name='confirm_subscription')\n```", "```py\nfrom django.views.generic import DeleteView\n\nfrom mailinglist.models import Subscriber\n\nclass UnsubscribeView(DeleteView):\n    model = Subscriber\n    template_name = 'mailinglist/unsubscribe.html'\n\n    def get_success_url(self):\n        mailing_list = self.object.mailing_list\n        return reverse('mailinglist:subscribe', kwargs={\n            'mailinglist_pk': mailing_list.id\n        })\n```", "```py\n{% extends \"base.html\" %}\n\n{% block title %}\n  Unsubscribe?\n{% endblock %}\n\n{% block body %}\n  <div class=\"col\">\n    <form action=\"\" method=\"post\" >\n      {% csrf_token %}\n      <p >Are you sure you want to unsubscribe\n        from {{ subscriber.mailing_list.name }}?</p >\n      <input class=\"btn btn-danger\" type=\"submit\"\n             value=\"Yes, I want to unsubscribe \" >\n    </form >\n  </div >\n{% endblock %}\n```", "```py\n     path('unsubscribe/<uuid:pk>',\n         views.UnsubscribeView.as_view(),\n         name='unsubscribe'),\n```", "```py\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom django.views.generic import CreateView\n\nfrom mailinglist.models import Message\n\nclass CreateMessageView(LoginRequiredMixin, CreateView):\n    SAVE_ACTION = 'save'\n    PREVIEW_ACTION = 'preview'\n\n    form_class = MessageForm\n    template_name = 'mailinglist/message_form.html'\n\n    def get_success_url(self):\n        return reverse('mailinglist:manage_mailinglist',\n                       kwargs={'pk': self.object.mailing_list.id})\n\n    def get_initial(self):\n        mailing_list = self.get_mailing_list()\n        return {\n            'mailing_list': mailing_list.id,\n        }\n\n    def get_context_data(self, **kwargs):\n        ctx = super().get_context_data(**kwargs)\n        mailing_list = self.get_mailing_list()\n        ctx.update({\n            'mailing_list': mailing_list,\n            'SAVE_ACTION': self.SAVE_ACTION,\n            'PREVIEW_ACTION': self.PREVIEW_ACTION,\n        })\n        return ctx\n\n    def form_valid(self, form):\n        action = self.request.POST.get('action')\n        if action == self.PREVIEW_ACTION:\n            context = self.get_context_data(\n                form=form,\n                message=form.instance)\n            return self.render_to_response(context=context)\n        elif action == self.SAVE_ACTION:\n            return super().form_valid(form)\n\n    def get_mailing_list(self):\n        mailing_list = get_object_or_404(MailingList,\n                                         id=self.kwargs['mailinglist_pk'])\n        if not mailing_list.user_can_use_mailing_list(self.request.user):\n            raise PermissionDenied()\n        return mailing_list\n```", "```py\n{% extends \"base.html\" %}\n{% load crispy_forms_tags %}\n{% load markdownify %}\n{% block title %}\n  Send a message to {{ mailing_list }}\n{% endblock %}\n\n{% block body %}\n  <h1 >Send a message to {{ mailing_list.name }}</h1 >\n  {% if message %}\n    <div class=\"card\" >\n      <div class=\"card-header\" >\n        Message Preview\n      </div >\n      <div class=\"card-body\" >\n        <h5 class=\"card-title\" >{{ message.subject }}</h5 >\n        <div>{{ message.body|markdownify }}</div>\n      </div >\n    </div >\n  {% endif %}\n  <form method=\"post\" class=\"col-sm-12 col-md-9\" >\n    {% csrf_token %}\n    {{ form | crispy }}\n    <button type=\"submit\" name=\"action\"\n            value=\"{{ SAVE_ACTION }}\"\n            class=\"btn btn-primary\" >Save\n    </button >\n    <button type=\"submit\" name=\"action\"\n            value=\"{{ PREVIEW_ACTION }}\"\n            class=\"btn btn-primary\" >Preview\n    </button >\n  </form >\n{% endblock %}\n```", "```py\n     path('<uuid:mailinglist_ipk>/message/new',\n         views.CreateMessageView.as_view(),\n         name='create_message'),\n```", "```py\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom django.views.generic import DetailView\n\nfrom mailinglist.mixins import UserCanUseMailingList\nfrom mailinglist.models import Message\n\nclass MessageDetailView(LoginRequiredMixin, UserCanUseMailingList,\n                        DetailView):\n    model = Message\n```", "```py\n{% extends \"base.html\" %}\n{% load markdownify %}\n\n{% block title %}\n  {{ message.subject }}\n{% endblock %}\n\n{% block body %}\n  <h1 >{{ message.subject }}</h1 >\n  <div>\n    {{ message.body|markdownify }}\n  </div>\n{% endblock %}\n```", "```py\n    path('message/<uuid:pk>', \n         views.MessageDetailView.as_view(), \n         name='view_message')\n```", "```py\nfrom django.contrib.auth.views import LoginView, LogoutView\nfrom django.urls import path\n\nimport user.views\n\napp_name = 'user'\n\nurlpatterns = [\n    path('login', LoginView.as_view(), name='login'),\n    path('logout', LogoutView.as_view(), name='logout'),\n    path('register', user.views.RegisterView.as_view(), name='register'),\n]\n```", "```py\nLOGIN_URL = 'user:login'\nLOGIN_REDIRECT_URL = 'mailinglist:mailinglist_list'\nLOGOUT_REDIRECT_URL = 'user:login'\n```", "```py\n{% extends \"base.html\" %}\n{% load crispy_forms_tags %}\n\n{% block title %} Login - {{ block.super }} {% endblock %}\n\n{% block body %}\n  <h1>Login</h1>\n  <form method=\"post\" class=\"col-sm-6\">\n    {% csrf_token %}\n    {{ form|crispy }}\n    <button type=\"submit\" id=\"log_in\" class=\"btn btn-primary\">Log in</button>\n  </form>\n{% endblock %}\n```", "```py\nfrom django.contrib.auth.forms import UserCreationForm\nfrom django.views.generic.edit import CreateView\n\nclass RegisterView(CreateView):\n    template_name = 'user/register.html'\n    form_class = UserCreationForm\n```", "```py\n{% extends \"base.html\" %}\n{% load crispy_forms_tags %}\n{% block body %}\n  <div class=\"col-sm-12\">\n    <h1 >Register for Mail Ape</h1 >\n    <form method=\"post\" >\n      {% csrf_token %}\n      {{ form | crispy }}\n      <button type=\"submit\" class=\"btn btn-primary\" >\n        Register\n      </button >\n    </form >\n  </div >\n{% endblock %}\n```", "```py\n$ cd django\n$ python manage.py runserver\nPerforming system checks...\n\nSystem check identified no issues (0 silenced).\nJanuary 29, 2018 - 23:35:15\nDjango version 2.0.1, using settings 'config.settings'\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n```"]