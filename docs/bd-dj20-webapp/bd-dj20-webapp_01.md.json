["```py\n$ mkdir MyMDB\n$ cd MyMDB\n```", "```py\ndjango<2.1\npsycopg2<2.8\n```", "```py\n$ pip install -r requirements.dev.txt\n```", "```py\n$ django-admin startproject config\n$ tree config/\nconfig/\n\u251c\u2500\u2500 config\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 settings.py\n\u2502   \u251c\u2500\u2500 urls.py\n\u2502   \u2514\u2500\u2500 wsgi.py\n\u2514\u2500\u2500 manage.py\n```", "```py\n$ mv config django \n$ tree .\n.\n\u251c\u2500\u2500 django\n\u2502   \u251c\u2500\u2500 config\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 settings.py\n\u2502   \u2502   \u251c\u2500\u2500 urls.py\n\u2502   \u2502   \u2514\u2500\u2500 wsgi.py\n\u2502   \u2514\u2500\u2500 manage.py\n\u2514\u2500\u2500 requirements.dev.txt\n\n2 directories, 6 files\n```", "```py\nDATABASES = {\n  'default': {\n 'ENGINE': 'django.db.backends.sqlite3',\n     'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),  }\n}\n```", "```py\nDATABASES = {\n    'default': {\n 'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'mymdb',\n        'USER': 'mymdb',\n        'PASSWORD': 'development',\n        'HOST': '127.0.0.1',\n        'PORT': '5432',    }\n}\n```", "```py\n$ cd django\n$ python manage.py startapp core\n$ ls\nconfig      core        manage.py\n$tree core\ncore\n\u251c\u2500  472; __init__.py\n\u251c\u2500\u2500 admin.py\n\u251c\u2500\u2500 apps.py\n\u251c\u2500\u2500 migrations\n\u2502   \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 models.py\n\u251c\u2500\u2500 tests.py\n\u2514\u2500\u2500 views.py\n\n1 directory, 7 files\n```", "```py\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n```", "```py\nINSTALLED_APPS = [\n    'core',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n```", "```py\nfrom django.db import models\n\nclass Movie(models.Model):\n    NOT_RATED = 0\n    RATED_G = 1\n    RATED_PG = 2\n    RATED_R = 3\n    RATINGS = (\n        (NOT_RATED, 'NR - Not Rated'),\n        (RATED_G,\n         'G - General Audiences'),\n        (RATED_PG,\n         'PG - Parental Guidance '\n         'Suggested'),\n        (RATED_R, 'R - Restricted'),\n    )\n\n    title = models.CharField(\n        max_length=140)\n    plot = models.TextField()\n    year = models.PositiveIntegerField()\n    rating = models.IntegerField(\n        choices=RATINGS,\n        default=NOT_RATED)\n    runtime = \\\n        models.PositiveIntegerField()\n    website = models.URLField(\n        blank=True)\n\n    def __str__(self):\n        return '{} ({})'.format(\n            self.title, self.year)\n```", "```py\nCREATE DATABASE mymdb;\nCREATE USER mymdb;\nGRANT ALL ON DATABASE mymdb to \"mymdb\";\nALTER USER mymdb PASSWORD 'development';\nALTER USER mymdb CREATEDB;\n```", "```py\n$ cd django\n$ python manage.py makemigrations core\nMigrations for 'core':\n  core/migrations/0001_initial.py\n    - Create model Movie\n```", "```py\n$ python manage.py migrate core \nOperations to perform:\n  Apply all migrations: core\nRunning migrations:\n  Applying core.0001_initial... OK\n```", "```py\n$ python manage.py dbshell\npsql (9.6.1, server 9.6.3)\nType \"help\" for help.\n\nmymdb=> \\dt\n             List of relations\n Schema |       Name        | Type  | Owner \n--------+-------------------+-------+-------\n public | core_movie        | table | mymdb\n public | django_migrations | table | mymdb\n(2 rows)\n\nmymdb=> \\q\n```", "```py\n$ python manage.py migrate \nOperations to perform:\n  Apply all migrations: admin, auth, contenttypes, core, sessions\nRunning migrations:\n  Applying contenttypes.0001_initial... OK\n  Applying auth.0001_initial... OK\n  Applying admin.0001_initial... OK\n  Applying admin.0002_logentry_remove_auto_add... OK\n  Applying contenttypes.0002_remove_content_type_name... OK\n  Applying auth.0002_alter_permission_name_max_length... OK\n  Applying auth.0003_alter_user_email_max_length... OK\n  Applying auth.0004_alter_user_username_opts... OK\n  Applying auth.0005_alter_user_last_login_null... OK\n  Applying auth.0006_require_contenttypes_0002... OK\n  Applying auth.0007_alter_validators_add_error_messages... OK\n  Applying auth.0008_alter_user_username_max_length... OK\n  Applying sessions.0001_initial... OK\n```", "```py\n$ cd django\n$ python manage.py shell\nPython 3.4.6 (default, Aug  4 2017, 15:21:32) \n[GCC 4.2.1 Compatible Apple LLVM 8.1.0 (clang-802.0.42)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n(InteractiveConsole)\n>>> from core.models import Movie\n>>> sleuth = Movie.objects.create(\n... title='Sleuth',\n... plot='An snobbish writer who loves games'\n... ' invites his wife\\'s lover for a battle of wits.',\n... year=1972,\n... runtime=138,\n... )\n>>> sleuth.id\n1\n>>> sleuth.get_rating_display()\n'NR - Not Rated'\n```", "```py\nfrom django.contrib import admin\n\nfrom core.models import Movie\n\nadmin.site.register(Movie)\n```", "```py\n$ cd django\n$ python manage.py createsuperuser \nUsername (leave blank to use 'tomaratyn'): \nEmail address: tom@aratyn.nam\nPassword: \nPassword (again): \nSuperuser created successfully.\n```", "```py\n$ python manage.py runserver\nPerforming system checks...\n\nSystem check identified no issues (0 silenced).\nSeptember 12, 2017 - 20:31:54\nDjango version 1.11.5, using settings 'config.settings'\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n```", "```py\nfrom django.views.generic import ListView\n\nfrom core.models import Movie\n\nclass MovieList(ListView):\n    model = Movie\n```", "```py\n<!DOCTYPE html>\n<html>\n  <body>\n    <ul>\n      {% for movie in object_list %}\n        <li>{{ movie }}</li>\n      {% empty %}\n        <li>\n          No movies yet.\n        </li>\n      {% endfor %}\n    </ul>\n    <p>\n      Using https? \n      {{ request.is_secure|yesno }}\n    </p>\n  </body>\n</html>\n```", "```py\nfrom django.urls import path\n\nfrom . import views\n\napp_name = 'core'\nurlpatterns = [\n    path('movies',\n         views.MovieList.as_view(),\n         name='MovieList'),\n]\n```", "```py\nfrom django.urls import path, include\nfrom django.contrib import admin\n\nimport core.urls\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include(\n        core.urls, namespace='core')),\n]\n```", "```py\n$ cd django\n$ python manage.py runserver\n```", "```py\nfrom django.views.generic import (\n    ListView, DetailView,\n)\nfrom core.models import Movie\n\nclass MovieDetail(DetailView):\n    model = Movie\n\nclass MovieList(ListView):\n    model = Movie\n```", "```py\n$ mkdir django/templates\n```", "```py\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            os.path.join(BASE_DIR, 'templates'),\n        ],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            # omittted for brevity\n        },\n    },\n]\n```", "```py\n<!DOCTYPE html>\n<html lang=\"en\" >\n<head >\n  <meta charset=\"UTF-8\" >\n  <meta\n    name=\"viewport\"\n    content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n  >\n  <link\n    href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/css/bootstrap.min.css\"\n    integrity=\"sha384-/Y6pD6FV/Vv2HJnA6t+vslU6fwYXjCFtcEpHbNJ0lyAFsXTsjBbfaDjzALeQsN6M\"\n    rel=\"stylesheet\"\n    crossorigin=\"anonymous\"\n  >\n  <title >\n    {% block title %}MyMDB{% endblock %}\n  </title>\n  <style>\n    .mymdb-masthead {\n      background-color: #EEEEEE;\n      margin-bottom: 1em;\n    }\n  </style>\n\n</head >\n<body >\n<div class=\"mymdb-masthead\">\n  <div class=\"container\">\n    <nav class=\"nav\">\n      <div class=\"navbar-brand\">MyMDB</div>\n      <a\n        class=\"nav-link\"\n        href=\"{% url 'core:MovieList' %}\"\n      >\n        Movies\n      </a>\n    </nav>\n  </div>\n</div>\n\n<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-sm-8 mymdb-main\">\n     {% block main %}{% endblock %}\n    </div>\n    <div\n        class=\"col-sm-3 offset-sm-1 mymdb-sidebar\"\n    >\n      {% block sidebar %}{% endblock %}\n    </div>\n  </div>\n</div>\n\n</body >\n</html >\n```", "```py\n{% extends 'base.html' %}\n\n{% block title %}\n  {{ object.title }} - {{ block.super }}\n{% endblock %}\n\n{% block main %}\n<h1>{{ object }}</h1>\n<p class=\"lead\">\n{{ object.plot }}\n</p>\n{% endblock %}\n\n{% block sidebar %}\n<div>\nThis movie is rated:\n  <span class=\"badge badge-primary\">\n  {{ object.get_rating_display }}\n  </span>\n</div>\n{% endblock %}\n```", "```py\nfrom django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n    path('movies',\n         views.MovieList.as_view(),\n         name='MovieList'),\n    path('movie/<int:pk>',\n         views.MovieDetail.as_view(),\n         name='MovieDetail'),\n]\n```", "```py\n{% extends 'base.html' %}\n\n{% block title %}\nAll The Movies\n{% endblock %}\n\n{% block main %}\n<ul>\n  {% for movie in object_list %}\n    <li>\n      <a href=\"{% url 'core:MovieDetail' pk=movie.id %}\">\n        {{ movie }}\n      </a>\n    </li>\n  {% endfor %}\n  </ul>\n{% endblock %}\n```", "```py\nclass Movie(models.Model):\n   # constants and fields omitted for brevity \n\n    class Meta:\n        ordering = ('-year', 'title')\n\n    def __str__(self):\n        return '{} ({})'.format(\n            self.title, self.year)\n```", "```py\n{% block main %}\n <ul >\n    {% for movie in object_list %}\n      <li >\n        <a href=\"{% url 'core:MovieDetail' pk=movie.id %}\" >\n          {{ movie }}\n        </a >\n      </li >\n    {% endfor %}\n  </ul >\n  {% if is_paginated %}\n    <nav >\n      <ul class=\"pagination\" >\n        <li class=\"page-item\" >\n          <a\n            href=\"{% url 'core:MovieList' %}?page=1\"\n            class=\"page-link\"\n          >\n            First\n          </a >\n        </li >\n        {% if page_obj.has_previous %}\n          <li class=\"page-item\" >\n            <a\n              href=\"{% url 'core:MovieList' %}?page={{ page_obj.previous_page_number }}\"\n              class=\"page-link\"\n            >\n              {{ page_obj.previous_page_number }}\n            </a >\n          </li >\n        {% endif %}\n        <li class=\"page-item active\" >\n          <a\n            href=\"{% url 'core:MovieList' %}?page={{ page_obj.number }}\"\n            class=\"page-link\"\n          >\n            {{ page_obj.number }}\n          </a >\n        </li >\n        {% if page_obj.has_next %}\n          <li class=\"page-item\" >\n            <a\n              href=\"{% url 'core:MovieList' %}?page={{ page_obj.next_page_number }}\"\n              class=\"page-link\"\n            >\n              {{ page_obj.next_page_number }}\n            </a >\n          </li >\n        {% endif %}\n        <li class=\"page-item\" >\n          <a\n              href=\"{% url 'core:MovieList' %}?page=last\"\n              class=\"page-link\"\n          >\n            Last\n          </a >\n        </li >\n      </ul >\n    </nav >\n  {% endif %}\n{% endblock %}\n```", "```py\n{% extends \"base.html\" %}\n\n{% block title %}\nNot Found\n{% endblock %}\n\n{% block main %}\n<h1>Not Found</h1>\n<p>Sorry that reel has gone missing.</p>\n{% endblock %}\n```", "```py\nDEBUG = False\n\nALLOWED_HOSTS = [\n    'localhost',\n    '127.0.0.1'\n]\n```", "```py\n$ cd django\n$ python manage.py runserver\n```", "```py\nfrom django.test import TestCase\nfrom django.test.client import \\\n    RequestFactory\nfrom django.urls.base import reverse\n\nfrom core.models import Movie\nfrom core.views import MovieList\n\nclass MovieListPaginationTestCase(TestCase):\n\n    ACTIVE_PAGINATION_HTML = \"\"\"\n    <li class=\"page-item active\">\n      <a href=\"{}?page={}\" class=\"page-link\">{}</a>\n    </li>\n    \"\"\"\n\n    def setUp(self):\n        for n in range(15):\n            Movie.objects.create(\n                title='Title {}'.format(n),\n                year=1990 + n,\n                runtime=100,\n            )\n\n    def testFirstPage(self):\n        movie_list_path = reverse('core:MovieList')\n        request = RequestFactory().get(path=movie_list_path)\n        response = MovieList.as_view()(request)\n        self.assertEqual(200, response.status_code)\n        self.assertTrue(response.context_data['is_paginated'])\n        self.assertInHTML(\n            self.ACTIVE_PAGINATION_HTML.format(\n                movie_list_path, 1, 1),\n            response.rendered_content)\n```", "```py\n$ cd django\n$ python manage.py test \nCreating test database for alias 'default'...\nSystem check identified no issues (0 silenced).\n.\n----------------------------------------------------------------------\nRan 1 test in 0.035s\n\nOK\nDestroying test database for alias 'default'...\n```", "```py\nclass Person(models.Model):\n    first_name = models.CharField(\n        max_length=140)\n    last_name = models.CharField(\n        max_length=140)\n    born = models.DateField()\n    died = models.DateField(null=True,\n                            blank=True)\n\n    class Meta:\n        ordering = (\n            'last_name', 'first_name')\n\n    def __str__(self):\n        if self.died:\n            return '{}, {} ({}-{})'.format(\n                self.last_name,\n                self.first_name,\n                self.born,\n                self.died)\n        return '{}, {} ({})'.format(\n                self.last_name,\n                self.first_name,\n                self.born)\n```", "```py\nclass Movie(models.Model):\n   # constants, methods, Meta class and other fields omitted for brevity.\n    director = models.ForeignKey(\n        to='Person',\n        on_delete=models.SET_NULL,\n        related_name='directed',\n        null=True,\n        blank=True)\n```", "```py\nclass Movie(models.Model):\n   # constants, methods, Meta class and other fields omitted for brevity.\n    writers = models.ManyToManyField(\n        to='Person',\n        related_name='writing_credits',\n        blank=True)\n```", "```py\nclass Movie(models.Model):\n   # constants, methods, Meta class and other fields omitted for brevity.\n    actors = models.ManyToManyField(\n        to='Person',\n        through='Role',\n        related_name='acting_credits',\n        blank=True)\n\nclass Role(models.Model):\n    movie = models.ForeignKey(Movie, on_delete=models.DO_NOTHING)\n    person = models.ForeignKey(Person, on_delete=models.DO_NOTHING)\n    name = models.CharField(max_length=140)\n\n    def __str__(self):\n        return \"{} {} {}\".format(self.movie_id, self.person_id, self.name)\n\n    class Meta:\n        unique_together = ('movie',\n                           'person',\n                           'name')\n```", "```py\n$ python manage.py makemigrations core\nMigrations for 'core':\n  core/migrations/0002_auto_20170926_1650.py\n    - Create model Person\n    - Create model Role\n    - Change Meta options on movie\n    - Add field movie to role\n    - Add field person to role\n    - Add field actors to movie\n    - Add field director to movie\n    - Add field writers to movie\n    - Alter unique_together for role (1 constraint(s))\n```", "```py\n$ python manage.py migrate core\nOperations to perform:\n  Apply all migrations: core\nRunning migrations:\n  Applying core.0002_auto_20170926_1651... OK\n```", "```py\nclass PersonManager(models.Manager):\n    def all_with_prefetch_movies(self):\n        qs = self.get_queryset()\n        return qs.prefetch_related(\n            'directed',\n            'writing_credits',\n            'role_set__movie')\n\nclass Person(models.Model):\n    # fields omitted for brevity\n\n    objects = PersonManager()\n\n    class Meta:\n        ordering = (\n            'last_name', 'first_name')\n\n    def __str__(self):\n        # body omitted for brevity\n```", "```py\nMovie.objects.all().filter(actors__last_name='Freeman', actors__first_name='Morgan')\n```", "```py\nclass PersonDetail(DetailView):\n    queryset = Person.objects.all_with_prefetch_movies()\n```", "```py\n{% extends 'base.html' %}\n\n{% block title %}\n  {{ object.first_name }}\n  {{ object.last_name }}\n{% endblock %}\n\n{% block main %}\n\n  <h1>{{ object }}</h1>\n  <h2>Actor</h2>\n  <ul >\n    {% for role in object.role_set.all %}\n      <li >\n        <a href=\"{% url 'core:MovieDetail' role.movie.id %}\" >\n          {{ role.movie }}\n        </a >:\n        {{ role.name }}\n      </li >\n    {% endfor %}\n  </ul >\n  <h2>Writer</h2>\n  <ul >\n    {% for movie in object.writing_credits.all %}\n      <li >\n        <a href=\"{% url 'core:MovieDetail' movie.id %}\" >\n          {{ movie }}\n        </a >\n      </li >\n    {% endfor %}\n  </ul >\n  <h2>Director</h2>\n  <ul >\n    {% for movie in object.directed.all %}\n      <li >\n        <a href=\"{% url 'core:MovieDetail' movie.id %}\" >\n          {{ movie }}\n        </a >\n      </li >\n    {% endfor %}\n  </ul >\n\n{% endblock %}\n```", "```py\nclass MovieManager(models.Manager):\n\n    def all_with_related_persons(self):\n        qs = self.get_queryset()\n        qs = qs.select_related(\n            'director')\n        qs = qs.prefetch_related(\n            'writers', 'actors')\n        return qs\n\nclass Movie(models.Model):\n    # constants and fields omitted for brevity\n    objects = MovieManager()\n\n    class Meta:\n        ordering = ('-year', 'title')\n\n    def __str__(self):\n         # method body omitted for brevity\n```", "```py\nclass MovieDetail(DetailView):\n    queryset = (\n        Movie.objects\n            .all_with_related_persons())\n```"]