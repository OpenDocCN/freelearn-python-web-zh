["```py\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n    <title>Waiter Caller</title>\n\n    <!-- Bootstrap core CSS -->\n    <link href=\"../static/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->\n    <!--[if lt IE 9]>\n      <script src=\"img/html5shiv.min.js\"></script>\n      <script src=\"img/respond.min.js\"></script>\n    <![endif]-->\n\n  </head>\n  <body>\n\n    {% block navbar %}\n    <nav class=\"navbar navbar-inverse navbar-fixed-top\">\n      <div class=\"container\">\n        <div class=\"navbar-header\">\n          <a class=\"navbar-brand\" href=\"/dashboard\">Dashboard</a>\n          <a class=\"navbar-brand\" href=\"/account\">Account</a>\n        </div>\n      </div>\n    </nav>\n    {% endblock %}\n\n    {% block content %}\n    {% endblock %}\n\n    <div class=\"container\">\n\n      <hr>\n      <footer>\n        <p>&copy; A. Non 2015</p>\n      </footer>\n    </div>\n  <!-- Bootstrap core JavaScript\n    ================================================== -->\n    <!-- Placed at the end of the document so the pages load faster -->\n    <script   src=\"img/jquery.min.js\"></script>\n    <script src=\"img/bootstrap.min.js\"></script>\n  </body>\n</html>\n```", "```py\n{% block content %}\n{% endblock %}\n```", "```py\n{% block navbar %}\n[...]\n{% endblock %}\n```", "```py\n{% extends \"base.html\" %}\n\n{% block content %}\n    <div class=\"jumbotron\">\n      <div class=\"container\">\n        <h1>Dashboard</h1>\n        <p>View all patron requests below</p>\n      </div>\n    </div>\n\n    <div class=\"container\">\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <h2>Requests</h2>\n          <p>All your customers are currently satisfied - no requests</p>\n        </div>    \n      </div>\n    </div>\n{% endblock %}\n```", "```py\n{% extends \"base.html\" %}\n\n{% block content %}\n    <div class=\"jumbotron\">\n      <div class=\"container\">\n        <h1>Account</h1>\n        <p>Manage tables and get URLs</p>\n      </div>\n    </div>\n\n    <div class=\"container\">\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <h2>Tables</h2>\n\n        </div>    \n      </div>\n    </div>\n{% endblock %}\n```", "```py\n@app.route(\"/dashboard\")\n@login_required\ndef dashboard():\n  return render_template(\"dashboard.html\")\n\n@app.route(\"/account\")\n@login_required\ndef account():\n  return render_template(\"account.html\")\n```", "```py\npython waitercaller.py\n\n```", "```py\n<h2>Add new table</h2>\n<form class=\"form-inline\" action=\"/account/createtable\" method=\"POST\">\n  <input type=\"text\" name=\"tablenumber\" placeholder=\"Table number or name\" class=\"form-control\">\n  <input type=\"submit\" value=\"Create\" class=\"btn btn-primary\">\n</form>\n```", "```py\n@app.route(\"/account/createtable\", methods=[\"POST\"])\n@login_required\ndef account_createtable():\n  tablename = request.form.get(\"tablenumber\")\n  tableid = DB.add_table(tablename, current_user.get_id())\n  new_url = config.base_url + \"newrequest/\" + tableid\n  DB.update_table(tableid, new_url)\n  return redirect(url_for('account'))\n```", "```py\nfrom flask.ext.login import current_user\nimport config\n```", "```py\nbase_url = \"http://127.0.0.1:5000/\"\n```", "```py\nMOCK_TABLES = [{\"_id\": \"1\", \"number\": \"1\", \"owner\": \"test@example.com\",\"url\": \"mockurl\"}]\n```", "```py\ndef add_table(self, number, owner):\n    MOCK_TABLES.append({\"_id\": number, \"number\": number, \"owner\":owner})\n    return number\n```", "```py\ndef update_table(self, _id, url):\n    for table in MOCK_TABLES:\n        if table.get(\"_id\") == _id:\n            table[\"url\"] = url\n            break\n```", "```py\n  def get_tables(self, owner_id):\n    return MOCK_TABLES\n```", "```py\n@app.route(\"/account\")\n@login_required\ndef account():\n    tables = DB.get_tables(current_user.get_id())\n    return render_template(\"account.html\", tables=tables)\n```", "```py\n<table class=\"table table-striped\">\n  <tr>\n    <th>No.</th>\n    <th>URL</th>\n    <th>Delete</th>\n  </tr>\n  {% for table in tables %}\n    <form class=\"form-inline\" action=\"/account/deletetable\">\n      <tr>\n        <td>{{table.number}}</td>\n        <td>{{table.url}}</td>\n        <td><input type=\"submit\" value=\"Delete\" class=\"form-control\"></td>\n        <input type=\"text\" name=\"tableid\" value=\"{{table._id}}\" hidden>\n      </tr>\n    </form>\n  {% endfor %}\n</table>\n```", "```py\n@app.route(\"/account/deletetable\")\n@login_required\ndef account_deletetable():\n  tableid = request.args.get(\"tableid\")\n  DB.delete_table(tableid)\n  return redirect(url_for('account'))\n```", "```py\n    def delete_table(self, table_id):\n        for i, table in enumerate(MOCK_TABLES):\n            if table.get(\"_id\") == table_id:\n                del MOCK_TABLES[i]\n             break\n```", "```py\nimport urllib2\nimport json\n\nTOKEN = \"cc922578a7a1c6065a2aa91bc62b02e41a99afdb\"\nROOT_URL = \"https://api-ssl.bitly.com\"\nSHORTEN = \"/v3/shorten?access_token={}&longUrl={}\"\n\nclass BitlyHelper:\n\n    def shorten_url(self, longurl):\n        try:\n            url = ROOT_URL + SHORTEN.format(TOKEN, longurl)\n            response = urllib2.urlopen(url).read()\n            jr = json.loads(response)\n            return jr['data']['url']\n        except Exception as e:\n            print e\n```", "```py\nDB = DBHelper()\nPH = PasswordHelper()\nBH = BitlyHelper()\n\n```", "```py\nfrom bitlyhelper import BitlyHelper\n```", "```py\n@app.route(\"/account/createtable\", methods=[\"POST\"])\n@login_required\ndef account_createtable():\n  tablename = request.form.get(\"tablenumber\")\n  tableid = DB.add_table(tablename, current_user.get_id())\n new_url = BH.shorten_url(config.base_url + \"newrequest/\" + tableid)\n  DB.update_table(tableid, new_url)\n  return redirect(url_for('account'))\n```", "```py\n@app.route(\"/newrequest/<tid>\")\ndef new_request(tid):\n  DB.add_request(tid, datetime.datetime.now())\n  return \"Your request has been logged and a waiter will be withyou shortly\"\n```", "```py\nimport datetime\n```", "```py\nMOCK_REQUESTS = [{\"_id\": \"1\", \"table_number\": \"1\",\"table_id\": \"1\", \"time\": datetime.datetime.now()}]\n```", "```py\npython waitercaller.py\n\n```", "```py\nimport datetime\n```", "```py\n    def add_table(self, number, owner):\n        MOCK_TABLES.append(\n            {\"_id\": str(number), \"number\": number, \"owner\": owner})\n        return number\n```", "```py\ndef get_requests(self, owner_id):\n    return MOCK_REQUESTS\n\ndef delete_request(self, request_id):\n    for i, request [...]\n        if requests [...]\n            del MOCK_REQUESTS[i]\n            break\n```", "```py\n@app.route(\"/dashboard\")\n@login_required\ndef dashboard():\n    now = datetime.datetime.now()\n    requests = DB.get_requests(current_user.get_id())\n    for req in requests:\n        deltaseconds = (now - req['time']).seconds\n        req['wait_minutes'] = \"{}.{}\".format((deltaseconds/60), str(deltaseconds % 60).zfill(2))\n    return render_template(\"dashboard.html\", requests=requests)\n```", "```py\n<h2>Requests</h2>\n{% if requests %}\n  <table class=\"table table-striped\">\n    <tr>\n      <th>No.</th>\n      <th>Wait</th>\n      <th>Resolve</th>\n    </tr>\n    {% for request in requests %}\n      <tr>\n        <form class=\"form-inline\" action=\"/dashboard/resolve\">\n          <td>{{request.table_number}}</td>\n          <td>{{request.wait_minutes}}</td> \n          <input type=\"text\" name=\"request_id\" value=\"{{request._id}}\" hidden>\n          <td><input type=\"submit\" value=\"Resolve\" class=\"btn btn-primary\"></td>\n        </form>\n      </tr>\n    {% endfor %}\n  </table>\n{% else %}\n  <p>All your customers are currently satisfied - no requests</p>\n{% endif %}\n```", "```py\n@app.route(\"/dashboard/resolve\")\n@login_required\ndef dashboard_resolve():\n  request_id = request.args.get(\"request_id\")\n  DB.delete_request(request_id)\n  return redirect(url_for('dashboard'))\n```", "```py\n{% extends \"base.html\" %}\n{% block metarefresh %} <meta http-equiv=\"refresh\" content=\"10\" > {% endblock %}\n{% block content %}\n```", "```py\n {% block metarefresh %} {% endblock %}\n    <title>Waiter Caller</title>\n```", "```py\npip install --user Flask-WTF\n\n```", "```py\nfrom flask_wtf import Form\nfrom wtforms import PasswordField\nfrom wtforms import SubmitField\nfrom wtforms.fields.html5 import EmailField\nfrom wtforms import validators\n\nclass RegistrationForm(Form):\n    email = EmailField('email', validators=[validators.DataRequired(), validators.Email()])\n    password = PasswordField('password', validators=[validators.DataRequired(), validators.Length(min=8, message=\"Please choose a password of at least 8 characters\")])\n    password2 = PasswordField('password2', validators=[validators.DataRequired(), validators.EqualTo('password', message='Passwords must match')])\n    submit = SubmitField('submit', [validators.DataRequired()])\n```", "```py\nfrom forms import RegistrationForm\n```", "```py\n@app.route(\"/\")\ndef home():\n  registrationform = RegistrationForm()\n  return render_template(\"home.html\", registrationform=registrationform)\n```", "```py\n<h2>Register now</h2>\n<form class=\"form-horizontal\" action=\"/register\" method=\"POST\">\n  {{ registrationform.csrf_token }}\n    <div class=\"form-group\">\n      <div class=\"col-sm-9\">\n        {{ registrationform.email(class=\"form-control\", placeholder=\"Email Address\" )}}\n      </div>\n    </div>\n    <div class=\"form-group\">\n      <div class=\"col-sm-9\">\n        {{ registrationform.password(class=\"form-control\", placeholder=\"Password\" )}}\n      </div>\n    </div>\n    <div class=\"form-group\">\n      <div class=\"col-sm-9\">\n        {{ registrationform.password2(class=\"form-control\", placeholder=\"Confirm Password\" )}}\n      </div>\n    </div>\n    <div class=\"form-group\">\n      <div class=\"col-sm-9\">\n        {{ registrationform.submit(class=\"btn btn-primary btn-block\")}}\n      </div>\n    </div>\n</form>\n```", "```py\n@app.route(\"/register\", methods=[\"POST\"])\ndef register():\n  form = RegistrationForm(request.form)\n  if form.validate():\n    if DB.get_user(form.email.data):\n      form.email.errors.append(\"Email address already registered\")\n      return render_template('home.html', registrationform=form)\n    salt = PH.get_salt()\n    hashed = PH.get_hash(form.password2.data + salt)\n    DB.add_user(form.email.data, salt, hashed)\n    return redirect(url_for(\"home\"))\n  return render_template(\"home.html\", registrationform=form)\n```", "```py\n<div class=\"form-group\">\n  <div class=\"col-sm-9\">\n {% if registrationform.email.errors %}\n <ul class=\"errors\">{% for error in registrationform.email.errors %}<li>{{ error }}</li>{% endfor %}</ul>\n {% endif %}\n    {{ registrationform.email(class=\"form-control\", placeholder=\"Email Address\" )}}\n  </div>\n</div>\n<div class=\"form-group\">\n  <div class=\"col-sm-9\">\n {% if registrationform.password.errors %}\n <ul class=\"errors\">{% for error in registrationform.password.errors %}<li>{{ error }}</li>{% endfor %}</ul>\n {% endif %}\n    {{ registrationform.password(class=\"form-control\", placeholder=\"Password\" )}}\n  </div>\n</div>\n<div class=\"form-group\">\n  <div class=\"col-sm-9\">\n {% if registrationform.password2.errors %}\n <ul class=\"errors\">{% for error in registrationform.password2.errors %}<li>{{ error }}</li>{% endfor %}</ul>\n {% endif %}\n    {{ registrationform.password2(class=\"form-control\", placeholder=\"Confirm Password\" )}}\n  </div>\n</div>\n```", "```py\n<style type=\"text/css\">\n  ul.errors {\n    list-style-type: none;\n    padding: 0;\n    color: red;\n  }\n</style>\n```", "```py\nhashed = PH.get_hash(form.password2.data + salt)\nDB.add_user(form.email.data, salt, hashed)\nreturn render_template(\"home.html\", registrationform=form, onloadmessage=\"Registration successful. Please log in.\")\nreturn render_template(\"home.html\", registrationform=form)\n```", "```py\n  </head>\n {% block bodytag %}\n  <body>\n {% endblock %}\n\n```", "```py\n{% block bodytag %}\n  <body {% if onloadmessage %} onload=\"alert('{{onloadmessage}}');\" {% endif %}>\n{% endblock %}\n```", "```py\nclass LoginForm(Form):\n    loginemail = EmailField('email', validators=[validators.DataRequired(), validators.Email()])\n    loginpassword = PasswordField('password', validators=[validators.DataRequired(message=\"Password field is required\")])\n    submit = SubmitField('submit', [validators.DataRequired()])\n```", "```py\nfrom forms import LoginForm\n```", "```py\n@app.route(\"/login\", methods=[\"POST\"])\ndef login():\n    form = LoginForm(request.form)\n    if form.validate():\n        stored_user = DB.get_user(form.loginemail.data)\n        if stored_user and PH.validate_password(form.loginpassword.data, stored_user['salt'], stored_user['hashed']):\n            user = User(form.loginemail.data)\n            login_user(user, remember=True)\n            return redirect(url_for('account'))\n        form.loginemail.errors.append(\"Email or password invalid\")\n    return render_template(\"home.html\", loginform=form, registrationform=RegistrationForm())\n```", "```py\n@app.route(\"/\")\ndef home():\n  return render_template(\"home.html\", loginform=LoginForm(), registrationform=RegistrationForm())\n```", "```py\n  return render_template(\"home.html\", loginform=LoginForm(), registrationform=form, onloadmessage=\"Registration successful. Please log in.\")\n  return render_template(\"home.html\", loginform=LoginForm(), registrationform=form)\n```", "```py\n  return render_template(\"home.html\", loginform=LoginForm(), registrationform=form)\n```", "```py\n<form class=\"navbar-form navbar-right\" action=\"/login\" method=\"POST\">\n  {% if loginform.errors %}\n    <ul class=\"errors\">\n      {% for field_name, field_errors in loginform.errors|dictsort if field_errors %}\n        {% for error in field_errors %}\n          <li>{{ error }}</li>\n        {% endfor %}\n      {% endfor %}\n    </ul>\n  {% endif %}\n  {{ loginform.csrf_token}}\n  <div class=\"form-group\">\n    {{ loginform.email(class=\"form-control\", placeholder=\"Email Address\")}}\n  </div>\n  <div class=\"form-group\">\n    {{ loginform.password(class=\"form-control\", placeholder=\"Password\")}}\n  </div>\n  <div class=\"form-group\">\n    {{ loginform.submit(value=\"Sign in\", class=\"btn btn-success\")}}\n  </div>\n</form>\n```", "```py\nclass CreateTableForm(Form):\n  tablenumber = TextField('tablenumber', validators=[validators.DataRequired()])\n  submit = SubmitField('createtablesubmit', validators=[validators.DataRequired()])\n```", "```py\nfrom wtforms import TextField\n```", "```py\nfrom forms import CreateTableForm\n```", "```py\n@app.route(\"/account/createtable\", methods=[\"POST\"])\n@login_required\ndef account_createtable():\n  form = CreateTableForm(request.form)\n  if form.validate():\n    tableid = DB.add_table(form.tablenumber.data, current_user.get_id())\n    new_url = BH.shorten_url(config.base_url + \"newrequest/\" + tableid)\n    DB.update_table(tableid, new_url)\n    return redirect(url_for('account'))\n\n  return render_template(\"account.html\", createtableform=form, tables=DB.get_tables(current_user.get_id()))\n```", "```py\n@app.route(\"/account\")\n@login_required\ndef account():\n    tables = DB.get_tables(current_user.get_id())\n    return render_template(\"account.html\", createtableform=CreateTableForm(), tables=tables)\n```", "```py\n<form class=\"form-inline\" action=\"/account/createtable\" method=\"POST\">\n  <div class=\"form-group\">\n    {% if createtableform.tablenumber.errors %}\n      <ul class=\"errors\"> \n        {% for error in createtableform.tablenumber.errors %}\n          <li>{{error}}</li> \n        {% endfor %} \n      </ul> \n    {% endif %}\n    {{ createtableform.csrf_token}}\n    {{ createtableform.tablenumber(class=\"form-control\", placeholder=\"Table number or name\")}}\n    {{ createtableform.submit(value=\"Create\", class=\"btn btn-primary\") }}\n  </div>\n</form>\n```"]