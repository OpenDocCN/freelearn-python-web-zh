["```py\nmkdir waitercaller\ncd waitercaller\ngit init\ngit remote add origin <new-repository-url>\nmkdir templates\nmkdir static\ntouch waitercaller.py\ntouch templates/home.html\ntouch .gitignore\n\n```", "```py\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef home():\n   return \"Under construction\"\n\nif __name__ == '__main__':\n    app.run(port=5000, debug=True)\n```", "```py\ngit add .\ngit commit \u2013m \"Initial commit\"\ngit push origin master\n\n```", "```py\ncd /var/www/\ngit clone <new-repository-url>\ncd waitercaller\nnano waitercaller.wsgi\n\n```", "```py\nimport sys\nsys.path.insert(0, \"/var/www/waitercaller\")\nfrom waitercaller import app as application\n```", "```py\ncd /etc/apache2/sites-available\nnano waitercaller.conf\n\n```", "```py\n<VirtualHost *>\n\n    WSGIScriptAlias / /var/www/waitercaller/waitercaller.wsgi\n    WSGIDaemonProcess waitercaller\n    <Directory /var/www/waitercaller>\n       WSGIProcessGroup waitercaller\n       WSGIApplicationGroup %{GLOBAL}\n        Order deny,allow\n        Allow from all\n    </Directory>\n</VirtualHost>\n```", "```py\nsudo a2dissite crimemap.conf\nsudo a2ensite waitercaller.conf\nsudo service apache2 reload\n\n```", "```py\n    waitercaller/\n    templates\n        home.html\n    static\n        css/\n        fonts/\n        js\n    .gitignore\n    waitercaller.py\n    ```", "```py\n<div class=\"row\">\n <div class=\"col-md-4\">\n <h2>Simple</h2>\n\n```", "```py\n<button type=\"button\" class=\"navbar-toggle collapsed\" data- toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\">\n\n```", "```py\npip install --user flask-login\n\n```", "```py\nfrom flask.ext.login import LoginManager\nfrom flask.ext.login import login_required\n```", "```py\napp = Flask(__name__)\nlogin_manager = LoginManager(app)\n\n```", "```py\n@app.route(\"/\")\ndef home():\n    return render_template(\"home.html\")\n```", "```py\n@app.route(\"/account\")\n@login_required\ndef account():\n   return \"You are logged in\"\n```", "```py\nclass User:\n   def __init__(self, email):\n      self.email = email\n\n   def get_id(self):\n      return self.email\n\n   def is_active(self):\n      return True\n\n   def is_anonymous(self):\n      return False\n\n   def is_authenticated(self):\n      return True\n```", "```py\nMOCK_USERS = {'test@example.com': '123456'}\n\nclass MockDBHelper:\n\n   def get_user(self, email):\n      if email in MOCK_USERS:\n         return MOCK_USERS[email]\n      return None\n```", "```py\ntest = True\n```", "```py\nconfig.py\n*.pyc\n```", "```py\nfrom flask.ext.login import login_user\n\nfrom mockdbhelper import MockDBHelper as DBHelper\nfrom user import User\n```", "```py\nDB = DBHelper()\n```", "```py\ncat /dev/urandom | base64 | head -c 100 ; echo\n\n```", "```py\napp.secret_key = 'tPXJY3X37Qybz4QykV+hOyUxVQeEXf1Ao2C8upz+fGQXKsM'\n```", "```py\nfrom flask import redirect\nfrom flask import url_for\n```", "```py\n@app.route(\"/login\", methods=[\"POST\"])\ndef login():\n   email = request.form.get(\"email\")\n   password = request.form.get(\"password\")\n   user_password = DB.get_user(email)\n   if user_password and user_password == password:\n      user = User(email)\n      login_user(user)\n      return redirect(url_for('account'))\n   return home()\n```", "```py\nfrom flask import request \n```", "```py\nreturn account()\n```", "```py\n@login_manager.user_loader\ndef load_user(user_id):\n    user_password = DB.get_user(user_id)\n    if user_password:\n       return User(user_id)\n```", "```py\n login_user(user)\n```", "```py\nlogin_user(user, remember=True)\n```", "```py\n@app.route(\"/logout\")\ndef logout():\n   logout_user()\n   return redirect(url_for(\"home\"))\n```", "```py\nfrom flask.ext.login import logout_user\n```", "```py\nimport hashlib\nhashlib.sha512('123456').hexdigest()\n\n```", "```py\nimport hashlib\nimport os\nimport base64\n\nclass PasswordHelper:\n\n   def get_hash(self, plain):\n      return hashlib.sha512(plain).hexdigest()\n\n   def get_salt(self):\n      return base64.b64encode(os.urandom(20))\n\n   def validate_password(self, plain, salt, expected):\n      return self.get_hash(plain + salt) == expected\n```", "```py\nMOCK_USERS = [{\"email\": \"test@example.com\", \"salt\": \n \"8Fb23mMNHD5Zb8pr2qWA3PE9bH0=\", \"hashed\":\n  \"1736f83698df3f8153c1fbd6ce2840f8aace4f200771a46672635374073cc876c  \"f0aa6a31f780e576578f791b5555b50df46303f0c3a7f2d21f91aa1429ac22e\"}]\n\nclass MockDBHelper:\n    def get_user(self, email):\n        user = [x for x in MOCK_USERS if x.get(\"email\") == email]\n        if user:\n            return user[0]\n        return None\n\n def add_user(self, email, salt, hashed):\nMOCK_USERS.append({\"email\": email, \"salt\": salt, \"hashed\":hashed})\n```", "```py\nfrom passwordhelper import PasswordHelper\n```", "```py\nPH = PasswordHelper()\n```", "```py\n@app.route(\"/login\", methods=[\"POST\"])\ndef login():\n   email = request.form.get(\"email\")\n   password = request.form.get(\"password\")\n stored_user = DB.get_user(email)\n if stored_user and PH.validate_password(password, stored_user['salt'], stored_user['hashed']):\n      user = User(email)\n      login_user(user, remember=True)\n      return redirect(url_for('account'))\n   return home()\n```", "```py\n@app.route(\"/register\", methods=[\"POST\"])\ndef register():\n   email = request.form.get(\"email\")\n   pw1 = request.form.get(\"password\")\n   pw2 = request.form.get(\"password2\")\n   if not pw1 == pw2:\n      return redirect(url_for('home'))\n   if DB.get_user(email):\n      return redirect(url_for('home'))\n   salt = PH.get_salt()\n   hashed = PH.get_hash(pw1 + salt)\n   DB.add_user(email, salt, hashed)\n   return redirect(url_for('home'))\n```"]