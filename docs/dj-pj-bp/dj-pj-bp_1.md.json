["```py\n> mkdir \u2013p blueblog\n> cd blueblog\n\n```", "```py\n> pyvenv blueblogEnv\n> source blueblogEnv/bin/activate\n> pip install django\n> django-admin.py startproject blueblog src\n\n```", "```py\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n```", "```py\n> cd src\n> python manage.py migrate\n\n```", "```py\n<html>\n<head>\n    <title>BlueBlog</title>\n</head>\n<body>\n    {% block content %}\n    {% endblock %}\n</body>\n</html>\n```", "```py\n> python manage.py startapp accounts\n\n```", "```py\nfrom django.contrib.auth.forms import UserCreationForm\nfrom django.core.urlresolvers import reverse\nfrom django.views.generic import CreateView\n\nclass UserRegistrationView(CreateView):\n    form_class = UserCreationForm\n    template_name = 'user_registration.html'\n\n    def get_success_url(self):\n        return reverse('home')\n```", "```py\n> mkdir accounts/templates\n\n```", "```py\n{% extends \"base.html\" %}\n\n{% block content %}\n<h1>Create New User</h1>\n<form action=\"\" method=\"post\">{% csrf_token %}\n    {{ form.as_p }}\n    <input type=\"submit\" value=\"Create Account\" />\n</form>\n{% endblock %}\n```", "```py\nfrom django.conf.urls import include\nfrom django.conf.urls import url\nfrom django.contrib import admin\nfrom django.views.generic import TemplateView\nfrom accounts.views import UserRegistrationView\n\nurlpatterns = [\n    url(r'^admin/', include(admin.site.urls)),\n    url(r'^$', TemplateView.as_view(template_name='base.html'), name='home'),\n    url(r'^new-user/$', UserRegistrationView.as_view(), name='user_registration'),\n]\n```", "```py\n> python manage.py runser\nver\n\n```", "```py\n> python manage.py createsuperuser\n\n```", "```py\nclass UserRegistrationView(CreateView):\n    form_class = UserCreationForm\n    template_name = 'user_registration.html'\n\n    def get_success_url(self):\n        return reverse('home')\n```", "```py\n{% block header %}\n<ul>\n    <li><a href=\"\">Login</a></li>\n    <li><a href=\"\">Logout</a></li>\n    <li><a href=\"{% url \"user_registration\"%}\">Register Account</a></li>\n</ul>\n{% endblock %}\n```", "```py\nfrom django.contrib.auth.views import login\n```", "```py\nurl(r'^login/$', login, {'template_name': 'login.html'}, name='login'),\n```", "```py\n{% extends \"base.html\" %}\n\n{% block content %}\n<h1>Login</h1>\n<form action=\"{% url \"login\" %}\" method=\"post\">{% csrf_token %}\n    {{ form.as_p }}\n\n    <input type=\"hidden\" name=\"next\" value=\"{{ next }}\" />\n    <input type=\"submit\" value=\"Submit\" />\n</form>\n{% endblock %}\n```", "```py\nLOGIN_REDIRECT_URL = '/'\n```", "```py\nurl(r'^logout/$', logout, {'next_page': '/login/'}, name='logout'),\n```", "```py\n<ul>\n    {% if request.user.is_authenticated %}\n    <li><a href=\"{% url \"logout\" %}\">Logout</a></li>\n    {% else %}\n    <li><a href=\"{% url \"login\" %}\">Login</a></li>\n    <li><a href=\"{% url \"user_registration\"%}\">Register Account</a></li>\n    {% endif %}\n</ul>\n```", "```py\n> python manage.py startapp blog\n> mkdir blog/templates\n\n```", "```py\nfrom django.contrib.auth.models import User\nfrom django.db import models\n\nclass Blog(models.Model):\n    owner = models.ForeignKey(User, editable=False)\n    title = models.CharField(max_length=500)\n\n    slug = models.CharField(max_length=500, editable=False)\n\nclass BlogPost(models.Model):\n    blog = models.ForeignKey(Blog)\n    title = models.CharField(max_length=500)\n    body = models.TextField()\n\n    is_published = models.BooleanField(default=False)\n\n    slug = models.SlugField(max_length=500, editable=False)\n```", "```py\n> python manage.py makemigrations blog\n> python manage.py migrate blog\n\n```", "```py\nfrom django import forms\n\nfrom blog.models import Blog\n\nclass BlogForm(forms.ModelForm):\n    class Meta:\n        model = Blog\n\n        fields = [\n                 'title'\n                 ]\n```", "```py\n{% extends \"base.html\" %}\n\n{% block content %}\n<h1>Blog Settings</h1>\n<form action=\"{% url \"new-blog\" %}\" method=\"post\">{% csrf_token %}\n    {{ form.as_p }}\n\n    <input type=\"submit\" value=\"Submit\" />\n</form>\n{% endblock %}\n```", "```py\nfrom django.core.urlresolvers import reverse\nfrom django.http.response import HttpResponseRedirect\nfrom django.utils.text import slugify\nfrom django.views.generic import CreateView\n\nfrom blog.forms import BlogForm\n\nclass NewBlogView(CreateView):\n    form_class = BlogForm\n    template_name = 'blog_settings.html'\n\n    def form_valid(self, form):\n        blog_obj = form.save(commit=False)\n        blog_obj.owner = self.request.user\n        blog_obj.slug = slugify(blog_obj.title)\n\n        blog_obj.save()\n        return HttpResponseRedirect(reverse('home'))\n```", "```py\nurl(r'^blog/new/$', NewBlogView.as_view(), name='new-blog'),\n```", "```py\n{% block header %}\n<ul>\n    {% if request.user.is_authenticated %}\n    <li><a href=\"{% url \"new-blog\" %}\">Create New Blog</a></li>\n    <li><a href=\"{% url \"logout\" %}\">Logout</a></li>\n    {% else %}\n    <li><a href=\"{% url \"login\" %}\">Login</a></li>\n    <li><a href=\"{% url \"user_registration\"%}\">Register Account</a></li>\n    {% endif %}\n</ul>\n{% endblock %}\n```", "```py\nfrom django.http.response import HttpResponseForbidden\nfrom blog.models import Blog\n```", "```py\ndef dispatch(self, request, *args, **kwargs):\n    user = request.user\n    if Blog.objects.filter(owner=user).exists():\n        return HttpResponseForbidden ('You can not create more than one blogs per account')\n    else:\n        return super(NewBlogView, self).dispatch(request, *args, **kwargs)\n```", "```py\nfrom django.utils.decorators import method_decorator\nfrom django.contrib.auth.decorators import login_required\n```", "```py\n@method_decorator(login_required)\ndef dispatch(self, request, *args, **kwargs):\n```", "```py\nLOGIN_URL = '/login/'\n```", "```py\nclass HomeView(TemplateView):\n    template_name = 'home.html'\n\n    def get_context_data(self, **kwargs):\n        ctx = super(HomeView, self).get_context_data(**kwargs)\n\n        if self.request.user.is_authenticated():\n            ctx['has_blog'] = Blog.objects.filter(owner=self.request.user).exists()\n\n        return ctx\n```", "```py\n{% block header %}\n<ul>\n    {% if request.user.is_authenticated %}\n    {% block logged_in_nav %}{% endblock %}\n    <li><a href=\"{% url \"logout\" %}\">Logout</a></li>\n    {% else %}\n    <li><a href=\"{% url \"login\" %}\">Login</a></li>\n    <li><a href=\"{% url \"user_registration\"%}\">Register Account</a></li>\n    {% endif %}\n</ul>\n{% endblock %}\n```", "```py\n{% extends \"base.html\" %}\n\n{% block logged_in_nav %}\n{% if not has_blog %}\n<li><a href=\"{% url \"new-blog\" %}\">Create New Blog</a></li>\n{% else %}\n<li><a href=\"\">Edit Blog Settings</a></li>\n{% endif %}\n{% endblock %}\n```", "```py\nclass UpdateBlogView(UpdateView):\n    form_class = BlogForm\n    template_name = 'blog_settings.html'\n    success_url = '/'\n    model = Blog\n\n    @method_decorator(login_required)\n    def dispatch(self, request, *args, **kwargs):\n        return super(UpdateBlogView, self).dispatch(request, *args, **kwargs)\n```", "```py\ndef get_context_data(self, **kwargs):\n    ctx = super(HomeView, self).get_context_data(**kwargs)\n\n    if self.request.user.is_authenticated():\n        if Blog.objects.filter(owner=self.request.user).exists():\n            ctx['has_blog'] = True\n            ctx['blog'] = Blog.objects.get(owner=self.request.user)\n    return ctx\n```", "```py\n{% extends \"base.html\" %}\n\n{% block content %}\n<h1>Blog Settings</h1>\n<form action=\"\" method=\"post\">{% csrf_token %}\n    {{ form.as_p }}\n\n    <input type=\"submit\" value=\"Submit\" />\n</form>\n{% endblock %}\n```", "```py\n{% extends \"base.html\" %}\n\n{% block logged_in_nav %}\n{% if not has_blog %}\n<li><a href=\"{% url \"new-blog\" %}\">Create New Blog</a></li>\n{% else %}\n<li><a href=\"{% url \"update-blog\" pk=blog.pk %}\">Edit Blog Settings</a></li>\n{% endif %}\n{% endblock %}\n```", "```py\nurl(r'^blog/(?P<pk>\\d+)/update/$', UpdateBlogView.as_view(), name='update-blog'),\n```", "```py\nclass BlogPostForm(forms.ModelForm):\n    class Meta:\n        model = BlogPost\n\n        fields = [\n                 'title',\n                 'body'\n                 ]\n```", "```py\n{% extends \"base.html\" %}\n\n{% block content %}\n<h1>Create New Blog Post</h1>\n<form action=\"\" method=\"post\">{% csrf_token %}\n    {{ form.as_p }}\n\n    <input type=\"submit\" value=\"Submit\" />\n</form>\n{% endblock %}\n```", "```py\nclass NewBlogPostView(CreateView):\n    form_class = BlogPostForm\n    template_name = 'blog_post.html'\n\n    @method_decorator(login_required)\n    def dispatch(self, request, *args, **kwargs):\n        return super(NewBlogPostView, self).dispatch(request, *args, **kwargs)\n\n    def form_valid(self, form):\n        blog_post_obj = form.save(commit=False)\n        blog_post_obj.blog = Blog.objects.get(owner=self.request.user)\n        blog_post_obj.slug = slugify(blog_post_obj.title)\n        blog_post_obj.is_published = True\n\n        blog_post_obj.save()\n\n        return HttpResponseRedirect(reverse('home'))\n```", "```py\nurl(r'blog/post/new/$', NewBlogPostView.as_view(), name='new-blog-post'),\n```", "```py\n{% extends \"base.html\" %}\n\n{% block logged_in_nav %}\n    {% if not has_blog %}\n    <li><a href=\"{% url \"new-blog\" %}\">Create New Blog</a></li>\n    {% else %}\n    <li><a href=\"{% url \"update-blog\" pk=blog.pk %}\">Edit Blog Settings</a></li>\n    <li><a href=\"{% url \"new-blog-post\" %}\">Create New Blog Post</a></li>\n    {% endif %}\n{% endblock %}\n```", "```py\ndef get_context_data(self, **kwargs):\n    ctx = super(HomeView, self).get_context_data(**kwargs)\n\n    if self.request.user.is_authenticated():\n        if Blog.objects.filter(owner=self.request.user).exists():\n            ctx['has_blog'] = True\n            blog = Blog.objects.get(owner=self.request.user)\n\n            ctx['blog'] = blog\n            ctx['blog_posts'] = BlogPost.objects.filter(blog=blog)\n\n    return ctx\n```", "```py\n{% block content %}\n<h1>Blog Posts</h1>\n<ul>\n    {% for post in blog_posts %}\n    <li>{{ post.title }} | <a href=\"\">Edit Post</a></li>\n    {% endfor %}\n</ul>\n{% endblock %}\n```", "```py\nclass UpdateBlogPostView(UpdateView):\n    form_class = BlogPostForm\n    template_name = 'blog_post.html'\n    success_url = '/'\n    model = BlogPost\n\n    @method_decorator(login_required)\n    def dispatch(self, request, *args, **kwargs):\n        return super(UpdateBlogPostView, self).dispatch(request, *args, **kwargs)\n```", "```py\nurl(r'blog/post/(?P<pk>\\d+)/update/$', UpdateBlogPostView.as_view(), name='update-blog-post'),\n```", "```py\n{% for post in blog_posts %}\n    <li>{{ post.title }} | <a href=\"{% url \"update-blog-post\" pk=post.pk %}\">Edit Post</a></li>\n{% endfor %}\n```", "```py\n<h1>{% if object %}Edit{% else %}Create{% endif %} Blog Post</h1>\n```", "```py\nclass BlogPostDetailsView(DetailView):\n    model = BlogPost\n    template_name = 'blog_post_details.html'\n```", "```py\n{% extends \"base.html\" %}\n\n{% block content %}\n<h1>{{ object.title }}</h1>\n<p>{{ object.body }}</p>\n{% endblock %}\n```", "```py\nurl(r'blog/post/(?P<pk>\\d+)/$', BlogPostDetailsView.as_view(), name='blog-post-details'),\n```", "```py\n{% for post in blog_posts %}\n    <li><a href=\"{% url \"blog-post-details\" pk=post.pk %}\">{{ post.title }}</a> | <a href=\"{% url \"update-blog-post\" pk=post.pk %}\">Edit Post</a></li>\n{% endfor %}\n```", "```py\ndef get_queryset(self):\n    queryset = super(UpdateBlogPostView, self).get_queryset()\n    return queryset.filter(blog__owner=self.request.user)\n```", "```py\nshared_to = models.ManyToManyField(Blog, related_name='shared_posts')\n```", "```py\n> python manage.py makemigrations blog\n> python manage.py migrate blog\n\n```", "```py\nclass ShareBlogPostView(TemplateView):\n    template_name = 'share_blog_post.html'\n\n    @method_decorator(login_required)\n    def dispatch(self, request, *args, **kwargs):\n        return super(ShareBlogPostView, self).dispatch(request, *args, **kwargs)\n\n    def get_context_data(self, pk, **kwargs):\n        blog_post = BlogPost.objects.get(pk=pk)\n        currently_shared_with = blog_post.shared_to.all()\n        currently_shared_with_ids = map(lambda x: x.pk, currently_shared_with)\n        exclude_from_can_share_list = [blog_post.blog.pk] + list(currently_shared_with_ids)\n\n        can_be_shared_with = Blog.objects.exclude(pk__in=exclude_from_can_share_list)\n\n        return {\n            'post': blog_post,\n            'is_shared_with': currently_shared_with,\n            'can_be_shared_with': can_be_shared_with\n        }\n```", "```py\n{% extends \"base.html\" %}\n\n{% block content %}\n{% if can_be_shared_with %}\n<h2>Share {{ post.title }}</h2>\n<ul>\n    {% for blog in can_be_shared_with %}\n    <li><a href=\"{% url \"share-post-with-blog\" post_pk=post.pk blog_pk=blog.pk %}\">{{ blog.title }}</a></li>\n    {% endfor %}\n</ul>\n{% endif %}\n\n{% if is_shared_with %}\n<h2>Stop sharing with:</h2>\n<ul>\n    {% for blog in is_shared_with %}\n    <li><a href=\"{% url \"stop-sharing-post-with-blog\" post_pk=post.pk blog_pk=blog.pk %}\">{{ blog.title }}</a></li>\n    {% endfor %}\n</ul>\n{% endif %}\n{% endblock %}\n```", "```py\nfrom django.views.generic import View\n```", "```py\nclass SharePostWithBlog(View):\n    @method_decorator(login_required)\n    def dispatch(self, request, *args, **kwargs):\n        return super(SharePostWithBlog, self).dispatch(request, *args, **kwargs)\n\n    def get(self, request, post_pk, blog_pk):\n        blog_post = BlogPost.objects.get(pk=post_pk)\n        if blog_post.blog.owner != request.user:\n            return HttpResponseForbidden('You can only share posts that you created')\n\n        blog = Blog.objects.get(pk=blog_pk)\n        blog_post.shared_to.add(blog)\n\n        return HttpResponseRedirect(reverse('home'))\n```", "```py\nurl(r'blog/post/(?P<pk>\\d+)/share/$', SharePostWithBlog.as_view(), name='share-blog-post-with-blog'),\n```", "```py\nclass StopSharingPostWithBlog(View):\n    @method_decorator(login_required)\n    def dispatch(self, request, *args, **kwargs):\n        return super(StopSharingPostWithBlog, self).dispatch(request, *args, **kwargs)\n\n    def get(self, request, post_pk, blog_pk):\n        blog_post = BlogPost.objects.get(pk=post_pk)\n        if blog_post.blog.owner != request.user:\n            return HttpResponseForbidden('You can only stop sharing posts that you created')\n\n        blog = Blog.objects.get(pk=blog_pk)\n        blog_post.shared_to.remove(blog)\n\n        return HttpResponseRedirect(reverse('home'))\n```", "```py\nurl(r'blog/post/(?P<post_pk>\\d+)/share/to/(?P<blog_pk>\\d+)/$', SharePostWithBlog.as_view(), name='share-post-with-blog'),\n    url(r'blog/post/(?P<post_pk>\\d+)/stop/share/to/(?P<blog_pk>\\d+)/$', StopSharingPostWithBlog.as_view(), name='stop-sharing-post-with-blog'),\n```", "```py\n{% if blog_posts %}\n<h2>Blog Posts</h2>\n<ul>\n    {% for post in blog_posts %}\n    <li>\n        <a href=\"{% url \"blog-post-details\" pk=post.pk %}\">{{ post.title }}</a> |\n        <a href=\"{% url \"update-blog-post\" pk=post.pk %}\">Edit Post</a> |\n        <a href=\"{% url \"share-blog-post\" pk=post.pk %}\">Share Post</a>\n    </li>\n    {% endfor %}\n</ul>\n{% endif %}\n```", "```py\ndef get_context_data(self, **kwargs):\n    ctx = super(HomeView, self).get_context_data(**kwargs)\n\n    if self.request.user.is_authenticated():\n            if Blog.objects.filter(owner=self.request.user).exists():\n            ctx['has_blog'] = True\n            blog = Blog.objects.get(owner=self.request.user)\n\n            ctx['blog'] = blog\n            ctx['blog_posts'] = BlogPost.objects.filter(blog=blog)\n            ctx['shared_posts'] = blog.shared_posts.all()\n\n    return ctx\n```", "```py\n{% if shared_posts %}\n<h2>Shared Blog Posts</h2>\n<ul>\n    {% for post in shared_posts %}\n    <li>\n        <a href=\"{% url \"blog-post-details\" pk=post.pk %}\">{{ post.title }}</a>\n    </li>\n    {% endfor %}\n</ul>\n{% endif %}\n{% endblock %}\n```"]