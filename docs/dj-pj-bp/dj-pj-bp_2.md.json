["```py\n> pip install django\n> python manage.py migrate\n\n```", "```py\n> python manage.py runserver\n\n```", "```py\n> python manage.py startapp links\n\n```", "```py\nfrom django.contrib.auth.models import User\nfrom django.db import models\n\nclass Link(models.Model):\n    title = models.CharField(max_length=100)\n    url = models.URLField()\n\n    submitted_by = models.ForeignKey(User)\n    upvotes = models.ManyToManyField(User, related_name='votes')\n\n    submitted_on = models.DateTimeField(auto_now_add=True, editable=False)\n```", "```py\n> python manage.py makemigrations\n> python manage.py migrate\n\n```", "```py\nfrom django.contrib.auth.decorators import login_required\nfrom django.core.urlresolvers import reverse\nfrom django.http.response import HttpResponseRedirect\nfrom django.utils.decorators import method_decorator\nfrom django.views.generic import CreateView\n\nfrom links.models import Link\n\nclass NewSubmissionView(CreateView):\n    model = Link\n    fields = (\n        'title', 'url'\n    )\n\n    template_name = 'new_submission.html'\n\n    @method_decorator(login_required)\n    def dispatch(self, *args, **kwargs):\n        return super(NewSubmissionView, self).dispatch(*args, **kwargs)\n\n    def form_valid(self, form):\n        new_link = form.save(commit=False)\n        new_link.submitted_by = self.request.user\n        new_link.save()\n\n        self.object = new_link\n        return HttpResponseRedirect(self.get_success_url())\n\n    def get_success_url(self):\n        return reverse('home')\n```", "```py\n{% extends \"base.html\" %}\n\n{% block content %}\n    <h1>New Submission</h1>\n    <form action=\"\" method=\"post\">{% csrf_token %}\n        {{ form.as_p }}\n        <input type=\"submit\" value=\"Submit\" />\n    </form>\n{% endblock %}\n```", "```py\nfrom links.views import NewSubmissionView\n```", "```py\nurl(r'^new-submission/$', NewSubmissionView.as_view(), name='new-submission'),\n```", "```py\n<nav>\n    <ul>\n        {% if request.user.is_authenticated %}\n        <li><a href=\"{% url \"new-submission\" %}\">Submit New Link</a></li>\n        <li><a href=\"{% url \"logout\" %}\">Logout</a></li>\n        {% else %}\n        <li><a href=\"{% url \"login\" %}\">Login</a></li>\n        <li><a href=\"{% url \"user-registration\"%}\">Create New Account</a></li>\n        {% endif %}\n    </ul>\n</nav>\n```", "```py\nfrom django.views.generic import DetailView\n\n```", "```py\nclass SubmissionDetailView(DetailView):\n    model = Link\n    template_name = 'submission_detail.html'\n```", "```py\n{% extends \"base.html\" %}\n\n{% block content %}\n    <h1><a href=\"{{ object.url }}\" target=\"_blank\">{{ object.title }}</a></h1>\n    <p>submitted by: <b>{{ object.submitted_by.username }}</b></p>\n    <p>submitted on: <b>{{ object.submitted_on }}</b></p>\n{% endblock %}\n```", "```py\nfrom links.views import SubmissionDetailView\n```", "```py\nurl(r'^submission/(?P<pk>\\d+)/$', SubmissionDetailView.as_view(), name='submission-detail'),\n```", "```py\ndef get_success_url(self):\n    return reverse('submission-detail', kwargs={'pk': self.object.pk})\n```", "```py\nComment 1\n    Comment 2\n        Comment 3\n            Comment 4\n                Comment 5\n                    Comment 6\n                        Comment 7\n                            Comment 8\n                                Comment 9\n                                    Comment 10\n```", "```py\nclass Comment(models.Model):\n    body = models.TextField()\n\n    commented_on = models.ForeignKey(Link)\n    in_reply_to = models.ForeignKey('self', null=True)\n\n    commented_by = models.ForeignKey(User)\n    created_on = models.DateTimeField(auto_now_add=True, editable=False)\n```", "```py\n> python manage.py makemigrations\n> python manage.py migrate\n\n```", "```py\nfrom django import forms\n\nfrom links.models import Comment\n\nclass CommentModelForm(forms.ModelForm):\n    link_pk = forms.IntegerField(widget=forms.HiddenInput)\n\n    class Meta:\n        model = Comment\n        fields = ('body',)\n```", "```py\nfrom links.forms import CommentModelForm\n```", "```py\nfrom links.models import Comment\n```", "```py\ndef get_context_data(self, **kwargs):\n    ctx = super(SubmissionDetailView, self).get_context_data(**kwargs)\n\n    submission_comments = Comment.objects.filter(commented_on=self.object)\n    ctx['comments'] = submission_comments\n\n    ctx['comment_form'] = CommentModelForm(initial={'link_pk': self.object.pk})\n\n    return ctx\n```", "```py\nclass NewCommentView(CreateView):\n    form_class = CommentModelForm\n    http_method_names = ('post',)\n    template_name = 'comment.html'\n\n    @method_decorator(login_required)\n    def dispatch(self, *args, **kwargs):\n        return super(NewCommentView, self).dispatch(*args, **kwargs)\n\n    def form_valid(self, form):\n        parent_link = Link.objects.get(pk=form.cleaned_data['link_pk'])\n\n        new_comment = form.save(commit=False)\n        new_comment.commented_on = parent_link\n        new_comment.commented_by = self.request.user\n\n        new_comment.save()\n\n        return HttpResponseRedirect(reverse('submission-detail', kwargs={'pk': parent_link.pk}))\n\n    def get_initial(self):\n        initial_data = super(NewCommentView, self).get_initial()\n        initial_data['link_pk'] = self.request.GET['link_pk']\n\n    def get_context_data(self, **kwargs):\n        ctx = super(NewCommentView, self).get_context_data(**kwargs)\n        ctx['submission'] = Link.objects.get(pk=self.request.GET['link_pk'])\n\n        return ctx\n```", "```py\n{% extends \"base.html\" %}\n\n{% block content %}\n    <h1>New Comment</h1>\n    <p>\n        <b>You are commenting on</b>\n        <a href{% url 'submission-detail' pk=submission.pk %}\">{{ submission.title }}</a>\n    </p>\n\n    <form action=\"\" method=\"post\">{% csrf_token %}\n        {{ form.as_p }}\n        <input type=\"submit\" value=\"Post Comment\" />\n    </form>\n{% endblock %}\n```", "```py\nfrom links.views import NewCommentView\n```", "```py\nurl(r'new-comment/$', NewCommentView.as_view(), name='new-comment'),\n```", "```py\n{% extends \"base.html\" %}\n\n{% block content %}\n    <h1><a href=\"{{ object.url }}\" target=\"_blank\">{{ object.title }}</a></h1>\n    <p>submitted by: <b>{{ object.submitted_by.username }}</b></p>\n    <p>submitted on: <b>{{ object.submitted_on }}</b></p>\n\n    <p>\n        <b>New Comment</b>\n        <form action=\"{% url \"new-comment\" %}?link_pk={{ object.pk }}\" method=\"post\">{% csrf_token %}\n            {{ comment_form.as_p }}\n            <input type=\"submit\" value=\"Comment\" />\n        </form>\n    </p>\n\n    <p>\n        <b>Comments</b>\n        <ul>\n            {% for comment in comments %}\n            <li>{{ comment.body }}</li>\n            {% endfor %}\n        </ul>\n    </p>\n{% endblock %}\n```", "```py\nparent_comment_pk = forms.IntegerField(widget=forms.HiddenInput, required=False)\n```", "```py\nclass NewCommentReplyView(CreateView):\n    form_class = CommentModelForm\n    template_name = 'comment_reply.html'\n\n    @method_decorator(login_required)\n    def dispatch(self, *args, **kwargs):\n        return super(NewCommentReplyView, self).dispatch(*args, **kwargs)\n\n    def get_context_data(self, **kwargs):\n        ctx = super(NewCommentReplyView, self).get_context_data(**kwargs)\n        ctx['parent_comment'] = Comment.objects.get(pk=self.request.GET['parent_comment_pk'])\n\n        return ctx\n\n    def get_initial(self):\n        initial_data = super(NewCommentReplyView, self).get_initial()\n\n        link_pk = self.request.GET['link_pk']\n        initial_data['link_pk'] = link_pk\n\n        parent_comment_pk = self.request.GET['parent_comment_pk']\n        initial_data['parent_comment_pk'] = parent_comment_pk\n\n        return initial_data\n\n    def form_valid(self, form):\n        parent_link = Link.objects.get(pk=form.cleaned_data['link_pk'])\n        parent_comment = Comment.objects.get(pk=form.cleaned_data['parent_comment_pk'])\n\n        new_comment = form.save(commit=False)\n        new_comment.commented_on = parent_link\n        new_comment.in_reply_to = parent_comment\n        new_comment.commented_by = self.request.user\n\n        new_comment.save()\n\n        return HttpResponseRedirect(reverse('submission-detail', kwargs={'pk': parent_link.pk}))\n```", "```py\nform = SomeForm()\n```", "```py\nform = SomeForm({'name': 'Jibran', 'city': 'Dubai'})\n```", "```py\nform = SomeForm(initial={'name': 'Jibran'})\n```", "```py\n{% extends \"base.html\" %}\n\n{% block content %}\n    <h1>Reply to comment</h1>\n    <p>\n        <b>You are replying to:</b>\n        <i>{{ parent_comment.body }}</i>\n    </p>\n\n    <form action=\"\" method=\"post\">{% csrf_token %}\n        {{ form.as_p }}\n        <input type=\"submit\" value=\"Submit Reply\" />\n    </form>\n{% endblock %}\n```", "```py\nfrom links.views import NewCommentReplyView\n```", "```py\nurl(r'new-comment-reply/$', NewCommentReplyView.as_view(), name='new-comment-reply'),\n```", "```py\n<li>{{ comment.body }}</li>\n```", "```py\n<li>{{ comment.body }} (<a href=\"{% url \"new-comment-reply\" %}?link_pk={{ object.pk }}&parent_comment_pk={{ comment.pk }}\">Reply</a>)</li>\n```", "```py\nsubmission_comments = Comment.objects.filter(commented_on=self.object)\n```", "```py\nsubmission_comments = Comment.objects.filter(commented_on=self.object, in_reply_to__isnull=True)\n```", "```py\n<p>\n    <b>Comments</b>\n    <ul>\n        {% for comment in comments %}\n        <li>\n            {{ comment.body }} (<a href=\"{% url \"new-comment-reply\" %}?link_pk={{ object.pk }}&parent_comment_pk={{ comment.pk }}\">Reply</a>)\n            {% if comment.comment_set.exists %}\n            <ul>\n                {% for reply in comment.comment_set.all %}\n                <li>{{ reply.body }}</li>\n                {% endfor %}\n            </ul>\n            {% endif %}\n        </li>\n        {% endfor %}\n    </ul>\n</p>\n```", "```py\nclass HomeView(TemplateView):\n    template_name = 'home.html'\n\n    def get_context_data(self, **kwargs):\n        ctx = super(HomeView, self).get_context_data(**kwargs)\n        ctx['submissions'] = Link.objects.all()\n\n        return ctx\n```", "```py\n{% extends \"base.html\" %}\n\n{% block content %}\n    <h1>Welcome to Discuss</h1>\n    <h2>Submissions</h2>\n    <ul>\n        {% for submission in submissions %}\n        <li>\n            <a href=\"{{ submission.url }}\" target=\"_blank\">{{ submission.title }}</a>\n            <i><a href=\"{% url \"submission-detail\" pk=submission.pk %}\">Comments</a></i>\n        </li>\n        {% endfor %}\n    </ul>\n{% endblock %}\n```", "```py\nurl(r'^$', TemplateView.as_view(template_name='home.html'), name='home'),\n```", "```py\nurl(r'^$', HomeView.as_view(), name='home'),\n```", "```py\n<li><a href=\"{% url \"home\" %}\">Home</a></li>\n```", "```py\nclass UpvoteSubmissionView(View):\n    def get(self, request, link_pk, **kwargs):\n        link = Link.objects.get(pk=link_pk)\n        link.upvotes.add(request.user)\n\n        return HttpResponseRedirect(reverse('home'))\n```", "```py\nurl(r'^upvote/(?P<link_pk>\\d+)/$', UpvoteSubmissionView.as_view(), name='upvote-submission'),\n```", "```py\n<a href=\"{% url \"upvote-submission\" link_pk=submission.pk %}\">Upvote</a>\n```", "```py\n{% if request.user in submission.upvotes.all %}\n  Upvoted\n{% else %}\n  <a href=\"{% url \"upvote-submission\" link_pk=submission.pk %}\">Upvote</a>\n{% endif %}\n```", "```py\nclass RemoveUpvoteFromSubmissionView(View):\n    def get(self, request, link_pk, **kwargs):\n        link = Link.objects.get(pk=link_pk)\n        link.upvotes.remove(request.user)\n\n        return HttpResponseRedirect(reverse('home'))\n```", "```py\nurl(r'^upvote/(?P<link_pk>\\d+)/remove/$', RemoveUpvoteFromSubmissionView.as_view(), name='remove-upvote'),\n```", "```py\n{% if request.user in submission.upvotes.all %}\n  Upvoted\n{% else %}\n```", "```py\n{% if request.user in submission.upvotes.all %}\n  <a href=\"{% url \"remove-upvote\" link_pk=submission.pk %}\">Remove Upvote</a>\n      {% else %}\n```", "```py\nrank = number of votes + number of comments \u2013 number of days since submission\n```", "```py\nclass HomeView(TemplateView):\n    template_name = 'home.html'\n\n    def get_context_data(self, **kwargs):\n        ctx = super(HomeView, self).get_context_data(**kwargs)\n\n        now = timezone.now()\n        submissions = Link.objects.all()\n        for submission in submissions:\n            num_votes = submission.upvotes.count()\n            num_comments = submission.comment_set.count()\n\n            date_diff = now - submission.submitted_on\n            number_of_days_since_submission = date_diff.days\n\n            submission.rank = num_votes + num_comments - number_of_days_since_submission\n\n        sorted_submissions = sorted(submissions, key=lambda x: x.rank, reverse=True)\n        ctx['submissions'] = sorted_submissions\n\n        return ctx\n```", "```py\nfrom django.utils import timezone\n```", "```py\n> pip install django-recaptcha\n\n```", "```py\nNOCAPTCHA = True\n```", "```py\nfrom captcha.fields import ReCaptchaField\n```", "```py\ncaptcha = ReCaptchaField()\n```"]