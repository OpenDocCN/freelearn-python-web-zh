["```py\n> django-admin.py startproject formmason\n\n```", "```py\n> python manage.py startapp main\n\n```", "```py\nfrom django import forms\n\nclass SampleForm(forms.Form):\n    name = forms.CharField()\n    age = forms.IntegerField()\n    address = forms.CharField(required=False)\n    gender = forms.ChoiceField(choices=(('M', 'Male'), ('F', 'Female')))\n```", "```py\n> python manage.py shell\n\n```", "```py\n> from main.forms import SampleForm\n```", "```py\n> form = SampleForm()\n> form.fields\nOrderedDict([('name', <django.forms.fields.CharField at 0x10fc79510>),\n             ('age', <django.forms.fields.IntegerField at 0x10fc79490>),\n             ('address', <django.forms.fields.CharField at 0x10fc79090>),\n             ('gender', <django.forms.fields.ChoiceField at 0x10fc792d0>)])\n```", "```py\n> form.name\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\n<ipython-input-16-1174e5d9164a> in <module>()\n----> 1 form.name\n\nAttributeError: 'SampleForm' object has no attribute 'name'\n```", "```py\n> from main.forms import SampleForm\n> test_data = {'name': 'Jibran', 'age': 27, 'gender': 'M'}\n> form = SampleForm(test_data)\n> from django import forms\n> form.fields['country'] = forms.CharField()\n> form.is_valid()\nFalse\n> form.errors\n{'country': [u'This field is required.']}\n```", "```py\n{\n    \"name\": \"Jibran\",\n    \"age\": 27,\n    \"country\": \"Pakistan\"\n}\n```", "```py\n{\n    \"name\": \"string\",\n    \"age\": \"number\",\n    \"city\": \"string\",\n    \"country\": \"string\",\n    \"time_lived_in_current_city\": \"string\"\n}\n```", "```py\nimport json\n\nfrom django import forms\nfrom django.views.generic import FormView\n\nclass CustomFormView(FormView):\n    template_name = \"custom_form.html\"\n\n    def get_form(self):\n        form_structure_json = \"\"\"{\n\"name\": \"string\",\n\"age\": \"number\",\n\"city\": \"string\",\n\"country\": \"string\",\n\"time_lived_in_current_city\": \"string\"\n}\"\"\"\n        form_structure = json.loads(form_structure_json)\n\n        custom_form = forms.Form(**self.get_form_kwargs())\n        for key, value in form_structure.items():\n            field_class = self.get_field_class_from_type(value)\n            if field_class is not None:\n                custom_form.fields[key] = field_class()\n            else:\n                raise TypeError(\"Invalid field type {}\".format(value))\n\n        return custom_form\n\n    def get_field_class_from_type(self, value_type):\n        if value_type == \"string\":\n            return forms.CharField\n        elif value_type == \"number\":\n            return forms.IntegerField\n        else:\n            return None\n```", "```py\n<html>\n<head>\n    <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\n\n    <title>Custom Form Demo</title>\n</head>\n\n<body>\n    <h1>Custom Form</h1>\n    <form action=\"\" method=\"post\">{% csrf_token %}\n        {{ form.as_p }}\n        <input type=\"submit\" value=\"Submit\" />\n    </form>\n</body>\n</html>\n```", "```py\nfrom django.conf.urls import url\n\nfrom main.views import CustomFormView\n\nurlpatterns = [\n    url(r'^$', CustomFormView.as_view(), name='custom-form'),\n]\n```", "```py\n[('name', 'string'), ('age', 'number'), ('city', 'string'), ('country', 'string'), ('time_lived_in_city', 'string')]\n```", "```py\n> pip install jsonfield\n\n```", "```py\nfrom __future__ import unicode_literals\n\nfrom django.db import models\n\nfrom jsonfield import JSONField\n\nclass FormSchema(models.Model):\n    title = models.CharField(max_length=100)\n    schema = JSONField()\n```", "```py\n> python manage.py makemigrations main\nMigrations for 'main':\n  0001_initial.py:\n    - Create model FormSchema\n> python manage.py migrate\nOperations to perform:\n  Apply all migrations: sessions, contenttypes, admin, main, auth\nRunning migrations:\n  Rendering model states... DONE\n  Applying contenttypes.0001_initial... OK\n  Applying auth.0001_initial... OK\n  Applying admin.0001_initial... OK\n  Applying admin.0002_logentry_remove_auto_add... OK\n  Applying contenttypes.0002_remove_content_type_name... OK\n  Applying auth.0002_alter_permission_name_max_length... OK\n  Applying auth.0003_alter_user_email_max_length... OK\n  Applying auth.0004_alter_user_username_opts... OK\n  Applying auth.0005_alter_user_last_login_null... OK\n  Applying auth.0006_require_contenttypes_0002... OK\n  Applying auth.0007_alter_validators_add_error_messages... OK\n  Applying sessions.0001_initial... OK\n```", "```py\n> python manage.py shell\n```", "```py\n> from main.models import FormSchema\n> fs = FormSchema()\n> fs.title = 'My First Form'\n> fs.schema = {'name': 'string', 'age': 'number', 'city': 'string', 'country': 'string', 'time_lived_in_current_city': 'string'}\n> fs.save()\n> FormSchema.objects.get(pk=1).schema\n{u'age': u'number',\n u'city': u'string',\n u'country': u'string',\n u'name': u'string',\n u'time_lived_in_current_city': u'string'}\n```", "```py\nfrom main.models import FormSchema\n```", "```py\ndef get_form(self):\n    form_structure = FormSchema.objects.get(pk=1).schema\n\n    custom_form = forms.Form(**self.get_form_kwargs())\n    for key, value in form_structure.items():\n        field_class = self.get_field_class_from_type(value)\n        if field_class is not None:\n            custom_form.fields[key] = field_class()\n        else:\n            raise TypeError(\"Invalid field type {}\".format(value))\n\n    return custom_form\n```", "```py\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            os.path.join(BASE_DIR, 'templates'),\n        ],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n```", "```py\n<html>\n<head>\n    <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\n\n    <title>Form Mason</title>\n</head>\n\n<body>\n    <a href=\"{% url 'home' %}\">Home</a>\n    {% block content %}\n    {% endblock %}\n</body>\n</html>\n```", "```py\n{% extends \"base.html\" %}\n\n{% block content %}\n    <h1>Custom Form</h1>\n    <form action=\"\" method=\"post\">{% csrf_token %}\n        {{ form.as_p }}\n        <input type=\"submit\" value=\"Submit\" />\n    </form>\n{% endblock %}\n```", "```py\nfrom django import forms\nfrom django.views.generic import FormView\nfrom django.views.generic import ListView\n\nfrom main.models import FormSchema\n\nclass HomePageView(ListView):\n    model = FormSchema\n    template_name = \"home.html\"\n\nclass CustomFormView(FormView):\n    template_name = \"custom_form.html\"\n\n    def get_form(self):\n        form_structure = FormSchema.objects.get(pk=self.kwargs[\"form_pk\"]).schema\n\n        custom_form = forms.Form(**self.get_form_kwargs())\n        for key, value in form_structure.items():\n            field_class = self.get_field_class_from_type(value)\n            if field_class is not None:\n                custom_form.fields[key] = field_class()\n            else:\n                raise TypeError(\"Invalid field type {}\".format(value))\n\n        return custom_form\n\n    def get_field_class_from_type(self, value_type):\n        if value_type == \"string\":\n            return forms.CharField\n        elif value_type == \"number\":\n            return forms.IntegerField\n        else:\n            return None\n```", "```py\n{% extends \"base.html\" %}\n\n{% block content %}\n    <h1>Available Forms</h1>\n    {% if object_list %}\n    <ul>\n        {% for form in object_list %}\n        <li><a href=\"{% url 'custom-form' form_pk=form.pk %}\">{{ form.title }}</a></li>\n        {% endfor %}\n    </ul>\n    {% endif %}\n{% endblock %}\n```", "```py\nfrom django.conf.urls import url\n\nfrom main.views import CustomFormView\nfrom main.views import HomePageView\n\nurlpatterns = [\n    url(r'^$', HomePageView.as_view(), name='home'),\n    url(r'^form/(?P<form_pk>\\d+)/$', CustomFormView.as_view(), name='custom-form'),\n]\n```", "```py\nform_structure = FormSchema.objects.get(pk=self.kwargs[\"form_pk\"]).schema\n```", "```py\nurl(r'^form/(?P<form_pk>\\d+)/$', CustomFormView.as_view(), name='custom-form')\n```", "```py\nclass FormResponse(models.Model):\n    form = models.ForeignKey(FormSchema)\n    response = JSONField()\n```", "```py\n> python manage.py makemigrations main\nMigrations for 'main':\n  0002_formresponse.py:\n    - Create model FormResponse\n> python manage.py migrate main\nOperations to perform:\n  Apply all migrations: main\nRunning migrations:\n  Rendering model states... DONE\n  Applying main.0002_formresponse... OK\n```", "```py\nfrom django.core.urlresolvers import reverse\nfrom django.http.response import HttpResponseRedirect\n\nfrom main.models import FormResponse\n```", "```py\ndef form_valid(self, form):\n    custom_form = FormSchema.objects.get(pk=self.kwargs[\"form_pk\"])\n    user_response = form.cleaned_data\n\n    form_response = FormResponse(form=custom_form, response=user_response)\n    form_response.save()\n\n    return HttpResponseRedirect(reverse('home'))\n```", "```py\n> python manage.py shell\n\n```", "```py\n> from main.models import FormResponse\n> FormResponse.objects.all()[0].response\n{u'age': 27,\n u'city': u'Dubai',\n u'country': u'UAE',\n u'name': u'Jibran',\n u'time_lived_in_current_city': u'3 years'}\n\n```", "```py\nclass FormResponsesListView(ListView):\n    template_name = \"form_responses.html\"\n\n    def get_context_data(self, **kwargs):\n        ctx = super(FormResponsesListView, self).get_context_data(**kwargs)\n        ctx[\"form\"] = self.get_form()\n\n        return ctx\n\n    def get_queryset(self):\n        form = self.get_form()\n        return FormResponse.objects.filter(form=form)\n\n    def get_form(self):\n        return FormSchema.objects.get(pk=self.kwargs[\"form_pk\"])\n```", "```py\n{% extends \"base.html\" %}\n\n{% block content %}\n<h1>Responses for {{ form.title }}</h1>\n{% if object_list %}\n<ul>\n    {% for response in object_list %}\n    <li>{{ response.response }}</li>\n    {% endfor %}\n</ul>\n{% endif %}\n{% endblock %}\n```", "```py\nfrom main.views import FormResponsesListView\n```", "```py\nurl(r'^form/(?P<form_pk>\\d+)/responses/$', FormResponsesListView.as_view(), name='form-responses'),\n```", "```py\n{% extends \"base.html\" %}\n\n{% block content %}\n    <h1>Available Forms</h1>\n    {% if object_list %}\n    <ul>\n        {% for form in object_list %}\n        <li>\n            <a href=\"{% url 'custom-form' form_pk=form.pk %}\">{{ form.title }}</a><br />\n <a href=\"{% url 'form-responses' form_pk=form.pk %}\">See Responses</a>\n        </li>\n        {% endfor %}\n    </ul>\n    {% endif %}\n{% endblock %}\n```", "```py\nfrom django.views.generic import TemplateView\n```", "```py\nclass FormResponsesListView(TemplateView):\n    template_name = \"form_responses.html\"\n\n    def get_context_data(self, **kwargs):\n        ctx = super(FormResponsesListView, self).get_context_data(**kwargs)\n\n        form = self.get_form()\n        schema = form.schema\n        form_fields = schema.keys()\n        ctx[\"headers\"] = form_fields\n        ctx[\"form\"] = form\n\n        responses = self.get_queryset()\n        responses_list = list()\n        for response in responses:\n            response_values = list()\n            response_data = response.response\n\n            for field_name in form_fields:\n                if field_name in response_data:\n                    response_values.append(response_data[field_name])\n                else:\n                    response_values.append('')\n            responses_list.append(response_values)\n\n        ctx[\"object_list\"] = responses_list\n\n        return ctx\n\n    def get_queryset(self):\n        form = self.get_form()\n        return FormResponse.objects.filter(form=form)\n\n    def get_form(self):\n        return FormSchema.objects.get(pk=self.kwargs[\"form_pk\"])\n```", "```py\n{% extends \"base.html\" %}\n\n{% block content %}\n<h1>Responses for {{ form.title }}</h1>\n{% if object_list %}\n<table border=\"1px\">\n    <tr>\n        {% for field_name in headers %}\n        <th>{{ field_name }}</th>\n        {% endfor %}\n    </tr>\n    {% for response in object_list %}\n    <tr>\n        {% for field_value in response %}\n        <td>{{ field_value }}</td>\n        {% endfor %}\n    </tr>\n    {% endfor %}\n</table>\n{% endif %}\n{% endblock %}\n```", "```py\nimport json\n\nfrom django import forms\n\nclass NewDynamicFormForm(forms.Form):\n    form_pk = forms.CharField(widget=forms.HiddenInput(), required=False)\n    title = forms.CharField()\n    schema = forms.CharField(widget=forms.Textarea())\n\n    def clean_schema(self):\n        schema = self.cleaned_data[\"schema\"]\n        try:\n            schema = json.loads(schema)\n        except:\n            raise forms.ValidationError(\"Invalid JSON. Please submit valid JSON for the schema\")\n\n        return schema\n```", "```py\nimport json\nfrom main.forms import NewDynamicFormForm\n```", "```py\nclass CreateEditFormView(FormView):\n    form_class = NewDynamicFormForm\n    template_name = \"create_edit_form.html\"\n\n    def get_initial(self):\n        if \"form_pk\" in self.kwargs:\n            form = FormSchema.objects.get(pk=self.kwargs[\"form_pk\"])\n            initial = {\n                \"form_pk\": form.pk,\n                \"title\": form.title,\n                \"schema\": json.dumps(form.schema)\n            }\n        else:\n            initial = {}\n\n        return initial\n\n    def get_context_data(self, **kwargs):\n        ctx = super(CreateEditFormView, self).get_context_data(**kwargs)\n        if \"form_pk\" in self.kwargs:\n            ctx[\"form_pk\"] = self.kwargs[\"form_pk\"]\n\n        return ctx\n\n    def form_valid(self, form):\n        cleaned_data = form.cleaned_data\n\n        if cleaned_data.get(\"form_pk\"):\n            old_form = FormSchema.objects.get(pk=cleaned_data[\"form_pk\"])\n            old_form.title = cleaned_data[\"title\"]\n            old_form.schema = cleaned_data[\"schema\"]\n            old_form.save()\n        else:\n            new_form = FormSchema(title=cleaned_data[\"title\"], schema=cleaned_data[\"schema\"])\n            new_form.save()\n\n        return HttpResponseRedirect(reverse(\"home\"))\n```", "```py\n{% extends \"base.html\" %}\n\n{% block content %}\n<h1>Create/Edit Form</h1>\n\n{% if form_pk %}\n<form action=\"{% url 'edit-form' form_pk=form_pk%}\" method=\"post\">{% csrf_token %}\n{% else %}\n<form action=\"{% url 'create-form' %}\" method=\"post\">{% csrf_token %}\n{% endif %}\n\n{{ form.as_p }}\n<input type=\"submit\" value=\"Create Form\" />\n</form>\n{% endblock %}\n```", "```py\nfrom django.conf.urls import url\n\nfrom main.views import CreateEditFormView\nfrom main.views import CustomFormView\nfrom main.views import FormResponsesListView\nfrom main.views import HomePageView\n\nurlpatterns = [\n    url(r'^$', HomePageView.as_view(), name='home'),\n    url(r'^form/(?P<form_pk>\\d+)/$', CustomFormView.as_view(), name='custom-form'),\n    url(r'^form/(?P<form_pk>\\d+)/responses/$', FormResponsesListView.as_view(), name='form-responses'),\n\n    url(r'form/new/$', CreateEditFormView.as_view(), name='create-form'),\n    url(r'form/(?P<form_pk>\\d+)/edit/$', CreateEditFormView.as_view(), name='edit-form'),\n]\n```", "```py\n<a href=\"{% url 'create-form' %}\">Create New Form</a>\n```", "```py\n<br /><a href=\"{% url 'edit-form' form_pk=form.pk %}\">Edit Form</a>\n```", "```py\n{\"years_of_experience\": \"number\", \"occupation\": \"string\"}\n```", "```py\n<h1>{{ form_schema.title }}</h1>\n```", "```py\ndef get_context_data(self, **kwargs):\n    ctx = super(CustomFormView, self).get_context_data(**kwargs)\n\n    form_schema = FormSchema.objects.get(pk=self.kwargs[\"form_pk\"])\n    ctx[\"form_schema\"] = form_schema\n\n    return ctx\n```", "```py\n{% extends \"base.html\" %}\n\n{% block content %}\n{% if form_pk %}\n    <h1>Edit Form</h1>\n{% else %}\n    <h1>Create Form</h1>\n{% endif %}\n\n{% if form_pk %}\n<form action=\"{% url 'edit-form' form_pk=form_pk%}\" method=\"post\">{% csrf_token %}\n{% else %}\n<form action=\"{% url 'create-form' %}\" method=\"post\">{% csrf_token %}\n{% endif %}\n    {{ form.as_p }}\n    {% if form_pk %}\n        <input type=\"submit\" value=\"Save Form\" />\n    {% else %}\n        <input type=\"submit\" value=\"Create Form\" />\n    {% endif %}\n</form>\n{% endblock %}\n```", "```py\nfor field_name in form_fields:\n    if field_name in response_data:\n        response_values.append(response_data[field_name])\n    else:\n        response_values.append('')\nresponses_list.append(response_values)\n```", "```py\nfor field_name in form_fields:\n    if field_name in response_data:\n        response_values.append(response_data[field_name])\n    else:\n        response_values.append('')\nif any(response_values):\n responses_list.append(response_values)\n\n```"]