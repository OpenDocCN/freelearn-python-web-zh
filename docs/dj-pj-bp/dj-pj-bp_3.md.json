["```py\n> pip install django\n> python manage.py migrate\n\n```", "```py\n> python manage.py startapp data_collector\n\n```", "```py\nclass DataPoint(models.Model):\n    node_name = models.CharField(max_length=250)\n    datetime = models.DateTimeField(auto_now_add=True)\n\n    data_type = models.CharField(max_length=100)\n    data_value = models.FloatField()\n```", "```py\n> python manage.py makemigrations data_collector\n> python manage.py migrate\n\n```", "```py\n> python\n\n```", "```py\n>>> from data_collector.models import DataPoint\n\n```", "```py\ndjango.core.exceptions.ImproperlyConfigured: Requested setting DEFAULT_INDEX_TABLESPACE, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.\n```", "```py\n> mkdir -p data_collector/management/commands\n> touch data_collector/management/__init__.py\n> touch data_collector/management/commands/__init__.py\n\n```", "```py\nfrom django.core.management import BaseCommand\n\nfrom data_collector.models import DataPoint\n\nclass Command(BaseCommand):\n    def handle(self, *args, **options):\n        print('All data points:')\n        print(DataPoint.objects.all())\n```", "```py\n> python manage.py sample_data\n\n```", "```py\nAll data points:\n[]\n```", "```py\nclass Command(BaseCommand):\n    def add_arguments(self, parser):\n        parser.add_argument('node_name', type=str)\n        parser.add_argument('data_type', type=str)\n        parser.add_argument('data_value', type=float)\n\n    def handle(self, *args, **options):\n        node_name = options['node_name']\n        data_type = options['data_type']\n        data_value = options['data_value']\n\n        new_data_point = DataPoint(node_name=node_name, data_type=data_type, data_value=data_value)\n        new_data_point.save()\n\n        print('All data points:')\n        print(DataPoint.objects.all())\n```", "```py\n> python manage.py startapp APP_NAME\n\n```", "```py\n> python manage.py sample_data\nusage: manage.py sample_data [-h] [--version] [-v {0,1,2,3}]\n                             [--settings SETTINGS] [--pythonpath PYTHONPATH]\n                             [--traceback] [--no-color]\n                             node_name data_type data_value\nmanage.py sample_data: error: the following arguments are required: node_name, data_type, data_value\n```", "```py\n> python manage.py sample_data web01 load 5\nAll data points:\n[<DataPoint: DataPoint object>]\n```", "```py\ndef __str__(self):\n    return 'DataPoint for {}. {} = {}'.format(self.node_name, self.data_type, self.data_value)\n```", "```py\n> python manage.py sample_data web01 load 1.0\nAll data points:\n[<DataPoint: DataPoint for web01\\. load = 5.0>, <DataPoint: DataPoint for web01\\. load = 1.0]\n```", "```py\n> python manage.py shell\n\n```", "```py\n>>> from data_collector.models import DataPoint\n\n```", "```py\n>>\n> DataPoint.objects.all()\n[<DataPoint: DataPoint for web01\\. load = 5.0>, <DataPoint: DataPoint for web01\\. load = 1.0>, <DataPoint: DataPoint for web01\\. load = 1.5>, <DataPoint: DataPoint for web02\\. load = 7.0>, <DataPoint: DataPoint for web02\\. load = 9.0>, <DataPoint: DataPoint for dbmaster. disk_usage = 0.8>, <DataPoint: DataPoint for dbmaster. disk_usage = 0.95>, <DataPoint: DataPoint for web01\\. disk_usage = 0.5>, <DataPoint: DataPoint for web02\\. disk_usage = 0.85>]\n\n```", "```py\n>>> DataPoint.objects.all().distinct()\n[<DataPoint: DataPoint for web01\\. load = 5.0>, <DataPoint: DataPoint for web01\\. load = 1.0>, <DataPoint: DataPoint for web01\\. load = 1.5>, <DataPoint: DataPoint for web02\\. load = 7.0>, <DataPoint: DataPoint for web02\\. load = 9.0>, <DataPoint: DataPoint for dbmaster. disk_usage = 0.8>, <DataPoint: DataPoint for dbmaster. disk_usage = 0.95>, <DataPoint: DataPoint for web01\\. disk_usage = 0.5>, <DataPoint: DataPoint for web02\\. disk_usage = 0.85>]\n\n```", "```py\n>>> DataPoint.objects.all().values('node_name', 'data_type')\n[{'data_type': u'load', 'node_name': u'web01'}, {'data_type': u'load', 'node_name': u'web01'}, {'data_type': u'load', 'node_name': u'web01'}, {'data_type': u'load', 'node_name': u'web02'}, {'data_type': u'load', 'node_name': u'web02'}, {'data_type': u'disk_usage', 'node_name': u'dbmaster'}, {'data_type': u'disk_usage', 'node_name': u'dbmaster'}, {'data_type': u'disk_usage', 'node_name': u'web01'}, {'data_type': u'disk_usage', 'node_name': u'web02'}]\n\n```", "```py\n>>> DataPoint.objects.all().values('node_name', 'data_type').distinct()\n[{'data_type': u'load', 'node_name': u'web01'}, {'data_type': u'load', 'node_name': u'web02'}, {'data_type': u'disk_usage', 'node_name': u'dbmaster'}, {'data_type': u'disk_usage', 'node_name': u'web01'}, {'data_type': u'disk_usage', 'node_name': u'web02'}]\n\n```", "```py\nfrom django.views.generic import TemplateView\n\nfrom data_collector.models import DataPoint\n\nclass StatusView(TemplateView):\n    template_name = 'status.html'\n\n    def get_context_data(self, **kwargs):\n        ctx = super(StatusView, self).get_context_data(**kwargs)\n\n        nodes_and_data_types = DataPoint.objects.all().values('node_name', 'data_type').distinct()\n\n        status_data_dict = dict()\n        for node_and_data_type_pair in nodes_and_data_types:\n            node_name = node_and_data_type_pair['node_name']\n            data_type = node_and_data_type_pair['data_type']\n\n            data_point_map = status_data_dict.setdefault(node_name, dict())\n            data_point_map[data_type] = DataPoint.objects.filter(\n                node_name=node_name, data_type=data_type\n            ).latest('datetime')\n\n        ctx['status_data_dict'] = status_data_dict\n\n        return ctx\n```", "```py\n[{'data_type': u'load', 'node_name': u'web01'}, {'data_type': u'load', 'node_name': u'web02'}, {'data_type': u'disk_usage', 'node_name': u'dbmaster'}, {\n'data_type': u'disk_usage', 'node_name': u'web01'}, {'data_type': u'disk_usage', 'node_name': u'web02'}]\n```", "```py\n3 x 2 x 24 x 60 = 8640\n\n```", "```py\n{% extends \"base.html\" %}\n\n{% load humanize %}\n\n{% block content %}\n<h1>Status</h1>\n\n<table>\n    <tbody>\n        <tr>\n            <th>Node Name</th>\n            <th>Metric</th>\n            <th>Value</th>\n            <th>Last Updated</th>\n        </tr>\n\n        {% for node_name, data_type_to_data_point_map in status_data_dict.items %}\n            {% for data_type, data_point in data_type_to_data_point_map.items %}\n            <tr>\n                <td>{% if forloop.first %}{{ node_name }}{% endif %}</td>\n                <td>{{ data_type }}</td>\n                <td>{{ data_point.data_value }}</td>\n                <td>{{ data_point.datetime|naturaltime }}</td>\n            </tr>\n            {% endfor %}\n        {% endfor %}\n    </tbody>\n</table>\n{% endblock %}\n```", "```py\n{u'dbmaster': {u'disk_usage': <DataPoint: DataPoint for dbmaster. disk_usage = 0.95>},\n u'web01': {u'disk_usage': <DataPoint: DataPoint for web01\\. disk_usage = 0.5>,\n            u'load': <DataPoint: DataPoint for web01\\. load = 1.5>},\n u'web02': {u'disk_usage': <DataPoint: DataPoint for web02\\. disk_usage = 0.85>,\n            u'load': <DataPoint: DataPoint for web02\\. load = 9.0>}}\n```", "```py\nfrom django.conf.urls import url\n\nfrom data_collector.views import StatusView\n\nurlpatterns = [\n    url(r'^$', StatusView.as_view(), name='status'),\n]\n```", "```py\n> python manage.py runserver\n\n```", "```py\nclass Alert(models.Model):\n    data_type = models.CharField(max_length=100)\n    min_value = models.FloatField(null=True, blank=True)\n    max_value = models.FloatField(null=True, blank=True)\n    node_name = models.CharField(max_length=250, blank=True)\n\n    is_active = models.BooleanField(default=True)\n\n    def save(self, *args, **kwargs):\n        if self.min_value is None and self.max_value is None:\n            raise models.exceptions.ValidationError('Both min and max value can not be empty for an alert')\n\n        super(Alert, self).save(*args, **kwargs)\n```", "```py\n> python manage.py makemigrations data_collector\n> python manage.py migrate data_collector\n\n```", "```py\nclass AlertListView(ListView):\n    template_name = 'alerts_list.html'\n    model = Alert\n```", "```py\n{% extends \"base.html\" %}\n\n{% block content %}\n<h1>Defined Alerts</h1>\n\n{% if object_list %}\n<table>\n    <tr>\n        <th>Data Type</th>\n        <th>Min Value</th>\n        <th>Max Value</th>\n        <th>Node Name</th>\n        <th>Is Active</th>\n    </tr>\n\n    {% for alert in object_list %}\n    <tr>\n        <td>{{ alert.data_type }}</td>\n        <td>{{ alert.min_value }}</td>\n        <td>{{ alert.max_value }}</td>\n        <td>{{ alert.node_name }}</td>\n        <td>{{ alert.is_active }}</td>\n    </tr>\n    {% endfor %}\n</table>\n{% else %}\n<i>No alerts defined</i>\n{% endif %}\n{% endblock %}\n```", "```py\nurl(r'^alerts/$', AlertListView.as_view(), name='alerts-list'),\n```", "```py\nfrom django.core.urlresolvers import reverse\nfrom django.views.generic import CreateView\n```", "```py\nclass NewAlertView(CreateView):\n    template_name = 'create_or_update_alert.html'\n    model = Alert\n    fields = [\n        'data_type', 'min_value', 'max_value', 'node_name', 'is_active'\n    ]\n\n    def get_success_url(self):\n        return reverse('alerts-list')\n```", "```py\n{% extends \"base.html\" %}\n\n{% block content %}\n{% if object %}\n<h1>Update Alert</h1>\n{% else %}\n<h1>New Alert</h1>\n{% endif %}\n\n<form action=\"\" method=\"post\">{% csrf_token %}\n    {{ form.as_p }}\n    <input type=\"submit\" value=\"{% if object %}Update{% else %}Create{% endif %}\" />\n    <a href=\"{% url 'alerts-list' %}\">Cancel</a>\n</form>\n{% endblock %}\n```", "```py\nclass EditAlertView(UpdateView):\n    template_name = 'create_or_update_alert.html'\n    model = Alert\n    fields = [\n        'data_type', 'min_value', 'max_value', 'node_name', 'is_active'\n    ]\n\n    def get_success_url(self):\n        return reverse('alerts-list')\n```", "```py\nurl(r'^alerts/new/$', NewAlertView.as_view(), name='alerts-new'),\nurl(r'^alerts/(?P<pk>\\d+)/edit/$', EditAlertView.as_view(), name='alerts-edit'),\n```", "```py\n{% extends \"base.html\" %}\n\n{% block content %}\n<h1>Defined Alerts</h1>\n\n{% if object_list %}\n<table>\n    <tr>\n        <th>Data Type</th>\n        <th>Min Value</th>\n        <th>Max Value</th>\n        <th>Node Name</th>\n        <th>Is Active</th>\n    </tr>\n\n    {% for alert in object_list %}\n    <tr>\n        <td>{{ alert.data_type }}</td>\n        <td>{{ alert.min_value }}</td>\n        <td>{{ alert.max_value }}</td>\n        <td>{{ alert.node_name }}</td>\n        <td>{{ alert.is_active }}</td>\n        <td><a href=\"{% url 'alerts-edit' pk=alert.pk %}\">Edit</a></td>\n    </tr>\n    {% endfor %}\n</table>\n{% else %}\n<i>No alerts defined</i>\n{% endif %}\n<p><a href=\"{% url 'alerts-new' %}\">Add New Alert</a></p>\n{% endblock %}\n```", "```py\nclass DeleteAlertView(DeleteView):\n    template_name = 'delete_alert.html'\n    model = Alert\n\n    def get_success_url(self):\n        return reverse('alerts-list')\n```", "```py\n{% extends \"base.html\" %}\n\n{% block content %}\n<h1>Delete alert?</h1>\n<p>Are you sure you want to delete this alert?</p>\n<form action=\"\" method=\"post\">{% csrf_token %}\n    {{ form.as_p }}\n    <input type=\"submit\" value=\"Delete\" />\n    <a href=\"{% url 'alerts-list' %}\">Cancel</a>\n</form>\n{% endblock %}\n```", "```py\nurl(r'^alerts/(?P<pk>\\d+)/delete/$', DeleteAlertView.as_view(), name='alerts-delete'),\n```", "```py\n<td><a href=\"{% url 'alerts-delete' pk=alert.pk %}\">Delete</a></td>\n```", "```py\nclass StatusView(TemplateView):\n    template_name = 'status.html'\n\n    def get_context_data(self, **kwargs):\n        ctx = super(StatusView, self).get_context_data(**kwargs)\n\n        alerts = Alert.objects.filter(is_active=True)\n\n        nodes_and_data_types = DataPoint.objects.all().values('node_name', 'data_type').distinct()\n\n        status_data_dict = dict()\n        for node_and_data_type_pair in nodes_and_data_types:\n            node_name = node_and_data_type_pair['node_name']\n            data_type = node_and_data_type_pair['data_type']\n\n            latest_data_point = DataPoint.objects.filter(node_name=node_name, data_type=data_type).latest('datetime')\n latest_data_point.has_alert = self.does_have_alert(latest_data_point, alerts)\n\n            data_point_map = status_data_dict.setdefault(node_name, dict())\n            data_point_map[data_type] = latest_data_point\n\n        ctx['status_data_dict'] = status_data_dict\n\n        return ctx\n\n    def does_have_alert(self, data_point, alerts):\n for alert in alerts:\n if alert.node_name and data_point.node_name != alert.node_name:\n continue\n\n if alert.data_type != data_point.data_type:\n continue\n\n if alert.min_value is not None and data_point.data_value < alert.min_value:\n return True\n if alert.max_value is not None and data_point.data_value > alert.max_value:\n return True\n\n return False\n\n```", "```py\n{% extends \"base.html\" %}\n\n{% load humanize %}\n\n{% block content %}\n<h1>Status</h1>\n\n<table>\n    <tbody>\n        <tr>\n            <th>Node Name</th>\n            <th>Metric</th>\n            <th>Value</th>\n            <th>Last Updated</th>\n        </tr>\n\n        {% for node_name, data_type_to_data_point_map in status_data_dict.items %}\n            {% for data_type, data_point in data_type_to_data_point_map.items %}\n            <tr {% if data_point.has_alert %}class=\"has-alert\"{% endif %}>\n                <td>{% if forloop.first %}{{ node_name }}{% endif %}</td>\n                <td>{{ data_type }}</td>\n                <td>{{ data_point.data_value }}</td>\n                <td>{{ data_point.datetime|naturaltime }}</td>\n            </tr>\n            {% endfor %}\n        {% endfor %}\n    </tbody>\n</table>\n\n<style type=\"text/css\" media=\"all\">\n tr.has-alert td:not(:first-child) {\n color: red;\n }\n</style>\n{% endblock %}\n```", "```py\n> python manage.py sample_data dbmaster disk_usage 0.2\n\n```", "```py\n<ul>\n    <li><a href=\"{% url 'status' %}\">Home</a></li>\n    <li><a href=\"{% url 'alerts-list' %}\">Alerts</a></li>\n</ul>\n```", "```py\nfrom django.forms.models import modelform_factory\nfrom django.http.response import HttpResponse\nfrom django.http.response import HttpResponseBadRequest\nfrom django.http.response import HttpResponseForbidden\nfrom django.views.generic import View\n\nclass RecordDataApiView(View):\n    def post(self, request, *args, **kwargs):\n        # Check if the secret key matches\n        if request.META.get('HTTP_AUTH_SECRET') != 'supersecretkey':\n            return HttpResponseForbidden('Auth key incorrect')\n\n        form_class = modelform_factory(DataPoint, fields=['node_name', 'data_type', 'data_value'])\n        form = form_class(request.POST)\n        if form.is_valid():\n            form.save()\n            return HttpResponse()\n        else:\n            return HttpResponseBadRequest()\n```", "```py\nfrom django.views.decorators.csrf import csrf_exempt\nfrom data_collector.views import RecordDataApiView\n```", "```py\nurl(r'^record/$', csrf_exempt(RecordDataApiView.as_view()), name='record-data'),\n```", "```py\n> c\nurl http://127.0.0.1:8000/record/ -H 'Auth-Secret: supersecretkey' -d node_name=web01 -d data_type=disk_usage -d data_value=0.2\n\n```"]