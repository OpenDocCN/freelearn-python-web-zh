["```py\n> python manage.py loaddata main/fixtures/initial.json\n\n```", "```py\n> ./elasticsearch\n.\n.\n.\n[2016-03-06 17:53:53,091][INFO ][http                     ] [Marvin Flumm] publish_address {127.0.0.1:9200}, bound_addresses {[fe80::1]:9200}, {[::1]:9200}, {127.0.0.1:9200}\n[2016-03-06 17:53:53,092][INFO ][node                     ] [Marvin Flumm] started\n[2016-03-06 17:53:53,121][INFO ][gateway                  ] [Marvin Flumm] recovered [0] indices into cluster_state\n```", "```py\nhttp://localhost:9200/?pretty\n```", "```py\n{\n  \"name\" : \"Marvin Flumm\",\n  \"cluster_name\" : \"elasticsearch\",\n  \"version\" : {\n    \"number\" : \"2.2.0\",\n    \"build_hash\" : \"8ff36d139e16f8720f2947ef62c8167a888992fe\",\n    \"build_timestamp\" : \"2016-01-27T13:32:39Z\",\n    \"build_snapshot\" : false,\n    \"lucene_version\" : \"5.4.1\"\n  },\n  \"tagline\" : \"You Know, for Search\"\n}\n```", "```py\n> curl -XPUT http://localhost:9200/daintree/products/1 -d '{\"name\": \"Django Blueprints\", \"category\": \"Book\", \"price\": 50, \"tags\": [\"django\", \"python\", \"web applications\"]}'\n{\"_index\":\"daintree\",\"_type\":\"products\",\"_id\":\"1\",\"_version\":1,\"_shards\":{\"total\":2,\"successful\":1,\"failed\":0},\"created\":true}      \n                                                > curl -XPUT http://localhost:9200/daintree/products/2 -d '{\"name\": \"Elasticsearch Guide\", \"category\": \"Book\", \"price\": 100, \"tags\": [\"elasticsearch\", \"java\", \"search\"]}'\n{\"_index\":\"daintree\",\"_type\":\"products\",\"_id\":\"2\",\"_version\":1,\"_shards\":{\"total\":2,\"successful\":1,\"failed\":0},\"created\":true}\n```", "```py\n> curl -XGET 'http://localhost:9200/daintree/products/1?pretty=true'\n{\n  \"_index\" : \"daintree\",\n  \"_type\" : \"products\",\n  \"_id\" : \"1\",\n  \"_version\" : 1,\n  \"found\" : true,\n  \"_source\" : {\n    \"name\" : \"Django Blueprints\",\n    \"category\" : \"Book\",\n    \"price\" : 50,\n    \"tags\" : [ \"django\", \"python\", \"web applications\" ]\n  }\n}\n```", "```py\n> curl -XGET 'http://localhost:9200/daintree/products/_search?q=name:Django&pretty'\n{\n  \"took\" : 4,\n  \"timed_out\" : false,\n  \"_shards\" : {\n    \"total\" : 5,\n    \"successful\" : 5,\n    \"failed\" : 0\n  },\n  \"hits\" : {\n    \"total\" : 1,\n    \"max_score\" : 0.19178301,\n    \"hits\" : [ {\n      \"_index\" : \"daintree\",\n      \"_type\" : \"products\",\n      \"_id\" : \"1\",\n      \"_score\" : 0.19178301,\n      \"_source\" : {\n        \"name\" : \"Django Blueprints\",\n        \"category\" : \"Book\",\n        \"price\" : 50,\n        \"tags\" : [ \"django\", \"python\", \"web applications\" ]\n      }\n    } ]\n  }\n}\n```", "```py\n> curl -XGET 'http://localhost:9200/daintree/products/_search?pretty' -d '{\"query\": {\"match\": {\"name\": \"Django\"}}}'\n{\n  \"took\" : 3,\n  \"timed_out\" : false,\n  \"_shards\" : {\n    \"total\" : 5,\n    \"successful\" : 5,\n    \"failed\" : 0\n  },\n  \"hits\" : {\n    \"total\" : 1,\n    \"max_score\" : 0.19178301,\n    \"hits\" : [ {\n      \"_index\" : \"daintree\",\n      \"_type\" : \"products\",\n      \"_id\" : \"1\",\n      \"_score\" : 0.19178301,\n      \"_source\" : {\n        \"name\" : \"Django Blueprints\",\n        \"category\" : \"Book\",\n        \"price\" : 50,\n        \"tags\" : [ \"django\", \"python\", \"web applications\" ]\n      }\n    } ]\n  }\n}\n```", "```py\n> pip install elasticsearch_dsl\n\n```", "```py\n> python manage.py shell\n> from elasticsearch_dsl import Search\n> from elasticsearch_dsl.connections import connections\n> connections.create_connection(hosts=['localhost:9200'])\n<Elasticsearch([{u'host': u'localhost', u'port': 9200}])>\n> Search(index='daintree').query('match', name='django').execute().to_dict()\n{u'_shards': {u'failed': 0, u'successful': 5, u'total': 5},\n u'hits': {u'hits': [{u'_id': u'1',\n    u'_index': u'daintree',\n    u'_score': 0.19178301,\n    u'_source': {u'category': u'Book',\n     u'name': u'Django Blueprints',\n     u'price': 50,\n     u'tags': [u'django', u'python', u'web applications']},\n    u'_type': u'products'}],\n  u'max_score': 0.19178301,\n  u'total': 1},\n u'timed_out': False,\n u'took': 2}\n```", "```py\n{\n    \"query\": {\n        \"match\": {\n            \"name\": \"django\"\n        }\n    }\n}\n```", "```py\n> curl 'http://localhost:9200/daintree/products/_mapping?pretty'\n{\n  \"daintree\" : {\n    \"mappings\" : {\n      \"products\" : {\n        \"properties\" : {\n          \"category\" : {\n            \"type\" : \"string\"\n          },\n          \"name\" : {\n            \"type\" : \"string\"\n          },\n          \"price\" : {\n            \"type\" : \"long\"\n          },\n          \"tags\" : {\n            \"type\" : \"string\"\n          }\n        }\n      }\n    }\n  }\n}\n```", "```py\nfrom elasticsearch_dsl import DocType\nfrom elasticsearch_dsl import Long\nfrom elasticsearch_dsl import String\n\nclass ESProduct(DocType):\n    name = String(required=True)\n    description = String()\n    price = Long(required=True)\n\n    category = String(required=True)\n    tags = String(multi=True)\n\n    class Meta:\n        doc_type = 'products'\n```", "```py\n> python manage.py shell\n> from elasticsearch_dsl.connections import connections\n> from main.es_docs import ESProduct\n> connections.create_connection()\n<Elasticsearch([{}])>\n> ESProduct.init(index='daintree')\n```", "```py\n> python manage.py shell\n> from elasticsearch_dsl.connections import connections\n> from main.es_docs import ESProduct\n> from main.models import Product\n> connections.create_connection()\n<Elasticsearch([{}])>\n> p = Product.objects.get(pk=200)\n> esp = ESProduct(meta={'id':p.pk}, name=p.name, description=p.description, price=p.price, category=p.category.name)\n> for tag in p.tags.all():\n>     esp.tags.append(tag.name)\n>\n> esp.save(index='daintree')\nTrue\n```", "```py\n> curl 'http://localhost:9200/daintree/products/_search?pretty'\n\n```", "```py\nimport elasticsearch_dsl\nimport elasticsearch_dsl.connections\n\nfrom django.core.management import BaseCommand\n\nfrom main.models import Product\nfrom main.es_docs import ESProduct\n\nclass Command(BaseCommand):\n    help = \"Index all data to Elasticsearch\"\n\n    def handle(self, *args, **options):\n        elasticsearch_dsl.connections.connections.create_connection()\n\n        for product in Product.objects.all():\n            esp = ESProduct(meta={'id': product.pk}, name=product.name, description=product.description,\n                            price=product.price, category=product.category.name)\n            for tag in product.tags.all():\n                esp.tags.append(tag.name)\n\n            esp.save(index='daintree')\n```", "```py\n> python manage.py index_all_data\n```", "```py\n> curl 'localhost:9200/daintree/_stats?pretty=1'\n```", "```py\n.\n.\n.\n\"total\" : {\n        \"docs\" : {\n          \"count\" : 1000,\n          \"deleted\" : 0\n        },\n.\n.\n.\n```", "```py\nfrom django import forms\n\nclass SearchForm(forms.Form):\n    name = forms.CharField(required=False)\n```", "```py\n<h2>Search</h2>\n<form action=\"\" method=\"get\">\n    {{ form.as_p }}\n    <input type=\"submit\" value=\"Search\" />\n</form>\n```", "```py\nimport random\n\nfrom django.shortcuts import render\nfrom django.template.response import RequestContext\nfrom django.views.generic import View\n\nfrom elasticsearch_dsl import Search\nfrom elasticsearch_dsl.connections import connections\n\nfrom main.forms import SearchForm\n\nclass HomeView(View):\n    def get(self, request):\n        form = SearchForm(request.GET)\n\n        ctx = {\n            \"form\": form\n        }\n\n        if form.is_valid():\n            connections.create_connection()\n\n            name_query = form.cleaned_data[\"name\"]\n            s = Search(index=\"daintree\").query(\"match\", name=name_query)\n            result = s.execute()\n\n            ctx[\"products\"] = result.hits\n\n        return render(request, \"home.html\", ctx)\n```", "```py\n<i>Category: {{ product.category.name }}</i> <br />\n```", "```py\n<i>Category: {{ product.category }}</i> <br />\n```", "```py\ns = Search(index=\"daintree\").query(\"match\", name=name_query)\n```", "```py\nif name_query:\n    s = Search(index=\"daintree\").query(\"match\", name=name_query)\nelse:\n    s = Search(index=\"daintree\")\n```", "```py\n{% if products %}                                             \n    {% for product in products %}\n    <li>\n        Name: <b>{{ product.name }}</b> <br />\n        <i>Category: {{ product.category.name }}</i> <br />\n        {% if product.tags.all %}\n            Tags: (\n            {% for tag in product.tags.all %}\n                {{ tag.name }}\n                {% if not forloop.last %}\n                ,\n                {% endif %}\n            {% endfor %}\n            )\n        {% endif %}\n    </li>\n    {% endfor %}\n{% else %}\n    No results found. Please try another search term\n{% endif %}\n```", "```py\ndef get(self, request):\n        form = SearchForm(request.GET)\n\n        ctx = {\n            \"form\": form\n        }\n\n        if form.is_valid():\n            connections.create_connection()\n\n            name_query = form.cleaned_data.get(\"name\")\n            if name_query:\n                s = Search(index=\"daintree\").query(\"match\", name=name_query)\n            else:\n                s = Search(index=\"daintree\")\n            result = s.execute()\n\n            ctx[\"products\"] = result.hits\n\n        return render(request, \"home.html\", ctx)\n```", "```py\nfrom __future__ import unicode_literals\n\nfrom django.apps import AppConfig\n\nfrom elasticsearch_dsl.connections import connections\n\nclass MainConfig(AppConfig):\n    name = 'main'\n\n    def ready(self):\n        connections.create_connection()\n```", "```py\ndefault_app_config = \"main.apps.MainConfig\"\n```", "```py\nfrom elasticsearch_dsl.connections import connections\n```", "```py\nfrom django import forms\n\nclass SearchForm(forms.Form):\n    name = forms.CharField(required=False)\n    min_price = forms.IntegerField(required=False, label=\"Minimum Price\")\n    max_price = forms.IntegerField(required=False, label=\"Maximum Price\")\n```", "```py\nclass HomeView(View):\n    def get(self, request):\n        form = SearchForm(request.GET)\n\n        ctx = {\n            \"form\": form\n        }\n\n        if form.is_valid():\n            name_query = form.cleaned_data.get(\"name\")\n            if name_query:\n                s = Search(index=\"daintree\").query(\"match\", name=name_query)\n            else:\n                s = Search(index=\"daintree\")\n\n            min_price = form.cleaned_data.get(\"min_price\")\n            max_price = form.cleaned_data.get(\"max_price\")\n            if min_price is not None or max_price is not None:\n                price_query = dict()\n\n                if min_price is not None:\n                    price_query[\"gte\"] = min_price\n\n                if max_price is not None:\n                    price_query[\"lte\"] = max_price\n\n                s = s.query(\"range\", price=price_query)\n\n            result = s.execute()\n\n            ctx[\"products\"] = result.hits\n\n        return render(request, \"home.html\", ctx)\n```", "```py\ns = s.query(\"range\", price=price_query)\n```", "```py\n<i>Price: {{ product.price }}</i> <br />\n```", "```py\n{\"name\": \"Book 1\", \"category\": \"web\"}\n{\"name\": \"Book 2\", \"category\": \"django\"}\n{\"name\": \"Book 3\", \"category\": \"java\"}\n{\"name\": \"Book 4\", \"category\": \"web\"}\n{\"name\": \"Book 5\", \"category\": \"django\"}\n```", "```py\nclass HomeView(View):\n    def get(self, request):\n        form = SearchForm(request.GET)\n\n        ctx = {\n            \"form\": form\n        }\n\n        if form.is_valid():\n            name_query = form.cleaned_data.get(\"name\")\n            if name_query:\n                s = Search(index=\"daintree\").query(\"match\", name=name_query)\n            else:\n                s = Search(index=\"daintree\")\n\n            min_price = form.cleaned_data.get(\"min_price\")\n            max_price = form.cleaned_data.get(\"max_price\")\n            if min_price is not None or max_price is not None:\n                price_query = dict()\n\n                if min_price is not None:\n                    price_query[\"gte\"] = min_price\n\n                if max_price is not None:\n                    price_query[\"lte\"] = max_price\n\n                s = s.query(\"range\", price=price_query)\n\n            # Add aggregations\n s.aggs.bucket(\"categories\", \"terms\", field=\"category\")\n\n            result = s.execute()\n\n            ctx[\"products\"] = result.hits\n ctx[\"aggregations\"] = result.aggregations\n\n        return render(request, \"home.html\", ctx)\n```", "```py\ns.aggs.bucket(\"categories\", \"terms\", field=\"category\")\n```", "```py\nctx[\"aggregations\"] = result.aggregations\n```", "```py\n{\n    \"categories\": {\n        \"buckets\": [\n            {\n                \"key\": \"CATEGORY 1\",\n                \"doc_count\": 10\n            },\n\n            {\n                \"key\": \"CATEGORY 2\",\n                \"doc_count\": 50\n            },\n\n            .\n            .\n            .\n        ]\n    }\n}\n```", "```py\n{% extends \"base.html\" %}\n\n{% block content %}\n<h2>Search</h2>\n<form action=\"\" method=\"get\">\n    {{ form.as_p }}\n    <input type=\"submit\" value=\"Search\" />\n</form>\n\n{% if aggregations.categories.buckets %}\n<h2>Categories</h2>\n<ul>\n{% for bucket in aggregations.categories.buckets %}\n <li>{{ bucket.key }} ({{ bucket.doc_count }})</li>\n{% endfor %}\n</ul>\n{% endif %}\n\n<ul>\n    {% if products %}\n        {% for product in products %}\n        <li>\n            Name: <b>{{ product.name }}</b> <br />\n            <i>Category: {{ product.category }}</i> <br />\n            <i>Price: {{ product.price }}</i> <br />\n            {% if product.tags.all %}\n                Tags: (\n                {% for tag in product.tags.all %}\n                    {{ tag.name }}\n                    {% if not forloop.last %}\n                    ,\n                    {% endif %}\n                {% endfor %}\n                )\n            {% endif %}\n        </li>\n        {% endfor %}\n    {% else %}\n        No results found. Please try another search term\n    {% endif %}\n</ul>\n{% endblock %}\n```", "```py\ncategory = String(required=True)\n```", "```py\ncategory = String(required=True, index=\"not_analyzed\")\n```", "```py\n> curl -XDELETE 'localhost:9200/daintree'\n{\"acknowledged\":true}\n```", "```py\nimport elasticsearch_dsl\nimport elasticsearch_dsl.connections\n\nfrom django.core.management import BaseCommand\n\nfrom main.models import Product\nfrom main.es_docs import ESProduct\n\nclass Command(BaseCommand):\n    help = \"Index all data to Elasticsearch\"\n\n    def handle(self, *args, **options):\n        elasticsearch_dsl.connections.connections.create_connection()\n        ESProduct.init(index='daintree')\n\n        for product in Product.objects.all():\n            esp = ESProduct(meta={'id': product.pk}, name=product.name, description=product.description,\n                            price=product.price, category=product.category.name)\n            for tag in product.tags.all():\n                esp.tags.append(tag.name)\n\n            esp.save(index='daintree')\n```", "```py\n> python manage.py index_all_data\n\n```", "```py\n> curl \"localhost:9200/_mapping?pretty=1\"\n{\n  \"daintree\" : {\n    \"mappings\" : {\n      \"products\" : {\n        \"properties\" : {\n          \"category\" : {\n            \"type\" : \"string\",\n            \"index\" : \"not_analyzed\"\n          },\n          \"description\" : {\n            \"type\" : \"string\"\n          },\n          \"name\" : {\n            \"type\" : \"string\"\n          },\n          \"price\" : {\n            \"type\" : \"long\"\n          },\n          \"tags\" : {\n            \"type\" : \"string\"\n          }\n        }\n      }\n    }\n  }\n}\n```", "```py\nimport random\n\nfrom django.core.urlresolvers import reverse\nfrom django.shortcuts import render\nfrom django.template.response import RequestContext\nfrom django.views.generic import View\nfrom elasticsearch_dsl import Search\nfrom elasticsearch_dsl.connections import connections\n\nfrom main.forms import SearchForm\n\nclass HomeView(View):\n    def get(self, request):\n        form = SearchForm(request.GET)\n\n        ctx = {\n            \"form\": form\n        }\n\n        if form.is_valid():\n            name_query = form.cleaned_data.get(\"name\")\n            if name_query:\n                s = Search(index=\"daintree\").query(\"match\", name=name_query)\n            else:\n                s = Search(index=\"daintree\")\n\n            min_price = form.cleaned_data.get(\"min_price\")\n            max_price = form.cleaned_data.get(\"max_price\")\n            if min_price is not None or max_price is not None:\n                price_query = dict()\n\n                if min_price is not None:\n                    price_query[\"gte\"] = min_price\n\n                if max_price is not None:\n                    price_query[\"lte\"] = max_price\n\n                s = s.query(\"range\", price=price_query)\n\n            # Add aggregations\n            s.aggs.bucket(\"categories\", \"terms\", field=\"category\")\n\n            if request.GET.get(\"category\"):\n s = s.query(\"match\", category=request.GET[\"category\"])\n\n            result = s.execute()\n\n            ctx[\"products\"] = result.hits\n\n            category_aggregations = list()\n for bucket in result.aggregations.categories.buckets:\n category_name = bucket.key\n doc_count = bucket.doc_count\n\n category_url_params = request.GET.copy()\n category_url_params[\"category\"] = category_name\n category_url = \"{}?{}\".format(reverse(\"home\"), category_url_params.urlencode())\n\n category_aggregations.append({\n \"name\": category_name,\n \"doc_count\": doc_count,\n \"url\": category_url\n })\n\n ctx[\"category_aggs\"] = category_aggregations\n\n        return render(request, \"home.html\", ctx)\n```", "```py\n{% extends \"base.html\" %}\n\n{% block content %}\n<h2>Search</h2>\n<form action=\"\" method=\"get\">\n    {{ form.as_p }}\n    <input type=\"submit\" value=\"Search\" />\n</form>\n\n{% if category_aggs %}\n<h2>Categories</h2>\n<ul>\n{% for agg in category_aggs %}\n <li>\n <a href=\"{{ agg.url }}\">{{ agg.name }}</a> ({{ agg.doc_count }})\n </li>\n{% endfor %}\n</ul>\n{% endif %}\n\n<h2>Results</h2>\n<ul>\n    {% if products %}\n        {% for product in products %}\n        <li>\n            Name: <b>{{ product.name }}</b> <br />\n            <i>Category: {{ product.category }}</i> <br />\n            <i>Price: {{ product.price }}</i> <br />\n            {% if product.tags.all %}\n                Tags: (\n                {% for tag in product.tags.all %}\n                    {{ tag.name }}\n                    {% if not forloop.last %}\n                    ,\n                    {% endif %}\n                {% endfor %}\n                )\n            {% endif %}\n        </li>\n        {% endfor %}\n    {% else %}\n        No results found. Please try another search term\n    {% endif %}\n</ul>\n{% endblock %}\n```", "```py\nif \"category\" in request.GET:\n    remove_category_search_params = request.GET.copy()\n    del remove_category_search_params[\"category\"]\n    remove_category_url = \"{}?{}\".format(reverse(\"home\"), remove_category_search_params.urlencode())\n    ctx[\"remove_category_url\"] = remove_category_url\n```", "```py\n{% if remove_category_url %}\n<a href=\"{{ remove_category_url }}\">Remove Category Filter</a>\n{% endif %}\n```"]