["```py\n# forms.py\nfrom django import forms\n\nclass PersonDetailsForm(forms.Form):\n    name = forms.CharField(max_length=100)\n    age = forms.IntegerField()\n```", "```py\n>>> f = PersonDetailsForm()\n>>> print(f.as_p())\n<p><label for=\"id_name\">Name:</label> <input id=\"id_name\" maxlength=\"100\" name=\"name\" type=\"text\" /></p>\n<p><label for=\"id_age\">Age:</label> <input id=\"id_age\" name=\"age\" type=\"number\" /></p>\n\n>>> f.is_bound\n False\n\n>>> g = PersonDetailsForm({\"name\": \"Blitz\", \"age\": \"30\"})\n>>> print(g.as_p())\n<p><label for=\"id_name\">Name:</label> <input id=\"id_name\" maxlength=\"100\" name=\"name\" type=\"text\" value=\"Blitz\" /></p>\n<p><label for=\"id_age\">Age:</label> <input id=\"id_age\" name=\"age\" type=\"number\" value=\"30\" /></p>\n\n>>> g.is_bound\n True\n\n```", "```py\n>>> fill = {\"name\": \"Blitz\", \"age\": \"30\"}\n\n>>> g = PersonDetailsForm(fill)\n\n>>> g.is_valid()\n True\n\n>>> g.cleaned_data\n {'age': 30, 'name': 'Blitz'}\n\n>>> type(g.cleaned_data[\"age\"])\n int\n```", "```py\n<p><label for=\"id_name\"> Name:</label>\n<input class=\"textinput textInput form-control\" id=\"id_name\" maxlength=\"100\" name=\"name\" type=\"text\" /></p>\n<p><label for=\"id_age\">Age:</label> <input class=\"numberinput form-control\" id=\"id_age\" name=\"age\" type=\"number\" /></p>\n```", "```py\n<li><label for=\"id_name\">Name:</label> <input class=\"textinput textInput form-control\" id=\"id_name\" maxlength=\"100\" name=\"name\" type=\"text\" /></li>\n<li><label for=\"id_age\">Age:</label> <input class=\"numberinput form-control\" id=\"id_age\" name=\"age\" type=\"number\" /></li>\n```", "```py\n<tr><th><label for=\"id_name\">Name:</label></th><td><input class=\"textinput textInput form-control\" id=\"id_name\" maxlength=\"100\" name=\"name\" type=\"text\" /></td></tr>\n<tr><th><label for=\"id_age\">Age:</label></th><td><input class=\"numberinput form-control\" id=\"id_age\" name=\"age\" type=\"number\" /></td></tr>\n```", "```py\n<form method=\"post\">\n  {% csrf_token %}\n  <table>{{ form.as_table }}</table>\n  <input type=\"submit\" value=\"Submit\" />\n</form>\n```", "```py\n<form method=\"post\">\n<input type='hidden' name='csrfmiddlewaretoken' value='...' />\n<div id=\"div_id_name\" class=\"form-group\">\n<label for=\"id_name\" class=\"control-label  requiredField\">\nName<span class=\"asteriskField\">*</span></label>\n<div class=\"controls \">\n<input class=\"textinput textInput form-control form-control\" id=\"id_name\" maxlength=\"100\" name=\"name\" type=\"text\" /> </div></div> ...\n```", "```py\nCRISPY_TEMPLATE_PACK = \"bootstrap3\"\n```", "```py\nfrom crispy_forms.helper import FormHelper\nfrom crispy_forms.layout import Submit\n\nclass PersonDetailsForm(forms.Form):\n    name = forms.CharField(max_length=100)\n    age = forms.IntegerField()\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.helper = FormHelper(self)\n        self.helper.layout.append(Submit('submit', 'Submit'))\n```", "```py\nclass ClassBasedFormView(generic.View):\n    template_name = 'form.html'\n\n    def get(self, request):\n        form = PersonDetailsForm()\n        return render(request, self.template_name, {'form': form})\n\n    def post(self, request):\n        form = PersonDetailsForm(request.POST)\n        if form.is_valid():\n            # Success! We can use form.cleaned_data now\n            return redirect('success')\n        else:\n            # Invalid form! Reshow the form with error highlighted\n            return render(request, self.template_name,\n                          {'form': form})\n```", "```py\nfrom django.core.urlresolvers import reverse_lazy\n\nclass GenericFormView(generic.FormView):\n    template_name = 'form.html'\n    form_class = PersonDetailsForm\n    success_url = reverse_lazy(\"success\")\n```", "```py\nclass PersonDetailsForm(forms.Form):\n    name = forms.CharField(max_length=100)\n    age = forms.IntegerField()\n\n    def __init__(self, *args, **kwargs):\n        upgrade = kwargs.pop(\"upgrade\", False)\n        super().__init__(*args, **kwargs)\n\n        # Show first class option?\n        if upgrade:\n            self.fields[\"first_class\"] = forms.BooleanField(\n                label=\"Fly First Class?\")\n```", "```py\nclass PersonDetailsEdit(generic.FormView):\n    ...\n\n    def get_form_kwargs(self):\n        kwargs = super().get_form_kwargs()\n        kwargs[\"upgrade\"] = True\n        return kwargs\n```", "```py\nfrom braces.forms import UserKwargModelFormMixin\n\nclass PersonDetailsForm(UserKwargModelFormMixin, forms.Form):\n    ...\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        # Are you a member of the VIP group?\n        if self.user.groups.filter(name=\"VIP\").exists():\n            self.fields[\"first_class\"] = forms.BooleanField(\n                label=\"Fly First Class?\")\n```", "```py\nclass VIPCheckFormView(LoginRequiredMixin, UserFormKwargsMixin, generic.FormView):\n\n   form_class = PersonDetailsForm\n    ...\n```", "```py\nclass SubscribeForm(forms.Form):\n    email = forms.EmailField()\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.helper = FormHelper(self)\n        self.helper.layout.append(Submit('subscribe_butn', 'Subscribe'))\n```", "```py\nfrom .forms import SubscribeForm, UnSubscribeForm\n\nclass NewsletterView(generic.TemplateView):\n    subcribe_form_class = SubscribeForm\n    unsubcribe_form_class = UnSubscribeForm\n    template_name = \"newsletter.html\"\n\n    def get(self, request, *args, **kwargs):\n        kwargs.setdefault(\"subscribe_form\", self.subcribe_form_class())\n        kwargs.setdefault(\"unsubscribe_form\", self.unsubcribe_form_class())\n        return super().get(request, *args, **kwargs)\n```", "```py\n    def post(self, request, *args, **kwargs):\n        form_args = {\n            'data': self.request.POST,\n            'files': self.request.FILES,\n        }\n        if \"subscribe_butn\" in request.POST:\n            form = self.subcribe_form_class(**form_args)\n            if not form.is_valid():\n                return self.get(request,\n                                   subscribe_form=form)\n            return redirect(\"success_form1\")\n        elif \"unsubscribe_butn\" in request.POST:\n            form = self.unsubcribe_form_class(**form_args)\n            if not form.is_valid():\n                return self.get(request,\n                                   unsubscribe_form=form)\n            return redirect(\"success_form2\")\n        return super().get(request)\n```", "```py\n# models.py\nclass ImportantDate(models.Model):\n    date = models.DateField()\n    desc = models.CharField(max_length=100)\n\n    def get_absolute_url(self):\n        return reverse('impdate_detail', args=[str(self.pk)])\n```", "```py\n# views.py\nfrom django.core.urlresolvers import reverse_lazyfrom . import forms\n\nclass ImpDateDetail(generic.DetailView):\n    model = models.ImportantDate\n\nclass ImpDateCreate(generic.CreateView):\n    model = models.ImportantDate\n    form_class = forms.ImportantDateForm\n\nclass ImpDateUpdate(generic.UpdateView):\n    model = models.ImportantDate\n    form_class = forms.ImportantDateForm\n\nclass ImpDateDelete(generic.DeleteView):\n    model = models.ImportantDate\n    success_url = reverse_lazy(\"impdate_list\")\n```", "```py\n# forms.py\nfrom django import forms\nfrom . import models\nfrom crispy_forms.helper import FormHelper\nfrom crispy_forms.layout import Submit\nclass ImportantDateForm(forms.ModelForm):\n    class Meta:\n        model = models.ImportantDate\n        fields = [\"date\", \"desc\"]\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        self.helper = FormHelper(self)\n        self.helper.layout.append(Submit('save', 'Save'))\n```", "```py\nurl(r'^impdates/create/$',\n    pviews.ImpDateCreate.as_view(), name=\"impdate_create\"),\nurl(r'^impdates/(?P<pk>\\d+)/$',\n    pviews.ImpDateDetail.as_view(), name=\"impdate_detail\"),\nurl(r'^impdates/(?P<pk>\\d+)/update/$',\n    pviews.ImpDateUpdate.as_view(), name=\"impdate_update\"),\nurl(r'^impdates/(?P<pk>\\d+)/delete/$',\n    pviews.ImpDateDelete.as_view(), name=\"impdate_delete\"),\n```"]