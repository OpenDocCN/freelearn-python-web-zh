["```py\n# tests.py\nfrom django.test import TestCase\nfrom django.core.urlresolvers import resolve\nfrom .views import HomeView\nclass HomePageOpenTestCase(TestCase):\n    def test_home_page_resolves(self):\n        view = resolve('/')\n        self.assertEqual(view.func.__name__,\n                         HomeView.as_view().__name__)\n```", "```py\n$ ./manage.py test app1\nCreating test database for alias 'default'...\n.\n-----------------------------------------------------------------\nRan 1 test in 0.088s\n\nOK\nDestroying test database for alias 'default'...\n```", "```py\ndef setUp(self):\n    self.l1 = [1, 2]\n    self.l2 = [1, 0]\n```", "```py\nassert self.l1 == self.l2\n```", "```py\nassert self.l1 == self.l2\nAssertionError\n```", "```py\nself.assertEqual(self.l1, self.l2)\n```", "```py\nAssertionError: Lists differ: [1, 2] != [1, 0]\nFirst differing element 1:\n2\n0\n```", "```py\nself.assertListEqual( self.l1, self.l2)\n```", "```py\nAssertionError: Lists differ: [1, 2] != [1, 0]\n\nFirst differing element 1:\n2\n0\n```", "```py\nself.assertListEqual(self.l1, None)\n```", "```py\nAssertionError: Second sequence is not a list: None\n```", "```py\n# profiles/tests.py\nfrom django.test import TestCase\nfrom unittest.mock import patch\nfrom django.contrib.auth.models import User\n\nclass TestSuperHeroCheck(TestCase):\n    def test_checks_superhero_service_obj(self):\n        with patch(\"profiles.models.SuperHeroWebAPI\") as ws:\n            ws.is_hero.return_value = True\n            u = User.objects.create_user(username=\"t\")\n            r = u.profile.is_superhero()\n        ws.is_hero.assert_called_with('t')\n        self.assertTrue(r)\n```", "```py\nfrom django.test import TestCase\n\nclass PostTestCase(TestCase):\n    fixtures = ['posts']\n\n    def setUp(self):\n        # Create additional common objects\n        pass\n\n    def test_some_post_functionality(self):\n        # By now fixtures and setUp() objects are loaded\n        pass\n```", "```py\nfrom django.test import TestCase\nfrom .models import Post\n\nclass PostFactory:\n    def make_post(self):\n        return Post.objects.create(message=\"\")\n\nclass PostTestCase(TestCase):\n\n    def setUp(self):\n        self.blank_message = PostFactory().makePost()\n\n    def test_some_post_functionality(self):\n        pass\n```", "```py\nimport factory\nfrom django.test import TestCase\nfrom .models import Post\n\nclass PostFactory(factory.Factory):\n    class Meta:\n        model = Post\n    message = \"\"\n\nclass PostTestCase(TestCase):\n\n    def setUp(self):\n        self.blank_message = PostFactory.create()\n        self.silly_message = PostFactory.create(message=\"silly\")\n\n    def test_post_title_was_set(self):\n        self.assertEqual(self.blank_message.message, \"\")\n        self.assertEqual(self.silly_message.message, \"silly\")\n```", "```py\n$ python manage.py runserver_plus\n```", "```py\n# views.py\nimport logging\nlogger = logging.getLogger(__name__)\n\ndef complicated_view():\n    logger.debug(\"Entered the complicated_view()!\")\n```", "```py\nimport pdb; pdb.set_trace()\n```", "```py\nimport pudb; pudb.set_trace()\n```", "```py\n<textarea onclick=\"this.focus();this.select()\" style=\"width: 100%;\"> \n  {% filter force_escape %} \n {% debug %} \n  {% endfilter %}\n</textarea>\n```", "```py\n# templatetags/debug.py\nimport pudb as dbg              # Change to any *db\nfrom django.template import Library, Node\n\nregister = Library()\n\nclass PdbNode(Node):\n\n    def render(self, context):\n        dbg.set_trace()         # Debugger will stop here\n        return ''\n\n@register.tag\ndef pdb(parser, token):\n    return PdbNode()\n```", "```py\n{% load debug %}\n\n{% for item in items %}\n    {# Some place you want to break #}\n    {% pdb %}\n{% endfor %}\n```", "```py\n>>> print(context[\"item\"])\nItem0\n```"]