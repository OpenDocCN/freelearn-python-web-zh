["```py\n# In views.py\nfrom django.http import HttpResponse\n\ndef hello_fn(request, name=\"World\"):\n    return HttpResponse(\"Hello {}!\".format(name))\n```", "```py\n# In urls.py\n    url(r'^hello-fn/(?P<name>\\w+)/$', views.hello_fn),\n    url(r'^hello-fn/$', views.hello_fn),\n```", "```py\nfrom django.views.generic import View\nclass HelloView(View):\n    def get(self, request, name=\"World\"):\n        return HttpResponse(\"Hello {}!\".format(name))\n```", "```py\n# In urls.py\n    url(r'^hello-cl/(?P<name>\\w+)/$', views.HelloView.as_view()),\n    url(r'^hello-cl/$', views.HelloView.as_view()),\n```", "```py\n>>> from django.test import Client\n>>> c = Client()\n\n>>> c.get(\"http://0.0.0.0:8000/hello-fn/\").content\nb'Hello World!'\n\n>>> c.post(\"http://0.0.0.0:8000/hello-fn/\").content\nb'Hello World!'\n\n>>> c.get(\"http://0.0.0.0:8000/hello-cl/\").content\nb'Hello World!'\n\n>>> c.post(\"http://0.0.0.0:8000/hello-cl/\").content\nb''\n\n```", "```py\nclass GreetView(View):\n    greeting = \"Hello {}!\"\n    default_name = \"World\"\n    def get(self, request, **kwargs):\n        name = kwargs.pop(\"name\", self.default_name)\n        return HttpResponse(self.greeting.format(name))\n\nclass SuperVillainView(GreetView):\n    greeting = \"We are the future, {}. Not them. \"\n    default_name = \"my friend\"\n```", "```py\n# In urls.py\n    url(r'^hello-su/(?P<name>\\w+)/$', views.SuperVillainView.as_view()),\n    url(r'^hello-su/$', views.SuperVillainView.as_view()),\n```", "```py\nclass FeedMixin(object):\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context[\"feed\"] = models.Post.objects.viewable_posts(self.request.user)\n        return context\n```", "```py\nclass MyFeed(FeedMixin, generic.CreateView):\n    model = models.Post\n    template_name = \"myfeed.html\"\n    success_url = reverse_lazy(\"my_feed\")\n```", "```py\nclass ComplexView(MyMixin, YourMixin, AccessMixin, DetailView):\n```", "```py\nclass A:\n    def do(self):\n        print(\"A\")\n\nclass B:\n    def do(self):\n        print(\"B\")\n\nclass BA(B, A):\n    pass\n\nclass AB(A, B):\n    pass\n\nBA().do() # Prints B\nAB().do() # Prints A\n```", "```py\n>>> AB.__mro__\n (__main__.AB, __main__.A, __main__.B, object)\n\n```", "```py\n@login_required\ndef simple_view(request):\n    return HttpResponse()\n```", "```py\ndef simple_view(request):\n    return HttpResponse()\n\nsimple_view = login_required(simple_view)\n```", "```py\n    @login_required(MyView.as_view())\n    ```", "```py\n    from django.utils.decorators import method_decorator\n\n    class LoginRequiredMixin:\n        @method_decorator(login_required)\n        def dispatch(self, request, *args, **kwargs):\n            return super().dispatch(request, *args, **kwargs)\n    ```", "```py\n    class LoginRequiredMixin:\n\n        def dispatch(self, request, *args, **kwargs):\n            if not request.user.is_authenticated():\n                raise PermissionDenied\n            return super().dispatch(request, *args, **kwargs)\n    ```", "```py\nfrom braces.views import LoginRequiredMixin, AnonymousRequiredMixin\n\nclass UserProfileView(LoginRequiredMixin, DetailView):\n    # This view will be seen only if you are logged-in\n    pass  \n\nclass LoginFormView(AnonymousRequiredMixin, FormView):\n    # This view will NOT be seen if you are loggedin\n    authenticated_redirect_url = \"/feed\"\n```", "```py\nfrom braces.views import UserPassesTestMixin\n\nclass SomeStaffView(UserPassesTestMixin, TemplateView):\n    def test_func(self, user):\n        return user.is_staff\n```", "```py\nclass CheckOwnerMixin:\n\n    # To be used with classes derived from SingleObjectMixin\n    def get_object(self, queryset=None):\n        obj = super().get_object(queryset)\n        if not obj.owner == self.request.user:\n            raise PermissionDenied\n        return obj\n```", "```py\nclass FeedMixin(object):\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context[\"feed\"] = models.Post.objects.viewable_posts(self.request.user)\n        return context\n```", "```py\nclass CtxView(StaticContextMixin, generic.TemplateView):\n    template_name = \"ctx.html\"\n    static_context = {\"latest_profile\": Profile.objects.latest('pk')}\n```", "```py\nclass PublicPostJSONView(generic.View):\n\n    def get(self, request, *args, **kwargs):\n        msgs = models.Post.objects.public_posts().values(\n            \"posted_by_id\", \"message\")[:5]\n        return HttpResponse(list(msgs), content_type=\"application/json\")\n```", "```py\nfrom braces.views import JSONResponseMixin\n\nclass PublicPostJSONView(JSONResponseMixin, generic.View):\n\n    def get(self, request, *args, **kwargs):\n        msgs = models.Post.objects.public_posts().values(\n            \"posted_by_id\", \"message\")[:5]\n        return self.render_json_response(list(msgs))\n```", "```py\n>>> from django.test import Client\n>>> Client().get(\"http://0.0.0.0:8000/public/\").content\nb'[{\"posted_by_id\": 23, \"message\": \"Hello!\"},\n {\"posted_by_id\": 13, \"message\": \"Feeling happy\"},\n ...\n\n```", "```py\n>>> from urllib.parse import urlparse\n>>> urlparse(\"http://dev.example.com:80/gallery/videos?id=217#comments\")\nParseResult(scheme='http', netloc='dev.example.com:80', path='/gallery/videos', params='', query='id=217', fragment='comments')\n\n```", "```py\nurlpatterns = patterns(\n    '',\n    # Homepage\n    url(r'^$', views.IndexView.as_view(), name='home'),\n    # About\n    url(r'^about/$',\n        TemplateView.as_view(template_name=\"python/about.html\"),\n        name='about'),\n    # Blog URLs\n    url(r'^blogs/', include('blogs.urls', namespace='blog')),\n    # Job archive\n    url(r'^jobs/(?P<pk>\\d+)/$',\n        views.JobArchive.as_view(),\n        name='job_archive'),\n    # Admin\n    url(r'^admin/', include(admin.site.urls)),\n)\n```", "```py\n>>> from django.core.urlresolvers import reverse\n>>> print(reverse(\"home\"))\n\"/\"\n>>> print(reverse(\"job_archive\", kwargs={\"pk\":\"1234\"}))\n\"jobs/1234/\"\n\n```", "```py\nurl(r'^blog/', include('blog.urls', namespace='blog')),\n```", "```py\nurlpatterns = patterns(\n    '',\n    url(r'^about/$', AboutView.as_view(), name='about'),\n    url(r'^(?P<slug>\\w+)/$', ArticleView.as_view(), name='article'),\n)  \n```", "```py\nhttp://site.com/ <section> / <sub-section> / <item>\n```", "```py\n# project's main urls.py\nurlpatterns = patterns(\n    '',\n    url(r'^articles/$', include(articles.urls), namespace=\"articles\"),\n)\n\n# articles/urls.py\nurlpatterns = patterns(\n    '',\n    url(r'^$', ArticlesIndex.as_view(), name='index'),\n    url(r'^(?P<slug>\\w+)/$', ArticleView.as_view(), name='article'),\n)\n```"]