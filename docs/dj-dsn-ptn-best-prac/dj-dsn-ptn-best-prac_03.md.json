["```py\nclass Profile(models.Model):\n    user = models.OneToOneField(User)\n\nclass Post(models.Model):\n    posted_by = models.ForeignKey(User)\n\nclass Comment(models.Model):\n    commented_by = models.ForeignKey(User)\n    for_post = models.ForeignKey(Post)\n\nclass Like(models.Model):\n    liked_by = models.ForeignKey(User)\n    post = models.ForeignKey(Post)\n```", "```py\nfrom postable import Postable\nfrom post import Post\nfrom comment import Comment\n```", "```py\nclass Origin(models.Model):\n    superhero = models.ForeignKey(settings.AUTH_USER_MODEL)\n    origin = models.CharField(max_length=100)\n```", "```py\nclass Location(models.Model):\n    latitude = models.FloatField()\n    longitude = models.FloatField()\n    country = models.CharField(max_length=100)\n```", "```py\n    class Meta:\n        unique_together = (\"latitude\", \"longitude\")\n```", "```py\nclass Sighting(models.Model):\n    superhero = models.ForeignKey(settings.AUTH_USER_MODEL)\n    power = models.CharField(max_length=100)\n    location = models.ForeignKey(Location)\n    sighted_on = models.DateTimeField()\n```", "```py\n    class Meta:\n        unique_together = (\"superhero\", \"power\")\n```", "```py\nclass Postable(models.Model):\n    created = models.DateTimeField(auto_now_add=True)\n    modified = models.DateTimeField(auto_now=True)\n    message = models.TextField(max_length=500)\n\n    class Meta:\n        abstract = True\n\nclass Post(Postable):\n    ...\n\nclass Comment(Postable):\n    ...\n```", "```py\nclass TimeStampedModel(models.Model):\n    created = models.DateTimeField(auto_now_add=True)\n    modified = models.DateTimeField(auto_now =True)\n\n    class Meta:\n        abstract = True\n\nclass Postable(TimeStampedModel):\n    message = models.TextField(max_length=500)\n    ... \n\n    class Meta:\n        abstract = True\n\nclass Post(Postable):\n    ...\n\nclass Comment(Postable):\n    ...\n```", "```py\nclass Profile(models.Model):\n    user = models.OneToOneField(settings.AUTH_USER_MODEL,\n                                primary_key=True)\n```", "```py\n# signals.py\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\nfrom django.conf import settings \nfrom . import models\n\n@receiver(post_save, sender=settings.AUTH_USER_MODEL)\ndef create_profile_handler(sender, instance, created, **kwargs):\n    if not created:\n        return\n    # Create the profile object, only if it is newly created\n    profile = models.Profile(user=instance)\n    profile.save()\n```", "```py\ndefault_app_config = \"profiles.apps.ProfileConfig\"\n```", "```py\n# app.py\nfrom django.apps import AppConfig\n\nclass ProfileConfig(AppConfig):\n    name = \"profiles\"\n    verbose_name = 'User Profiles'\n\n    def ready(self):\n        from . import signals\n```", "```py\n# admin.py\nfrom django.contrib import admin\nfrom .models import Profile\nfrom django.contrib.auth.models import User\n\nclass UserProfileInline(admin.StackedInline):\n    model = Profile\n\nclass UserAdmin(admin.UserAdmin):\n    inlines = [UserProfileInline]\n\nadmin.site.unregister(User)\nadmin.site.register(User, UserAdmin)\n```", "```py\nclass BaseProfile(models.Model):\n    USER_TYPES = (\n        (0, 'Ordinary'),\n        (1, 'SuperHero'),\n    )\n    user = models.OneToOneField(settings.AUTH_USER_MODEL,\n                                primary_key=True)\n    user_type = models.IntegerField(max_length=1, null=True,\n                                    choices=USER_TYPES)\n    bio = models.CharField(max_length=200, blank=True, null=True)\n\n    def __str__(self):\n        return \"{}: {:.20}\". format(self.user, self.bio or \"\")\n\n    class Meta:\n        abstract = True\n\nclass SuperHeroProfile(models.Model):\n    origin = models.CharField(max_length=100, blank=True, null=True)\n\n    class Meta:\n        abstract = True\n\nclass OrdinaryProfile(models.Model):\n    address = models.CharField(max_length=200, blank=True, null=True)\n\n    class Meta:\n        abstract = True\n\nclass Profile(SuperHeroProfile, OrdinaryProfile, BaseProfile):\n    pass\n```", "```py\nclass Profile(models.Model):\n    ...\n\n    def is_superhero(self):\n        url = \"http://api.herocheck.com/?q={0}\".format(\n              self.user.username)\n        return webclient.get(url)\n```", "```py\nfrom .services import SuperHeroWebAPI\n\n    def is_superhero(self):\n        return SuperHeroWebAPI.is_hero(self.user.username)\n```", "```py\nAPI_URL = \"http://api.herocheck.com/?q={0}\"\n\nclass SuperHeroWebAPI:\n    ...\n    @staticmethod\n    def is_hero(username):\n        url =API_URL.format(username)\n        return webclient.get(url)\n```", "```py\nclass SuperHeroWebAPI:\n    ...\n    @staticmethod\n    def is_hero(username):\n        blacklist = set([\"syndrome\", \"kcka$$\", \"superfake\"])\n        url =API_URL.format(username)\n        return username not in blacklist and webclient.get(url)\n```", "```py\nclass BaseProfile(models.Model):\n    birthdate = models.DateField()\n    #...\n    def get_age(self):\n        today = datetime.date.today()\n        return (today.year - self.birthdate.year) - int(\n            (today.month, today.day) <\n            (self.birthdate.month, self.birthdate.day))\n```", "```py\n    @property\n    def age(self):\n```", "```py\nfrom django.utils.functional import cached_property\n    #...\n    @cached_property\n    def full_name(self):\n        # Expensive operation e.g. external service call\n        return \"{0} {1}\".format(self.firstname, self.lastname)\n```", "```py\npublic = Posts.objects.filter(privacy=\"public\")\n```", "```py\npublic = Posts.objects.filter(privacy=POST_PRIVACY.Public,\n         draft=False)\n```", "```py\n>>> Post.objects.filter(posted_by__username=\"a\")\n[<Post: a: Hello World>, <Post: a: This is Private!>]\n\n>>> Post.objects.get_queryset().filter(posted_by__username=\"a\")\n[<Post: a: Hello World>, <Post: a: This is Private!>]\n\n```", "```py\n# managers.py\nfrom django.db.models.query import QuerySet\n\nclass PostQuerySet(QuerySet):\n    def public_posts(self):\n        return self.filter(privacy=\"public\")\n\nPostManager = PostQuerySet.as_manager\n```", "```py\nfrom .managers import PostManager\nclass Post(Postable):\n    ...\n    objects = PostManager()\n```", "```py\npublic = Post.objects.public_posts()\n```", "```py\npublic_apology = Post.objects.public_posts().filter(\n                  message_startswith=\"Sorry\")\n```", "```py\n>>> q1 = User.objects.filter(username__in=[\"a\", \"b\", \"c\"])\n[<User: a>, <User: b>, <User: c>]\n>>> q2 = User.objects.filter(username__in=[\"c\", \"d\"])\n[<User: c>, <User: d>]\n\n```", "```py\nfrom django.db.models import Q\n\n# Union\n>>> User.objects.filter(Q(username__in=[\"a\", \"b\", \"c\"]) | Q(username__in=[\"c\", \"d\"]))\n[<User: a>, <User: b>, <User: c>, <User: d>]\n\n# Intersection\n>>> User.objects.filter(Q(username__in=[\"a\", \"b\", \"c\"]) & Q(username__in=[\"c\", \"d\"]))\n[<User: c>]\n\n# Difference\n>>> User.objects.filter(Q(username__in=[\"a\", \"b\", \"c\"]) & ~Q(username__in=[\"c\", \"d\"]))\n[<User: a>, <User: b>]\n```", "```py\n>>>recent = list(posts)+list(comments)\n>>>sorted(recent, key=lambda e: e.modified, reverse=True)[:3]\n[<Post: user: Post1>, <Comment: user: Comment1>, <Post: user: Post0>] \n\n```", "```py\n>>> from itertools import chain\n>>> recent = chain(posts, comments)\n>>> sorted(recent, key=lambda e: e.modified, reverse=True)[:3]\n\n```", "```py\n    python manage.py makemigrations <app_label>\n\n    ```", "```py\n    python manage.py migrate <app_label>\n\n    ```", "```py\n    python manage.py migrate <app_label>\n\n    ```"]