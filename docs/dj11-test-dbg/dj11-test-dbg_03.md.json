["```py\nimport datetime\nfrom django.test import TestCase \nfrom django.db import IntegrityError \nfrom survey.models import Survey \n\nclass SurveySaveTest(TestCase): \n    t = \"New Year's Resolutions\" \n    sd = datetime.date(2009, 12, 28) \n\n    def testClosesAutoset(self): \n        s = Survey.objects.create(title=self.t, opens=self.sd) \n        self.assertEqual(s.closes, datetime.date(2010, 1, 4))\n\n    def testClosesHonored(self):\n        s = Survey.objects.create(title=self.t, opens=self.sd, closes=self.sd) \n        self.assertEqual(s.closes, self.sd) \n\n    def testClosesReset(self): \n        s = Survey.objects.create(title=self.t, opens=self.sd) \n        s.closes = None \n        self.assertRaises(IntegrityError, s.save) \n\n    def testTitleOnly(self): \n        self.assertRaises(IntegrityError, Survey.objects.create, title=self.t) \n```", "```py\n>>> s.closes \ndatetime.date(2010, 1, 4) \n>>> \n\n```", "```py\nself.assertEqual(s.closes, datetime.date(2010, 1, 4))\n```", "```py\n>>> s = Survey.objects.create(title=t) \nTraceback (most recent call last): \n [ traceback details snipped ]\nIntegrityError: survey_survey.opens may not be NULL \n>>> \n\n```", "```py\nself.assertRaises(IntegrityError, Survey.objects.create, title=self.t)\n```", "```py\nDoctest: survey.models.Survey.save ... ok \n```", "```py\ntestClosesAutoset (survey.tests.SurveySaveTest) ... ok \ntestClosesHonored (survey.tests.SurveySaveTest) ... ok \ntestClosesReset (survey.tests.SurveySaveTest) ... ok \ntestTitleOnly (survey.tests.SurveySaveTest) ... ok \n\n```", "```py\nclass SurveySaveTest(TestCase): \n    \"\"\"Tests for the Survey save override method\"\"\" \n    t = \"New Year's Resolutions\" \n    sd = datetime.date(2009, 12, 28) \n\n    def testClosesAutoset(self): \n        \"\"\"Verify closes is autoset correctly\"\"\" \n        s = Survey.objects.create(title=self.t, opens=self.sd) \n        self.assertEqual(s.closes, datetime.date(2010, 1, 4)) \n\n    def testClosesHonored(self): \n        \"\"\"Verify closes is honored if specified\"\"\" \n        s = Survey.objects.create(title=self.t, opens=self.sd, closes=self.sd) \n        self.assertEqual(s.closes, self.sd)\n\n    def testClosesReset(self): \n        \"\"\"Verify closes is only autoset during initial create\"\"\" \n        s = Survey.objects.create(title=self.t, opens=self.sd) \n        s.closes = None \n        self.assertRaises(IntegrityError, s.save) \n\n    def testTitleOnly(self): \n        \"\"\"Verify correct exception is raised in error case\"\"\" \n        self.assertRaises(IntegrityError, Survey.objects.create, title=self.t) \n```", "```py\nVerify closes is autoset correctly ... ok \nVerify closes is honored if specified ... ok \nVerify closes is only autoset during initial create ... ok \nVerify correct exception is raised in error case ... ok \n\n```", "```py\n====================================================================== \nFAIL: Doctest: survey.models.Survey.save \n---------------------------------------------------------------------- \nTraceback (most recent call last): \n File \"/usr/lib/python2.5/site-packages/django/test/_doctest.py\", line 2180, in runTest \n raise self.failureException(self.format_failure(new.getvalue())) \nAssertionError: Failed doctest test for survey.models.Survey.save \n File \"/dj_projects/marketr/survey/models.py\", line 10, in save \n\n---------------------------------------------------------------------- \nFile \"/dj_projects/marketr/survey/models.py\", line 19, in survey.models.Survey.save \nFailed example: \n s.closes \nExpected: \n datetime.date(2010, 1, 4) \nGot: \n datetime.date(2009, 12, 28) \n\n```", "```py\n====================================================================== \nFAIL: Verify closes is autoset correctly \n---------------------------------------------------------------------- \nTraceback (most recent call last): \n File \"/dj_projects/marketr/survey/tests.py\", line 20, in testClosesAutoset \n self.assertEqual(s.closes, datetime.date(2010, 1, 4)) \nAssertionError: datetime.date(2009, 12, 28) != datetime.date(2010, 1, 4) \n\n```", "```py\n    def testClosesAutoset(self):\n        \"\"\"Verify closes is autoset correctly\"\"\"\n        s = Survey.objects.create(title=self.t, opens=self.sd)\n        self.assertEqual(s.closes, datetime.date(2010, 1, 4), \n            \"closes not autoset to 7 days after opens, expected %s, \"\"actually %s\" % \n            (datetime.date(2010, 1, 4), s.closes))\n```", "```py\n====================================================================== \nFAIL: Verify closes is autoset correctly \n---------------------------------------------------------------------- \nTraceback (most recent call last): \n File \"/dj_projects/marketr/survey/tests.py\", line 22, in testClosesAutoset \n (datetime.date(2010, 1, 4), s.closes)) \nAssertionError: closes not autoset to 7 days after opens, expected 2010-01-04, actually 2009-12-28 \n\n```", "```py\npython manage.py test survey.SurveySaveTest.testClosesAutoset \n```", "```py\nself.assertRaises(IntegrityError, s.save)\n```", "```py\ndef testClosesReset(self): \n    \"\"\"Verify closes is only autoset during initial create\"\"\" \n    s = Survey.objects.create(title=self.t, opens=self.sd) \n    s.closes = None \n    self.assertRaises(IntegrityError, s.save) \n```", "```py\n====================================================================== \nERROR: Verify closes is only autoset during initial create \n---------------------------------------------------------------------- \nTraceback (most recent call last): \n File \"/dj_projects/marketr/survey/tests.py\", line 35, in testClosesReset \n self.assertRaises(IntegrityError, s.save) \n File \"/usr/lib/python2.5/unittest.py\", line 320, in failUnlessRaises \n callableObj(*args, **kwargs) \n File \"/dj_projects/marketr/survey/models.py\", line 38, in save \n super(Survey, self).save(**kwargs) \n File \"/usr/lib/python2.5/site-packages/django/db/models/base.py\", line 410, in save \n self.save_base(force_insert=force_insert, force_update=force_update) \n File \"/usr/lib/python2.5/site-packages/django/db/models/base.py\", line 474, in save_base \n rows = manager.filter(pk=pk_val)._update(values) \n File \"/usr/lib/python2.5/site-packages/django/db/models/query.py\", line 444, in _update \n return query.execute_sql(None) \n File \"/usr/lib/python2.5/site-packages/django/db/models/sql/subqueries.py\", line 120, in execute_sql \n cursor = super(UpdateQuery, self).execute_sql(result_type) \n File \"/usr/lib/python2.5/site-packages/django/db/models/sql/query.py\", line 2369, in execute_sql \n cursor.execute(sql, params) \n File \"/usr/lib/python2.5/site-packages/django/db/backends/mysql/base.py\", line 84, in execute \n return self.cursor.execute(query, args) \n File \"/var/lib/python-support/python2.5/MySQLdb/cursors.py\", line 168, in execute \n if not self._defer_warnings: self._warning_check() \n File \"/var/lib/python-support/python2.5/MySQLdb/cursors.py\", line 82, in _warning_check \n warn(w[-1], self.Warning, 3) \n File \"/usr/lib/python2.5/warnings.py\", line 62, in warn \n globals) \n File \"/usr/lib/python2.5/warnings.py\", line 102, in warn_explicit \n raise message \nWarning: Column 'closes' cannot be null \n\n```", "```py\n====================================================================== \nFAIL: Verify closes is only autoset during initial create \n---------------------------------------------------------------------- \nTraceback (most recent call last): \n File \"/dj_projects/marketr/survey/tests.py\", line 35, in testClosesReset \n self.assertRaises(IntegrityError, s.save) \nAssertionError: IntegrityError not raised \n\n```", "```py\n    def testClosesReset(self): \n        \"\"\"Verify closes is only autoset during initial create\"\"\" \n        s = Survey.objects.create(title=self.t, opens=self.sd) \n        s.closes = None \n\n        strict = True \n        debug = False\n        from django.conf import settings \n        if settings.DATABASE_ENGINE == 'mysql': \n            from django.db import connection \n            c = connection.cursor() \n            c.execute('SELECT @@SESSION.sql_mode') \n            mode = c.fetchone()[0] \n            if 'STRICT' not in mode: \n                strict = False; \n                from django.utils import importlib\n                debug = importlib.import_module(settings.SETTINGS_MODULE).DEBUG\n\n        if strict: \n            self.assertRaises(IntegrityError, s.save) \n        elif debug: \n            self.assertRaises(Exception, s.save) \n        else: \n            s.save() \n            self.assertEqual(s.closes, None) \n```", "```py\nclass SurveyUnicodeTest(TestCase): \n    def testUnicode(self): \n        t = u'\u00bfComo est\u00e1 usted?' \n        sd = datetime.date(2009, 12, 28) \n        s = Survey.objects.create(title=t, opens=sd) \n        self.assertEqual(unicode(s), u'\u00bfComo est\u00e1 usted? (opens 2009-12-28, closes 2010-01-04)') \n```", "```py\n class Question(models.Model): \n    question = models.CharField(max_length=200) \n    survey = models.ForeignKey(Survey) \n\n    def __unicode__(self): \n        return u'%s: %s' % (self.survey, self.question) \n```", "```py\nclass Answer(models.Model): \n    answer = models.CharField(max_length=200) \n    question = models.ForeignKey(Question) \n    votes = models.IntegerField(default=0) \n```", "```py\nfrom django.conf.urls.defaults import * \n\n# Uncomment the next two lines to enable the admin: \nfrom django.contrib import admin \nadmin.autodiscover() \n\nurlpatterns = patterns('', \n    # Example: \n    # (r'^marketr/', include('marketr.foo.urls')), \n\n    # Uncomment the admin/doc line below and add # 'django.contrib.admindocs' \n    # to INSTALLED_APPS to enable admin documentation: \n    # (r'^admin/doc/', include('django.contrib.admindocs.urls')), \n\n    # Uncomment the next line to enable the admin: \n    (r'^admin/', include(admin.site.urls)), \n) \n```", "```py\nfrom django.contrib import admin \nfrom survey.models import Survey, Question, Answer \n\nclass QuestionsInline(admin.TabularInline): \n    model = Question \n    extra = 4\n\nclass AnswersInline(admin.TabularInline): \n    model = Answer \n\nclass SurveyAdmin(admin.ModelAdmin): \n    inlines = [QuestionsInline] \n\nclass QuestionAdmin(admin.ModelAdmin): \n    inlines = [AnswersInline] \n\nadmin.site.register(Survey, SurveyAdmin) \nadmin.site.register(Question, QuestionAdmin) \n```", "```py\nfrom django.db.models import Max\n\nclass Question(models.Model): \n    question = models.CharField(max_length=200) \n    survey = models.ForeignKey(Survey) \n    def winning_answers(self): \n       rv = [] \n       max_votes = self.answer_set.aggregate(Max('votes')).values()[0] \n       if max_votes and max_votes > 0: \n           rv = self.answer_set.filter(votes=max_votes) \n       return rv \n```", "```py\n>>> from survey.models import Question \n>>> q = Question.objects.get(question='Clear Winner') \n>>> from django.db.models import Max \n>>> q.answer_set.aggregate(Max('votes')) \n{'votes__max': 8} \n\n```", "```py\n>>> q.answer_set.aggregate(Max('votes')).values() \n[8] \n\n```", "```py\n>>> q.answer_set.aggregate(Max('votes')).values()[0] \n8 \n\n```", "```py\n>>> q = Question.objects.get(question='No Answers') \n>>> q.answer_set.aggregate(Max('votes')) \n{'votes__max': None} \n\n```", "```py\nfrom survey.models import Question\nclass QuestionWinningAnswersTest(TestCase): \n    def testClearWinner(self): \n        q = Question.objects.get(question='Clear Winner') \n        wa_qs = q.winning_answers() \n        self.assertEqual(wa_qs.count(), 1) \n        winner = wa_qs[0] \n        self.assertEqual(winner.answer, 'Max Votes') \n```", "```py\npython manage.py dumpdata survey --indent 4 >test_winning_answers.json\n\n```", "```py\nkmt@lbox:/dj_projects/marketr$ python manage.py test survey \nCreating test database... \nCreating table auth_permission \nCreating table auth_group \nCreating table auth_user \nCreating table auth_message \nCreating table django_content_type \nCreating table django_session \nCreating table django_site \nCreating table django_admin_log \nCreating table survey_survey \nCreating table survey_question \nCreating table survey_answer \nInstalling index for auth.Permission model \nInstalling index for auth.Message model \nInstalling index for admin.LogEntry model \nInstalling index for survey.Question model \nInstalling index for survey.Answer model \nInstalling json fixture 'initial_data' from '/dj_projects/marketr/survey/fixtures'. \nInstalled 13 object(s) from 1 fixture(s) \n......... \n---------------------------------------------------------------------- \nRan 9 tests in 0.079s \n\nOK \nDestroying test database... \n\n```", "```py\nclass QuestionWinningAnswersTest(TestCase): \n\n    fixtures = ['test_winning_answers.json'] \n\n    def testClearWinner(self): \n        q = Question.objects.get(question='Clear Winner') \n        wa_qs = q.winning_answers() \n        self.assertEqual(wa_qs.count(), 1) \n        winner = wa_qs[0] \n        self.assertEqual(winner.answer, 'Max Votes') \n```", "```py\nkmt@lbox:/dj_projects/marketr$ python manage.py test survey \nCreating test database... \nCreating table auth_permission \nCreating table auth_group \nCreating table auth_user \nCreating table auth_message \nCreating table django_content_type \nCreating table django_session \nCreating table django_site \nCreating table django_admin_log \nCreating table survey_survey \nCreating table survey_question \nCreating table survey_answer \nInstalling index for auth.Permission model \nInstalling index for auth.Message model \nInstalling index for admin.LogEntry model \nInstalling index for survey.Question model \nInstalling index for survey.Answer model \nE........ \n====================================================================== \nERROR: testClearWinner (survey.tests.QuestionWinningAnswersTest) \n---------------------------------------------------------------------- \nTraceback (most recent call last): \n File \"/dj_projects/marketr/survey/tests.py\", line 67, in testClearWinner \n q = Question.objects.get(question='Clear Winner') \n File \"/usr/lib/python2.5/site-packages/django/db/models/manager.py\", line 120, in get \n return self.get_query_set().get(*args, **kwargs) \n File \"/usr/lib/python2.5/site-packages/django/db/models/query.py\", line 305, in get \n % self.model._meta.object_name) \nDoesNotExist: Question matching query does not exist. \n\n---------------------------------------------------------------------- \nRan 9 tests in 0.066s \n\nFAILED (errors=1) \nDestroying test database... \n\n```", "```py\n    def testTwoWayTie(self): \n        q = Question.objects.get(question='2-Way Tie') \n        wa_qs = q.winning_answers() \n        self.assertEqual(wa_qs.count(), 2) \n        for winner in wa_qs: \n            self.assert_(winner.answer.startswith('Max Votes')) \n\n    def testNoResponses(self): \n        q = Question.objects.get(question='No Responses') \n        wa_qs = q.winning_answers() \n        self.assertEqual(wa_qs.count(), 0) \n\n    def testNoAnswers(self): \n        q = Question.objects.get(question='No Answers') \n        wa_qs = q.winning_answers() \n        self.assertEqual(wa_qs.count(), 0) \n```", "```py\n====================================================================== \nERROR: testNoAnswers (survey.tests.QuestionWinningAnswersTest) \n---------------------------------------------------------------------- \nTraceback (most recent call last): \n File \"/dj_projects/marketr/survey/tests.py\", line 88, in testNoAnswers \n self.assertEqual(wa_qs.count(), 0) \nTypeError: count() takes exactly one argument (0 given) \n\n====================================================================== \nERROR: testNoResponses (survey.tests.QuestionWinningAnswersTest) \n---------------------------------------------------------------------- \nTraceback (most recent call last): \n File \"/dj_projects/marketr/survey/tests.py\", line 83, in testNoResponses \n self.assertEqual(wa_qs.count(), 0) \nTypeError: count() takes exactly one argument (0 given) \n\n```", "```py\ndef winning_answers(self): \n    rv = [] \n    max_votes = self.answer_set.aggregate(Max('votes')).values()[0] \n    if max_votes and max_votes > 0: \n        rv = self.answer_set.filter(votes=max_votes) \n    return rv \n```", "```py\ndef winning_answers(self):\n    max_votes = self.answer_set.aggregate(Max('votes')).values()[0] \n    if max_votes and max_votes > 0:\n        rv = self.answer_set.filter(votes=max_votes)\n    else:\n        rv = self.answer_set.none()\n    return rv\n```", "```py\nimport datetime \nfrom django.db import models \n\nclass SurveyManager(models.Manager): \n    def completed(self): \n        return self.filter(closes__lt=datetime.date.today()) \n    def active(self): \n        return self.filter(opens__lte=datetime.date.today()).\\filter(closes__gte=datetime.date.today()) \n    def upcoming(self): \n        return self.filter(opens__gt=datetime.date.today()) \n```", "```py\n class Survey(models.Model):\n    title = models.CharField(max_length=60)\n    opens = models.DateField()\n    closes = models.DateField(blank=True)\n\n    objects = SurveyManager()\n```", "```py\nclass SurveyManagerTest(TestCase): \n    def setUp(self): \n        today = datetime.date.today() \n        oneday = datetime.timedelta(1) \n        yesterday = today - oneday \n        tomorrow = today + oneday\n        Survey.objects.all().delete()\n        Survey.objects.create(title=\"Yesterday\", opens=yesterday, closes=yesterday) \n        Survey.objects.create(title=\"Today\", opens=today, closes=today) \n        Survey.objects.create(title=\"Tomorrow\", opens=tomorrow, closes=tomorrow) \n```", "```py\n    def testCompleted(self): \n        self.assertEqual(Survey.objects.completed().count(), 1) \n        completed_survey = Survey.objects.get(title=\"Yesterday\") \n        self.assertEqual(Survey.objects.completed()[0], completed_survey) \n\n        today = datetime.date.today() \n        completed_survey.closes = today \n        completed_survey.save() \n        self.assertEqual(Survey.objects.completed().count(), 0) \n```", "```py\n    def testActive(self):\n        self.assertEqual(Survey.objects.active().count(), 1)\n        active_survey = Survey.objects.get(title=\"Today\")\n        self.assertEqual(Survey.objects.active()[0], active_survey)\n        yesterday = datetime.date.today() - datetime.timedelta(1)\n        active_survey.opens = active_survey.closes = yesterday\n        active_survey.save()\n        self.assertEqual(Survey.objects.active().count(), 0)\n```", "```py\n    def testUpcoming(self):\n        self.assertEqual(Survey.objects.upcoming().count(), 1)\n        upcoming_survey = Survey.objects.get(title=\"Tomorrow\")\n        self.assertEqual(Survey.objects.upcoming()[0], upcoming_survey)\n        yesterday = datetime.date.today() - datetime.timedelta(1)\n        upcoming_survey.opens = yesterday\n        upcoming_survey.save()\n        self.assertEqual(Survey.objects.upcoming().count(), 0)\n```", "```py\ntestActive (survey.tests.SurveyManagerTest) ... ok\ntestCompleted (survey.tests.SurveyManagerTest) ... ok\ntestUpcoming (survey.tests.SurveyManagerTest) ... ok\n```"]