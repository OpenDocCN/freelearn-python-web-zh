["```py\ndef survey_detail(request, pk): \n    survey = get_object_or_404(Survey, pk=pk) \n    today = datetime.date.today() \n    if survey.closes < today: \n        return display_completed_survey(request, survey) \n    elif survey.opens > today: \n        raise Http404(\"%s does not open until %s; it is only %s\" %\n            (survey.title, survey.opens, today))\n    else: \n        return display_active_survey(request, survey) \n```", "```py\ndef display_active_survey(request, survey): \n    return render_to_response('survey/active_survey.html', {'survey': survey}) \n```", "```py\n{% extends \"survey/base.html\" %} \n{% block content %} \n<h1>Survey questions for {{ survey.title }}</h1> \n{% endblock content %} \n```", "```py\nclass Question(models.Model): \n    question = models.CharField(max_length=200) \n    survey = models.ForeignKey(Survey) \n```", "```py\nclass Answer(models.Model): \n    answer = models.CharField(max_length=200) \n    question = models.ForeignKey(Question) \n    votes = models.IntegerField(default=0) \n```", "```py\nfrom django import forms\nclass QuestionVoteForm(forms.Form): \n    answer = forms.ModelChoiceField(widget=forms.RadioSelect) \n\n    def __init__(self, question, *args, **kwargs): \n        super(QuestionVoteForm, self).__init__(*args, **kwargs) \n        self.fields['answer'].queryset = question.answer_set.all() \n```", "```py\nfrom survey.forms import QuestionVoteForm \ndef display_active_survey(request, survey): \n    qvf = QuestionVoteForm(survey.question_set.all()[0]) \n    return render_to_response('survey/active_survey.html', {'survey': survey, 'qvf': qvf}) \n```", "```py\n{% extends \"survey/base.html\" %} \n{% block content %} \n<h1>{{ survey.title }}</h1> \n<form method=\"post\" action=\".\"> \n<div> \n{{ qvf.as_p }} \n<button type=\"submit\">Submit</button> \n</div> \n</form> \n{% endblock content %} \n```", "```py\nEnvironment:\n\nRequest Method: GET\nRequest URL: http://localhost:8000/\nDjango Version: 1.1\nPython Version: 2.5.2\nInstalled Applications:\n['django.contrib.auth',\n 'django.contrib.contenttypes',\n 'django.contrib.sessions',\n 'django.contrib.sites',\n 'django.contrib.admin',\n 'survey',\n 'django_coverage']\nInstalled Middleware:\n('django.middleware.common.CommonMiddleware',\n 'django.contrib.sessions.middleware.SessionMiddleware',\n 'django.contrib.auth.middleware.AuthenticationMiddleware')\n\nTraceback:\nFile \"/usr/lib/python2.5/site-packages/django/core/handlers/base.py\" in get_response\n 83\\.                     request.path_info)\nFile \"/usr/lib/python2.5/site-packages/django/core/urlresolvers.py\" in resolve\n 218\\.                     sub_match = pattern.resolve(new_path)\nFile \"/usr/lib/python2.5/site-packages/django/core/urlresolvers.py\" in resolve\n 218\\.                     sub_match = pattern.resolve(new_path)\nFile \"/usr/lib/python2.5/site-packages/django/core/urlresolvers.py\" in resolve\n 125\\.             return self.callback, args, kwargs\nFile \"/usr/lib/python2.5/site-packages/django/core/urlresolvers.py\" in _get_callback\n 131\\.             self._callback = get_callable(self._callback_str)\nFile \"/usr/lib/python2.5/site-packages/django/utils/functional.py\" in wrapper\n 130\\.         result = func(*args)\nFile \"/usr/lib/python2.5/site-packages/django/core/urlresolvers.py\" in get_callable\n 58\\.                 lookup_view = getattr(import_module(mod_name), func_name)\nFile \"/usr/lib/python2.5/site-packages/django/utils/importlib.py\" in import_module\n 35\\.     __import__(name)\nFile \"/dj_projects/marketr/survey/views.py\" in <module>\n 24\\. from survey.forms import QuestionVoteForm\nFile \"/dj_projects/marketr/survey/forms.py\" in <module>\n 2\\. class QuestionVoteForm(forms.Form):\nFile \"/dj_projects/marketr/survey/forms.py\" in QuestionVoteForm\n 3\\.     answer = forms.ModelChoiceField(widget=forms.RadioSelect)\n\nException Type: TypeError at /\nException Value: __init__() takes at least 2 non-keyword arguments (1 given)\n\n```", "```py\n    answer = forms.ModelChoiceField(widget=forms.RadioSelect) \n```", "```py\n    answer = forms.ModelChoiceField(widget=forms.RadioSelect, queryset=None) \n```", "```py\n    answer = forms.ModelChoiceField(None, widget=forms.RadioSelect) \n```", "```py\n        self.fields['answer'].label = question.question \n```", "```py\nclass Answer(models.Model): \n    answer = models.CharField(max_length=200) \n    question = models.ForeignKey(Question) \n    votes = models.IntegerField(default=0) \n\n    def __unicode__(self): \n        return self.answer \n```", "```py\nclass QuestionVoteForm(forms.Form): \n    answer = forms.ModelChoiceField(widget=forms.RadioSelect, queryset=None, empty_label=None) \n\n    def __init__(self, question, *args, **kwargs): \n        super(QuestionVoteForm, self).__init__(*args, **kwargs) \n        self.fields['answer'].queryset = question.answer_set.all() \n        self.fields['answer'].label = question.question \n```", "```py\ndef display_active_survey(request, survey): \n    qforms = [] \n    for i, q in enumerate(survey.question_set.all()): \n        if q.answer_set.count() > 1: \n            qforms.append(QuestionVoteForm(q, prefix=i)) \n    return render_to_response('survey/active_survey.html', {'survey': survey, 'qforms': qforms})\n```", "```py\n{% extends \"survey/base.html\" %} \n{% block content %} \n<h1>{{ survey.title }}</h1> \n<form method=\"post\" action=\".\"> \n<div> \n{% for qform in qforms %} \n    {{ qform.as_p }} \n<button type=\"submit\">Submit</button> \n</div> \n</form> \n{% endblock content %} \n```", "```py\n{% extends \"survey/base.html\" %} \n{% block content %} \n<h1>{{ survey.title }}</h1> \n<form method=\"post\" action=\".\"> \n<div> \n{% for qform in qforms %} \n    {{ qform.as_p }} \n{% endfor %} \n<button type=\"submit\">Submit</button> \n</div> \n</form> \n{% endblock content %} \n```", "```py\ndef display_active_survey(request, survey): \n    if request.method == 'POST': \n        data = request.POST \n    else: \n        data = None \n\n    qforms = []\n    for i, q in enumerate(survey.question_set.all()): \n        if q.answer_set.count() > 1: \n            qforms.append(QuestionVoteForm(q, prefix=i, data=data)) \n\n    if request.method == 'POST': \n        chosen_answers = [] \n        for qf in qforms: \n            if not qf.is_valid(): \n                break; \n            chosen_answers.append(qf.cleaned_data['answer']) \n        else: \n            from django.http import HttpResponse\n            response = \"\" \n            for answer in chosen_answers: \n                answer.votes += 1 \n                response += \"Votes for %s is now %d<br/>\" % (answer.answer, answer.votes) \n                answer.save() \n            return HttpResponse(response) \n\n    return render_to_response('survey/active_survey.html', {'survey': survey, 'qforms': qforms})\n```", "```py\n        else: \n            from django.http import HttpResponseRedirect \n            from django.core.urlresolvers import reverse \n            for answer in chosen_answers:\n                answer.votes += 1\n                answer.save()\n            return HttpResponseRedirect(reverse('survey_thanks', args=(survey.pk,)))\n```", "```py\nurlpatterns = patterns('survey.views', \n    url(r'^$', 'home', name='survey_home'), \n    url(r'^(?P<pk>\\d+)/$', 'survey_detail', name='survey_detail'),\n    url(r'^thanks/(?P<pk>\\d+/)$', 'survey_thanks', name='survey_thanks'),\n) \n```", "```py\ndef survey_thanks(request, pk): \n    survey = get_object_or_404(Survey, pk=pk) \n    return render_to_response('survey/thanks.html', {'survey': survey}) \n\n```", "```py\n    url(r'^thanks/(?P<pk>\\d+/)$', 'survey_thanks', name='survey_thanks'), \n```", "```py\n    url(r'^thanks/(?P<pk>\\d+)/$', 'survey_thanks', name='survey_thanks'), \n```", "```py\n{% extends \"survey/base.html\" %} \n{% block content %} \n<h1>Thanks</h1> \n<p>Thanks for completing our {{ survey.title }} survey.  Come back soon and check out the full results!</p> \n{% endblock content %} \n```", "```py\nclass QuestionVoteForm(forms.Form): \n    answer = forms.ModelChoiceField(widget=forms.RadioSelect, \n        queryset=None, \n        empty_label=None, \n        error_messages={'required': 'Please select an answer below:'}) \n```", "```py\n{% for qform in qforms %} \n    {{ qform.answer.label }} \n    {{ qform.answer.errors }} \n    {{ qform.answer }} \n{% endfor %} \n```", "```py\nclass QuestionVoteForm(forms.Form): \n    answer = forms.ModelChoiceField(widget=forms.RadioSelect, \n        queryset=None,                            \n        empty_label=None,                            \n        error_messages={'required': 'Please select an answer below:'}) \n\n    def __init__(self, question, *args, **kwargs): \n        super(QuestionVoteForm, self).__init__(*args, **kwargs) \n        self.fields['answer'].queryset = question.answer_set.all() \n        self.fields['answer'].label = question.question \n        self.error_class = PlainErrorList \n\nfrom django.forms.util import ErrorList \nclass PlainErrorList(ErrorList): \n    def __unicode__(self): \n        return u'%s' % ' '.join([e for e in sefl]) \n```"]