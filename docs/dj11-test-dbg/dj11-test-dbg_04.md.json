["```py\nNo fixtures found. \ntestClearWinner (survey.tests.QuestionWinningAnswersTest) ... ok \ntestNoAnswers (survey.tests.QuestionWinningAnswersTest) ... ok \ntestNoResponses (survey.tests.QuestionWinningAnswersTest) ... ok \ntestTwoWayTie (survey.tests.QuestionWinningAnswersTest) ... ok \ntestActive (survey.tests.SurveyManagerTest) ... ok \ntestCompleted (survey.tests.SurveyManagerTest) ... ok \ntestUpcoming (survey.tests.SurveyManagerTest) ... ok \nVerify closes is autoset correctly ... ok \nVerify closes is honored if specified ... ok \nVerify closes is only autoset during initial create ... ok \nVerify correct exception is raised in error case ... ok \ntestUnicode (survey.tests.SurveyUnicodeTest) ... ok \nDoctest: survey.models.Survey.__unicode__ ... ok \nDoctest: survey.models.Survey.save ... ok \nDoctest: survey.tests.__test__.survey_save ... ok \n\n---------------------------------------------------------------------- \nRan 15 tests in 0.810s \n\nOK \nDestroying test database... \n\n```", "```py\nfrom model_tests import *\n```", "```py\nNo fixtures found. \ntestClearWinner (survey.tests.model_tests.QuestionWinningAnswersTest) ... ok \ntestNoAnswers (survey.tests.model_tests.QuestionWinningAnswersTest) ... ok\n\ntestNoResponses (survey.tests.model_tests.QuestionWinningAnswersTest) ... ok \ntestTwoWayTie (survey.tests.model_tests.QuestionWinningAnswersTest) ... ok\n\ntestActive (survey.tests.model_tests.SurveyManagerTest) ... ok \ntestCompleted (survey.tests.model_tests.SurveyManagerTest) ... ok \ntestUpcoming (survey.tests.model_tests.SurveyManagerTest) ... ok \nVerify closes is autoset correctly ... ok \nVerify closes is honored if specified ... ok \nVerify closes is only autoset during initial create ... ok \nVerify correct exception is raised in error case ... ok \ntestUnicode (survey.tests.model_tests.SurveyUnicodeTest) ... ok \nDoctest: survey.models.Survey.__unicode__ ... ok \nDoctest: survey.models.Survey.save ... ok \n---------------------------------------------------------------------- \nRan 14 tests in 0.760s \n\nOK \nDestroying test database... \n\n```", "```py\nfrom model_tests import __test__ \nfrom model_tests import * \n```", "```py\nfrom model_tests import __test__ \nfrom model_tests import * \nfrom view_tests import __test__\nfrom view_tests import *\n```", "```py\nfrom django.conf.urls.defaults import * \n\nurlpatterns = patterns('survey.views', \n    url(r'^$', 'home', name='survey_home'), \n) \n```", "```py\nfrom django.conf.urls.defaults import * \n\nurlpatterns = patterns('survey.views', \n    url(r'^$', 'home', name='survey_home'), \n    url(r'^(?P<pk>\\d+)/$', 'survey_detail', name='survey_detail'), \n) \n```", "```py\nurlpatterns = patterns('', \n    # Example: \n    # (r'^marketr/', include('marketr.foo.urls')), \n\n    # Uncomment the admin/doc line below and add # 'django.contrib.admindocs' \n    # to INSTALLED_APPS to enable admin documentation: \n    # (r'^admin/doc/', include('django.contrib.admindocs.urls')), \n\n    # Uncomment the next line to enable the admin: \n    (r'^admin/', include(admin.site.urls)), \n (r'', include('survey.urls')), \n) \n```", "```py\nfrom django.http import HttpResponse \n\ndef home(request): \n    return HttpResponse(\"This is the home page.\") \n\ndef survey_detail(request, pk): \n    return HttpResponse(\"This is the survey detail page for survey, \" \"with pk=%s\" % pk) \n```", "```py\nimport datetime \nfrom django.shortcuts import render_to_response \nfrom survey.models import Survey \n\ndef home(request): \n    today = datetime.date.today() \n    active = Survey.objects.active() \n    completed = Survey.objects.completed().filter(closes__gte=today-datetime.timedelta(14)) \n    upcoming = Survey.objects.upcoming().filter(opens__lte=today+datetime.timedelta(7))\n    return render_to_response('survey/home.html', \n        {'active_surveys': active, \n         'completed_surveys': completed, \n         'upcoming_surveys': upcoming, \n        })\n```", "```py\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<html >\n<head>\n<title>{% block title %}Survey Central{% endblock %}</title>\n</head>\n<body>\n{% block content %}{% endblock %}\n</body>\n</html>\n```", "```py\n{% extends \"survey/base.html\" %} \n{% block content %} \n<h1>Welcome to Survey Central</h1> \n\n{% if active_surveys %} \n<p>Take a survey now!</p> \n<ul> \n{% for survey in active_surveys %} \n<li><a href=\"{{ survey.get_absolute_url }}\">{{ survey.title }}</a></li> \n{% endfor %} \n</ul> \n{% endif %} \n\n{% if completed_surveys %} \n<p>See how your opinions compared to those of others!</p> \n<ul> \n{% for survey in completed_surveys %} \n<li><a href=\"{{ survey.get_absolute_url }}\">{{ survey.title }}</a></li> \n{% endfor %} \n</ul> \n{% endif %} \n\n{% if upcoming_surveys %} \n<p>Come back soon to share your opinion!</p> \n<ul> \n{% for survey in upcoming_surveys %} \n<li>{{ survey.title }} opens {{ survey.opens }}</li> \n{% endfor %} \n</ul> \n{% endif %} \n{% endblock content %} \n```", "```py\n    def get_absolute_url(self): \n        from django.core.urlresolvers import reverse \n        return reverse('survey_detail', args=(self.pk,)) \n```", "```py\n    @models.permalink\n    def get_absolute_url(self):\n        return ('survey_detail', (self.pk,))\n```", "```py\nimport datetime \nfrom django.test import TestCase \nfrom survey.models import Survey \n\nclass SurveyHomeTest(TestCase): \n    def setUp(self): \n        today = datetime.date.today() \n        Survey.objects.all().delete() \n        d = today - datetime.timedelta(15) \n        Survey.objects.create(title=\"Too Old\", opens=d, closes=d) \n        d += datetime.timedelta(1) \n        Survey.objects.create(title=\"Completed 1\", opens=d, closes=d) \n        d = today - datetime.timedelta(1) \n        Survey.objects.create(title=\"Completed 2\", opens=d, closes=d) \n        Survey.objects.create(title=\"Active 1\", opens=d) \n        Survey.objects.create(title=\"Active 2\", opens=today) \n        d = today + datetime.timedelta(1) \n        Survey.objects.create(title=\"Upcoming 1\", opens=d) \n        d += datetime.timedelta(6) \n        Survey.objects.create(title=\"Upcoming 2\", opens=d) \n        d += datetime.timedelta(1) \n        Survey.objects.create(title=\"Too Far Out\", opens=d) \n```", "```py\n    def testHome(self): \n        from django.core.urlresolvers import reverse \n        response = self.client.get(reverse('survey_home')) \n        self.assertEqual(response.status_code, 200) \n```", "```py\nresponse = self.client.get('/survey/', data={'pk': 4, 'type': 'results'})\n```", "```py\nresponse = self.client.get('/survey/?pk=4&type=results')\n```", "```py\nresponse = self.client.get('/', HTTP_USER_AGENT='Tester')\n```", "```py\n    def testHome(self):\n        from django.core.urlresolvers import reverse\n        response = self.client.get(reverse('survey_home'))\n        self.assertContains(response, \"Completed\", count=2)\n        self.assertContains(response, \"Active\", count=2)\n        self.assertContains(response, \"Upcoming\", count=2)\n        self.assertNotContains(response, \"Too Old\")\n        self.assertNotContains(response, \"Too Far Out\")\n```", "```py\n        completed = response.context['completed_surveys'] \n        self.assertEqual(len(completed), 2) \n        for survey in completed: \n            self.failUnless(survey.title.startswith(\"Completed\")) \n```", "```py\n        context_vars = ['completed_surveys', 'active_surveys', 'upcoming_surveys'] \n        title_starts = ['Completed', 'Active', 'Upcoming'] \n        for context_var, title_start in zip(context_vars, title_starts):\n            surveys = response.context[context_var] \n            self.assertEqual(len(surveys), 2) \n            for survey in surveys: \n                self.failUnless(survey.title.startswith(title_start))\n```", "```py\nFAIL: testHome (survey.tests.view_tests.SurveyHomeTest) \n---------------------------------------------------------------------- \nTraceback (most recent call last): \n File \"/dj_projects/marketr/survey/tests/view_tests.py\", line 29, in testHome \n self.assertEqual(len(completed), 2) \nAssertionError: 3 != 2 \n\n---------------------------------------------------------------------- \n\n```", "```py\nFAIL: testHome (survey.tests.view_tests.SurveyHomeTest) \n---------------------------------------------------------------------- \nTraceback (most recent call last): \n File \"/dj_projects/marketr/survey/tests/view_tests.py\", line 35, in testHome \n self.assertEqual(len(surveys), 2) \nAssertionError: 3 != 2 \n\n---------------------------------------------------------------------- \n\n```", "```py\n    def testHome(self): \n        from django.core.urlresolvers import reverse \n        response = self.client.get(reverse('survey_home')) \n        self.assertNotContains(response, \"Too Old\") \n        self.assertNotContains(response, \"Too Far Out\")          \n        context_vars = ['completed_surveys', 'active_surveys', 'upcoming_surveys'] \n        title_starts = ['Completed', 'Active', 'Upcoming'] \n        for context_var, title_start in zip(context_vars, title_starts): \n            surveys = response.context[context_var] \n            self.assertEqual(len(surveys), 2, \n                \"Expected 2 %s, found %d instead\" % \n                (context_var, len(surveys))) \n            for survey in surveys: \n                self.failUnless(survey.title.startswith(title_start), \n                    \"%s title %s does not start with %s\" % \n                    (context_var, survey.title, title_start)) \n```", "```py\nFAIL: testHome (survey.tests.view_tests.SurveyHomeTest) \n---------------------------------------------------------------------- \nTraceback (most recent call last): \n File \"/dj_projects/marketr/survey/tests/view_tests.py\", line 36, in testHome \n (context_var, len(surveys))) \nAssertionError: Expected 2 completed_surveys, found 3 instead \n\n---------------------------------------------------------------------- \n\n```", "```py\nimport datetime \nfrom django.shortcuts import render_to_response, get_object_or_404 \nfrom django.http import Http404 \nfrom survey.models import Survey \ndef survey_detail(request, pk): \n    survey = get_object_or_404(Survey, pk=pk) \n    today = datetime.date.today() \n    if survey.closes < today: \n        return display_completed_survey(request, survey) \n    elif survey.opens > today: \n        raise Http404 \n    else: \n        return display_active_survey(request, survey) \n```", "```py\ndef display_completed_survey(request, survey): \n    return render_to_response('survey/completed_survey.html', {'survey': survey}) \n\ndef display_active_survey(request, survey): \n    return render_to_response('survey/active_survey.html', {'survey': survey}) \n```", "```py\n{% extends \"survey/base.html\" %} \n{% block content %} \n<h1>Survey results for {{ survey.title }}</h1> \n{% endblock content %} \n```", "```py\n{% extends \"survey/base.html\" %} \n{% block content %} \n<h1>Survey questions for {{ survey.title }}</h1> \n{% endblock content %} \n```", "```py\nfrom django.core.urlresolvers import reverse \nclass SurveyDetailTest(SurveyTest): \n    def testUpcoming(self): \n        survey = Survey.objects.get(title='Upcoming 1') \n        response = self.client.get(reverse('survey_detail', args=(survey.pk,))) \n        self.assertEqual(response.status_code, 404) \n```", "```py\nERROR: testUpcoming (survey.tests.view_tests.SurveyDetailTest)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n File \"/dj_projects/marketr/survey/tests/view_tests.py\", line 45, in testUpcoming\n response = self.client.get(reverse('survey_detail', args=(survey.pk,)))\n File \"/usr/lib/python2.5/site-packages/django/test/client.py\", line 281, in get\n response = self.request(**r)\n File \"/usr/lib/python2.5/site-packages/django/core/handlers/base.py\", line 119, in get_response\n return callback(request, **param_dict)\n File \"/usr/lib/python2.5/site-packages/django/views/defaults.py\", line 13, in page_not_found\n t = loader.get_template(template_name) # You need to create a 404.html template.\n File \"/usr/lib/python2.5/site-packages/django/template/loader.py\", line 81, in get_template\n source, origin = find_template_source(template_name)\n File \"/usr/lib/python2.5/site-packages/django/template/loader.py\", line 74, in find_template_source\n raise TemplateDoesNotExist, name\nTemplateDoesNotExist: 404.html\n\n```", "```py\n{% extends \"survey/base.html\" %}\n{% block content %}\n<h1>Page Not Found</h1>\n<p>The requested page was not found on this site.</p>\n{% endblock content %}\n```", "```py\n    def testCompleted(self): \n        survey = Survey.objects.get(title='Too Old') \n        response = self.client.get(reverse('survey_detail', args=(survey.pk,))) \n        self.assertTemplateUsed(response, 'survey/completed_survey.html')\n\n    def testActive(self): \n        survey = Survey.objects.get(title='Active 1') \n        response = self.client.get(reverse('survey_detail', args=(survey.pk,))) \n        self.assertTemplateUsed(response, 'survey/active_survey.html') \n```", "```py\nfrom django import forms\nclass SurveyForm(forms.ModelForm): \n    class Meta: \n        model = Survey \n    def clean(self): \n        opens = self.cleaned_data.get('opens') \n        closes = self.cleaned_data.get('closes') \n        if opens and closes and opens > closes: \n            raise forms.ValidationError(\"Opens date cannot come, \" \"after closes date.\") \n        return self.cleaned_data \n```", "```py\nclass SurveyAdmin(admin.ModelAdmin):\n    form = SurveyForm\n    inlines = [QuestionsInline]\n```", "```py\nimport datetime \nfrom django.test import TestCase \nfrom django.core.urlresolvers import reverse \n\nclass AdminSurveyTest(TestCase):    \n    def testAddSurveyError(self): \n        post_data = { \n            'title': u'Time Traveling', \n            'opens': datetime.date.today(), \n            'closes': datetime.date.today() - datetime.timedelta(1), \n        } \n        response = self.client.post(reverse('admin:survey_survey_add'), post_data) \n        self.assertContains(response, \"Opens date cannot come after closes date.\") \n```", "```py\nFAIL: testAddSurveyError (survey.tests.admin_tests.AdminSurveyTest) \n---------------------------------------------------------------------- \nTraceback (most recent call last): \n File \"/dj_projects/marketr/survey/tests/admin_tests.py\", line 13, in testAddSurveyError \n self.assertContains(response, \"Opens date cannot come after closes date.\") \n File \"/usr/lib/python2.5/site-packages/django/test/testcases.py\", line 345, in assertContains \n \"Couldn't find '%s' in response\" % text) \nAssertionError: Couldn't find 'Opens date cannot come after closes date.' in response \n\n---------------------------------------------------------------------- \n\n```", "```py\n<title>Log in | Django site admin</title> \n\n```", "```py\nimport datetime\nfrom django.test import TestCase\nfrom django.contrib.auth.models import User\nfrom django.core.urlresolvers import reverse\n\nclass AdminSurveyTest(TestCase):\n    def setUp(self):\n        self.username = 'survey_admin'\n        self.pw = 'pwpwpw'\n        self.user = User.objects.create_user(self.username, '', self.pw)\n        self.user.is_staff= True\n        self.user.is_superuser = True\n        self.user.save()\n        self.assertTrue(self.client.login(username=self.username, password=self.pw),\n            \"Logging in user %s, pw %s failed.\" % (self.username, self.pw))\n```", "```py\n    def tearDown(self): \n        self.client.logout() \n```", "```py\nERROR: testAddSurveyError (survey.tests.admin_tests.AdminSurveyTest) \n---------------------------------------------------------------------- \nTraceback (most recent call last): \n File \"/dj_projects/marketr/survey/tests/admin_tests.py\", line 26, in testAddSurveyError \n response = self.client.post(reverse('admin:survey_survey_add'), post_data) \n File \"/usr/lib/python2.5/site-packages/django/test/client.py\", line 313, in post \n response = self.request(**r) \n File \"/usr/lib/python2.5/site-packages/django/core/handlers/base.py\", line 92, in get_response \n response = callback(request, *callback_args, **callback_kwargs) \n File \"/usr/lib/python2.5/site-packages/django/contrib/admin/options.py\", line 226, in wrapper \n return self.admin_site.admin_view(view)(*args, **kwargs) \n File \"/usr/lib/python2.5/site-packages/django/views/decorators/cache.py\", line 44, in _wrapped_view_func \n response = view_func(request, *args, **kwargs) \n File \"/usr/lib/python2.5/site-packages/django/contrib/admin/sites.py\", line 186, in inner \n return view(request, *args, **kwargs) \n File \"/usr/lib/python2.5/site-packages/django/db/transaction.py\", line 240, in _commit_on_success \n res = func(*args, **kw) \n File \"/usr/lib/python2.5/site-packages/django/contrib/admin/options.py\", line 731, in add_view \n prefix=prefix) \n File \"/usr/lib/python2.5/site-packages/django/forms/models.py\", line 724, in __init__ \n queryset=qs) \n File \"/usr/lib/python2.5/site-packages/django/forms/models.py\", line 459, in __init__ \n super(BaseModelFormSet, self).__init__(**defaults) \n File \"/usr/lib/python2.5/site-packages/django/forms/formsets.py\", line 44, in __init__ \n self._construct_forms() \n File \"/usr/lib/python2.5/site-packages/django/forms/formsets.py\", line 87, in _construct_forms \n for i in xrange(self.total_form_count()): \n File \"/usr/lib/python2.5/site-packages/django/forms/models.py\", line 734, in total_form_count \n return super(BaseInlineFormSet, self).total_form_count() \n File \"/usr/lib/python2.5/site-packages/django/forms/formsets.py\", line 66, in total_form_count \n return self.management_form.cleaned_data[TOTAL_FORM_COUNT] \n File \"/usr/lib/python2.5/site-packages/django/forms/formsets.py\", line 54, in _management_form \n raise ValidationError('ManagementForm data is missing or has been tampered with') \nValidationError: [u'ManagementForm data is missing or has been tampered with'] \n\n---------------------------------------------------------------------- \n\n```", "```py\n    def testAddSurveyError(self): \n        post_data = { \n            'title': u'Time Traveling', \n            'opens': datetime.date.today(), \n            'closes': datetime.date.today() - datetime.timedelta(1), \n            'question_set-TOTAL_FORMS': u'0', \n            'question_set-INITIAL_FORMS': u'0', \n        } \n        response = self.client.post(reverse('admin:survey_survey_add'), post_data) \n        self.assertContains(response, \"Opens date cannot come after closes date.\") \n```", "```py\n    def testAddSurveyOK(self): \n        post_data = { \n            'title': u'Time Traveling', \n            'opens': datetime.date.today(), \n            'closes': datetime.date.today(), \n            'question_set-TOTAL_FORMS': u'0', \n            'question_set-INITIAL_FORMS': u'0', \n        } \n        response = self.client.post(reverse('admin:survey_survey_add'), post_data) \n        self.assertRedirects(response, reverse('admin:survey_survey_changelist')) \n```", "```py\ncompleted = response.context['completed_surveys'] \n```"]