["```py\n$ cd ~/projects/blog\n$ source blog/bin/activate\n(blog) $ pip install sqlalchemy\nDownloading/unpacking sqlalchemy\n\u2026\nSuccessfully installed sqlalchemy\nCleaning up...\n\n```", "```py\n$ python\n>>> import sqlalchemy\n>>> sqlalchemy.__version__\n'0.9.0b2'\n\n```", "```py\n(blog) $ pip install flask-sqlalchemy\n\u2026\nSuccessfully installed flask-sqlalchemy\n\n```", "```py\nimport os\nclass Configuration(object):\n APPLICATION_DIR = os.path.dirname(os.path.realpath(__file__))\n    DEBUG = True\n SQLALCHEMY_DATABASE_URI = 'sqlite:///%s/blog.db' % APPLICATION_DIR\n\n```", "```py\nfrom flask import Flask\nfrom flask.ext.sqlalchemy import SQLAlchemy\n\nfrom config import Configuration\n\napp = Flask(__name__)\napp.config.from_object(Configuration)\ndb = SQLAlchemy(app)\n\n```", "```py\nimport datetime, re\nfrom app import db\n\ndef slugify(s):\n    return re.sub('[^\\w]+', '-', s).lower()\n\nclass Entry(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(100))\n    slug = db.Column(db.String(100), unique=True)\n    body = db.Column(db.Text)\n    created_timestamp = db.Column(db.DateTime, default=datetime.datetime.now)\n    modified_timestamp = db.Column(\n        db.DateTime,\n        default=datetime.datetime.now, \n        onupdate=datetime.datetime.now)\n\n    def __init__(self, *args, **kwargs):\n        super(Entry, self).__init__(*args, **kwargs)  # Call parent constructor.\n        self.generate_slug()\n\n    def generate_slug(self):\n        self.slug = ''\n        if self.title:\n            self.slug = slugify(self.title)\n\n    def __repr__(self):\n        return '<Entry: %s>' % self.title\n```", "```py\nfrom app import app, db\nimport models\nimport views\n\nif __name__ == '__main__':\n    app.run()\n```", "```py\n(blog) $ cd app/\n(blog) $ mkdir scripts\n(blog) $ touch scripts/create_db.py\n\n```", "```py\nimport os, sys\nsys.path.append(os.getcwd())\nfrom main import db\n\nif __name__ == '__main__':\n    db.create_all()\n```", "```py\n(blog) $ python create_db.py \n(blog) $\n\n```", "```py\n(blog) $ pip install ipython\n\n```", "```py\n(blog) $ ipython\n\nIn []: from models import *  # First things first, import our Entry model and db object.\nIn []: db  # What is db?\nOut[]: <SQLAlchemy engine='sqlite:////home/charles/projects/blog/app/blog.db'>\n\n```", "```py\nIn []: Entry?  # What is Entry and how do we create it?\nType:       _BoundDeclarativeMeta\nString Form:<class 'models.Entry'>\nFile:       /home/charles/projects/blog/app/models.py\nDocstring:  <no docstring>\nConstructor information:\n Definition:Entry(self, *args, **kwargs)\n\n```", "```py\nIn []: first_entry = Entry(title='First entry', body='This is the body of my first entry.')\n\n```", "```py\nIn []: db.session.add(first_entry)\nIn []: first_entry.id is None  # No primary key, the entry has not been saved.\nOut[]: True\nIn []: db.session.commit()\nIn []: first_entry.id\nOut[]: 1\nIn []: first_entry.created_timestamp\nOut[]: datetime.datetime(2014, 1, 25, 9, 49, 53, 1337)\n\n```", "```py\nIn []: first_entry = Entry.query.get(1)\nIn []: first_entry.body = 'This is the first entry, and I have made some edits.'\nIn []: db.session.commit()\n\n```", "```py\nIn []: bad_entry = Entry(title='bad entry', body='This is a lousy entry.')\nIn []: db.session.add(bad_entry)\nIn []: db.session.commit()  # Save the bad entry to the database.\nIn []: db.session.delete(bad_entry)\nIn []: db.session.commit()  # The bad entry is now deleted from the database.\n\n```", "```py\nIn []: entries = Entry.query.all()\nIn []: entries  # What are our entries?\nOut[]: [<Entry u'First entry'>, <Entry u'Second entry'>, <Entry u'Third entry'>, <Entry u'Fourth entry'>]\n\n```", "```py\nIn []: Entry.query.order_by(Entry.title.asc()).all()\nOut []:\n[<Entry u'First entry'>,\n <Entry u'Fourth entry'>,\n <Entry u'Second entry'>,\n <Entry u'Third entry'>]\n\n```", "```py\nIn []: oldest_to_newest = Entry.query.order_by(Entry.modified_timestamp.desc()).all()\nOut []:\n[<Entry: Fourth entry>,\n <Entry: Third entry>,\n <Entry: Second entry>,\n <Entry: First entry>]\n\n```", "```py\nIn []: Entry.query.filter(Entry.title == 'First entry').all()\nOut[]: [<Entry u'First entry'>]\n\n```", "```py\nIn []: Entry.query.filter(Entry.title == 'First entry').first()\nOut[]: <Entry u'First entry'>\n\n```", "```py\nEntry.query.filter(Entry.title.contains('Python') | Entry.title.contains('Flask'))\n```", "```py\nEntry.query.filter(\n    (Entry.title.contains('Python') | Entry.title.contains('Flask')) &\n    (Entry.created_timestamp > (datetime.date.today() - datetime.timedelta(days=30)))\n)\n```", "```py\nIn []: query = Entry.query.filter(\n (Entry.title.contains('Python') | Entry.title.contains('Flask')) &\n (Entry.created_timestamp > (datetime.date.today() - datetime.timedelta(days=30)))\n)\nIn []: print str(query)\n\nSELECT entry.id AS entry_id, ...\nFROM entry \nWHERE (\n (entry.title LIKE '%%' || :title_1 || '%%') OR (entry.title LIKE '%%' || :title_2 || '%%')\n) AND entry.created_timestamp > :created_timestamp_1\n\n```", "```py\nIn []: Entry.query.filter(~(Entry.title.contains('Python') | Entry.title.contains('Flask')))\n\n```", "```py\nIn []: Entry.query.filter(db.not_(Entry.title.contains('Python') | Entry.title.contains('Flask')))\n\n```", "```py\nclass Tag(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(64))\n    slug = db.Column(db.String(64), unique=True)\n\n    def __init__(self, *args, **kwargs):\n        super(Tag, self).__init__(*args, **kwargs)\n        self.slug = slugify(self.name)\n\n    def __repr__(self):\n        return '<Tag %s>' % self.name\n```", "```py\nimport datetime, re\n\nfrom app import db\n\ndef slugify(s):\n    return re.sub('[^\\w]+', '-', s).lower()\n\nentry_tags = db.Table('entry_tags',\n db.Column('tag_id', db.Integer, db.ForeignKey('tag.id')),\n db.Column('entry_id', db.Integer, db.ForeignKey('entry.id'))\n)\n\nclass Entry(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(100))\n    slug = db.Column(db.String(100), unique=True)\n    body = db.Column(db.Text)\n    created_timestamp = db.Column(db.DateTime, default=datetime.datetime.now)\n    modified_timestamp = db.Column(\n        db.DateTime,\n        default=datetime.datetime.now,\n        onupdate=datetime.datetime.now)\n\n tags = db.relationship('Tag', secondary=entry_tags,\n backref=db.backref('entries', lazy='dynamic'))\n\n    def __init__(self, *args, **kwargs):\n        super(Entry, self).__init__(*args, **kwargs)\n        self.generate_slug()\n\n    def generate_slug(self):\n        self.slug = ''\n        if self.title:\n            self.slug = slugify(self.title)\n\n    def __repr__(self):\n        return '<Entry %s>' % self.title\n\nclass Tag(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(64))\n    slug = db.Column(db.String(64), unique=True)\n\n    def __init__(self, *args, **kwargs):\n        super(Tag, self).__init__(*args, **kwargs)\n        self.slug = slugify(self.name)\n\n    def __repr__(self):\n        return '<Tag %s>' % self.name\n```", "```py\ntags = db.relationship('Tag', secondary=entry_tags,\n    backref=db.backref('entries', lazy='dynamic'))\n```", "```py\n(blog) $ python scripts/create_db.py\n(blog) $ ipython\nIn []: from models import *\nIn []: Tag.query.all()\nOut[]: []\n\n```", "```py\nIn []: python = Tag(name='python')\nIn []: flask = Tag(name='flask')\nIn []: db.session.add_all([python, flask])\nIn []: db.session.commit()\n\n```", "```py\nIn []: Entry.query.all()\nOut[]:\n[<Entry Py\nthon entry>,\n <Entry Flask entry>,\n <Entry More flask>,\n <Entry Django entry>]\nIn []: python_entry, flask_entry, more_flask, django_entry = _\n\n```", "```py\nIn []: python_entry.tags = [python]\nIn []: flask_entry.tags = [python, flask]\nIn []: db.session.commit()\n\n```", "```py\nIn []: kittens = Tag(name='kittens')\nIn []: python_entry.tags.append(kittens)\nIn []: db.session.commit()\nIn []: python_entry.tags\nOut[]: [<Tag python>, <Tag kittens>]\nIn []: python_entry.tags.remove(kittens)\nIn []: db.session.commit()\nIn []: python_entry.tags\nOut[]: [<Tag python>]\n\n```", "```py\nIn []: python  # The python variable is just a tag.\nOut[]: <Tag python>\nIn []: python.entries\nOut[]: <sqlalchemy.orm.dynamic.AppenderBaseQuery at 0x332ff90>\nIn []: python.entries.all()\nOut[]: [<Entry Flask entry>, <Entry Python entry>]\n\n```", "```py\nIn []: python.entries.order_by(Entry.created_timestamp.desc()).first()\nOut[]: <Entry Flask entry>\n\n```", "```py\n(blog) $ pip install flask-migrate\n\n```", "```py\nfrom flask import Flask\nfrom flask.ext.migrate import Migrate, MigrateCommand\nfrom flask.ext.script import Manager\nfrom flask.ext.sqlalchemy import SQLAlchemy\n\nfrom config import Configuration\n\napp = Flask(__name__)\napp.config.from_object(Configuration)\ndb = SQLAlchemy(app)\nmigrate = Migrate(app, db)\n\nmanager = Manager(app)\nmanager.add_command('db', MigrateCommand)\n\n```", "```py\nfrom app import manager\nfrom main import *\n\nif __name__ == '__main__':\n    manager.run()\n```", "```py\n(blog) $ python manage.py db init\n\n Creating directory /home/charles/projects/blog/app/migrations ... done\n ...\n(blog) $ python manage.py db migrate\nINFO  [alembic.migration] Context impl SQLiteImpl.\nINFO  [alembic.migration] Will assume non-transactional DDL.\n Generating /home/charles/projects/blog/app/migrations/versions/535133f91f00_.py ... done\n\n```", "```py\n(blog) $ python manage.py db upgrade\nINFO  [alembic.migration] Context impl SQLiteImpl.\nINFO  [alembic.migration] Will assume non-transactional DDL.\nINFO  [alembic.migration] Running upgrade None -> 535133f91f00, empty message\n\n```", "```py\nclass Entry(db.Model):\n STATUS_PUBLIC = 0\n STATUS_DRAFT = 1\n\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(100))\n    slug = db.Column(db.String(100), unique=True)\n    body = db.Column(db.Text)\n status = db.Column(db.SmallInteger, default=STATUS_PUBLIC)\n    created_timestamp = db.Column(db.DateTime, default=datetime.datetime.now)\n    ...\n```", "```py\n(blog) $ python manage.py db migrate\nINFO  [alembic.migration] Context impl SQLiteImpl.\nINFO  [alembic.migration] Will assume non-transactional DDL.\nINFO  [alembic.autogenerate.compare] Detected added column 'entry.status'\n Generating /home/charl\nes/projects/blog/app/migrations/versions/2c8e81936cad_.py ... done\n\n```", "```py\nop.add_column('entry', sa.Column('status', sa.SmallInteger(), nullable=True))\n```", "```py\nop.add_column('entry', sa.Column('status', sa.SmallInteger(), server_default='0'))\n```", "```py\n(blog) $ python manage.py db upgrade\nINFO  [alembic.migration] Context impl SQLiteImpl.\nINFO  [alembic.migration] Will assume non-transactional DDL.\nINFO  [alembic.migration] Running upgrade 535133f91f00 -> 2c8e81936cad, empty message\n\n```"]