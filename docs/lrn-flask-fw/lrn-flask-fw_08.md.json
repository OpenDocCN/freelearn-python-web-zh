["```py\nimport unittest\n\nclass ExampleTest(unittest.TestCase):\n  def setUp(self):\n    pass\n\n  def tearDown(self):\n    pass\n\n  def test_some_functionality(self):\n    pass\n\n  def test_some_other_functionality(self):\n    pass\n\nif __name__ == \"__main__\":\n  unittest.main()\n```", "```py\n  def test_minus_one_multiplication(self):\n    self.assertEqual(my_multiplication(1,1), 0)\n    self.assertEqual(my_multiplication(1,2), 1)\n    self.assertEqual(my_multiplication(2,3), 4)\n    self.assertNotEqual(my_multiplication(2,2), 3)\n```", "```py\ndef my_multiplication(value1, value2):\n  return value1 * value2 \u2013 1\n```", "```py\npython test.py\n\n```", "```py\ndef my_multiplication(value1, value2):\n  return value1 * (value2 \u2013 1)\n```", "```py\nimport unittest\nfrom flask import request\nfrom main import app\n\nclass AppTest(unittest.TestCase):\n  def setUp(self):\n    self.app = app.test_client()\n\n  def test_homepage_works(self):\n    response = self.app.get(\"/\")\n    self.assertEqual(response.status_code, 200)\n\nif __name__ == \"__main__\":\n  unittest.main()\n```", "```py\n    LOGIN_URL = \"/login/\"\n    LOGOUT_URL = \"/logout/\"\n\n    def login (self, email, password):\n        return self.app.post(self.LOGIN_URL, data={\n            \"email\": email,\n            \"password\": password\n        }, follow_redirects=True)\n```", "```py\nclass ExampleFlaskTest(unittest.TestCase, FlaskLoginMixin):\n  def setUp(self):\n    self.app = app.test_client()\n\n  def test_login(self):\n    response = self.login(\"admin\", \"password\")\n    self.assertEqual(response.status_code, 200)\n    self.assertTrue(\"Success\" in response.data)\n\n  def test_failed_login(self):\n    response = self.login(\"admin\", \"PASSWORD\")\n        self.assertEqual(response.status_code, 200)\n        self.assertTrue(\"Invalid\" in response.data)\n\n  def test_logout(self):\n    response = self.logout()\n    self.assertEqual(response.status_code, 200)\n    self.assertTrue(\"logged out\" in response.data)\n```", "```py\nclass ExampleFlaskTest(unittest.TestCase, FlaskLoginMixin):\n  def setUp(self):\n    self.app = app.test_client()\n\n  def test_admin_can_get_to_admin_page(self):\n    self.login(\"admin\", \"password\")\n    response = self.app.get(\"/admin/\")\n    self.assertEqual(response.status_code, 200)\n    self.assertTrue(\"Hello\" in response.data)\n\n  def test_non_logged_in_user_can_get_to_admin_page(self):\n    response = self.app.get(\"/admin/\")\n    self.assertEqual(response.status_code, 302)\n    self.assertTrue(\"redirected\" in response.data)\n\n  def test_normal_user_cannot_get_to_admin_page(self):\n    self.login(\"user\", \"password\")\n    response = self.app.get(\"/admin/\")\n    self.assertEqual(response.status_code, 302)\n    self.assertTrue(\"redirected\" in response.data)\n\n  def test_logging_out_prevents_access_to_admin_page(self):\n    self.login(\"admin\", \"password\")\n    self.logout()\n    response = self.app.get(\"/admin/\")\n    self.assertEqual(response.status_code, 302)\n    self.assertTrue(\"redirected\" in response.data)\n```", "```py\nclass ExampleFlaskAPITest(unittest.TestCase, FlaskLoginMixin):\n  def setUp(self):\n    self.app = app.test_client()\n    self.comment_data = {\n      \"name\": \"admin\",\n      \"email\": \"admin@example.com\",\n      \"url\": \"http://localhost\",\n      \"ip_address\": \"127.0.0.1\",\n      \"body\": \"test comment!\",\n      \"entry_id\": 1\n    }\n\n  def test_adding_comment(self):\n    self.login(\"admin\", \"password\")\n      data=json.dumps(self.comment_data), content_type=\"application/json\")\n    self.assertEqual(response.status_code, 200)\n    self.assertTrue(\"body\" in response.data)\n    self.assertEqual(json.loads(response.data)['body'], self.comment_data[\"body\"])\n\n  def test_getting_comment(self):\n            result = self.app.post(\"/api/comment\",\n            data=json.dumps(self.comment_data), content_type=\"application/json\")\n        response = self.app.get(\"/api/comment\")\n        self.assertEqual(response.status_code, 200)\n        self.assertTrue(json.loads(result.data) in json.loads(response.data)['objects'])\n```", "```py\napp.config.from_envvar('FLASK_APP_BLOG_CONFIG_FILE')\n```", "```py\nTESTING=True\nDATABASE=\"sqlite://\n```", "```py\nimport os\nos.environ['FLASK_APP_BLOG_CONFIG_FILE'] = os.path.join(os.getcwd(), \"config\", \"testing.py\")\n```", "```py\npip install mockito\n\n```", "```py\n>>> from mockito import *\n>>> mock_object = mock()\n>>> mock_object.example()\n>>> verify(mock_object).example()\nTrue\n\n```", "```py\n>>> duck = mock()\n>>> when(duck).quack().thenReturn(\"quack\")\n>>> duck.quack()\n\"quack\"\n\n```", "```py\nfrom flask import Flask, g\n\napp = Flask(\"example\")\n\ndef get_db():\n  return {}\n\n@app.before_request\ndef setup_db():\n  g.db = get_db()\n\n@app.route(\"/\")\ndef homepage():\n  return g.db.get(\"foo\")\n```", "```py\nfrom mockito import *\nimport unittest\nimport app\n\nclass FlaskExampleTest(unittest.TestCase):\n  def setUp(self):\n    self.app = app.app.test_client()\n    self.db = mock()\n    def get_fake_db():\n      return self.db\n    app.get_db =  get_fake_db\n\n  def test_before_request_override(self):\n    when(self.db).get(\"foo\").thenReturn(\"123\")\n    response = self.app.get(\"/\")\n    self.assertEqual(response.status_code, 200)\n    self.assertEqual(response.data, \"123\")\n\nif __name__ == \"__main__\":\n  unittest.main()\n```", "```py\nfrom logging.handlers import RotatingFileHandler\nfile_handler = RotatingFileHandler('blog.log')\napp.logger.addHandler(file_handler)\n```", "```py\n@app.route(\"/\")\ndef homepage():\n  app.logger.info(\"Homepage has been accessed.\")\n```", "```py\napp.logger.warning(\"'{user}' failed to login successfully.\".format(user=user))\n```", "```py\nimport logging\nLOG_LEVEL=logging.WARNING\nNow in your app.py add the line:\napp.logger.setLevel(config['LOG_LEVEL'])\n```", "```py\nLOG_LEVEL=logging.ERROR\n```", "```py\nfrom logging.handlers import SMTPHandler\nemail_handler = SMTPHandler(\"127.0.0.1\", \"admin@localhost\", app.config['ADMIN_EMAILS'], \"{appname} error\".format(appname=app.name))\napp.logger.addHandler(email_handler)\n```"]