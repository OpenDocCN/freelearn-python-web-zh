["```py\nclass Comment(db.Model):\n    STATUS_PENDING_MODERATION = 0\n    STATUS_PUBLIC = 1\n    STATUS_SPAM = 8\n    STATUS_DELETED = 9\n\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(64))\n    email = db.Column(db.String(64))\n    url = db.Column(db.String(100))\n    ip_address = db.Column(db.String(64))\n    body = db.Column(db.Text)\n    status = db.Column(db.SmallInteger, default=STATUS_PUBLIC)\n    created_timestamp = db.Column(db.DateTime, default=datetime.datetime.now)\n    entry_id = db.Column(db.Integer, db.ForeignKey('entry.id'))\n\n    def __repr__(self):\n        return '<Comment from %r>' % (self.name,)\n```", "```py\nclass Entry(db.Model):\n    # ...\n    tags = db.relationship('Tag', secondary=entry_tags,\n        backref=db.backref('entries', lazy='dynamic'))\n    comments = db.relationship('Comment', backref='entry', lazy='dynamic')\n\n```", "```py\n(blog) $ python manage.py db migrate\nINFO  [alembic.migration] Context impl SQLiteImpl.\nINFO  [alembic.migration] Will assume non-transactional DDL.\nINFO  [alembic.autogenerate.compare] Detected added table 'comment'\n Generating /home/charles/projects/blog/app/migrations/versions/490b6bc5f73c_.py ... done\n\n```", "```py\n(blog) $ python manage.py db upgrade\nINFO  [alembic.migration] Context impl SQLiteImpl.\nINFO  [alembic.migration] Will assume non-transactional DDL.\nINFO  [alembic.migration] Running upgrade 594ebac9ef0c -> 490b6bc5f73c, empty message\n\n```", "```py\n(blog) $ pip install Flask-Restless\n\n```", "```py\n(blog) $ ./manage.py shell\n\nIn [1]: import flask_restless\n\nIn [2]: flask_restless.__version__\nOut[2]: '0.13.0'\n\n```", "```py\n# Place this import at the top of the module alongside the other extensions.\nfrom flask.ext.restless import APIManager\n\n# Place this line below the initialization of the app and db objects.\napi = APIManager(app, flask_sqlalchemy_db=db)\n```", "```py\nfrom app import api\nfrom models import Comment\n\napi.create_api(Comment, methods=['GET', 'POST'])\n```", "```py\nfrom app import app, db\nimport admin\nimport api\nimport models\nimport views\n\n...\n```", "```py\n$ curl 127.0.0.1:5000/api/comment\n{\n \"num_results\": 0,\n \"objects\": [],\n \"page\": 1,\n \"total_pages\": 0\n}\n\n```", "```py\n$ curl -X POST -H \"Content-Type: application/json\" -d '{\n \"name\": \"Charlie\",\n \"email\": \"charlie@email.com\",\n \"url\": \"http://charlesleifer.com\",\n \"ip_address\": \"127.0.0.1\",\n \"body\": \"Test comment!\",\n \"entry_id\": 1}' http://127.0.0.1:5000/api/comment\n\n```", "```py\n{\n  \"body\": \"Test comment!\",\n  \"created_timestamp\": \"2014-04-22T19:48:33.724118\",\n  \"email\": \"charlie@email.com\",\n  \"entry\": {\n    \"author_id\": 1,\n    \"body\": \"This is an entry about Python, my favorite programming language.\",\n    \"created_timestamp\": \"2014-03-06T19:50:09\",\n    \"id\": 1,\n    \"modified_timestamp\": \"2014-03-06T19:50:09\",\n    \"slug\": \"python-entry\",\n    \"status\": 0,\n    \"title\": \"Python Entry\"\n  },\n  \"entry_id\": 1,\n  \"id\": 1,\n  \"ip_address\": \"127.0.0.1\",\n  \"name\": \"Charlie\",\n  \"status\": 0,\n  \"url\": \"http://charlesleifer.com\"\n}\n```", "```py\n$ curl 127.0.0.1:5000/api/comment\n{\n \"num_results\": 1,\n \"objects\": [\n {\n \"body\": \"Test comment!\",\n \"created_timestamp\": \"2014-04-22T19:48:33.724118\",\n \"email\": \"charlie@email.com\",\n \"entry\": {\n \"author_id\": 1,\n \"body\": \"This is an entry about Python, my favorite programming language.\",\n \"created_timestamp\": \"2014-03-06T19:50:09\",\n \"id\": 1,\n \"modified_timestamp\": \"2014-03-06T19:50:09\",\n \"slug\": \"python-entry\",\n \"status\": 0,\n \"title\": \"Python Entry\"\n },\n \"entry_id\": 1,\n \"id\": 1,\n \"ip_address\": \"127.0.0.1\",\n \"name\": \"Charlie\",\n \"status\": 0,\n \"url\": \"http://charlesleifer.com\"\n }\n ],\n \"page\": 1,\n \"total_pages\": 1\n}\n\n```", "```py\nclass CommentForm(wtforms.Form):\n    name = wtforms.StringField('Name', validators=[validators.DataRequired()])\n    email = wtforms.StringField('Email', validators=[\n        validators.DataRequired(),\n        validators.Email()])\n    url = wtforms.StringField('URL', validators=[\n        validators.Optional(),\n        validators.URL()])\n    body = wtforms.TextAreaField('Comment', validators=[\n        validators.DataRequired(),\n        validators.Length(min=10, max=3000)])\n    entry_id = wtforms.HiddenField(validators=[\n        validators.DataRequired()])\n\n    def validate(self):\n        if not super(CommentForm, self).validate():\n            return False\n\n        # Ensure that entry_id maps to a public Entry.\n        entry = Entry.query.filter(\n            (Entry.status == Entry.STATUS_PUBLIC) &\n            (Entry.id == self.entry_id.data)).first()\n        if not entry:\n            return False\n\n        return True\n```", "```py\nfrom entries.forms import EntryForm, ImageForm, CommentForm\n\n```", "```py\n@entries.route('/<slug>/')\ndef detail(slug):\n    entry = get_entry_or_404(slug)\n    form = CommentForm(data={'entry_id': entry.id})\n    return render_template('entries/detail.html', entry=entry, form=form)\n```", "```py\n{% from \"macros/form_field.html\" import form_field %}\n<form action=\"/api/comment\" class=\"form form-horizontal\" id=\"comment-form\" method=\"post\">\n  {{ form_field(form.name) }}\n  {{ form_field(form.email) }}\n  {{ form_field(form.url) }}\n  {{ form_field(form.body) }}\n  {{ form.entry_id() }}\n  <div class=\"form-group\">\n    <div class=\"col-sm-offset-3 col-sm-9\">\n      <button type=\"submit\" class=\"btn btn-default\">Submit</button>\n    </div>\n  </div>\n</form>\n```", "```py\n{% block content %}\n  {{ entry.body }}\n\n  <h4 id=\"comment-form\">Submit a comment</h4>\n {% include \"entries/includes/comment_form.html\" %}\n{% endblock %}\n```", "```py\nComments = window.Comments || {};\n\n(function(exports, $) { /* Template string for rendering success or error messages. */\n  var alertMarkup = (\n    '<div class=\"alert alert-{class} alert-dismissable\">' +\n    '<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\">&times;</button>' +\n    '<strong>{title}</strong> {body}</div>');\n\n  /* Create an alert element. */\n  function makeAlert(alertClass, title, body) {\n    var alertCopy = (alertMarkup\n                     .replace('{class}', alertClass)\n                     .replace('{title}', title)\n                     .replace('{body}', body));\n    return $(alertCopy);\n  }\n\n  /* Retrieve the values from the form fields and return as an object. */\n  function getFormData(form) {\n    return {\n      'name': form.find('input#name').val(),\n      'email': form.find('input#email').val(),\n      'url': form.find('input#url').val(),\n      'body': form.find('textarea#body').val(),\n      'entry_id': form.find('input[name=entry_id]').val()\n    }\n  }\n\n  function bindHandler() {\n    /* When the comment form is submitted, serialize the form data as JSON\n             and POST it to the API. */\n    $('form#comment-form').on('submit', function() {\n      var form = $(this);\n      var formData = getFormData(form);\n      var request = $.ajax({\n        url: form.attr('action'),\n        type: 'POST',\n        data: JSON.stringify(formData),\n        contentType: 'application/json; charset=utf-8',\n        dataType: 'json'\n      });\n      request.success(function(data) {\n        alertDiv = makeAlert('success', 'Success', 'your comment was posted.');\n        form.before(alertDiv);\n        form[0].reset();\n      });\n      request.fail(function() {\n        alertDiv = makeAlert('danger', 'Error', 'your comment was not posted.');\n        form.before(alertDiv);\n      });\n      return false;\n    });\n  }\n\n  exports.bindHandler = bindHandler;\n})(Comments, jQuery);\n```", "```py\n{% block extra_scripts %}\n  <script type=\"text/javascript\" src=\"img/comments.js') }}\"></script>\n  <script type=\"text/javascript\">\n    $(function() {\n      Comments.bindHandler();\n    });\n  </script>\n{% endblock %}\n```", "```py\nfrom flask.ext.restless import ProcessingException\n\nfrom app import api\nfrom entries.forms import CommentForm\nfrom models import Comment\n\ndef post_preprocessor(data, **kwargs):\n    form = CommentForm(data=data)\n    if form.validate():\n        return form.data\n    else:\n        raise ProcessingException(\n            description='Invalid form submission.',\n            code=400)\n\napi.create_api(\n    Comment,\n    methods=['GET', 'POST'],\n    preprocessors={\n        'POST': [post_preprocessor],\n    })\n```", "```py\napi.create_api(\n    Comment,\n    include_columns=['id', 'name', 'url', 'body', 'created_timestamp'],\n    methods=['GET', 'POST'],\n    preprocessors={\n        'POST': [post_preprocessor],\n    })\n```", "```py\n$ curl http://127.0.0.1:5000/api/comment\n{\n \"num_results\": 1,\n \"objects\": [\n {\n \"body\": \"Test comment!\",\n \"created_timestamp\": \"2014-04-22T19:48:33.724118\",\n \"name\": \"Charlie\",\n \"url\": \"http://charlesleifer.com\"\n }\n ],\n \"page\": 1,\n \"total_pages\": 1\n}\n\n```", "```py\ndef gravatar(self, size=75):\n    return 'http://www.gravatar.com/avatar.php?%s' % urllib.urlencode({\n        'gravatar_id': hashlib.md5(self.email).hexdigest(),\n        'size': str(size)})\n```", "```py\napi.create_api(\n    Comment,\n    include_columns=['id', 'name', 'url', 'body', 'created_timestamp'],\n    include_methods=['gravatar'],\n    methods=['GET', 'POST'],#, 'DELETE'],\n    preprocessors={\n        'POST': [post_preprocessor],\n    })\n```", "```py\n(function(exports, $) {:\nfunction displayNoComments() {\n  noComments = $('<h3>', {\n    'text': 'No comments have been posted yet.'});\n  $('h4#comment-form').before(noComments);\n}\n\n/* Template string for rendering a comment. */\nvar commentTemplate = (\n  '<div class=\"media\">' +\n    '<a class=\"pull-left\" href=\"{url}\">' +\n      '<img class=\"media-object\" src=\"img/{gravatar}\" />' +\n    '</a>' +\n    '<div class=\"media-body\">' +\n    '<h4 class=\"media-heading\">{created_timestamp}</h4>{body}' +\n  '</div></div>'\n);\n\nfunction renderComment(comment) {\n  var createdDate = new Date(comment.created_timestamp).toDateString();\n  return (commentTemplate\n          .replace('{url}', comment.url)\n          .replace('{gravatar}', comment.gravatar)\n          .replace('{created_timestamp}', createdDate)\n          .replace('{body}', comment.body));\n}\n\nfunction displayComments(comments) {\n  $.each(comments, function(idx, comment) {\n    var commentMarkup = renderComment(comment);\n    $('h4#comment-form').before($(commentMarkup));\n  });\n}\n\nfunction load(entryId) {\n  var filters = [{\n    'name': 'entry_id',\n    'op': 'eq',\n    'val': entryId}];\n  var serializedQuery = JSON.stringify({'filters': filters});\n\n  $.get('/api/comment', {'q': serializedQuery}, function(data) {\n    if (data['num_results'] === 0) {\n      displayNoComments();\n    } else {\n      displayComments(data['objects']);\n    }\n  });\n}\n```", "```py\nexports.load = load;\nexports.bindHandler = bindHandler;\n```", "```py\n<script type=\"text/javascript\">\n  $(function() {\n    Comments.load({{ entry.id }});\n    Comments.bindHandler();\n  });\n</script>\n```"]