["```py\npip install flask-seasurf\n\n```", "```py\nfrom flask.ext.seasurf import SeaSurf\ncsrf = SeaSurf(app)\n```", "```py\nfrom flask.ext.wtf import HiddenField\nimport g\n\nfrom app import app\n\nclass CSRFMixin(object):\n  @staticmethod\n  @app.before_request\n  def add_csrf():\n    self._csrf_token = HiddenField(default=g._csrf_token)\n```", "```py\nclass LoginForm(Form, CSRFMixin):\n```", "```py\nfrom urlparse import urljoin\nfrom flask import request, url_for\nfrom werkzeug.contrib.atom import AtomFeed\nfrom models import Entry\n```", "```py\n@app.route('/latest.atom')\ndef recent_feed():\n    feed = AtomFeed(\n        'Latest Blog Posts',\n        feed_url=request.url,\n         url=request.url_root,\n         author=request.url_root\n     )\n    entries = EntrY.query.filter(Entry.status == Entry.STATUS_PUBLIC).order_by(EntrY.created_timestamp.desc()).limit(15).all()\n    for entry in entries:\n        feed.add(\n            entry.title,\n            entry.body,\n            content_type='html',\n            url=urljoin(request.url_root, url_for(\"entries.detail\", slug=entry.slug) ),\n            updated=entry.modified_timestamp,\n            published=entry.created_timestamp\n        )\n    return feed.get_response()\n```", "```py\npip install Pygments\n\n```", "```py\nfrom flask import Blueprint, request, render_template, redirect, url_for\nfrom helpers import object_list\nfrom app import db, app\n\nfrom models import Snippet\nfrom forms import SnippetForm\n\nfrom pygments import highlight\nfrom pygments.lexers import PythonLexer\nfrom pygments.formatters import HtmlFormatter\n\nsnippets = Blueprint('snippets', __name__, template_folder='templates')\n\n@app.template_filter('pygments')\ndef pygments_filter(code):\n    return highlight(code, PythonLexer(), HtmlFormatter())\n\n@snippets.route('/')\ndef index():\n    snippets = Snippet.query.order_by(Snippet.created_timestamp.desc())\n    return object_list('entries/index.html', snippets)\n\n@snippets.route('/<slug>/')\ndef detail(slug):\n    snippet = Snippet.query.filter(Snippet .slug == slug).first_or_404()\n    return render_template('snippets/detail.html', entry=snippet)\n\n@snippets.route('/create/', methods=['GET', 'POST'])\ndef create():\n    if request.method == 'POST':\n        form = SnippetForm(request.form)\n        if form.validate():\n            snippet = form.save_entry(Snippet())\n            db.session.add(snippet)\n            db.session.commit()\n            return redirect(url_for('snippets.detail', slug=snippet.slug))\n    else:\n        form = SnippetForm()\n\n    return render_template('snippets/create.html', form=form)\n\n@snippets.route('/<slug>/edit/', methods=['GET', 'POST'])\ndef edit(slug):\n    snippet = Snippet.query.filter(Snippet.slug == slug).first_or_404()\n    if request.method == 'POST':\n        form = SnippetForm(request.form, obj=snippet)\n        if form.validate():\n            snippet = form.save_entry(snippet)\n            db.session.add(snippet)\n            db.session.commit()\n            return redirect(url_for('snippets.detail', slug=entry.slug))\n    else:\n        form = EntryForm(obj=entry)\n\n    return render_template('entries/edit.html', entry=snippet, form=form)\n```", "```py\n{% extends \"base.html\" %}\n\n{% block title %}{{ entry.title }} - Snippets{% endblock %}\n\n{% block content_title %}Snippet{% endblock %}\n\n{% block content %}\n    {{ entry.body | pygments | safe}}\n{% endblock %}\n```", "```py\n>>> from pygments.formatters import HtmlFormatter\n>>> print HtmlFormatter().get_style_defs('.highlight')\n\n```", "```py\nclass Snippet(db.Model):\n    STATUS_PUBLIC = 0\n    STATUS_DRAFT = 1\n\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(100))\n    slug = db.Column(db.String(100), unique=True)\n    body = db.Column(db.Text)\n    status = db.Column(db.SmallInteger, default=STATUS_PUBLIC)\n    created_timestamp = db.Column(db.DateTime, default=datetime.datetime.now)\n    modified_timestamp = db.Column(\n        db.DateTime,\n        default=datetime.datetime.now,\n        onupdate=datetime.datetime.now)\n\n    def __init__(self, *args, **kwargs):\n        super(Snippet, self).__init__(*args, **kwargs)  # Call parent constructor.\n        self.generate_slug()\n\n    def generate_slug(self):\n        self.slug = ''\n        if self.title:\n            self.slug = slugify(self.title)\n\n    def __repr__(self):\n        return '<Snippet: %s>' % self.title\n```", "```py\nfrom models import Snippet\n\nclass SnippetForm(wtforms.Form):\n    title = wtforms.StringField('Title', validators=[DataRequired()])\n    body = wtforms.TextAreaField('Body', validators=[DataRequired()])\n    status = wtforms.SelectField(\n        'Entry status',\n        choices=(\n            (Snippet.STATUS_PUBLIC, 'Public'),\n            (Snippet.STATUS_DRAFT, 'Draft')),\n        coerce=int)\n\n    def save_entry(self, entry):\n        self.populate_obj(entry)\n        entry.generate_slug()\n        return entry\n```", "```py\nfrom snippets.blueprint import snippets\napp.register_blueprint(snippets, url_prefix='/snippets')\n```", "```py\nsudo pip install Flask-Markdown\n\n```", "```py\nfrom flaskext.markdown import Markdown\nMarkdown(app)\n```", "```py\n{{ entry.body | markdown }}\n```", "```py\nfrom flaskext.markdown import Markdown\nMarkdown(app, extensions=['codehilite'])\n```", "```py\n>>> from pygments.formatters import HtmlFormatter\n>>> print HtmlFormatter().get_style_defs('.codehilite')\n\n```", "```py\nsudo pip install Flask-Cache\n\n```", "```py\nfrom flask.ext.cache import Cache\n\napp = Flask(__name__)\ncache = Cache(app, config={'CACHE_TYPE': 'redis'})\n```", "```py\nsudo apt-get install redis-server\n\n```", "```py\n@app.route(\"/\")\n@cache.cached(timeout=600) # 10 minutes\ndef homepage():\n\u2026\n```", "```py\n{% cache 1800 %}\n<link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/blog.min.css') }}\">\n{% endcache %}\n```", "```py\npip install Frozen-Flask\n\n```", "```py\nfrom flask_frozen import Freezer\nfrom main import app\n\nfreezer = Freezer(app)\n\nif __name__ == '__main__':\n    freezer.freeze()\n```", "```py\npython freeze.py\n\n```", "```py\nimport models\n\n@freezer.register_generator\ndef archive():\n    for post in models.Entry.all():\n        yield {'detail': product.id}\n```", "```py\npip install celery\n\n```", "```py\nCELERY_BROKER_URL = 'redis://localhost:6379/0'\n```", "```py\nfrom celery import Celery\n\ncelery = Celery(app.name, broker=app.config['CELERY_BROKER_URL'])\n```", "```py\npip install Flask-Mail\n\n```", "```py\nMAIL_SERVER = \"example.com\"\nMAIL_PORT = 25\nMAIL_USERNAME = \"email_username\"\nMAIL_PASSWORD = \"email_password\"\n```", "```py\nfrom flask_mail import Mail, Message\nfrom main import app, celery\n\nmail = Mail(app)\n\n@celery.task\ndef send_password_verification(email, verification_code):\n  msg = Message(\n    \"Your password reset verification code is: {0}\".format(verification_code),\n                  sender=\"from@example.com\",\n                  recipients=[email]\n  )\n  mail.send(msg)\n```", "```py\nimport tasks\n\n@app.route(\"/reset-password\", methods=['POST'])\ndef reset_password():\n  user_email = request.form.get('email')\n  user = db.User.query.filter(email=user_email).first()\n  if user:\n    new_password = db.User.make_password(\"imawally\")\n    user.update({\"password_hash\": new_password})\n    user.commit()\n    tasks.send_password_verification.delay(user.email, new_password)\n    flash(\"Verification e-mail sent\")\n  else:\n    flash(\"User not found.\")\n  redirect(url_for('homepage'))\n```", "```py\nceleryd -A main worker\n\n```", "```py\npip install Flask-Script\n\n```", "```py\nfrom flask.ext.script import Manager\nfrom main import app\n\nmanager = Manager(app)\n@manager.command\ndef hello():\n    print \"Hello World\"\n\nif __name__ == \"__main__\":\n    manager.run()\n```", "```py\nfrom main import db\n\n@manager.command\ndef create_db():\n    db.create_all()\n```", "```py\npython manage.py create_db\n\n```"]