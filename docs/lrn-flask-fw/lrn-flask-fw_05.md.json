["```py\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(64), unique=True)\n    password_hash = db.Column(db.String(255))\n    name = db.Column(db.String(64))\n    slug = db.Column(db.String(64), unique=True)\n    active = db.Column(db.Boolean, default=True)\n    created_timestamp = db.Column(db.DateTime, default=datetime.datetime.now)\n\n    def __init__(self, *args, **kwargs):\n        super(User, self).__init__(*args, **kwargs)\n        self.generate_slug()\n\n    def generate_slug(self):\n        if self.name:\n            self.slug = slugify(self.name)\n```", "```py\n(blog) $ python manage.py db migrate\nINFO  [alembic.migration] Context impl SQLiteImpl.\nINFO  [alembic.migration] Will assume non-transactional DDL.\nINFO  [alembic.autogenerate.compare] Detected added table 'user'\n Generating /home/charles/projects/blog/app/migrations/versions/40ce2670e7e2_.py ... done\n\n```", "```py\n(blog) $ python manage.py db upgrade\nINFO  [alembic.migration] Context impl SQLiteImpl.\nINFO  [alembic.migration] Will assume non-transactional DDL.\nINFO  [alembic.migration] Running upgrade 2ceb72931f66 -> 40ce2670e7e2, empty message\n\n```", "```py\n(blog) $ pip install Flask-Login\nDownloading/unpacking Flask-Login\n...\nSuccessfully installed Flask-Login\nCleaning up...\n\n```", "```py\nfrom flask import Flask, g\nfrom flask.ext.login import LoginManager, current_user\n\n# Add to the end of the module.\nlogin_manager = LoginManager(app)\nlogin_manager.login_view = \"login\"\n\n@app.before_request\ndef _before_request():\n    g.user = current_user\n```", "```py\nfrom app import login_manager\n\n@login_manager.user_loader\ndef _user_loader(user_id):\n    return User.query.get(int(user_id))\n```", "```py\nclass User(db.Model):\n    # ... column definitions, etc ...\n\n    # Flask-Login interface..\n    def get_id(self):\n        return unicode(self.id)\n\n    def is_authenticated(self):\n        return True\n\n    def is_active(self):\n        return self.active\n\n    def is_anonymous(self):\n        return False\n```", "```py\n(blog) $ pip install flask-bcrypt\n...\nSuccessfully installed Flask-Bcrypt\nCleaning up...\n\n```", "```py\nfrom flask.ext.bcrypt import Bcrypt\n\nbcrypt = Bcrypt(app)\n```", "```py\nfrom app import bcrypt\n\nclass User(db.Model):\n    # ... column definitions, other methods ...\n\n    @staticmethod\n    def make_password(plaintext):\n        return bcrypt.generate_password_hash(plaintext)\n\n    def check_password(self, raw_password):\n        return bcrypt.check_password_hash(self.password_hash, raw_password)\n\n    @classmethod\n    def create(cls, email, password, **kwargs):\n        return User(\n            email=email,\n            password_hash=User.make_password(password),\n            **kwargs)\n\n    @staticmethod\n    def authenticate(email, password):\n        user = User.query.filter(User.email == email).first()\n        if user and user.check_password(password):\n            return user\n        return False\n```", "```py\nIn [1]: from models import User, db\n\nIn [2]: user = User.create(\"charlie@gmail.com\", password=\"secret\",\nname=\"Charlie\")\n\nIn [3]: print user.password\n$2a$12$q.rRa.6Y2IEF1omVIzkPieWfsNJzpWN6nNofBxuMQDKn.As/8dzoG\n\nIn [4]: db.session.add(user)\n\nIn [5]: db.session.commit()\n\nIn [6]:  User.authenticate(\"charlie@gmail.com\", \"secret\")\nOut[6]:  <User u\"Charlie\">\n\nIn [7]: User.authenticate(\"charlie@gmail.com\", \"incorrect\")\nOut[7]: False\n```", "```py\nimport wtforms\nfrom wtforms import validators\nfrom models import User\n\nclass LoginForm(wtforms.Form):\n    email = wtforms.StringField(\"Email\",\n        validators=[validators.DataRequired()])\n    password = wtforms.PasswordField(\"Password\",\n        validators=[validators.DataRequired()])\n    remember_me = wtforms.BooleanField(\"Remember me?\",\n        default=True)\n```", "```py\ndef validate(self):\n    if not super(LoginForm, self).validate():\n        return False\n\n    self.user = User.authenticate(self.email.data, self.password.data)\n    if not self.user:\n        self.email.errors.append(\"Invalid email or password.\")\n        return False\n\n    return True\n```", "```py\nfrom flask import flash, redirect, render_template, request, url_for\nfrom flask.ext.login import login_user\n\nfrom app import app\nfrom app import login_manager\nfrom forms import LoginForm\n\n@app.route(\"/\")\ndef homepage():\n    return render_template(\"homepage.html\")\n\n@app.route(\"/login/\", methods=[\"GET\", \"POST\"])\ndef login():\n    if request.method == \"POST\":\n        form = LoginForm(request.form)\n        if form.validate():\n            login_user(form.user, remember=form.remember_me.data)\n            flash(\"Successfully logged in as %s.\" % form.user.email, \"success\")\n            return redirect(request.args.get(\"next\") or url_for(\"homepage\"))\n    else:\n        form = LoginForm()\n    return render_template(\"login.html\", form=form)\n```", "```py\n{% extends \"base.html\" %}\n{% from \"macros/form_field.html\" import form_field %}\n{% block title %}Log in{% endblock %}\n{% block content_title %}Log in{% endblock %}\n{% block content %}\n<form action=\"{{ url_for('login', next=request.args.get('next','')) }}\" class=\"form form-horizontal\" method=\"post\">\n{{ form_field(form.email) }}\n{{ form_field(form.password) }}\n<div class=\"form-group\">\n    <div class=\"col-sm-offset-3 col-sm-9\">\n        <div class=\"checkbox\">\n            <label>{{ form.remember_me() }} Remember me</label>\n        </div>\n    </div>\n</div>\n<div class=\"form-group\">\n    <div class=\"col-sm-offset-3 col-sm-9\">\n        <button type=\"submit\" class=\"btn btn-default\">Log in</button>\n        <a class=\"btn\" href=\"{{ url_for('homepage') }}\">Cancel</a>\n    </div>\n</div>\n</form>\n{% endblock %}\n```", "```py\n# Modify the import at the top of the module.\nfrom flask.ext.login import login_user, logout_user  # Add logout_user\n\n@app.route(\"/logout/\")\ndef logout():\n    logout_user()\n    flash('You have been logged out.', 'success')\n    return redirect(request.args.get('next') or url_for('homepage'))\n```", "```py\n<ul class=\"nav navbar-nav\">\n    <li><a href=\"{{ url_for('homepage') }}\">Home</a></li>\n    <li><a href=\"{{ url_for('entries.index') }}\">Blog</a></li>\n    {% if g.user.is_authenticated %}\n    <li><a href=\"{{ url_for('logout', next=request.path) }}\">Log\nout</a></li>\n    {% else %}\n    <li><a href=\"{{ url_for('login', next=request.path) }}\">Log\nin</a></li>\n    {% endif %}\n  {% block extra_nav %}{% endblock %}\n</ul>\n```", "```py\nfrom flask.ext.login import login_required\n```", "```py\n@entries.route('/image-upload/', methods=['GET', 'POST'])\n@login_required\ndef image_upload():\n    ...\n```", "```py\nclass Entry(db.Model):\n    modified_timestamp = ...\n    author_id = db.Column(db.Integer, db.ForeignKey(\"user.id\"))\n\n    tags = ...\n```", "```py\n(blog) $ python manage.py db migrate\nINFO  [alembic.migration] Context impl SQLiteImpl.\nINFO  [alembic.migration] Will assume non-transactional DDL.\nINFO  [alembic.autogenerate.compare] Detected added column 'entry.author_id'\n Generating /home/charles/projects/blog/app/migrations/versions/33011181124e_.py ... done\n\n(blog) $ python manage.py db upgrade\nINFO  [alembic.migration] Context impl SQLiteImpl.\nINFO  [alembic.migration] Will assume non-transactional DDL.\nINFO  [alembic.migration] Running upgrade 40ce2670e7e2 -> 33011181124e, empty message\n\n```", "```py\nentries = db.relationship('Entry', backref='author', lazy='dynamic')\n```", "```py\nIn [8]: Entry.query.update({\"author_id\": user.id})\nOut[8]: 6\n```", "```py\nIn [9]: db.session.commit()\n```", "```py\nfrom flask import g\n```", "```py\nif form.validate():\n entry = form.save_entry(Entry(author=g.user))\n    db.session.add(entry)\n```", "```py\ndef get_entry_or_404(slug, author=None):\n    query = Entry.query.filter(Entry.slug == slug)\n    if author:\n        query = query.filter(Entry.author == author)\n    else:\n        query = filter_status_by_user(query)\n    return query.first_or_404()\n```", "```py\ndef filter_status_by_user(query):\n    if not g.user.is_authenticated:\n        return query.filter(Entry.status == Entry.STATUS_PUBLIC)\n    else:\n        return query.filter(\n            Entry.status.in_((Entry.STATUS_PUBLIC,\nEntry.STATUS_DRAFT)))\n```", "```py\nentry = get_entry_or_404(slug, author=None)\n```", "```py\n{% if g.user == entry.author %}\n  <li><h4>Actions</h4></li>\n  <li><a href=\"{{ url_for('entries.edit', slug=entry.slug)\n}}\">Edit</a></li>\n<li><a href=\"{{ url_for('entries.delete', slug=entry.slug)\n}}\">Delete</a></li>\n{% endif %}\n```", "```py\ndef filter_status_by_user(query):\n    if not g.user.is_authenticated:\n        query = query.filter(Entry.status == Entry.STATUS_PUBLIC)\n    else:\n        # Allow user to view their own drafts.\n query = query.filter(\n (Entry.status == Entry.STATUS_PUBLIC) |\n ((Entry.author == g.user) &\n (Entry.status != Entry.STATUS_DELETED)))\n return query\n\n```", "```py\n    query = filter_status_by_user(query)\n\n    valid_statuses = (Entry.STATUS_PUBLIC, Entry.STATUS_DRAFT)\n    query = query.filter(Entry.status.in_(valid_statuses))\n    if request.args.get(\"q\"):\n        search = request.args[\"q\"]\n        query = query.filter(\n            (Entry.body.contains(search)) |\n            (Entry.title.contains(search)))\n    return object_list(template, query, **context)\n```", "```py\nfrom flask import request, session\n\n@app.before_request\ndef _last_page_visited():\n    if \"current_page\" in session:\n        session[\"last_page\"] = session[\"current_page\"]\n    session[\"current_page\"] = request.path\n```"]