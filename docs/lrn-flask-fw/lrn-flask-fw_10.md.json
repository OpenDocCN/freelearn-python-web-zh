["```py\nfrom app import app as application\n```", "```py\nsudo apt-get install apache2 libapache2-mod-wsgi\n\n```", "```py\nsudo yum install httpd mod_wsgi\n\n```", "```py\n<VirtualHost *:80>\n\n    WSGIScriptAlias / <path to app>/wsgi.py\n\n    <Directory <path to app>/>\n        Order deny,allow\n        Allow from all\n    </Directory>\n\n</VirtualHost>\n```", "```py\nsudo a2enmod wsgi\n\n```", "```py\nLoadModule wsgi_module modules/mod_wsgi.so\n```", "```py\nsudo a2ensite blog\n\n```", "```py\nsudo service apache2 restart\n\n```", "```py\nsudo a2dissite default\n\n```", "```py\nsudo rm /etc/httpd/conf.d/welcome.conf\n\n```", "```py\nsudo service apache2 restart\n\n```", "```py\nsudo service httpd restart\n\n```", "```py\nAlias /static <path to app>/static\n```", "```py\nsudo service apache2 restart\n\n```", "```py\nsudo service httpd restart\n\n```", "```py\nsudo apt-get install nginx\n\n```", "```py\nsudo yum install nginx\n\n```", "```py\nsudo pip install uwsgi\n\n```", "```py\nserver {\n    listen      80;\n    server_name _;\n\n    location / { try_files $uri @blogapp; }\n    location @blogapp {\n        include uwsgi_params;\n        uwsgi_pass unix:/var/run/blog.wsgi.sock;\n    }\n}\n```", "```py\nsudo ln -s /etc/nginx/sites-available/blog.conf /etc/nginx/sites-enabled\n\n```", "```py\n[uwsgi]\nbase = <path to app>\napp = app\nmodule = app\nsocket = /var/run/blog.wsgi.sock\n\n```", "```py\nuwsgi \u2013ini uwsgi.ini\n\n```", "```py\nsudo service nginx restart\n\n```", "```py\nsudo rm /etc/nginx/conf.d/default.conf\n\n```", "```py\nsudo service nginx restart\n\n```", "```py\nlocation /static {\n    root <path to app>/static;\n}\n```", "```py\nsudo service nginx restart\n\n```", "```py\npip install gunicorn\ngunicorn app:app\n\n```", "```py\ngunicorn --bind 127.0.0.1:8000 app:app\n\n```", "```py\nopenssl req -nodes -newkey rsa:2048 -sha256 -keyout private.key -out public.csr\n\n```", "```py\nCountry Name (2 letter code) [AU]: GB\nState or Province Name (full name) [Some-State]: London\nLocality Name (eg, city) []: London\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]: Example Company\nOrganizational Unit Name (eg, section) []: IT\nCommon Name (eg, YOUR name) []: blog.example.com\nEmail Address []:\nA challenge password []:\nAn optional company name []:\n```", "```py\n<VirtualHost *:443>\n```", "```py\nServerName blog.example.com\n```", "```py\nSSLEngine on\nSSLProtocol -all +TLSv1 +SSLv2\nSSLCertificateFile /etc/ssl/certs/blog.example.com.crt\nSSLCertificateKeyFile /etc/ssl/private/blog.example.com.key\nSSLVerifyClient None\n```", "```py\nsudo service apache2 restart\n\n```", "```py\n<VirtualHost *:80>\n  ServerName blog.example.com\n  RewriteEngine On\n  RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI}\n</VirtualHost>\n```", "```py\nsudo service apache2 restart\n\n```", "```py\nlisten   443 ssl;\n```", "```py\nserver_name blog.example.com;\nssl_certificate /etc/ssl/certs/blog.example.com.crt;\nssl_certificate_key /etc/ssl/private/blog.example.com.key;\nssl_protocols TLSv1 SSLv2;\n```", "```py\nsudo service nginx restart\n\n```", "```py\nserver {\n    listen 80;\n    server_name blog.example.com;\n    rewrite ^ https://$server_name$request_uri? permanent;\n}\n```", "```py\nsudo service nginx restart\n\n```", "```py\ngunicorn --bind 0.0.0.0:443 --certfile /etc/ssl/certs/blog.example.com.crt --keyfile /etc/ssl/private/blog.example.com.key --ssl-version 2 --ciphers TLSv1  app:app\n\n```", "```py\nfrom flask import Flask,request, redirect\nimport urlparse\n\napp = Flask(__name__)\n\n@app.route('/')\n@app.route('/<path:path>')\ndef https_redirect(path='/'):\n    url = urlparse.urlunparse((\n        'https',\n        request.headers.get('Host'),\n        path,\n        '','',''\n    ))\n\n    return redirect(url, code=301)\nif __name__ == '__main__':\n    app.run()\n```", "```py\ngunicorn --bind 0.0.0.0:80 app:app\n\n```", "```py\nsudo pip install ansible\n\n```", "```py\n---\n\n- hosts: webservers\n  user: ubuntu\n  sudo: True\n\n  vars:\n    app_src: ../blog\n    app_dest: /srv/blog\n\n  tasks:\n    - name: install necessary packages\n      action: apt pkg=$item state=installed\n      with_items:\n        - apache2\n        - libapache2-mod-wsgi\n        - python-setuptools\n    - name: Enable wsgi module for Apache\n      action: command a2enmod wsgi\n    - name: Blog app configuration for Apache\n      action: template src=templates/blog dest=/etc/apache/sites-available/blog\n    - name: Copy blog app in\n      action: copy src=${app_src} dest=${app_dest}\n    - name: Enable site\n action: command a2ensite blog\n    - name: Reload Apache\n      action: service name=apache2 state=reloaded\n```", "```py\nNameVirtualHost *:80\n\n<VirtualHost *:80>\n    WSGIScriptAlias / {{ app_dest }}/wsgi.py\n\n    <Directory {{ app_dest }}/>\n        Order deny,allow\n        Allow from all\n    </Directory>\n</VirtualHost>\n```", "```py\nansible-playbook blog.yml --connection=local\n\n```"]