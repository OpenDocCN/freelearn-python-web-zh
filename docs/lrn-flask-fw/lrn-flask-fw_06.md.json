["```py\n(blog) $ pip install Flask-Admin\nDownloading/unpacking Flask-Admin\n...\nSuccessfully installed Flask-Admin\nCleaning up...\n\n```", "```py\n(blog) $ python manage.py shell\nIn [1]: from flask.ext import admin\nIn [2]: print admin.__version__\n1.0.7\n\n```", "```py\nfrom flask.ext.admin import Admin\nfrom app import app\n\nadmin = Admin(app, 'Blog Admin')\n```", "```py\nfrom flask import request, session\n\nfrom app import app, db\nimport admin  # This line is new, placed after the app import.\nimport models\nimport views\n```", "```py\nfrom flask.ext.admin import Admin\nfrom flask.ext.admin.contrib.sqla import ModelView\n\nfrom app import app, db\nfrom models import Entry, Tag, User\n\nadmin = Admin(app, 'Blog Admin')\nadmin.add_view(ModelView(Entry, db.session))\nadmin.add_view(ModelView(Tag, db.session))\nadmin.add_view(ModelView(User, db.session))\n```", "```py\nfrom flask.ext.admin import Admin\nfrom flask.ext.admin.contrib.sqla import ModelView\n\nfrom app import app, db\nfrom models import Entry, Tag, User\n\nclass EntryModelView(ModelView):\n    column_list = [\n        'title', 'status', 'author', 'tease', 'tag_list', 'created_timestamp',\n    ]\n    column_select_related_list = ['author']  # Efficiently SELECT the author.\n\nadmin = Admin(app, 'Blog Admin')\nadmin.add_view(EntryModelView(Entry, db.session))\nadmin.add_view(ModelView(Tag, db.session))\nadmin.add_view(ModelView(User, db.session))\n```", "```py\n@property\ndef tag_list(self):\n    return ', '.join(tag.name for tag in self.tags)\n\n@property\ndef tease(self):\n    return self.body[:100]\n```", "```py\nclass EntryModelView(ModelView):\n    _status_choices = [(choice, label) for choice, label in [\n (Entry.STATUS_PUBLIC, 'Public'),\n (Entry.STATUS_DRAFT, 'Draft'),\n (Entry.STATUS_DELETED, 'Deleted'),\n ]]\n\n column_choices = {\n 'status': _status_choices,\n }\n    column_list = [\n        'title', 'status', 'author', 'tease', 'tag_list', 'created_timestamp',\n    ]\n    column_select_related_list = ['author']\n```", "```py\nclass UserModelView(ModelView):\n    column_list = ['email', 'name', 'active', 'created_timestamp']\n\n# Be sure to use the UserModelView class when registering the User:\nadmin.add_view(UserModelView(User, db.session))\n```", "```py\nclass EntryModelView(ModelView):\n    _status_choices = [(choice, label) for choice, label in [\n        (Entry.STATUS_PUBLIC, 'Public'),\n        (Entry.STATUS_DRAFT, 'Draft'),\n        (Entry.STATUS_DELETED, 'Deleted'),\n    ]]\n\n    column_choices = {\n        'status': _status_choices,\n    }\n    column_list = [\n        'title', 'status', 'author', 'tease', 'tag_list', 'created_timestamp',\n    ]\n    column_searchable_list = ['title', 'body']\n    column_select_related_list = ['author']\n```", "```py\nclass EntryModelView(ModelView):\n    _status_choices = [(choice, label) for choice, label in [\n        (Entry.STATUS_PUBLIC, 'Public'),\n        (Entry.STATUS_DRAFT, 'Draft'),\n        (Entry.STATUS_DELETED, 'Deleted'),\n    ]]\n\n    column_choices = {\n        'status': _status_choices,\n    }\n    column_filters = [\n 'status', User.name, User.email, 'created_timestamp'\n ]\n    column_list = [\n        'title', 'status', 'author', 'tease', 'tag_list', 'created_timestamp',\n    ]\n    column_searchable_list = ['title', 'body']\n    column_select_related_list = ['author']\n```", "```py\ncolumn_filters = [\n    'status', User.name, User.email, 'created_timestamp'\n]\n```", "```py\nclass EntryModelView(ModelView):\n    ...\n    form_columns = ['title', 'body', 'status', 'author', 'tags']\n```", "```py\nfrom wtforms.fields import SelectField  # At top of module.\n\nclass EntryModelView(ModelView):\n    ...\n    form_args = {\n        'status': {'choices': _status_choices, 'coerce': int},\n    }\n    form_columns = ['title', 'body', 'status', 'author', 'tags']\n    form_overrides = {'status': SelectField}\n```", "```py\nform_ajax_refs = {\n    'author': {\n        'fields': (User.name, User.email),\n    },\n}\n```", "```py\nfrom wtforms.fields import PasswordField  # At top of module.\n\nclass UserModelView(ModelView):\n    column_filters = ('email', 'name', 'active')\n    column_list = ['email', 'name', 'active', 'created_timestamp']\n    column_searchable_list = ['email', 'name']\n\n    form_columns = ['email', 'password', 'name', 'active']\n    form_extra_fields = {\n 'password': PasswordField('New password'),\n }\n\n    def on_model_change(self, form, model, is_created):\n if form.password.data:\n model.password_hash = User.make_password(form.password.data)\n return super(UserModelView, self).on_model_change(\n form, model, is_created)\n\n```", "```py\nclass BaseModelView(ModelView):\n    pass\n\nclass SlugModelView(BaseModelView):\n    def on_model_change(self, form, model, is_created):\n        model.generate_slug()\n        return super(SlugModelView, self).on_model_change(\n            form, model, is_created)\n```", "```py\nfrom flask.ext.admin import Admin\nfrom flask.ext.admin.contrib.sqla import ModelView\nfrom wtforms.fields import SelectField\n\nfrom app import app, db\nfrom models import Entry, Tag, User, entry_tags\n\nclass BaseModelView(ModelView):\n    pass\n\nclass SlugModelView(BaseModelView):\n    def on_model_change(self, form, model, is_created):\n        model.generate_slug()\n        return super(SlugModelView, self).on_model_change(\n            form, model, is_created)\n\nclass EntryModelView(SlugModelView):\n    _status_choices = [(choice, label) for choice, label in [\n        (Entry.STATUS_PUBLIC, 'Public'),\n        (Entry.STATUS_DRAFT, 'Draft'),\n        (Entry.STATUS_DELETED, 'Deleted'),\n    ]]\n\n    column_choices = {\n        'status': _status_choices,\n    }\n    column_filters = ['status', User.name, User.email, 'created_timestamp']\n    column_list = [\n        'title', 'status', 'author', 'tease', 'tag_list', 'created_timestamp',\n    ]\n    column_searchable_list = ['title', 'body']\n    column_select_related_list = ['author']\n\n    form_ajax_refs = {\n        'author': {\n            'fields': (User.name, User.email),\n        },\n    }\n    form_args = {\n        'status': {'choices': _status_choices, 'coerce': int},\n    }\n    form_columns = ['title', 'body', 'status', 'author', 'tags']\n    form_overrides = {'status': SelectField}\n\nclass UserModelView(SlugModelView):\n    column_filters = ('email', 'name', 'active')\n    column_list = ['email', 'name', 'active', 'created_timestamp']\n    column_searchable_list = ['email', 'name']\n\n    form_columns = ['email', 'password', 'name', 'active']\n    form_extra_fields = {\n        'password': PasswordField('New password'),\n    }\n\n    def on_model_change(self, form, model, is_created):\n        if form.password.data:\n            model.password_hash = User.make_password(form.password.data)\n        return super(UserModelView, self).on_model_change(\n            form, model, is_created)\n\nadmin = Admin(app, 'Blog Admin')\nadmin.add_view(EntryModelView(Entry, db.session))\nadmin.add_view(SlugModelView(Tag, db.session))\nadmin.add_view(UserModelView(User, db.session))\n```", "```py\nfrom flask.ext.admin.contrib.fileadmin import FileAdmin\n```", "```py\nclass BlogFileAdmin(FileAdmin):\n pass\n\nadmin = Admin(app, 'Blog Admin')\nadmin.add_view(EntryModelView(Entry, db.session))\nadmin.add_view(SlugModelView(Tag, db.session))\nadmin.add_view(UserModelView(User, db.session))\nadmin.add_view(\n BlogFileAdmin(app.config['STATIC_DIR'], '/static/', name='Static Files'))\n\n```", "```py\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(64), unique=True)\n    password_hash = db.Column(db.String(255))\n    name = db.Column(db.String(64))\n    slug = db.Column(db.String(64), unique=True)\n    active = db.Column(db.Boolean, default=True)\n admin = db.Column(db.Boolean, default=False)\n    created_timestamp = db.Column(db.DateTime, default=datetime.datetime.now)\n```", "```py\n(blog) $ python manage.py db migrate\nINFO  [alembic.migration] Context impl SQLiteImpl.\nINFO  [alembic.migration] Will assume non-transactional DDL.\nINFO  [alembic.autogenerate.compare] Detected added column 'user.admin'\n Generating /home/charles/projects/blog/app/migrations/versions/33011181124e_.py ... done\n\n(blog) $ python manage.py db upgrade\nINFO  [alembic.migration] Context impl SQLiteImpl.\nINFO  [alembic.migration] Will assume non-transactional DDL.\nINFO  [alembic.migration] Running upgrade 40ce2670e7e2 -> 33011181124e, empty message\n\n```", "```py\nclass User(db.Model):\n    # ...\n\n    def is_admin(self):\n        return self.admin\n```", "```py\nfrom flask import g, url_for\n```", "```py\nclass AdminAuthentication(object):\n    def is_accessible(self):\n        return g.user.is_authenticated and g.user.is_admin()\n```", "```py\nclass BaseModelView(AdminAuthentication, ModelView):\n    pass\n```", "```py\nclass BlogFileAdmin(AdminAuthentication, FileAdmin):\n    pass\n```", "```py\nfrom flask.ext.admin import Admin, AdminIndexView, expose\n\n```", "```py\nclass IndexView(AdminIndexView):\n    @expose('/')\n    def index(self):\n        return self.render('admin/index.html')\n\nadmin = Admin(app, 'Blog Admin', index_view=IndexView())\n```", "```py\nclass IndexView(AdminIndexView):\n    @expose('/')\n    def index(self):\n        if not (g.user.is_authenticated and g.user.is_admin()):\n return redirect(url_for('login', next=request.path))\n        return self.render('admin/index.html')\n```", "```py\n{% extends \"admin/master.html\" %}\n\n{% block body %}\n  <h3>Hello, {{ g.user.name }}</h3>\n{% endblock %}\n```"]