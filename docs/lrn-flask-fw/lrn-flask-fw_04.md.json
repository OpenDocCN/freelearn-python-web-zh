["```py\n(blog) $ pip install \"wtforms>=2.0\"\nSuccessfully installed wtforms\nCleaning up...\n\n```", "```py\n(blog) $ ./manage.py shell\nIn [1]: import wtforms\n\nIn [2]: wtforms.__version__\nOut[2]: '2.0dev'\n\n```", "```py\nimport wtforms\n\nfrom models import Entry\n\nclass EntryForm(wtforms.Form):\n    title = wtforms.StringField('Title')\n    body = wtforms.TextAreaField('Body')\n    status = wtforms.SelectField(\n        'Entry status',\n        choices=(\n            (Entry.STATUS_PUBLIC, 'Public'),\n            (Entry.STATUS_DRAFT, 'Draft')),\n        coerce=int)\n```", "```py\nfrom app import db\nfrom helpers import object_list\nfrom models import Entry, Tag\nfrom entries.forms import EntryForm\n\n```", "```py\n@entries.route('/create/')\ndef create():\n    form = EntryForm()\n    return render_template('entries/create.html', form=form)\n```", "```py\n{% extends \"base.html\" %}\n\n{% block title %}Create new entry{% endblock %}\n\n{% block content_title %}Create new entry{% endblock %}\n\n{% block content %}\n  <form action=\"{{ url_for('entries.create') }}\" class=\"form form-horizontal\" method=\"post\">\n    {% for field in form %}\n      <div class=\"form-group\">\n        {{ field.label(class='col-sm-3 control-label') }}\n        <div class=\"col-sm-9\">\n          {{ field(class='form-control') }}\n        </div>\n      </div>\n    {% endfor %}\n    <div class=\"form-group\">\n      <div class=\"col-sm-offset-3 col-sm-9\">\n        <button type=\"submit\" class=\"btn btn-default\">Create</button>\n        <a class=\"btn\" href=\"{{ url_for('entries.index') }}\">Cancel</a>\n      </div>\n    </div>\n  </form>\n{% endblock %}\n```", "```py\nclass EntryForm(wtforms.Form):\n    ...\n    def save_entry(self, entry):\n self.populate_obj(entry)\n entry.generate_slug()\n return entry\n\n```", "```py\nfrom flask import Blueprint, redirect, render_template, request, url_for\n\n```", "```py\nfrom app import db\n@entries.route('/create/', methods=['GET', 'POST'])\ndef create():\n    if request.method == 'POST':\n        form = EntryForm(request.form)\n        if form.validate():\n            entry = form.save_entry(Entry())\n            db.session.add(entry)\n            db.session.commit()\n            return redirect(url_for('entries.detail', slug=entry.slug))\n    else:\n        form = EntryForm()\n\n    return render_template('entries/create.html', form=form)\n```", "```py\nimport wtforms\nfrom wtforms.validators import DataRequired\n\nfrom models import Entry\n\nclass EntryForm(wtforms.Form):\n    title = wtforms.StringField(\n        'Title',\n        validators=[DataRequired()])\n    body = wtforms.TextAreaField(\n        'Body',\n        validators=[DataRequired()])\n    status = wtforms.SelectField(\n        'Entry status',\n        choices=(\n            (Entry.STATUS_PUBLIC, 'Public'),\n            (Entry.STATUS_DRAFT, 'Draft')),\n        coerce=int)\n\n    def save_entry(self, entry):\n        self.populate_obj(entry)\n        entry.generate_slug()\n        return entry\n```", "```py\n{% for field in form %}\n  <div class=\"form-group{% if field.errors %} has-error has-feedback{% endif %}\">\n    {{ field.label(class='col-sm-3 control-label') }}\n    <div class=\"col-sm-9\">\n      {{ field(class='form-control') }}\n      {% if field.errors %}\n        <span class=\"glyphicon glyphicon-warning-sign form-control-feedback\"></span>\n      {% endif %}\n      {% for error in field.errors %}<span class=\"help-block\">{{ error }}</span>{% endfor %}\n    </div>\n  </div>\n{% endfor %}\n```", "```py\n@entries.route('/<slug>/edit/', methods=['GET', 'POST'])\ndef edit(slug):\n    entry = Entry.query.filter(Entry.slug == slug).first_or_404()\n    if request.method == 'POST':\n        form = EntryForm(request.form, obj=entry)\n        if form.validate():\n            entry = form.save_entry(entry)\n            db.session.add(entry)\n            db.session.commit()\n            return redirect(url_for('entries.detail', slug=entry.slug))\n    else:\n        form = EntryForm(obj=entry)\n\n    return render_template('entries/edit.html', entry=entry, form=form)\n```", "```py\n{% macro form_field(field) %}\n  <div class=\"form-group{% if field.errors %} has-error has-feedback{% endif %}\">\n    {{ field.label(class='col-sm-3 control-label') }}\n    <div class=\"col-sm-9\">\n      {{ field(class='form-control', **kwargs) }}\n      {% if field.errors %}<span class=\"glyphicon glyphicon-warning-sign form-control-feedback\"></span>{% endif %}\n      {% for error in field.errors %}<span class=\"help-block\">{{ error }}</span>{% endfor %}\n    </div>\n  </div>\n{% endmacro %}\n```", "```py\n{% extends \"base.html\" %}\n{% from \"macros/form_field.html\" import form_field %}\n\n{% block title %}Create new entry{% endblock %}\n\n{% block content_title %}Create new entry{% endblock %}\n\n{% block content %}\n  <form action=\"{{ url_for('entries.create') }}\" class=\"form form-horizontal\" method=\"post\">\n    {% for field in form %}\n      {{ form_field(field) }}\n    {% endfor %}\n    <div class=\"form-group\">\n      <div class=\"col-sm-offset-3 col-sm-9\">\n        <button type=\"submit\" class=\"btn btn-default\">Create</button>\n        <a class=\"btn\" href=\"{{ url_for('entries.index') }}\">Cancel</a>\n      </div>\n    </div>\n  </form>\n{% endblock %}\n```", "```py\n{% extends \"base.html\" %}\n{% from \"macros/form_field.html\" import form_field %}\n\n{% block title %}Edit {{ entry.title }}{% endblock %}\n\n{% block content_title %}Edit {{ entry.title }}{% endblock %}\n\n{% block content %}\n  <form action=\"{{ url_for('entries.edit', slug=entry.slug) }}\" class=\"form form-horizontal\" method=\"post\">\n    {% for field in form %}\n      {{ form_field(field) }}\n    {% endfor %}\n    <div class=\"form-group\">\n      <div class=\"col-sm-offset-3 col-sm-9\">\n        <button type=\"submit\" class=\"btn btn-default\">Save</button>\n        <a class=\"btn\" href=\"{{ url_for('entries.detail', slug=entry.slug) }}\">Cancel</a>\n      </div>\n    </div>\n  </form>\n{% endblock %}\n```", "```py\n<a href=\"{{ url_for('entries.edit', slug=entry.slug) }}\">Edit</a>\n```", "```py\n{% extends \"base.html\" %}\n\n{% block title %}{{ entry.title }}{% endblock %}\n\n{% block content_title %}{{ entry.title }}{% endblock %}\n\n{% block content %}\n  <form action=\"{{ url_for('entries.delete', slug=entry.slug) }}\" method=\"post\">\n    <fieldset>\n      <legend>Delete this entry?</legend>\n      <button class=\"btn btn-danger\" type=\"submit\">Delete</button>\n      <a class=\"btn\" href=\"{{ url_for('entries.detail', slug=entry.slug) }}\">Cancel</a>\n    </fieldset>\n  </form>\n{% endblock %}\n```", "```py\n@entries.route('/<slug>/delete/', methods=['GET', 'POST'])\ndef delete(slug):\n    entry = Entry.query.filter(Entry.slug == slug).first_or_404()\n    if request.method == 'POST':\n        entry.status = Entry.STATUS_DELETED\n        db.session.add(entry)\n        db.session.commit()\n        return redirect(url_for('entries.index'))\n\n    return render_template('entries/delete.html', entry=entry)\n```", "```py\nclass Entry(db.Model):\n    STATUS_PUBLIC = 0\n    STATUS_DRAFT = 1\n    STATUS_DELETED = 2\n```", "```py\ndef entry_list(template, query, **context):\n    valid_statuses = (Entry.STATUS_PUBLIC, Entry.STATUS_DRAFT)\n    query = query.filter(Entry.status.in_(valid_statuses))\n    if request.args.get('q'):\n        search = request.args['q']\n        query = query.filter(\n            (Entry.body.contains(search)) |\n            (Entry.title.contains(search)))\n\n    return object_list(template, query, **context)\n```", "```py\ndef get_entry_or_404(slug):\n  valid_statuses = (Entry.STATUS_PUBLIC, Entry.STATUS_DRAFT) (Entry.query\n          .filter(\n              (Entry.slug == slug) &\n              (Entry.status.in_(valid_statuses)))\n          .first_or_404())\n```", "```py\n@entries.route('/<slug>/')\ndef detail(slug):\n    entry = get_entry_or_404(slug)\n    return render_template('entries/detail.html', entry=entry)\n```", "```py\nclass Configuration(object):\n    APPLICATION_DIR = current_directory\n    DEBUG = True\n    SECRET_KEY = 'flask is fun!'  # Create a unique key for your app.\n    SQLALCHEMY_DATABASE_URI = 'sqlite:///%s/blog.db' % APPLICATION_DIR\n```", "```py\nfrom flask import Blueprint, flash, redirect, render_template, request, url_for\n```", "```py\ndef create():\n        ...\n            db.session.commit()\n            flash('Entry \"%s\" created successfully.' % entry.title, 'success')\n            return redirect(url_for('entries.detail', slug=entry.slug))\n        ...\n\ndef edit(slug):\n        ...\n        db.session.commit()\n        flash('Entry \"%s\" has been saved.' % entry.title, 'success')\n        return redirect(url_for('entries.detail', slug=entry.slug))\n        ...\n\ndef delete(slug):\n        ...\n        db.session.commit()\n        flash('Entry \"%s\" has been deleted.' % entry.title, 'success')\n        return redirect(url_for('entries.index'))\n        ...\n```", "```py\n<h1>{% block content_title %}{% endblock %}</h1>\n{% for category, message in get_flashed_messages(with_categories=true) %}\n <div class=\"alert alert-dismissable alert-{{ category }}\">\n <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\n {{ message }}\n </div>\n{% endfor %}\n{% block content %}{% endblock %}\n```", "```py\nfrom models import Tag\nclass TagField(wtforms.StringField):\n    def _value(self):\n        if self.data:\n            # Display tags as a comma-separated list.\n            return ', '.join([tag.name for tag in self.data])\n        return ''\n\n    def get_tags_from_string(self, tag_string):\n        raw_tags = tag_string.split(',')\n\n        # Filter out any empty tag names.\n        tag_names = [name.strip() for name in raw_tags if name.strip()]\n\n        # Query the database and retrieve any tags we have already saved.\n        existing_tags = Tag.query.filter(Tag.name.in_(tag_names))\n\n        # Determine which tag names are new.\n        new_names = set(tag_names) - set([tag.name for tag in existing_tags])\n\n        # Create a list of unsaved Tag instances for the new tags.\n        new_tags = [Tag(name=name) for name in new_names]\n\n        # Return all the existing tags + all the new, unsaved tags.\n        return list(existing_tags) + new_tags\n\n    def process_formdata(self, valuelist):\n        if valuelist:\n            self.data = self.get_tags_from_string(valuelist[0])\n        else:\n            self.data = []\n```", "```py\nclass EntryForm(wtforms.Form):\n    ...\n    tags = TagField(\n        'Tags',\n        description='Separate multiple tags with commas.')\n```", "```py\n{% macro form_field(field) %}\n  <div class=\"form-group{% if field.errors %} has-error has-feedback{% endif %}\">\n    {{ field.label(class='col-sm-3 control-label') }}\n    <div class=\"col-sm-9\">\n      {{ field(class='form-control', **kwargs) }}\n      {% if field.errors %}<span class=\"glyphicon glyphicon-warning-sign form-control-feedback\"></span>{% endif %}\n      {% if field.description %}<span class=\"help-block\">{{ field.description|safe }}</span>{% endif %}\n      {% for error in field.errors %}<span class=\"help-block\">{{ error }}</span>{% endfor %}\n    </div>\n  </div>\n{% endmacro %}\n```", "```py\nclass ImageForm(wtforms.Form):\n    file = wtforms.FileField('Image file')\n```", "```py\n(blog) $ cd ~/projects/blog/blog/app\n(blog) $ mkdir -p static/images\n\n```", "```py\nclass Configuration(object):\n    ...\n    STATIC_DIR = os.path.join(APPLICATION_DIR, 'static')\n    IMAGES_DIR = os.path.join(STATIC_DIR, 'images')\n```", "```py\nimport os\n\nfrom flask import Blueprint, flash, redirect, render_template, request, url_for\nfrom werkzeug import secure_filename\n\nfrom app import app, db\nfrom helpers import object_list\nfrom models import Entry, Tag\nfrom entries.forms import EntryForm, ImageForm\n\n```", "```py\n@entries.route('/image-upload/', methods=['GET', 'POST'])\ndef image_upload():\n    if request.method == 'POST':\n        form = ImageForm(request.form)\n        if form.validate():\n            image_file = request.files['file']\n            filename = os.path.join(app.config['IMAGES_DIR'],\n                                    secure_filename(image_file.filename))\n            image_file.save(filename)\n            flash('Saved %s' % os.path.basename(filename), 'success')\n            return redirect(url_for('entries.index'))\n    else:\n        form = ImageForm()\n\n    return render_template('entries/image_upload.html', form=form)\n```", "```py\n{% extends \"base.html\" %}\n{% from \"macros/form_field.html\" import form_field %}\n\n{% block title %}Upload an image{% endblock %}\n\n{% block content_title %}Upload an image{% endblock %}\n\n{% block content %}\n  <form action=\"{{ url_for('entries.image_upload') }}\" enctype=\"multipart/form-data\" method=\"post\">\n    {% for field in form %}\n      {{ form_field(field) }}\n    {% endfor %}\n    <div class=\"form-group\">\n      <div class=\"col-sm-offset-3 col-sm-9\">\n        <button type=\"submit\" class=\"btn btn-default\">Upload</button>\n        <a class=\"btn\" href=\"{{ url_for('entries.index') }}\">Cancel</a>\n      </div>\n    </div>\n  </form>\n{% endblock %}\n```", "```py\n(blog) $ cd static/ && find . -type f\n./fonts/glyphicons-halflings-regular.woff\n./fonts/glyphicons-halflings-regular.ttf\n./fonts/glyphicons-halflings-regular.eot\n./fonts/glyphicons-halflings-regular.svg\n./images/2012-07-17_16.18.18.jpg\n./js/jquery-1.10.2.min.js\n./js/bootstrap.min.js\n./css/bootstrap.min.css\n\n```", "```py\n<head>\n  <meta charset=\"utf-8\">\n  <title>{% block title %}{% endblock %} | My Blog</title>\n\n  <link rel=\"stylesheet\" href=\"{{=\"{{ url_for('static', filename='css/bootstrap.min.css') }}\">\n  <style type=\"text/css\">\n    body { padding-top: 60px; }\n  </style>\n  {% block extra_styles %}{% endblock %}\n\n  <script src=\"img/jquery-1.10.2.min.js') }}\"></script>\n  <script src=\"img/bootstrap.min.js') }}\"></script>\n  {% block extra_scripts %}{% endblock %}\n</head>\n```"]