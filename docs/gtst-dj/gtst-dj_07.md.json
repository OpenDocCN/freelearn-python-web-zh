["```py\nurl(r'^create-developer$', 'TasksManager.views.create_developer.page', name=\"create_developer\"),\n```", "```py\n{% extends \"base.html\" %}\n{% block title_html %}\n  Create Developer \n{% endblock %}\n{% block h1 %}\n  Create Developer\n{% endblock %}\n{% block article_content %}\n  <form method=\"post\" action=\"{% url \"create_developer\" %}\" >\n    <table>\n      <tr>\n        <td>Name</td>\n        <td>\n          <input type=\"text\" name=\"name\" />\n        </td>\n      </tr>\n      <tr>\n        <td>Login</td>\n        <td>\n          <input type=\"text\" name=\"login\" />\n        </td>\n      </tr>\n      <tr>\n        <td>Password</td>\n        <td>\n          <input type=\"text\" name=\"password\" />\n        </td>\n      </tr>\n      <tr>\n        <td>Supervisor</td>\n        <td>\n          <select name=\"supervisor\">\n            {% for supervisor in supervisors_list %}\n              <option value=\"{{ supervisor.id }}\">{{ supervisor.name }}</option>\n            {% endfor %}\n          </select>\n        </td>\n      </tr>\n      <tr>\n        <td></td>\n        <td>\n          <input type=\"submit\" value=\"Valid\" />\n          </td>\n      </tr>\n    </table>\n  </form>\n{% endblock %}\n```", "```py\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\nfrom TasksManager.models import Supervisor, Developer\n# View for create_developer\ndef page(request):\n  error = False\n  # If form has posted\n  if request.POST: \n  # This line checks if the data was sent in POST. If so, this means that the form has been submitted and we should treat it.\n    if 'name' in request.POST: \n    # This line checks whether a given data named name exists in the POST variables.\n      name = request.POST.get('name', '')\n      # This line is used to retrieve the value in the POST dictionary. Normally, we perform filters to recover the data to avoid false data, but it would have required many lines of code.\n    else:\n      error=True\n    if 'login' in request.POST:\n      login = request.POST.get('login', '')\n    else:\n      error=True\n    if 'password' in request.POST:\n      password = request.POST.get('password', '')\n    else:\n      error=True\n    if 'supervisor' in request.POST:\n      supervisor_id = request.POST.get('supervisor', '')\n    else:\n      error=True\n    if not error:\n      # We must get the supervisor\n      supervisor = Supervisor.objects.get(id = supervisor_id)\n      new_dev = Developer(name=name, login=login, password=password, supervisor=supervisor)\n      new_dev.save()\n      return HttpResponse(\"Developer added\")\n    else:\n      return HttpResponse(\"An error as occured\")\n  else:\n    supervisors_list = Supervisor.objects.all()\n    return render(request, 'en/public/create_developer.html')\n```", "```py\n<a href=\"{% url \"create_developer\" %}\">Create developer</a>\n```", "```py\n'django.middleware.csrf.CsrfViewMiddleware',\n```", "```py\n{% csrf_token %}\n```", "```py\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\nfrom TasksManager.models import Supervisor, Developer\nfrom django import forms\n# This line imports the Django forms package\nclass Form_inscription(forms.Form):  \n# This line creates the form with four fields. It is an object that inherits from forms.Form. It contains attributes that define the form fields.\n  name = forms.CharField(label=\"Name\", max_length=30)\n  login      = forms.CharField(label=\"Login\", max_length=30)\n  password   = forms.CharField(label=\"Password\", widget=forms.PasswordInput)\n  supervisor = forms.ModelChoiceField(label=\"Supervisor\", queryset=Supervisor.objects.all())\n# View for create_developer\ndef page(request):\n  if request.POST:\n    form = Form_inscription(request.POST)\n    # If the form has been posted, we create the variable that will contain our form filled with data sent by POST form.\n    if form.is_valid():\n    # This line checks that the data sent by the user is consistent with the field that has been defined in the form.\n      name          = form.cleaned_data['name']\n    # This line is used to retrieve the value sent by the client. The collected data is filtered by the clean() method that we will see later. This way to recover data provides secure data.\n      login         = form.cleaned_data['login']\n      password      = form.cleaned_data['password']\n      supervisor    = form.cleaned_data['supervisor'] \n      # In this line, the supervisor variable is of the Supervisor type, that is to say that the returned data by the cleaned_data dictionary will directly be a model.\n      new_developer = Developer(name=name, login=login, password=password, email=\"\", supervisor=supervisor)\n      new_developer.save()\n      return HttpResponse(\"Developer added\")\n    else:\n      return render(request, 'en/public/create_developer.html', {'form' : form})\n      # To send forms to the template, just send it like any other variable. We send it in case the form is not valid in order to display user errors:\n    else:\n    form = Form_inscription()\n    # In this case, the user does not yet display the form, it instantiates with no data inside.\n    return render(request, 'en/public/create_developer.html', {'form' : form})\n```", "```py\n{% extends \"base.html\" %}\n{% block title_html %}\n  Create Developer\n{% endblock %}\n{% block h1 %}\n  Create Developer\n{% endblock %}\n{% block article_content %}\n  <form method=\"post\" action=\"{% url \"create_developer\" %}\" >\n    {% csrf_token %} \n    <!-- This line inserts a CSRF token. -->\n    <table>\n      {{ form.as_table }}\n    <!-- This line displays lines of the form.-->\n    </table>\n    <p><input type=\"submit\" value=\"Create\" /></p>\n  </form>\n{% endblock %}\n```", "```py\nurl(r'^create-supervisor$', 'TasksManager.views.create_supervisor.page', name=\"create_supervisor\"),\n```", "```py\nfrom django.shortcuts import render\nfrom TasksManager.models import Supervisor\nfrom django import forms\nfrom django.http import HttpResponseRedirect\nfrom django.core.urlresolvers import reverse\ndef page(request):\n  if len(request.POST) > 0:\n    form = Form_supervisor(request.POST)\n    if form.is_valid():\n      form.save(commit=True) \n      # If the form is valid, we store the data in a model record in the form.\n      return HttpResponseRedirect(reverse('public_index'))\n      # This line is used to redirect to the specified URL. We use the reverse() function to get the URL from its name defines urls.py.\n    else:\n      return render(request, 'en/public/create_supervisor.html', {'form': form})\n  else:\n    form = Form_supervisor()\n    return render(request, 'en/public/create_supervisor.html', {'form': form})\nclass Form_supervisor(forms.ModelForm): \n# Here we create a class that inherits from ModelForm.\n  class Meta:\n  # We extend the Meta class of the ModelForm. It is this class that will allow us to define the properties of ModelForm.\n    model = Supervisor\n    # We define the model that should be based on the form.\n    exclude = ('date_created', 'last_connexion', )\n    # We exclude certain fields of this form. It would also have been possible to do the opposite. That is to say with the fields property, we have defined the desired fields in the form.\n```", "```py\n{% url \"create_supervisor\" %}\n```", "```py\nclass Form_inscription(forms.Form):\n  name       = forms.CharField(label=\"Name\", max_length=30)\n  login = forms.CharField(label = \"Login\")\n  password = forms.CharField(label = \"Password\", widget = forms.PasswordInput)\n  # We add another field for the password. This field will be used to avoid typos from the user. If both passwords do not match, the validation will display an error message\n  password_bis = forms.CharField(label = \"Password\", widget = forms.PasswordInput) \n  supervisor = forms.ModelChoiceField(label=\"Supervisor\", queryset=Supervisor.objects.all())\n  def clean(self): \n  # This line allows us to extend the clean method that is responsible for validating data fields.\n    cleaned_data = super (Form_inscription, self).clean()\n    # This method is very useful because it performs the clean() method of the superclass. Without this line we would be rewriting the method instead of extending it.\n    password = self.cleaned_data.get('password') \n    # We get the value of the field password in the variable.\n    password_bis = self.cleaned_data.get('password_bis')\n    if password and password_bis and password != password_bis:\n      raise forms.ValidationError(\"Passwords are not identical.\") \n      # This line makes us raise an exception. This way, when the view performs the is_valid() method, if the passwords are not identical, the form is not validated .\n    return self.cleaned_data\n```", "```py\nerror_name = {\n  'required': 'You must type a name !',\n  'invalid': 'Wrong format.'\n}\n```", "```py\nname = forms.CharField(label=\"Name\", max_length=30, error_messages=error_name)\n```", "```py\nname = models.CharField(max_length=50, verbose_name=\"Name\", error_messages=error_name)\n```", "```py\nurl(r'^create_project$', ' TasksManager.views.create_project.page', name='create_project'),\n```", "```py\nfrom django.shortcuts import render\nfrom TasksManager.models import Project\nfrom django import forms\nfrom django.http import HttpResponseRedirect\nfrom django.core.urlresolvers import reverse\nclass Form_project_create(forms.Form):\n  title = forms.CharField(label=\"Title\", max_length=30)\n  description = forms.CharField(widget= forms.Textarea(attrs={'rows': 5, 'cols': 100,}))\n  client_name = forms.CharField(label=\"Client\", max_length=50)\ndef page(request):\n  if request.POST:\n    form = Form_project_create(request.POST)\n    if form.is_valid(): \n      title = form.cleaned_data['title'] \n      description = form.cleaned_data['description']\n      client_name = form.cleaned_data['client_name']\n      new_project = Project(title=title, description=description, client_name=client_name)\n      new_project.save()\n      return HttpResponseRedirect(reverse('public_index')) \n    else:\n      return render(request, 'en/public/create_project.html', {'form' : form}) \n  else:\n    form = Form_project_create() \n  return render(request, 'en/public/create_project.html', {'form' : form})\n```", "```py\nform = Form_inscription(initial={'name': 'new', 'supervisor': Supervisor.objects.all()[:1].get().id})\n```", "```py\nform = Form_inscription()\n```", "```py\nname = forms.CharField(label=\"Name\", max_length=30, initial=\"new\")\nsupervisor = forms.ModelChoiceField(label=\"Supervisor\", queryset=Supervisor.objects.all(), initial=Supervisor.objects.all()[:1].get().id)\n```"]