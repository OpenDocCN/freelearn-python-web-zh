["```py\n'django.contrib.auth',\n```", "```py\nclass UserProfile(models.Model):\n  user_auth = models.OneToOneField(User, primary_key=True)\n  phone = models.CharField(max_length=20, verbose_name=\"Phone number\", null=True, default=None, blank=True)\n  born_date = models.DateField(verbose_name=\"Born date\", null=True, default=None, blank=True)\n  last_connexion = models.DateTimeField(verbose_name=\"Date of last connexion\", null=True, default=None, blank=True)\nyears_seniority = models.IntegerField(verbose_name=\"Seniority\", default=0)\ndef __str__(self):\n  return self.user_auth.username\n```", "```py\nfrom django.contrib.auth.models import User\n```", "```py\nmanage.py schemamigration TasksManager --initial\nmanage.py syncdb \u2013migrate\n```", "```py\n<a href=\"{% url \"developer_detail\" \"2\" %}\">Detail second developer (The second user must be a developer)</a><br />\n```", "```py\nfrom django.shortcuts import render\nfrom TasksManager.models import Supervisor\nfrom django import forms\nfrom django.http import HttpResponseRedirect\nfrom django.core.urlresolvers import reverse\nfrom django.contrib.auth.models import User\ndef page(request):\n  if request.POST:\n    form = Form_supervisor(request.POST)\n    if form.is_valid(): \n      name           = form.cleaned_data['name']\n      login          = form.cleaned_data['login']\n      password       = form.cleaned_data['password']\n      specialisation = form.cleaned_data['specialisation']\n      email          = form.cleaned_data['email']\n      new_user = User.objects.create_user(username = login, email = email, password=password)\n      # In this line, we create an instance of the User model with the create_user() method. It is important to use this method because it can store a hashcode of the password in database. In this way, the password cannot be retrieved from the database. Django uses the PBKDF2 algorithm to generate the hash code password of the user.\n      new_user.is_active = True\n      # In this line, the is_active attribute defines whether the user can connect or not. This attribute is false by default which allows you to create a system of account verification by email, or other system user validation.\n      new_user.last_name=name\n      # In this line, we define the name of the new user.\n      new_user.save()\n      # In this line, we register the new user in the database.\n      new_supervisor = Supervisor(user_auth = new_user, specialisation=specialisation)\n      # In this line, we create the new supervisor with the form data. We do not forget to create the relationship with the User model by setting the property user_auth with new_user instance.\n      new_supervisor.save()\n      return HttpResponseRedirect(reverse('public_empty')) \n    else:\n      return render(request, 'en/public/create_supervisor.html', {'form' : form})\n  else:\n    form = Form_supervisor()\n  form = Form_supervisor()\n  return render(request, 'en/public/create_supervisor.html', {'form' : form})\nclass Form_supervisor(forms.Form):\n  name = forms.CharField(label=\"Name\", max_length=30)\n  login = forms.CharField(label = \"Login\")\n  email = forms.EmailField(label = \"Email\")\n  specialisation = forms.CharField(label = \"Specialisation\")\n  password = forms.CharField(label = \"Password\", widget = forms.PasswordInput)\n  password_bis = forms.CharField(label = \"Password\", widget = forms.PasswordInput) \n  def clean(self): \n    cleaned_data = super (Form_supervisor, self).clean() \n    password = self.cleaned_data.get('password') \n    password_bis = self.cleaned_data.get('password_bis')\n    if password and password_bis and password != password_bis:\n      raise forms.ValidationError(\"Passwords are not identical.\") \n    return self.cleaned_data\n```", "```py\ndef page(request):\n  if request.POST:\n    form = Form_inscription(request.POST)\n    if form.is_valid():\n      name          = form.cleaned_data['name']\n      login         = form.cleaned_data['login']\n      password      = form.cleaned_data['password']\n      supervisor    = form.cleaned_data['supervisor'] \n      new_user = User.objects.create_user(username = login, password=password)\n      new_user.is_active = True\n      new_user.last_name=name\n      new_user.save()\n      new_developer = Developer(user_auth = new_user, supervisor=supervisor)\n      new_developer.save()\n      return HttpResponse(\"Developer added\")\n    else:\n      return render(request, 'en/public/create_developer.html', {'form' : form})\n  else:\n    form = Form_inscription()\n    return render(request, 'en/public/create_developer.html', {'form' : form})\n```", "```py\n{% extends \"base.html\" %}\n{% block title_html %}\n    Developer list\n{% endblock %}\n{% block h1 %}\n    Developer list\n{% endblock %}\n{% block article_content %}\n    <table>\n        <tr>\n            <td>Name</td>\n            <td>Login</td>\n            <td>Supervisor</td>\n        </tr>\n        {% for dev in object_list %}\n            <tr>\n                <!-- The following line displays the __str__ method of the model. In this case it will display the username of the developer -->\n                <td><a href=\"\">{{ dev }}</a></td>\n                <!-- The following line displays the last_name of the developer -->\n                <td>{{ dev.user_auth.last_name }}</td>\n                <!-- The following line displays the __str__ method of the Supervisor model. In this case it will display the username of the supervisor -->\n                <td>{{ dev.supervisor }}</td>\n            </tr>\n        {% endfor %}\n    </table>\n{% endblock %}\n```", "```py\nurl(r'^connection$', 'TasksManager.views.connection.page', name=\"public_connection\"),\n```", "```py\nfrom django.shortcuts import render\nfrom django import forms\nfrom django.contrib.auth import authenticate, login\n# This line allows you to import the necessary functions of the authentication module.\ndef page(request):\n  if request.POST:\n  # This line is used to check if the Form_connection form has been posted. If mailed, the form will be treated, otherwise it will be displayed to the user.\n    form = Form_connection(request.POST) \n    if form.is_valid():\n      username = form.cleaned_data[\"username\"]\n      password = form.cleaned_data[\"password\"]\n      user = authenticate(username=username, password=password)\n      # This line verifies that the username exists and the password is correct.\n      if user:\n      # In this line, the authenticate function returns None if authentication has failed, otherwise it returns an object that validates the condition.\n        login(request, user)\n        # In this line, the login() function allows the user to connect.\n    else:\n      return render(request, 'en/public/connection.html', {'form' : form})\n  else:\n    form = Form_connection()\n  return render(request, 'en/public/connection.html', {'form' : form})\nclass Form_connection(forms.Form):\n  username = forms.CharField(label=\"Login\")\n  password = forms.CharField(label=\"Password\", widget=forms.PasswordInput)\n  def clean(self):\n    cleaned_data = super(Form_connection, self).clean()\n    username = self.cleaned_data.get('username')\n    password = self.cleaned_data.get('password')\n    if not authenticate(username=username, password=password):\n      raise forms.ValidationError(\"Wrong login or password\")\n    return self.cleaned_data\n```", "```py\n{% extends \"base.html\" %}\n{% block article_content %}\n  {% if user.is_authenticated %}\n  <-- This line checks if the user is connected.-->\n    <h1>You are connected.</h1>\n    <p>\n      Your email : {{ user.email }}\n      <-- In this line, if the user is connected, this line will display his/her e-mail address.-->\n    </p>\n  {% else %}\n  <!-- In this line, if the user is not connected, we display the login form.-->\n    <h1>Connexion</h1>\n    <form method=\"post\" action=\"{{ public_connection }}\">\n      {% csrf_token %}\n      <table>\n        {{ form.as_table }}\n      </table>\n      <input type=\"submit\" class=\"button\" value=\"Connection\" />\n    </form>\n  {% endif %}\n{% endblock %}\n```", "```py\nfrom django.shortcuts import render\nfrom django.contrib.auth import logout\ndef page(request):\n    logout(request)\n    return render(request, 'en/public/logout.html')\n```", "```py\n{% extends \"base.html\" %}\n{% block article_content %}\n  <h1>You are not connected.</h1>\n{% endblock %}\n```", "```py\n    from django.contrib.auth.decorators import login_required\n    ```", "```py\n    @login_required\n    def page(request): # This line already exists. Do not copy it.\n    ```", "```py\n    LOGIN_URL = 'public_connection'\n    ```", "```py\n    from django.shortcuts import render, redirect\n    ```", "```py\n    if request.GET.get('next') is not None:\n      return redirect(request.GET['next'])\n    ```", "```py\nfrom django.contrib.auth.decorators import login_required\n```", "```py\nurl (r'^create_project$', login_required(CreateView.as_view(model=Project, template_name=\"en/public/create_project.html\", success_url = 'index')), name=\"create_project\"),\n```"]