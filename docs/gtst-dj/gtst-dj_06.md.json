["```py\nfrom TasksManager.models import Project # line 1\nfrom django.shortcuts import render\ndef page(request):\n  new_project = Project(title=\"Tasks Manager with Django\", description=\"Django project to getting start with Django easily.\", client_name=\"Me\") # line 2\n  new_project.save() # line 3\n  return render(request, 'en/public/index.html', {'action':'Save datas of model'})\n```", "```py\nfrom TasksManager.models import Project\nfrom django.shortcuts import render\ndef page(request):\n  all_projects = Project.objects.all()\n  return render(request, 'en/public/index.html', {'action': \"Display all project\", 'all_projects': all_projects})\n```", "```py\n{% extends \"base.html\" %}\n{% block title_html %}\n  Projects list\n{% endblock %}\n{% block h1 %}\n  Projects list\n{% endblock %}\n{% block article_content %}\n  <h3>{{ action }}</h3>\n  {% if all_projects|length > 0 %}\n  <table>\n    <thead>\n      <tr>\n        <td>ID</td>\n        <td>Title</td>\n      </tr>\n    </thead>\n    <tbody>\n    {% for project in all_projects %}\n      <tr>\n        <td>{{ project.id }}</td>\n        <td>{{ project.title }}</td>\n      </tr>\n    {% endfor %}\n    </tbody>\n  </table>\n  {% else %}\n  <span>No project.</span>\n  {% endif %}\n{% endblock %}\n```", "```py\nfrom TasksManager.models import Project\nfrom django.shortcuts import render\ndef page(request):\n  action='Display project with client name = \"Me\"'\n  projects_to_me = Project.objects.filter(client_name=\"Me\")\n  return render(request, 'en/public/index.html', locals())\n```", "```py\nprojects_to_me = Project.objects.filter(client_name=\"Me\", title=\"Project test\")\n```", "```py\nprojects_to_me = Project.objects.filter(client_name=\"Me\")\nprojects_to_me = projects_to_me.filter(title=\"Project test\") \n```", "```py\nfirst_project = Project.objects.get(id=\"1\")\n```", "```py\nqueryset_project = Project.objects.filter(client_name=\"Me\").order_by(\"id\")\n# This line returns a queryset in which there are as many elements as there are projects for the Me customer\n\nfirst_item_queryset = queryset_project[:1]\n# This line sends us only the first element of this queryset, but this element is not an instance of a model\n\nproject = first_item_queryset.get()\n# This line retrieves the instance of the model that corresponds to the first element of queryset\n```", "```py\nproject = Project.objects.filter(client_name=\"Me\").order_by(\"id\")[:1].get()\n```", "```py\nurl(r'^project-detail-(?P<pk>\\d+)$', 'TasksManager.views.project_detail.page', name=\"project_detail\"),\n```", "```py\nfrom TasksManager.models import Project\nfrom django.shortcuts import render\ndef page(request, pk):\n  project = Project.objects.get(id=pk)\n  return render(request, 'en/public/project_detail.html', {'project' : project})\n```", "```py\n<h3>{{ project.title }}</h3>\n<h4>Client : {{ project.client_name }}</h4>\n<p>\n  {{ project.description }}\n</p>\n```", "```py\nfrom TasksManager.models import Project, Task, Supervisor, Developer\nfrom django.shortcuts import render\nfrom django.utils import timezone\ndef page(request):\n  # Saving a new supervisor\n  new_supervisor = Supervisor(name=\"Guido van Rossum\", login=\"python\", password=\"password\", last_connection=timezone.now(), email=\"python@python.com\", specialisation=\"Python\") # line 1\n  new_supervisor.save()\n  # Saving a new developer\n  new_developer = Developer(name=\"Me\", login=\"me\", password=\"pass\", last_connection=timezone.now(), email=\"me@python.com\", supervisor=new_supervisor)\n  new_developer.save()\n  # Saving a new task\n  project_to_link = Project.objects.get(id = 1) # line 2\n  new_task = Task(title=\"Adding relation\", description=\"Example of adding relation and save it\", time_elapsed=2, importance=0, project=project_to_link, developer=new_developer) # line 3\n  new_task.save()\n  return render(request, 'en/public/index.html', {'action' : 'Save relationship'})\n```", "```py\nfrom TasksManager.models import Project, Task\nfrom django.shortcuts import render\ndef page(request):\n  new_project = Project(title = \"Other project\", description=\"Try to update models.\", client_name=\"People\")\n  new_project.save()\n  task = Task.objects.get(id = 1)\n  task.description = \"New description\"\n  task.project = new_project\n  task.save()\n  return render(request, 'en/public/index.html', {'action' : 'Update model'})\n```", "```py\nfrom TasksManager.models import Project\nfrom django.shortcuts import render\ndef page(request):\n  task = Project.objects.filter(client_name = \"people\").update(client_name=\"Nobody\")\n  return render(request, 'en/public/index.html', {'action' : 'Update for many model'})\n```", "```py\nfrom TasksManager.models import Task\nfrom django.shortcuts import render\ndef page(request):\n  one_task = Task.objects.get(id = 1)\n  one_task.delete() # line 1\n  all_tasks = Task.objects.all()\n  all_tasks.delete() # line 2\n  return render(request, 'en/public/index.html', {'action' : 'Delete tasks'})\n```", "```py\nfrom TasksManager.models import Task, Project\nfrom django.shortcuts import render\ndef page(request):\n  project = Project.objects.get(id = 1)\n  tasks = Task.objects.filter(project = project)\n  return render(request, 'en/public/index.html', {'action' : 'Tasks for project', 'tasks':tasks})\n```", "```py\nfrom TasksManager.models import Task, Project\nfrom django.shortcuts import render\ndef page(request):\n  task = Task.objects.get(id = 1)\n  project = task.project\n  return render(request, 'en/public/index.html', {'action' : 'Project for task', 'project':project})\n```", "```py\nfrom TasksManager.models import Task, Project\nfrom django.shortcuts import render\nfrom django.db.models import Q\ndef page(request):\n  projects_list = Project.objects.filter(Q(client_name=\"Me\") | Q(client_name=\"Nobody\"))\n  return render(request, 'en/public/index.html', {'action' : 'Project with OR operator', 'projects_list':projects_list})\n```", "```py\ntasks_list = Task.objects.filter(time_elapsed__gte=4)\n```", "```py\nfrom TasksManager.models import Task, Project\nfrom django.shortcuts import renderdef page(request):\n  tasks_list = Task.objects.filter(time_elapsed__gt=4)\n  array_projects = tasks_list.values_list('project', flat=True).distinct()\n  projects_list = Project.objects.all()\n  projects_list_lt4 = projects_list.exclude(id__in=array_projects)\n  return render(request, 'en/public/index.html', {'action' : 'NOT IN SQL equivalent', 'projects_list_lt4':projects_list_lt4})\n```", "```py\nIn the first queryset, we first retrieve the list of all the tasks for which `time_elapsed` is greater than `4`In the second queryset, we got the list of all the related projects in these tasksIn the third queryset, we got all the projectsIn the fourth queryset, we excluded all the projects with tasks that last for more than `4` hours\n```", "```py\nfirst_task = Project.objects.raw(\"SELECT * FROM TasksManager_project\")[0]\n```", "```py\nfirst_task.title\n```"]