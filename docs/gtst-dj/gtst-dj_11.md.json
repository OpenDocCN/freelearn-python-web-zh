["```py\nitem = document.querySelector('tag#id_content');\n```", "```py\nitem = $('tag#id_content');\n```", "```py\nalert($('div#div_1').html());\n```", "```py\n$('div#div_1').html($('div#div_1').html()+'<button>JQuery</button>');\n```", "```py\nvar cases = $('nav ul li').each(function() {\n  $(this).addClass(\"nav_item\");\n});\n```", "```py\n<script src=\"img/jquery-1.11.0.js' %}\"></script>\n{% block head %}{% endblock %}\n```", "```py\n{% for task in tasks_list %}\n  <tr id=\"task_{{ task.id }}\">\n    <td><a href=\"{% url \"task_detail\" task.id %}\">{{ task.title }}</a></td>\n    <td>{{ task.description|truncatechars:25 }}</td>\n    <td><a href=\"{% url \"update_task\" task.id %}\">Edit</a></td>\n    <td><button onclick=\"javascript:task_delete({{ task.id }}, '{% url \"task\n_delete_ajax\" %}');\">Delete</button></td>\n  </tr>\n{% endfor %}\n```", "```py\nfunction task_delete(id, url){\n  $.ajax({\n    type: 'POST', \n    // Here, we define the used method to send data to the Django views. Other values are possible as POST, GET, and other HTTP request methods.\n    url: url, \n    // This line is used to specify the URL that will process the request.\n    data: {task: id}, \n    // The data property is used to define the data that will be sent with the AJAX request.\n    dataType:'json', \n    // This line defines the type of data that we are expecting back from the server. We do not necessarily need JSON in this example, but when the response is more complete, we use this kind of data type.\n    success: task_delete_confirm,\n    // The success property allows us to define a function that will be executed when the AJAX request works. This function receives as a parameter the AJAX response.\n    error: function () {alert('AJAX error.');} \n    // The error property can define a function when the AJAX request does not work. We defined in the previous code an anonymous function that displays an AJAX error to the user.\n  });\n}\nfunction task_delete_confirm(response) {\n  task_id = JSON.parse(response); \n  // This line is in the function that receives the AJAX response when the request was successful. This line allows deserializing the JSON response returned by Django views.\n  if (task_id>0) {\n    $('#task_'+task_id).remove(); \n    // This line will delete the <tr> tag containing the task we have just removed\n  }\n  else {\n    alert('Error');\n  }\n}\n```", "```py\n{% load static %}\n{% block head %}\n  <script src=\"img/task.js' %}\"></script>\n{% endblock %}\n```", "```py\n  url(r'^task-delete-ajax$', 'TasksManager.views.ajax.task_delete_ajax.page', name=\"task_delete_ajax\"),\n```", "```py\nfrom TasksManager.models import Task\nfrom django.http import HttpResponse\nfrom django import forms\nfrom django.views.decorators.csrf import csrf_exempt\n# We import the csrf_exempt decorator that we will use to line 4.\nimport json\n# We import the json module we use to line 8.\nclass Form_task_delete(forms.Form):\n# We create a form with a task field that contains the identifier of the task. When we create a form it allows us to use the Django validators to check the contents of the data sent by AJAX. Indeed, we are not immune that the user sends data to hack our server.\n  task       = forms.IntegerField()\n@csrf_exempt\n# This line allows us to not verify the CSRF token for this view. Indeed, with AJAX we cannot reliably use the CSRF protection.\ndef page(request):\n  return_value=\"0\"\n  # We create a variable named return_value that will contain a code returned to our JavaScript function. We initialize the value 0 to the variable.\n  if len(request.POST) > 0:\n    form = Form_task_delete(request.POST)\n    if form.is_valid():\n    # This line allows us to verify the validity of the value sent by the AJAX request.\n      id_task = form.cleaned_data['task']\n      task_record = Task.objects.get(id = id_task)\n      task_record.delete()\n      return_value=id_task\n      # If the task been found, the return_value variable will contain the value of the id property after removing the task. This value will be returned to the JavaScript function and will be useful to remove the corresponding row in the HTML table.\n  # The following line contains two significant items. The json.dumps() function will return a serialized JSON object. Serialization allows encoding an object sequence of characters. This technique allows different languages to share objects transparently. We also define a content_type to specify the type of data returned by the view.\n  return HttpResponse(json.dumps(return_value), content_type = \"application/json\")\n```"]