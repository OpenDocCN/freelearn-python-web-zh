["```py\nrequest.session['session_var_name'] = \"Value\"\n```", "```py\nrequest.session['session_var_name']\n```", "```py\nurl (r'^task_detail_(?P<pk>\\d+)$', 'TasksManager.views.task_detail.page', name=\"task_detail\"),\n```", "```py\nfrom django.shortcuts import render\nfrom TasksManager.models import Task\nfrom django.http import HttpResponseRedirect\nfrom django.core.urlresolvers import reverse\ndef page(request, pk):\n  check_task = Task.objects.filter(id = pk) \n  # This line is used to retrieve a queryset of the elements whose ID property matches to the parameter pk sent to the URL. We will use this queryset in the following line : task = check_task.get().\n\n  try:\n  # This is used to define an error handling exception to the next line.\n    task = check_task.get()\n    # This line is used to retrieve the record in the queryset.\n  except (Task.DoesNotExist, Task.MultipleObjectsReturned):\n  # This allows to process the two kind of exceptions: DoesNotExist and MultipleObjectsReturned. The DoesNotExist exception type is raised if the queryset has no records. The MultipleObjectsReturned exception type is raised if queryset contains multiple records.\n    return HttpResponseRedirect(reverse('public_empty'))\n    # This line redirects the user if an exception is thrown. We could also redirect to an error page.\n  else:\n    request.session['last_task'] = task.id\n    # This line records the ID property of the task in a session variable named last_task.\n    #In this line, we use the same template that defines the form CBV DetailView. Without having to modify the template, we send our task in a variable named object.\n  return render(request, 'en/public/task_detail.html', {'object' : task})\n```", "```py\nurl (r'^task_list$', 'TasksManager.views.task_list.page', name=\"task_list\"),\n```", "```py\nfrom django.shortcuts import render\nfrom TasksManager.models import Task\nfrom django.core.urlresolvers import reverse\ndef page(request):\n  tasks_list = Task.objects.all() \n  # This line is used to retrieve all existing tasks databases.\n  last_task = 0 \n  # In this line, we define last_task variable with a null value without generating a bug when using the render() method.\n  if 'last_task' in request.session: \n  # This line is used to check whether there is a session variable named last_task.\n    last_task = Task.objects.get(id = request.session['last_task'])\n    # In this line, we get the recording of the last task in our last_task variable.\n    tasks_list = tasks_list.exclude(id = request.session['last_task'])\n    # In this line, we exclude the last task for the queryset to not have duplicates.\n  return render(request, 'en/public/tasks_list.html', {'tasks_list': tasks_list, 'last_task' : last_task})\n```", "```py\n{% extends \"base.html\" %}\n{% block title_html %}\n  Tasks list\n{% endblock %}\n{% block article_content %}\n  <table>\n  <tr>\n    <th>Title</th>\n    <th>Description</th>\n    <th colspan=\"2\"><a href=\"{% url \"create_task\" %}\">Create</a></th>\n  </tr>\n  {% if last_task %} \n  <!-- This line checks to see if we have a record in the last_task variable. If this variable has kept the value 0, the condition will not be validated. In this way, the last accessed task will display at the beginning of the list.-->\n    <tr class=\"important\">\n      <td><a href=\"{% url \"task_detail\" last_task.id %}\">{{ last_task.title }}</a></td>\n      <td>{{ last_task.description|truncatechars:25 }}</td>\n      <td><a href=\"{% url \"update_task\" last_task.id %}\">Edit</a></td>\n      <td><a href=\"{% url \"task_delete\" last_task.id %}\">Delete</a></td>\n    </tr>\n  {% endif %}\n  {% for task in tasks_list %}\n  <!-- This line runs through the rest of the tasks and displays. -->\n    <tr>\n      <td><a href=\"{% url \"task_detail\" task.id %}\">{{ task.title }}</a></td>\n      <td>{{ task.description|truncatechars:25 }}</td>\n      <td><a href=\"{% url \"update_task\" task.id %}\">Edit</a></td>\n      <td><a href=\"{% url \"task_delete\" task.id %}\">Delete</a></td>\n    </tr>\n  {% endfor %}\n  </table>\n{% endblock %}\n```", "```py\ntr.important td {\n  font-weight:bold;\n}\n```"]