["```py\n@manager.command\ndef test():\n    print \"Hello, World!\"\n```", "```py\n$ python manage.py test\nHello, World!\n\n```", "```py\n@manager.command\ndef setup_db():\n    db.create_all()\n\n    admin_role = Role()\n    admin_role.name = \"admin\"\n    admin_role.description = \"admin\"\n    db.session.add(admin_role)\n\n    default_role = Role()\n    default_role.name = \"default\"\n    default_role.description = \"default\"\n    db.session.add(default_role)\n\n    admin = User()\n    admin.username = \"admin\"\n    admin.set_password(\"password\")\n    admin.roles.append(admin_role)\n    admin.roles.append(default_role)\n    db.session.add(admin)\n\n    tag_one = Tag('Python')\n    tag_two = Tag('Flask')\n    tag_three = Tag('SQLAlechemy')\n    tag_four = Tag('Jinja')\n    tag_list = [tag_one, tag_two, tag_three, tag_four]\n\n    s = \"Body text\"\n\n    for i in xrange(100):\n        new_post = Post(\"Post {}\".format(i))\n        new_post.user = admin\n        new_post.publish_date = datetime.datetime.now()\n        new_post.text = s\n        new_post.tags = random.sample(\n            tag_list,\n            random.randint(1, 3)\n        )\n        db.session.add(new_post)\n\n    db.session.commit()\n```", "```py\nfrom flask.ext.script.commands import ShowUrls, Clean\n\u2026\nmanager = Manager(app)\nmanager.add_command(\"server\", Server())\nmanager.add_command(\"show-urls\", ShowUrls())\nmanager.add_command(\"clean\", Clean())\n```", "```py\n$ pip install flask-debugtoolbar\n\n```", "```py\nfrom flask import flash, redirect, url_for, session\nfrom flask.ext.bcrypt import Bcrypt\nfrom flask.ext.openid import OpenID\nfrom flask_oauth import OAuth\nfrom flask.ext.login import LoginManager\nfrom flask.ext.principal import Principal, Permission, RoleNeed\nfrom flask.ext.restful import Api\nfrom flask.ext.celery import Celery\nfrom flask.ext.debugtoolbar import DebugToolbarExtension\n\nbcrypt = Bcrypt()\noid = OpenID()\noauth = OAuth()\nprincipals = Principal()\ncelery = Celery()\ndebug_toolbar = DebugToolbarExtension()\n```", "```py\nfrom .extensions import (\n    bcrypt,\n    oid,\n    login_manager,\n    principals,\n    rest_api,\n    celery,\n    debug_toolbar,\n)\n\ndef create_app(object_name):\n\n    debug_toolbar.init_app(app)\n```", "```py\nclass DevConfig(Config):\n    DEBUG = True\n    DEBUG_TB_INTERCEPT_REDIRECTS = False\n```", "```py\nclass DevConfig(Config):\n    DEBUG = True\n    DEBUG_TB_PANELS = [\n        'flask_debugtoolbar.panels.versions.VersionDebugPanel',\n        'flask_debugtoolbar.panels.timer.TimerDebugPanel',\n        'flask_debugtoolbar.panels.headers.HeaderDebugPanel',\n        'flask_debugtoolbar.panels.request_vars.RequestVarsDebugPanel',\n        'flask_debugtoolbar.panels.config_vars.ConfigVarsDebugPanel ',\n        'flask_debugtoolbar.panels.template.TemplateDebugPanel',\n        'flask_debugtoolbar.panels.logger.LoggingPanel',\n        'flask_debugtoolbar.panels.route_list.RouteListDebugPanel'\n        'flask_debugtoolbar.panels.profiler.ProfilerDebugPanel',\n        'flask.ext.mongoengine.panels.MongoDebugPanel'\n    ]\n    DEBUG_TB_INTERCEPT_REDIRECTS = False\n```", "```py\n$ pip install Flask-Cache\n\n```", "```py\nfrom flask.ext.cache import Cache\n\ncache = Cache()\n```", "```py\nfrom .extensions import (\n    bcrypt,\n    oid,\n    login_manager,\n    principals,\n    rest_api,\n    celery,\n    debug_toolbar,\n    cache\n)\n\ndef create_app(object_name):\n    \u2026\n    cache.init_app(app)\n```", "```py\nclass DevConfig(Config):\n    \u2026\n    CACHE_TYPE = 'simple'\n```", "```py\n@blog_blueprint.route('/')\n@blog_blueprint.route('/<int:page>')\n@cache.cached(timeout=60)\ndef home(page=1):\n    posts = Post.query.order_by(\n        Post.publish_date.desc()\n    ).paginate(page, 10)\n    recent, top_tags = sidebar_data()\n\n    return render_template(\n        'home.html',\n        posts=posts,\n        recent=recent,\n        top_tags=top_tags\n    )\n```", "```py\n@cache.cached(timeout=7200, key_prefix='sidebar_data')\ndef sidebar_data():\n    recent = Post.query.order_by(\n        Post.publish_date.desc()\n    ).limit(5).all()\n\n    top_tags = db.session.query(\n        Tag, func.count(tags.c.post_id).label('total')\n    ).join(\n        tags\n    ).group_by(\n        Tag\n    ).order_by('total DESC').limit(5).all()\n\n    return recent, top_tags\n```", "```py\n    class User(db.Model):\n        \u2026\n\n        @staticmethod\n        @cache.memoize(60)\n        def verify_auth_token(token):\n            s = Serializer(current_app.config['SECRET_KEY'])\n\n            try:\n                data = s.loads(token)\n            except SignatureExpired:\n                return None\n            except BadSignature:\n                return None\n\n            user = User.query.get(data['id'])\n            return user\n```", "```py\nclass ProdConfig(Config):\n    \u2026\n    CACHE_TYPE = 'simple'\n\nclass DevConfig(Config):\n    \u2026\n    CACHE_TYPE = 'null'\n```", "```py\ndef make_cache_key(*args, **kwargs):\n    path = request.path\n    args = str(hash(frozenset(request.args.items())))\n    lang = get_locale()\n    return (path + args + lang).encode('utf-8')\n\n@blog_blueprint.route(\n    '/post/<int:post_id>',\n    methods=('GET', 'POST')\n)\n@cache.cached(timeout=600, key_prefix=make_cache_key)\ndef post(post_id):\n    \u2026\n```", "```py\nclass ProdConfig(Config):\n    \u2026\n    CACHE_TYPE = 'redis'\n    CACHE_REDIS_HOST = 'localhost'\n    CACHE_REDIS_PORT = '6379'\n    CACHE_REDIS_PASSWORD = 'password'\n    CACHE_REDIS_DB = '0'\n```", "```py\n$ pip install redis\n\n```", "```py\n$ pip install memcache\n\n```", "```py\nclass ProdConfig(Config):\n    \u2026\n    CACHE_TYPE = 'memcached'\n    CACHE_KEY_PREFIX = 'flask_cache'\n    CACHE_MEMCACHED_SERVERS = ['localhost:11211']\n```", "```py\n$ pip install Flask-Assets cssmin jsmin\n\n```", "```py\nfrom flask_assets import Environment, Bundle\n\nassets_env = Environment()\n\nmain_css = Bundle(\n    'css/bootstrap.css',\n    filters='cssmin',\n    output='css/common.css'\n)\n\nmain_js = Bundle(\n    'js/jquery.js',\n    'js/bootstrap.js',\n    filters='jsmin',\n    output='js/common.js'\n)\n```", "```py\nfrom .extensions import (\n    bcrypt,\n    oid,\n    login_manager,\n    principals,\n    rest_api,\n    celery,\n    debug_toolbar,\n    cache,\n    assets_env,\n    main_js,\n    main_css\n)\n\ndef create_app(object_name):\n    \u2026\n    assets_env.init_app(app)\n\n    assets_env.register(\"main_js\", main_js)\n    assets_env.register(\"main_css\", main_css)\n```", "```py\nclass DevConfig(Config):\n    DEBUG = True\n    DEBUG_TB_INTERCEPT_REDIRECTS = False\n\n    ASSETS_DEBUG = True\n```", "```py\n<link rel=\"stylesheet\" href=https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css>\n```", "```py\n{% assets \"main_css\" %}\n<link rel=\"stylesheet\" type=\"text/css\" href=\"{{ ASSET_URL }}\" />\n{% endassets %}\n```", "```py\n<script src=\"img/jquery.min.js\"></script>\n<script src=\"img/bootstrap.min.js\"></script>\n```", "```py\n{% assets \"main_js\" %}\n<script src=\"img/{{ ASSET_URL }}\"></script>\n{% endassets %}\n```", "```py\n$ pip install Flask-Admin\n\n```", "```py\nfrom flask.ext.admin import Admin\n\nadmin = Admin()\n```", "```py\nfrom .extensions import (\n    bcrypt,\n    oid,\n    login_manager,\n    principals,\n    rest_api,\n    celery,\n    debug_toolbar,\n    cache,\n    assets_env,\n    main_js,\n    main_css,\n    admin\n)\n\ndef create_app(object_name):\n    \u2026\n    admin.init_app(app)\n```", "```py\nfrom flask.ext.admin import BaseView, expose\n\nclass CustomView(BaseView):\n    @expose('/')\n    def index(self):\n        return self.render('admin/custom.html')\n\n    @expose('/second_page')\n    def second_page(self):\n        return self.render('admin/second_page.html')\n```", "```py\n{% extends 'admin/master.html' %}\n{% block body %}\n    This is the custom view!\n    <a href=\"{{ url_for('.second_page') }}\">Link</a>\n{% endblock %}\n```", "```py\nfrom webapp.controllers.admin import CustomView\n\u2026\ndef create_app(object_name):\n    \u2026\n    admin.add_view(CustomView(name='Custom'))\n```", "```py\nfrom flask.ext.admin.contrib.sqla import ModelView\n# or, if you use MongoEngine\nfrom flask.ext.admin.contrib.mongoengine import ModelView\n\nclass CustomModelView(ModelView):\n    pass\n```", "```py\nfrom controllers.admin import CustomView, CustomModelView\nfrom .models import db, Reminder, User, Role, Post, Comment, Tag\n\ndef create_app(object_name):\n\n    admin.add_view(CustomView(name='Custom'))\n    models = [User, Role, Post, Comment, Tag, Reminder]\n\n    for model in models:\n       admin.add_view(\n           CustomModelView(model, db.session, category='models')\n       )\n```", "```py\nfrom wtforms import (\n    widgets,\n    StringField,\n    TextAreaField,\n    PasswordField,\n    BooleanField\n)\n\nclass CKTextAreaWidget(widgets.TextArea):\n    def __call__(self, field, **kwargs):\n        kwargs.setdefault('class_', 'ckeditor')\n        return super(CKTextAreaWidget, self).__call__(field, **kwargs)\n\nclass CKTextAreaField(TextAreaField):\n    widget = CKTextAreaWidget()\n```", "```py\nfrom webapp.forms import CKTextAreaField\n\nclass PostView(CustomModelView):\n    form_overrides = dict(text=CKTextAreaField)\n    column_searchable_list = ('text', 'title')\n    column_filters = ('publish_date',)\n\n    create_template = 'admin/post_edit.html'\n    edit_template = 'admin/post_edit.html'\n```", "```py\n{% extends 'admin/model/edit.html' %}\n{% block tail %}\n    {{ super() }}\n    <script\n        src=\"img/ckeditor.js\">\n    </script>\n{% endblock %}\n```", "```py\nclass CustomFileAdmin(FileAdmin):\n    pass\nNow, just import the new class into your __init__.py file and pass in the path that you wish to be accessible from the web:\nimport os\nfrom controllers.admin import (\n    CustomView,\n    CustomModelView,\n    PostView,\n    CustomFileAdmin\n)\n\ndef create_app(object_name):\n\n    admin.add_view(\n        CustomFileAdmin(\n            os.path.join(os.path.dirname(__file__), 'static'),\n            '/static/',\n            name='Static Files'\n        )\n    )\n```", "```py\nclass CustomView(BaseView):\n    @expose('/')\n    @login_required\n    @admin_permission.require(http_exception=403)\n    def index(self):\n        return self.render('admin/custom.html')\n\n    @expose('/second_page')\n    @login_required\n    @admin_permission.require(http_exception=403)\n    def second_page(self):\n        return self.render('admin/second_page.html')\n```", "```py\nclass CustomModelView(ModelView):\n    def is_accessible(self):\n        return current_user.is_authenticated() and\\\n               admin_permission.can()\n\nclass CustomFileAdmin(FileAdmin):\n    def is_accessible(self):\n        return current_user.is_authenticated() and\\\n               admin_permission.can()\n```", "```py\n$ pip install Flask-Mail\n\n```", "```py\nfrom flask_mail import Mail\n\nmail = Mail()\n```", "```py\nclass DevConfig(Config):\n\n    MAIL_SERVER = 'localhost'\n    MAIL_PORT = 25\n    MAIL_USERNAME = 'username'\n    MAIL_PASSWORD = 'password'\n```", "```py\nfrom .extensions import (\n    bcrypt,\n    oid,\n    login_manager,\n    principals,\n    rest_api,\n    celery,\n    debug_toolbar,\n    cache,\n    assets_env,\n    main_js,\n    main_css,\n    admin,\n    mail\n)\n\ndef create_app(object_name):\n\n    mail.init_app(app)\n```", "```py\nfrom flask_mail import Message\nfrom webapp.extensions import celery, mail\n\n@celery.task(\n    bind=True,\n    ignore_result=True,\n    default_retry_delay=300,\n    max_retries=5\n)\ndef remind(self, pk):\n    reminder = Reminder.query.get(pk)\n    msg = MIMEText(reminder.text)\n    msg = Message(\"Your reminder\",\n                  sender=\"from@example.com\",\n                  recipients=[reminder.email])\n\n    msg.body = reminder.text\n    mail.send(msg)\n```"]