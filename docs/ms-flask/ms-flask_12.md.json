["```py\ndef square(x):\n    return x * x\n```", "```py\n$ python\n>>> def square(x): \n...     return x * x\n>>> assert square(5) == 25\n>>> assert square(7) == 49\n>>> assert square(10) == 100\n>>> assert square(10) == 0\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\nAssertionError\n\n```", "```py\nimport tempfile\n\nclass TestConfig(Config):\n    db_file = tempfile.NamedTemporaryFile()\n\n    DEBUG = True\n    DEBUG_TB_ENABLED = False\n\n    SQLALCHEMY_DATABASE_URI = 'sqlite:///' + db_file.name\n\n    CACHE_TYPE = 'null'\n    WTF_CSRF_ENABLED = False\n\n    CELERY_BROKER_URL = \"amqp://guest:guest@localhost:5672//\"\n    CELERY_BACKEND_URL = \"amqp://guest:guest@localhost:5672//\"\n\n    MAIL_SERVER = 'localhost'\n    MAIL_PORT = 25\n    MAIL_USERNAME = 'username'\n    MAIL_PASSWORD = 'password'\n```", "```py\nimport unittest\n\nclass TestURLs(unittest.TestCase):\n    pass\n\nif __name__ == '__main__':\n    unittest.main()\n```", "```py\n$ python -m unittest discover\n\n---------------------------------------------------------------------\nRan 0 tests in 0.000s\n\nOK\n\n```", "```py\nclass TestURLs(unittest.TestCase):\n    def setUp(self):\n        # Bug workarounds\n        admin._views = []\n        rest_api.resources = []\n\n        app = create_app('webapp.config.TestConfig')\n        self.client = app.test_client()\n\n        # Bug workaround\n        db.app = app\n\n        db.create_all()\n```", "```py\nclass TestURLs(unittest.TestCase):\n    def setUp(self):\n        \u2026\n\n    def tearDown(self):\n        db.session.remove()\n        db.drop_all()\n```", "```py\nclass TestURLs(unittest.TestCase):\n    def setUp(self):\n        \u2026\n\n    def tearDown(self):\n        \u2026\n\n    def test_root_redirect(self):\n        \"\"\" Tests if the root URL gives a 302 \"\"\"\n\n        result = self.client.get('/')\n        assert result.status_code == 302\n        assert \"/blog/\" in result.headers['Location']\n```", "```py\n$ python -m unittest discover\n.\n---------------------------------------------------------------------\nRan 1 tests in 0.128s\n\nOK\n\n```", "```py\nclass TestURLs(unittest.TestCase):\n    def setUp(self):\n        \u2026\n\n    def tearDown(self):\n        \u2026\n\n    def test_root_redirect(self):\n        \u2026\n```", "```py\nclass TestURLs(unittest.TestCase):\n    \u2026\n    def test_login(self):\n        \"\"\" Tests if the login form works correctly \"\"\"\n\n        test_role = Role(\"default\")\n        db.session.add(test_role)\n        db.session.commit()\n\n        test_user = User(\"test\")\n        test_user.set_password(\"test\")\n        db.session.add(test_user)\n        db.session.commit()\n\n        result = self.client.post('/login', data=dict(\n            username='test',\n            password=\"test\"\n        ), follow_redirects=True)\n\n        self.assertEqual(result.status_code, 200)\n        self.assertIn('You have been logged in', result.data)\n```", "```py\n$ pip install selenium\n\n```", "```py\nimport unittest\n\nclass TestURLs(unittest.TestCase):\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    def test_add_new_post(self):\n        \"\"\" Tests if the new post page saves a Post object to the\n            database\n\n            1\\. Log the user in\n            2\\. Go to the new_post page\n            3\\. Fill out the fields and submit the form\n            4\\. Go to the blog home page and verify that the post \n               is on the page\n        \"\"\"\n        pass\n```", "```py\nimport unittest\nfrom selenium import webdriver\nclass TestURLs(unittest.TestCase):\n    def setUp(self):\n        self.driver = webdriver.Firefox()\n    def tearDown(self):\n        self.driver.close()\n```", "```py\n$ python\n>>> from selenium import webdriver\n>>> driver = webdriver.Firefox()\n# load the Google homepage\n>>> driver.get(\"http://www.google.com\")\n# find a element by its class\n>>> search_field = driver.find_element_by_class_name(\"gsfi\")\n# find a element by its name\n>>> search_field = driver.find_element_by_name(\"q\")\n# find an element by its id\n>>> search_field = driver.find_element_by_id(\"lst-ib\")\n# find an element with JavaScript\n>>> search_field = driver.execute_script(\n \"return document.querySelector('#lst-ib')\"\n)\n# search for flask\n>>> search_field.send_keys(\"flask\")\n>>> search_button = driver.find_element_by_name(\"btnK\")\n>>> search_button.click()\n\n```", "```py\nfrom webapp import create_app\nfrom webapp.models import db, User, Role\n\napp = create_app('webapp.config.TestConfig')\n\ndb.app = app\ndb.create_all()\n\ndefault = Role(\"default\")\nposter = Role(\"poster\")\ndb.session.add(default)\ndb.session.add(poster)\ndb.session.commit()\n\ntest_user = User(\"test\")\ntest_user.set_password(\"test\")\ntest_user.roles.append(poster)\ndb.session.add(test_user)\ndb.session.commit()\n\napp.run()\n```", "```py\nclass TestURLs(unittest.TestCase):\n    def setUp(self):\n        \u2026\n\n    def tearDown(self):\n        \u2026\n\n    def test_add_new_post(self):\n        \"\"\" Tests if the new post page saves a Post object to the\n            database\n\n            1\\. Log the user in\n            2\\. Go to the new_post page\n            3\\. Fill out the fields and submit the form\n            4\\. Go to the blog home page and verify that\n               the post is on the page\n        \"\"\"\n        # login\n        self.driver.get(\"http://localhost:5000/login\")\n\n        username_field = self.driver.find_element_by_name(\n            \"username\"\n        )\n        username_field.send_keys(\"test\")\n\n        password_field = self.driver.find_element_by_name(\n            \"password\"\n        )\n        password_field.send_keys(\"test\")\n\n        login_button = self.driver.find_element_by_id(\n            \"login_button\"\n        )\n        login_button.click()\n\n        # fill out the form\n        self.driver.get(\"http://localhost:5000/blog/new\")\n\n        title_field = self.driver.find_element_by_name(\"title\")\n        title_field.send_keys(\"Test Title\")\n\n        # find the editor in the iframe\n        self.driver.switch_to.frame(\n            self.driver.find_element_by_tag_name(\"iframe\")\n        )\n        post_field = self.driver.find_element_by_class_name(\n            \"cke_editable\"\n        )\n        post_field.send_keys(\"Test content\")\n        self.driver.switch_to.parent_frame()\n\n        post_button = self.driver.find_element_by_class_name(\n            \"btn-primary\"\n        )\n        post_button.click()\n\n        # verify the post was created\n        self.driver.get(\"http://localhost:5000/blog\")\n        self.assertIn(\"Test Title\", self.driver.page_source)\n        self.assertIn(\"Test content\", self.driver.page_source)\n```", "```py\n$ pip install coverage\n\n```", "```py\n$ coverage run --source webapp --branch -m unittest discover\n\n```", "```py\n$ coverage report\nName                               Stmts   Miss Branch BrMiss  Cover\n--------------------------------------------------------------------\nwebapp/__init__                       51      0      6      0   100%\nwebapp/config                         37      0      0      0   100%\nwebapp/controllers/__init__            0      0      0      0   100%\nwebapp/controllers/admin              27      4      0      0    85%\nwebapp/controllers/blog               77     45      8      8    38%\nwebapp/controllers/main               78     42     20     16    41%\nwebapp/controllers/rest/__init__       0      0      0      0   100%\nwebapp/controllers/rest/auth          13      6      2      2    47%\nwebapp/controllers/rest/fields        17      8      0      0    53%\nwebapp/controllers/rest/parsers       19      0      0      0   100%\nwebapp/controllers/rest/post          85     71     44     43    12%\nwebapp/extensions                     56     14      4      4    70%\nwebapp/forms                          48     15     10      7    62%\nwebapp/models                         89     21      4      3    74%\nwebapp/tasks                          41     29      4      4    27%\n--------------------------------------------------------------------\nTOTAL                                638    255    102     87    54%\n\n```", "```py\n$ coverage html\n\n```", "```py\n$images = glob(\n    $img_directory . \"{*.jpg, *.jpeg, *.gif, *.png, *.PNG, *.Png, *.PnG, *.pNG, *.pnG, *.pNg, *.PNg}\",\n    GLOB_BRACE\n);\n```"]