["```py\n$ pip install flask-sqlalchemy\n\n```", "```py\n# MySQL\n$ pip install PyMySQL\n# Postgres\n$ pip install psycopg2\n# MSSQL\n$ pip install pyodbc\n# Oracle\n$ pip install cx_Oracle\n\n```", "```py\ndatabasetype+driver://user:password@ip:port/db_name\n```", "```py\n# SQLite\nsqlite:///database.db\n# MySQL\nmysql+pymysql://user:password@ip:port/db_name\n# Postgres\npostgresql+psycopg2://user:password@ip:port/db_name\n# MSSQL\nmssql+pyodbc://user:password@dsn_name\n# Oracle\noracle+cx_oracle://user:password@ip:port/db_name\n```", "```py\nclass DevConfig(Config):\n    debug = True\n    SQLALCHEMY_DATABASE_URI = \"YOUR URI\"\n```", "```py\nfrom flask.ext.sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config.from_object(DevConfig)\ndb = SQLAlchemy(app)\n\n```", "```py\nclass User(db.Model):\n    id = db.Column(db.Integer(), primary_key=True)\n    username = db.Column(db.String(255))\n    password = db.Column(db.String(255))\n\n    def __init__(self, username):\n        self.username = username\n\n    def __repr__(self):\n        return \"<User '{}'>\".format(self.username)\n```", "```py\nusername = db.Column('user_name', db.String(255))\n```", "```py\nSQLALCHMEY_ECHO = True\n```", "```py\nclass User(db.Model):\n    __tablename__ = 'user_table_name'\n\n    id = db.Column(db.Integer(), primary_key=True)\n    username = db.Column(db.String(255))\n    password = db.Column(db.String(255))\n```", "```py\nfrom main import app, db, User\n...\n@manager.shell\ndef make_shell_context():\n    return dict(app=app, db=db, User=User)\n\nStyle - \"db\",\"User\" in first line as Code Highlight\n```", "```py\n$ python manage.py shell\n>>> db.create_all()\n\n```", "```py\n>>> user = User(username='fake_name')\n>>> db.session.add(user)\n>>> db.session.commit()\n\n```", "```py\n>>> users = User.query.all()\n>>> users\n[<User 'fake_name'>]\n\n```", "```py\n>>> users = User.query.limit(10).all()\n\n```", "```py\n# asending\n>>> users = User.query.order_by(User.username).all()\n# desending\n>>> users = User.query.order_by(User.username.desc()).all()\n\n```", "```py\n>>> user = User.query.first()\n>>> user.username\nfake_name\n\n```", "```py\n>>> user = User.query.get(1)\n>>> user.username\nfake_name\n\n```", "```py\n>>> users = User.query.order_by(\n User.username.desc()\n ).limit(10).first()\n\n```", "```py\n>>> Post.query.paginate(1, 10)\n<flask_sqlalchemy.Pagination at 0x105118f50>\n\n```", "```py\n>>> page = User.query.paginate(1, 10)\n# return the models in the page\n>>> page.items\n[<User 'fake_name'>]\n# what page does this object represent\n>>> page.page\n1\n# How many pages are there\n>>> page.pages\n1\n# are there enough models to make the next or previous page\n>>> page.has_prev, page.has_next\n(False, False)\n# return the next or previous page pagination object\n# if one does not exist returns the current page\n>>> page.prev(), page.next()\n(<flask_sqlalchemy.Pagination at 0x10812da50>,\n <flask_sqlalchemy.Pagination at 0x1081985d0>)\n\n```", "```py\n>>> users = User.query.filter_by(username='fake_name').all()\n\n```", "```py\n>>> users = User.query.order_by(User.username.desc())\n .filter_by(username='fake_name')\n .limit(2)\n .all()\n\n```", "```py\n>>> user = User.query.filter(\n User.id > 1\n ).all()\n\n```", "```py\n>>> from sqlalchemy.sql.expression import not_, or_\n>>> user = User.query.filter(\n User.username.in_(['fake_name']),\n User.password == None\n ).first()\n# find all of the users with a password\n>>> user = User.query.filter(\n not_(User.password == None)\n ).first()\n# all of these methods are able to be combined\n>>> user = User.query.filter(\n or_(not_(User.password == None), User.id >= 1)\n ).first()\n\n```", "```py\n>>> User.query.filter_by(username='fake_name').update({\n 'password': 'test'\n })\n# The updated models have already been added to the session\n>>> db.session.commit()\n\n```", "```py\n>>> user = User.query.filter_by(username='fake_name').first()\n>>> db.session.delete(user)\n>>> db.session.commit()\n\n```", "```py\nclass Post(db.Model):\n    id = db.Column(db.Integer(), primary_key=True)\n    title = db.Column(db.String(255))\n    text = db.Column(db.Text())\n    publish_date = db.Column(db.DateTime())\n    user_id = db.Column(db.Integer(), db.ForeignKey('user.id'))\n\n    def __init__(self, title):\n        self.title = title\n\n    def __repr__(self):\n        return \"<Post '{}'>\".format(self.title)\n```", "```py\nclass User(db.Model):\n    id = db.Column(db.Integer(), primary_key=True)\n    username = db.Column(db.String(255))\n    password = db.Column(db.String(255))\n    posts = db.relationship(\n        'Post',\n        backref='user',\n        lazy='dynamic'\n    )\n```", "```py\n>>> user = User.query.get(1)\n>>> new_post = Post('Post Title')\n>>> new_post.user_id = user.id\n>>> user.posts\n[]\n>>> db.session.add(new_post)\n>>> db.session.commit()\n>>> user.posts\n[<Post 'Post Title'>]\n\n```", "```py\n>>> second_post = Post('Second Title')\n>>> second_post.user = user\n>>> db.session.add(second_post)\n>>> db.session.commit()\n>>> user.posts\n[<Post 'Post Title'>, <Post 'Second Title'>]\n\n```", "```py\n>>> second_post = Post('Second Title')\n>>> user.posts.append(second_post)\n>>> db.session.add(user)\n>>> db.session.commit()\n>>> user.posts\n[<Post 'Post Title'>, <Post 'Second Title'>]\n\n```", "```py\n>>> user.posts\n[<Post 'Post Title'>, <Post 'Second Title'>]\n>>> user.posts.order_by(Post.publish_date.desc()).all()\n[<Post 'Second Title'>, <Post 'Post Title'>]\n\n```", "```py\nclass Post(db.Model):\n    id = db.Column(db.Integer(), primary_key=True)\n    title = db.Column(db.String(255))\n    text = db.Column(db.Text())\n    publish_date = db.Column(db.DateTime())\n    comments = db.relationship(\n        'Comment',\n        backref='post',\n        lazy='dynamic'\n    )\n    user_id = db.Column(db.Integer(), db.ForeignKey('user.id'))\n\n    def __init__(self, title):\n        self.title = title\n\n    def __repr__(self):\n        return \"<Post '{}'>\".format(self.title)\n\nclass Comment(db.Model):\n    id = db.Column(db.Integer(), primary_key=True)\n    name = db.Column(db.String(255))\n    text = db.Column(db.Text())\n    date = db.Column(db.DateTime())\n    post_id = db.Column(db.Integer(), db.ForeignKey('post.id'))\n\n    def __repr__(self):\n        return \"<Comment '{}'>\".format(self.text[:15])\n```", "```py\ntags = db.Table('post_tags',\n    db.Column('post_id', db.Integer, db.ForeignKey('post.id')),\n    db.Column('tag_id', db.Integer, db.ForeignKey('tag.id'))\n)\n\nclass Post(db.Model):\n    id = db.Column(db.Integer(), primary_key=True)\n    title = db.Column(db.String(255))\n    text = db.Column(db.Text())\n    publish_date = db.Column(db.DateTime())\n    comments = db.relationship(\n        'Comment',\n        backref='post',\n        lazy='dynamic'\n    )\n    user_id = db.Column(db.Integer(), db.ForeignKey('user.id'))\n    tags = db.relationship(\n        'Tag',\n        secondary=tags,\n        backref=db.backref('posts', lazy='dynamic')\n    )\n\n    def __init__(self, title):\n        self.title = title\n\n    def __repr__(self):\n        return \"<Post '{}'>\".format(self.title)\n\nclass Tag(db.Model):\n    id = db.Column(db.Integer(), primary_key=True)\n    title = db.Column(db.String(255))\n\n    def __init__(self, title):\n        self.title = title\n\n    def __repr__(self):\n        return \"<Tag '{}'>\".format(self.title)\n```", "```py\npost_id   tag_id\n1         1\n1         3\n2         3\n2         4\n2         5\n3         1\n3         2\n```", "```py\n>>> post_one = Post.query.filter_by(title='Post Title').first()\n>>> post_two = Post.query.filter_by(title='Second Title').first()\n>>> tag_one = Tag('Python')\n>>> tag_two = Tag('SQLAlchemy')\n>>> tag_three = Tag('Flask')\n>>> post_one.tags = [tag_two]\n>>> post_two.tags = [tag_one, tag_two, tag_three]\n>>> tag_two.posts\n[<Post 'Post Title'>, <Post 'Second Title'>]\n>>> db.session.add(post_one)\n>>> db.session.add(post_two)\n>>> db.session.commit()\n\n```", "```py\n>>> tag_one.posts.append(post_one)\n[<Post 'Post Title'>, <Post 'Second Title'>]\n>>> post_one.tags\n[<Tag 'SQLAlchemy'>, <Tag 'Python'>]\n>>> db.session.add(tag_one)\n>>> db.session.commit()\n\n```", "```py\n$ pip install Flask-Migrate\n\n```", "```py\nfrom flask.ext.script import Manager, Server\nfrom flask.ext.migrate import Migrate, MigrateCommand\n\nfrom main import app, db, User, Post, Tag\n\nmigrate = Migrate(app, db)\n\nmanager = Manager(app)\nmanager.add_command(\"server\", Server())\nmanager.add_command('db', MigrateCommand)\n\n@manager.shell\ndef make_shell_context():\n    return dict(app=app, db=db, User=User, Post=Post, Tag=Tag)\n\nif __name__ == \"__main__\":\n    manager.run()\n```", "```py\n$ python manage.py db\n\n```", "```py\n$ python manage.py db init\n\n```", "```py\n$ python manage.py  db migrate -m\"initial migration\"\n\n```", "```py\n$ python manage.py db upgrade\n\n```", "```py\n$ python manage.py db history\n<base> -> 7ded34bc4fb (head), initial migration\n$ python manage.py db downgrade 7ded34bc4fb\n\n```"]