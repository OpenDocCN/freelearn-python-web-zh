["```py\n<h1>{{ post.title }}</h1>\n```", "```py\n<h1>First Post</h1>\n```", "```py\n{{ your_dict['key'] }}\n{{ your_list[0] }}\n```", "```py\n{% raw %}\n<script id=\"template\" type=\"text/x-handlebars-template\">\n    <h1>{{title}}</h1>\n    <div class=\"body\">\n        {{body}}\n    </div>\n</script>\n{% endraw %}\n```", "```py\n{{ variable | filter_name(*args) }}\n```", "```py\n{{ variable | filter_name }}\n```", "```py\n{% filter filter_name %}\n    A bunch of text\n{% endfilter %}\n```", "```py\n{{ post.date | default('2015-01-01') }}\n2015-01-01\n```", "```py\n{{ '' | default('An empty string', True) }}\nAn empty string\n```", "```py\n{{ \"<h1>Title</h1>\" | escape }}\n&#60;h1&#62;Title&#60;/h1&#62;\n```", "```py\n{{ 75 | float }}\n75.0\n```", "```py\n{{ 75.7 | int }}\n75\n```", "```py\n{{ ['Python', 'SQLAlchemy'] | join(',') }}\nPython, SQLAlchemy\n```", "```py\nTag Count: {{ post.tags | length }}\nTag Count: 2\n```", "```py\n{{ 3.141592653589793238462 | round(1) }}\n3.1\n```", "```py\n{{ 4.7 | round(1, \"common\") }}\n5\n{{ 4.2 | round(1, \"common\") }}\n4\n{{ 4.7 | round(1, \"floor\") }}\n4\n{{ 4.2 | round(1, \"ceil\") }}\n5\n```", "```py\n{{ \"<h1>Post Title</h1>\" }}\n&lt;h1&gt;Post Title&lt;/h1&gt;\n```", "```py\n{{ \"<h1>Post Title</h1>\" | safe }}\n<h1>Post Title</h1>\n```", "```py\n{{ \"post title\" | title }}\nPost Title\n```", "```py\n{{ {'key': False, 'key2': None, 'key3': 45} | tojson }}\n{key: false, key2: null, key3: 45}\n```", "```py\nvar collection = new PostCollection({{ posts | tojson | safe }});\n```", "```py\n{{ \"A Longer Post Body Than We Want\" | truncate(10) }}\nA Longer...\n```", "```py\n{{ \"A Longer Post Body Than We Want\" | truncate(10, True) }}\nA Longer P...\n```", "```py\n{{ variable | filter_name(\"string\") }}\n```", "```py\nfilter_name(variable, \"string\")\n```", "```py\ndef count_substring(string, sub):\n    return string.count(sub)\n```", "```py\napp.jinja_env.filters['count_substring'] = count_substring\n```", "```py\n{# Note to the maintainers of this code #}\n```", "```py\n{%if user.is_logged_in() %} \n    <a href='/logout'>Logout</a>\n{% else %}\n    <a href='/login'>Login</a>\n{% endif %}\n```", "```py\n{% if comments | length > 0 %} \n    There are {{ comments | length }} comments\n{% else %}\n    There are no comments\n{% endif %}\n```", "```py\n{% for post in posts %}\n    <div>\n        <h1>{{ post.title }}</h1>\n        <p>{{ post.text | safe }}</p>\n    </div>\n{% endfor %}\n```", "```py\n{% for post in posts if post.text %}\n    <div>\n        <h1>{{ post.title }}</h1>\n        <p>{{ post.text | safe }}</p>\n    </div>\n{% endfor %}\n```", "```py\n{% for post in posts %}\n    {{ loop.index }}. {{ post.title }}\n{% endfor %}\n```", "```py\n1\\. Post Title\n2\\. Second Post\n```", "```py\n{% for post in posts %}\n    {{ loop.cycle('odd', 'even') }} {{ post.title }} \n{% endfor %}\n```", "```py\nodd Post Title\neven Second Post\n```", "```py\n{% macro input(name, label, value='', type='text') %}\n    <div class=\"form-group\">\n        <label for\"{{ name }}\">{{ label }}</label>\n        <input type=\"{{ type }}\" name=\"{{ name }}\"\n            value=\"{{ value | escape }}\" class=\"form-control\">\n    </div>\n{% endmacro %}\n```", "```py\n{{ input('name', 'Name') }}\n```", "```py\n<div class=\"form-group\">\n    <label for\"name\">Name</label>\n    <input type=\"text\" name=\"name\" value=\"\" class=\"form-control\">\n</div>\n```", "```py\n{{ config.SQLALCHEMY_DATABASE_URI }}\nsqlite:///database.db\n```", "```py\n{{ request.url }}\nhttp://127.0.0.1/\n```", "```py\n{{ session.new }}\nTrue\n```", "```py\n{{ url_for('home') }}\n/\n```", "```py\n{{ url_for('post', post_id=1) }}\n/post/1\n```", "```py\n{% for message in get_flashed_messages() %}\n    {{ message }}\n{% endfor %}\n```", "```py\nfrom sqlalchemy import func\n...\ndef sidebar_data():\n    recent = Post.query.order_by(\n        Post.publish_date.desc()\n    ).limit(5).all()\n    top_tags = db.session.query(\n        Tag, func.count(tags.c.post_id).label('total')\n    ).join(\n        tags\n    ).group_by(Tag).order_by('total DESC').limit(5).all()\n\n    return recent, top_tags\n```", "```py\nfrom flask import Flask, render_template \n...\n@app.route('/')\n@app.route('/<int:page>')\ndef home(page=1):\n    posts = Post.query.order_by(\n        Post.publish_date.desc()\n    ).paginate(page, 10)\n    recent, top_tags = sidebar_data()\n\n    return render_template(\n        'home.html',\n        posts=posts,\n        recent=recent,\n        top_tags=top_tags\n    )\n```", "```py\n@app.route('/post/<int:post_id>')\ndef post(post_id):\n    post = Post.query.get_or_404(post_id)\n    tags = post.tags\n    comments = post.comments.order_by(Comment.date.desc()).all()\n    recent, top_tags = sidebar_data()\n\n    return render_template(\n        'post.html',\n        post=post,\n        tags=tags,\n        comments=comments,\n        recent=recent,\n        top_tags=top_tags\n    )\n\n@app.route('/tag/<string:tag_name>')\ndef tag(tag_name):\n    tag = Tag.query.filter_by(title=tag_name).first_or_404()\n    posts = tag.posts.order_by(Post.publish_date.desc()).all()\n    recent, top_tags = sidebar_data()\n\n    return render_template(\n        'tag.html',\n        tag=tag,\n        posts=posts,\n        recent=recent,\n        top_tags=top_tags\n    )\n\n@app.route('/user/<string:username>')\ndef user(username):\n    user = User.query.filter_by(username=username).first_or_404()\n    posts = user.posts.order_by(Post.publish_date.desc()).all()\n    recent, top_tags = sidebar_data()\n    return render_template(\n        'user.html',\n        user=user,\n        posts=posts,\n        recent=recent,\n        top_tags=top_tags\n    )\n```", "```py\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial- scale=1\">\n  <title>{% block title %}Blog{% endblock %}</title>\n  <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/bootstrap.min.css') }}\">\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"jumbotron\">\n      <h1><a href=\"{{ url_for('home') }}\">My Blog</a></h1>\n        <p>Welcome to the blog!</p>\n    </div>\n    {% block body %}\n    {% endblock %}\n  </div>\n\n  <script src=\"img/jquery.min.js') }}\">></script>\n  <script src=\"img/bootstrap.min.js') }}\">></script>\n</body>\n</html>\n```", "```py\n{% macro render_pagination(pagination, endpoint) %}\n  <nav>\n    <ul class=\"pagination\">\n      <li>\n        <a href=\"{{ url_for('home', page=pagination.prev().page) }}\" aria-label=\"Previous\">\n          <span aria-hidden=\"true\">&laquo;</span>\n        </a>\n      </li>\n      {% for page in pagination.iter_pages() %}\n        {% if page %}\n          {% if page != pagination.page %}\n            <li>\n              <a href=\"{{ url_for(endpoint, page=page) }}\">\n                {{ page }}\n              </a>\n            </li>\n          {% else %}\n            <li><a href=\"\">{{ page }}</a></li>\n          {% endif %}\n        {% else %}\n          <li><a>\u2026</a><li>\n        {% endif %}\n      {% endfor %}\n      <li>\n        <a href=\"{{ url_for('home', page=pagination.next().page) }}\" aria-label=\"Next\">\n          <span aria-hidden=\"true\">&raquo;</span>\n        </a>\n      </li>\n    </ul>\n  </nav>\n{% endmacro %}\n```", "```py\n{% extends \"base.html\" %}\n{% block title %}Home{% endblock %}\n```", "```py\nimport random\nimport datetime\n\nuser = User.query.get(1)\n\ntag_one = Tag('Python')\ntag_two = Tag('Flask')\ntag_three = Tag('SQLAlechemy')\ntag_four = Tag('Jinja')\ntag_list = [tag_one, tag_two, tag_three, tag_four]\n\ns = \"Example text\"\n\nfor i in xrange(100):\n    new_post = Post(\"Post \" + str(i))\n    new_post.user = user\n    new_post.publish_date = datetime.datetime.now()\n    new_post.text = s\n    new_post.tags = random.sample(tag_list, random.randint(1, 3))\n    db.session.add(new_post)\n\ndb.session.commit()\n```", "```py\n{% block body %}\n<div class=\"row\">\n  <div class=\"col-lg-9\">\n    {% for post in posts.items %}\n    <div class=\"row\">\n      <div class=\"col-lg-12\">\n        <h1>{{ post.title }}</h1>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-lg-12\">\n        {{ post.text | truncate(255) | safe }}\n        <a href=\"{{\n          url_for('posts', post_id=post.id)\n          }}\">Read More</a>\n      </div>\n    </div>\n    {% endfor %}\n  </div>\n  <div class=\"col-lg-3\">\n    <div class=\"row\">\n      <h5>Recent Posts</h5>\n      <ul>\n        {% for post in recent %}\n        <li><a href=\"{{\n          url_for('post', post_id=post.id)\n          }}\">{{ post.title }}</a></li>\n        {% endfor %}\n      </ul>\n    </div>\n    <div class=\"row\">\n      <h5>Popular Tags</h5>\n      <ul>\n        {% for tag in top_tags %}\n        <li><a href=\"{{ url_for('tag', tag_name=tag[0].title) }}\">{{ tag[0].title }}</a></li>\n        {% endfor %}\n      </ul>\n    </div>\n  </div>\n</div>\n{% endblock %}\n```", "```py\n$ pip install Flask-WTF\n\n```", "```py\n$ cat /dev/urandom | tr -cd 'a-f0-9' | head -c 32\n\n```", "```py\ncat /dev/urandom | env LC_CTYPE=C tr -cd 'a-f0-9' | head -c 32\n\n```", "```py\nclass Config(object):\n    SECRET_KEY = 'Your key here'\n```", "```py\nfrom flask_wtf import Form\nfrom wtforms import StringField, TextAreaField\nfrom wtforms.validators import DataRequired, Length\n\u2026\nclass CommentForm(Form):\n    name = StringField(\n        'Name',\n        validators=[DataRequired(), Length(max=255)]\n    )\n    text = TextAreaField(u'Comment', validators=[DataRequired()])\n```", "```py\nimport re\nimport wtforms\ndef custom_email(form, field):\n  if not re.match(r\"[^@]+@[^@]+\\.[^@]+\", field.data):\n    raise wtforms.ValidationError('Field must be a valid email address.')\n```", "```py\n@app.route('/post/<int:post_id>', methods=('GET', 'POST'))\ndef post(post_id):\nform = CommentForm()\nif form.validate_on_submit():\n        new_comment = Comment()\n    new_comment.name = form.name.data\n    new_comment.text = form.text.data\n    new_comment.post_id = post_id\n    new_comment.date = datetime.datetime.now()\n\n    db.session.add(new_comment)\n    db.session.commit()\n    post = Post.query.get_or_404(post_id)\n    tags = post.tags\n    comments = post.comments.order_by(Comment.date.desc()).all()\n    recent, top_tags = sidebar_data()\n\n    return render_template(\n        'post.html',\n        post=post,\n        tags=tags,\n        comments=comments,\n        recent=recent,\n        top_tags=top_tags,\n        form=form\n    )\n```", "```py\n<div class=\"col-lg-12\">\n  <h3>New Comment:</h3>\n  <form method=\"POST\" action=\"{{ url_for('post', post_id=post.id) }}\">\n    {{ form.hidden_tag() }}\n    <div class=\"form-group\">\n      {{ form.name.label }}\n      {% if form.name.errors %}\n        {% for e in form.name.errors %}\n          <p class=\"help-block\">{{ e }}</p>\n        {% endfor %}\n      {% endif %}\n      {{ form.name(class_='form-control') }}\n    </div>\n    <div class=\"form-group\">\n      {{ form.text.label }}\n      {% if form.text.errors %}\n        {% for e in form.text.errors %}\n          <p class=\"help-block\">{{ e }}</p>\n        {% endfor %}\n      {% endif %}\n      {{ form.text(class_='form-control') }}\n    </div>\n    <input class=\"btn btn-primary\" type=\"submit\" value=\"Add Comment\">\n  </form>\n</div>\n```"]