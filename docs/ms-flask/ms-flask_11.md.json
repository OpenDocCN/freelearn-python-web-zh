["```py\n{{ youtube(video_id) }}\n```", "```py\nfrom flask import Blueprint\n\nclass Youtube(object):\n    def __init__(self, app=None, **kwargs):\n        if app:\n            self.init_app(app)\n\n    def init_app(self, app):\n        self.register_blueprint(app)\n\n    def register_blueprint(self, app):\n        module = Blueprint(\n            \"youtube\",\n            __name__,\n            template_folder=\"templates\"\n        )\n        app.register_blueprint(module)\n        return module\n```", "```py\nfrom flask import (\n    flash,\n    redirect,\n    url_for,\n    session,\n    render_template,\n    Blueprint,\n    Markup\n)\n\nclass Video(object):\n    def __init__(self, video_id, cls=\"youtube\"):\n        self.video_id = video_id\n        self.cls = cls\n\n    def render(self, *args, **kwargs):\n        return render_template(*args, **kwargs)\n\n    @property\n    def html(self):\n        return Markup(\n            self.render('youtube/video.html', video=self)\n        )\n```", "```py\ndef youtube(*args, **kwargs):\n    video = Video(*args, **kwargs)\n    return video.html\n```", "```py\nclass Youtube(object):\n    def __init__(self, app=None, **kwargs):\n        if app:\n            self.init_app(app)\n\n    def init_app(self, app):\n        self.register_blueprint(app)\n        app.add_template_global(youtube)\n```", "```py\n<iframe\n    class=\"{{ video.cls }}\"\n    width=\"560\"\n    height=\"315\" \n    src=\"img/{{ video.video_id }}\"\n    frameborder=\"0\"\n    allowfullscreen>\n</iframe>\n```", "```py\nyoutube_ext = Youtube()\n```", "```py\nfrom .extensions import (\n    bcrypt,\n    oid,\n    login_manager,\n    principals,\n    rest_api,\n    celery,\n    debug_toolbar,\n    cache,\n    assets_env,\n    main_js,\n    main_css,\n    admin,\n    mail,\n    youtube_ext\n)\n\ndef create_app(object_name):\n    \u2026\n    youtube_ext.init_app(app)\n```", "```py\n{{ youtube(\"_OBlgSz8sSM\") }}\n```", "```py\nfrom flask import render_template, Blueprint, Markup\n\nclass Video(object):\n    def __init__(self, video_id, cls=\"youtube\"):\n        self.video_id = video_id\n        self.cls = cls\n\n    def render(self, *args, **kwargs):\n        return render_template(*args, **kwargs)\n\n    @property\n    def html(self):\n        return Markup(\n            self.render('youtube/video.html', video=self)\n        )\n\ndef youtube(*args, **kwargs):\n    video = Video(*args, **kwargs)\n    return video.html\n\nclass Youtube(object):\n    def __init__(self, app=None, **kwargs):\n        if app:\n            self.init_app(app)\n\n    def init_app(self, app):\n        self.register_blueprint(app)\n        app.add_template_global(youtube)\n\n    def register_blueprint(self, app):\n        module = Blueprint(\n            \"youtube\",\n            __name__,\n            template_folder=\"templates\"\n        )\n        app.register_blueprint(module)\n        return module\n```", "```py\nfrom setuptools import setup, find_packages\nsetup(\n    name='Flask-YouTube',\n    version='0.1',\n    license='MIT',\n    description='Flask extension to allow easy embedding of YouTube videos',\n    author='Jack Stouffer',\n    author_email='example@gmail.com',\n    platforms='any',\n    install_requires=['Flask'],\n    packages=find_packages()\n)\n```", "```py\n$ python setup.py build\n$ python setup.py install\n\n```", "```py\nfrom flask_youtube import Youtube\n```", "```py\nfrom flask import request \nfrom gzip import GzipFile\nfrom io import BytesIO\n\u2026\n\nclass GZip(object):\n    def __init__(self, app=None):\n        self.app = app\n        if app is not None:\n            self.init_app(app)\n\n    def init_app(self, app):\n        app.after_request(self.after_request)\n\n    def after_request(self, response):\n        encoding = request.headers.get('Accept-Encoding', '')\n\n        if 'gzip' not in encoding or \\\n           not response.status_code in (200, 201):\n            return response\n\n        response.direct_passthrough = False\n\n        contents = BytesIO()\n        with GzipFile(\n            mode='wb',\n            compresslevel=5,\n            fileobj=contents) as gzip_file:\n            gzip_file.write(response.get_data())\n\n        response.set_data(bytes(contents.getvalue()))\n\n        response.headers['Content-Encoding'] = 'gzip'\n        response.headers['Content-Length'] = response.content_length\n\n        return response\n\nflask_gzip = GZip()\n```"]