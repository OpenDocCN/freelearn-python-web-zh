["```py\n{\n    \"id\": 100,\n    \"date\": \"2015-03-02T00:24:36+00:00\",\n    \"title\": \"Resource #98\"\n}\n```", "```py\n$ pip install Flask-Restful\n\n```", "```py\nfrom flask.ext.restful import Api\n\u2026\nrest_api = Api()\n```", "```py\nfrom flask.ext.restful import Resource\n\nclass PostApi(Resource):\n    def get(self):\n        return {'hello': 'world'}\n```", "```py\nfrom .extensions import (\n    bcrypt,\n    oid,\n    login_manager,\n    principals,\n    rest_api\n)\nfrom .controllers.rest.post import PostApi\n\ndef create_app(object_name):\n    \u2026\n    rest_api.add_resource(PostApi, '/api/post')\n    rest_api.init_app(app)\n```", "```py\n   rest_api.add_resource(\n        PostApi,\n        '/api/post',\n        '/api/post/<int:post_id>',\n        endpoint='api'\n    )\n```", "```py\nclass PostApi(Resource):\n    def get(self, post_id=None):\n        if post_id:\n            return {\"id\": post_id}\n\n        return {\"hello\": \"world\"}\n```", "```py\nfrom flask import abort \nfrom flask.ext.restful import Resource, fields, marshal_with\nfrom webapp.models import Post\n\npost_fields = {\n    'title': fields.String(),\n    'text': fields.String(),\n    'publish_date': fields.DateTime(dt_format='iso8601')\n}\n\nclass PostApi(Resource):\n    @marshal_with(post_fields)\n    def get(self, post_id=None):\n        if post_id:\n            post = Post.query.get(post_id)\n            if not post:\n                abort(404)\n\n            return post\n        else:\n            posts = Post.query.all()\n            return posts\n```", "```py\nfrom HTMLParser import HTMLParser\nfrom flask.ext.restful import fields\n\nclass HTMLStripper(HTMLParser):\n    def __init__(self):\n        self.reset()\n        self.fed = []\n\n    def handle_data(self, d):\n        self.fed.append(d)\n\n    def get_data(self):\n        return ''.join(self.fed)\n\n    def strip_tags(html):\n        s = HTMLStripper()\n        s.feed(html)\n\n    return s.get_data()\n\nclass HTMLField(fields.Raw):\n    def format(self, value):\n        return strip_tags(str(value))\n```", "```py\nfrom .fields import HTMLField\n\npost_fields = {\n    'title': fields.String(),\n    'text': HTMLField(),\n    'publish_date': fields.DateTime(dt_format='iso8601')\n}\n```", "```py\nnested_tag_fields = {\n    'id': fields.Integer(),\n    'title': fields.String()\n}\n\npost_fields = {\n    'author': fields.String(attribute=lambda x: x.user.username),\n    'title': fields.String(),\n    'text': HTMLField(),\n    'tags': fields.List(fields.Nested(nested_tag_fields)),\n    'publish_date': fields.DateTime(dt_format='iso8601')\n}\n```", "```py\nfrom flask.ext.restful import reqparse\n\npost_get_parser = reqparse.RequestParser()\npost_get_parser.add_argument(\n    'page',\n    type=int,\n    location=['args', 'headers'],\n    required=False\n)\n```", "```py\nfrom .parsers import post_get_parser\n\nclass PostApi(Resource):\n    @marshal_with(post_fields)\n    def get(self, post_id=None):\n        if post_id:\n            post = Post.query.get(post_id)\n            if not post:\n                abort(404)\n\n            return post\n        else:\n            args = post_get_parser.parse_args()\n            page = args['page'] or 1\n            posts = Post.query.order_by(\n                Post.publish_date.desc()\n            ).paginate(page, 30)\n\n            return posts.items\n```", "```py\npost_get_parser = reqparse.RequestParser()\npost_get_parser.add_argument(\n    'page',\n    type=int,\n    location=['json', 'args', 'headers']\n)\npost_get_parser.add_argument(\n    'user',\n    type=str,\n    location=['json', 'args', 'headers']\n)\n```", "```py\nclass PostApi(Resource):\n    @marshal_with(post_fields)\n    def get(self, post_id=None):\n        if post_id:\n            post = Post.query.get(post_id)\n            if not post:\n                abort(404)\n\n            return post\n        else:\n            args = post_get_parser.parse_args()\n            page = args['page'] or 1\n\n            if args['user']:\n                user = User.query.filter_by(\n                    username=args['user']\n                ).first()\n                if not user:\n                    abort(404)\n\n                posts = user.posts.order_by(\n                    Post.publish_date.desc()\n                ).paginate(page, 30)\n            else:\n                posts = Post.query.order_by(\n                    Post.publish_date.desc()\n                ).paginate(page, 30)\n\n            return posts.items\n```", "```py\npost_post_parser = reqparse.RequestParser()\npost_post_parser.add_argument(\n    'title',\n    type=str,\n    required=True,\n    help=\"Title is required\"\n)\npost_post_parser.add_argument(\n    'text',\n    type=str,\n    required=True,\n    help=\"Body text is required\"\n)\npost_post_parser.add_argument(\n    'tags',\n    type=str,\n    action='append'\n)\n```", "```py\nimport datetime\nfrom .parsers import (\n    post_get_parser,\n    post_post_parser\n)\nfrom webapp.models import db, User, Post, Tag\n\nclass PostApi(Resource):\n    \u2026\n    def post(self, post_id=None):\n        if post_id:\n            abort(400)\n        else:\n            args = post_post_parser.parse_args(strict=True)\n            new_post = Post(args['title']) \n            new_post.date = datetime.datetime.now()\n            new_post.text = args['text']\n\n            if args['tags']:\n                for item in args['tags']:\n                    tag = Tag.query.filter_by(title=item).first()\n\n                    # Add the tag if it exists.\n                    # If not, make a new tag\n                    if tag:\n                        new_post.tags.append(tag)\n                    else:\n                        new_tag = Tag(item) \n                        new_post.tags.append(new_tag)\n\n            db.session.add(new_post)\n            db.session.commit()\n            return new_post.id, 201\n```", "```py\n$ curl http://localhost:5000/api/post/1\n\n```", "```py\n$ curl -d \"title=From REST\" \\\n-d \"text=The body text from REST\" \\\n-d \"tag=Python\" \\\nhttp://localhost:5000/api/post\n\n```", "```py\nuser_post_parser = reqparse.RequestParser()\nuser_post_parser.add_argument('username', type=str, required=True)\nuser_post_parser.add_argument('password', type=str, required=True)\n```", "```py\nfrom flask import abort, current_app\n\nfrom .parsers import user_post_parser\nfrom itsdangerous import TimedJSONWebSignatureSerializer as Serializer\n\nclass AuthApi(Resource):\n    def post(self):\n        args = user_post_parser.parse_args()\n        user = User.query.filter_by(\n            username=args['username']\n        ).one()\n\n        if user.check_password(args['password']):\n            s = Serializer(\n                current_app.config['SECRET_KEY'], \n                expires_in=600\n            )\n            return {\"token\": s.dumps({'id': user.id})}\n        else:\n            abort(401)\n```", "```py\nfrom itsdangerous import (\n    TimedJSONWebSignatureSerializer as Serializer,\n    BadSignature,\n    SignatureExpired\n)\nfrom flask import current_app\n\nclass User(db.Model):\n\u2026\n    @staticmethod\n    def verify_auth_token(token):\n        s = Serializer(current_app.config['SECRET_KEY'])\n\n        try:\n            data = s.loads(token)\n        except SignatureExpired:\n            return None\n        except BadSignature:\n            return None\n\n        user = User.query.get(data['id'])\n        return user\n```", "```py\npost_post_parser = reqparse.RequestParser()\npost_post_parser.add_argument(\n    'token',\n    type=str,\n    required=True,\n    help=\"Auth Token is required to create posts\"\n)\n```", "```py\nclass PostApi(Resource):\n    def get(self, post_id=None):\n       \u2026\n\n    def post(self, post_id=None):\n        if post_id:\n            abort(405)\n        else:\n            args = post_post_parser.parse_args(strict=True)\n\n            user = User.verify_auth_token(args['token'])\n            if not user:\n                abort(401)\n\n            new_post = Post(args['title'])\n            new_post.user = user\n            \u2026\n```", "```py\n$ curl -d \"username=user\" \\\n-d \"password=password\" \\\nhttp://localhost:5000/api/auth\n\n{token: <the token>}\n\n$ curl -d \"title=From REST\" \\\n-d \"text=this is from REST\" \\\n-d \"token=<the token>\" \\\n-d \"tags=Python\" \\\n-d \"tags=Flask\" \\\nhttp://localhost:5000/api/post\n\n```", "```py\npost_put_parser = reqparse.RequestParser()\npost_put_parser.add_argument(\n    'token',\n    type=str,\n    required=True,\n    help=\"Auth Token is required to edit posts\"\n)\npost_put_parser.add_argument(\n    'title',\n    type=str\n)\npost_put_parser.add_argument(\n    'text',\n    type=str\n)\npost_put_parser.add_argument(\n    'tags',\n    type=str,\n    action='append'\n)\n```", "```py\nfrom .parsers import (\n    post_get_parser,\n    post_post_parser,\n    post_put_parser\n)\n\nclass PostApi(Resource):\n    @marshal_with(post_fields)\n    def get(self, post_id=None):\n        \u2026\n\n    def post(self, post_id=None):\n        \u2026\n\n    def put(self, post_id=None):\n        if not post_id:\n            abort(400)\n\n        post = Post.query.get(post_id)\n        if not post:\n            abort(404)\n\n        args = post_put_parser.parse_args(strict=True)\n        user = User.verify_auth_token(args['token'])\n        if not user:\n            abort(401)\n        if user != post.user:\n            abort(403)\n\n        if args['title']:\n            post.title = args['title']\n\n        if args['text']:\n            post.text = args['text']\n\n        if args['tags']:\n            for item in args['tags']:\n                tag = Tag.query.filter_by(title=item).first()\n\n                # Add the tag if it exists. If not, make a new tag\n                if tag:\n                    post.tags.append(tag)\n                else:\n                    new_tag = Tag(item)\n                    post.tags.append(new_tag)\n\n        db.session.add(post)\n        db.session.commit()\n        return post.id, 201\n```", "```py\n$ curl -X PUT \\\n-d \"title=Modified From REST\" \\\n-d \"text=this is from REST\" \\\n-d \"token=<the token>\" \\\n-d \"tags=Python\" -d \"tags=Flask\" -d \"tags=REST\" \\\nhttp://localhost:5000/api/post/101\n\n```", "```py\nclass PostApi(Resource):\n    @marshal_with(post_fields)\n    def get(self, post_id=None):\n        \u2026\n\n    def post(self, post_id=None):\n        \u2026\n\n    def put(self, post_id=None):\n        \u2026\n\n    def delete(self, post_id=None):\n        if not post_id:\n            abort(400)\n\n        post = Post.query.get(post_id)\n        if not post:\n            abort(404)\n\n        args = post_delete_parser.parse_args(strict=True)\n        user = verify_auth_token(args['token'])\n        if user != post.user:\n            abort(403)\n\n        db.session.delete(post)\n        db.session.commit()\n        return \"\", 204\n```", "```py\n$ curl -X DELETE\\\n-d \"token=<the token>\"\\\nhttp://localhost:5000/api/post/102\n\n```"]