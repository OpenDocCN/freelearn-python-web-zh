["```py\n$ pip install Celery\n\n```", "```py\n$ pip install Flask-Celery-Helper\n\n```", "```py\n$ rabbitmq-server\n\n```", "```py\nclass DevConfig(Config):\n    DEBUG = True\n    SQLALCHEMY_DATABASE_URI = 'sqlite:///../database.db'\n    CELERY_BROKER_URL = \"amqp://guest:guest@localhost:5672//\"\n    CELERY_BACKEND = \"amqp://guest:guest@localhost:5672//\"\nIn the extensions.py file, the Celery class from Flask-Celery-Helper will be initialized:\n```", "```py\nfrom flask.ext.celery import Celery\ncelery = Celery()\n```", "```py\nimport os\nfrom webapp import create_app\nfrom celery import Celery\nfrom webapp.tasks import log\n\ndef make_celery(app):\n    celery = Celery(\n        app.import_name,\n        broker=app.config['CELERY_BROKER_URL'],\n        backend=app.config['CELERY_BACKEND_URL']\n    )\n    celery.conf.update(app.config)\n    TaskBase = celery.Task\n\n    class ContextTask(TaskBase):\n        abstract = True\n\n        def __call__(self, *args, **kwargs):\n            with app.app_context():\n                return TaskBase.__call__(self, *args, **kwargs)\n\n    celery.Task = ContextTask\n\n    return celery\n\nenv = os.environ.get('WEBAPP_ENV', 'dev')\nflask_app = create_app(\n    'webapp.config.%sConfig' % env.capitalize()\n)\ncelery = make_celery(flask_app)\n```", "```py\nfrom webapp.extensions import celeryfrom webapp.extensions import celery\n@celery.task()\ndef log(msg):\n    return msg\n```", "```py\n$ celery worker -A celery_runner --loglevel=info\n\n```", "```py\n>>> from webapp.tasks import log\n>>> log(\"Message\")\nMessage\n>>> result = log.delay(\"Message\")\n\n```", "```py\nTask tasks.log succeeded in 0.0005873600021s: 'Message'\n\n```", "```py\n>>> result.ready()\nTrue\n>>> result.get()\n\"Message\"\n\n```", "```py\n@celery.task(bind=True)\ndef task(self, param):\n    try:\n        some_code\n    except Exception, e:\n        self.retry(exc=e)\n```", "```py\ntask.apply_async(\n    args=[1, 2],\n    kwargs={'kwarg1': '1', 'kwarg2': '2'}\n)\n```", "```py\napply_async([1, 2], kwargs={'kwarg1': '1', 'kwarg2': '2'})\n```", "```py\n>>> from webapp.tasks import log\n>>> log.apply_async([\"Message\"], countdown=600)\n\n```", "```py\n>>> import datetime\n>>> from webapp.tasks import log\n# Run the task one hour from now\n>>> eta = datetime.datetime.now() + datetime.timedelta(hours=1)\n>>> log.apply_async([\"Message\"], eta=eta)\n\n```", "```py\n@celery.task()\ndef multiply(x, y):\n    return x * y\n```", "```py\n>>> from celery import signature\n>>> from webapp.tasks import multiply\n# Takes the same keyword args as apply_async\n>>> signature('webapp.tasks.multiply', args=(4, 4) , countdown=10)\nwebapp.tasks.multiply(4, 4)\n# same as above\n>>> from webapp.tasks import multiply\n>>> multiply.subtask((4, 4), countdown=10)\nwebapp.tasks.multiply(4, 4)\n# shorthand for above, like delay in that it doesn't take\n# apply_async's keyword args\n>>> multiply.s(4, 4)\nwebapp.tasks.multiply(4, 4)\n>>> multiply.s(4, 4)()\n16\n>>> multiply.s(4, 4).delay()\n\n```", "```py\n>>> new_multiply = multiply(2)\n>>> new_multiply(5)\n10\n# The first function is unaffected\n>>> multiply(2, 2)\n4\n\n```", "```py\n>>> partial = multiply.s(4)\n>>> partial.delay(4)\n\n```", "```py\n>>> multiply.apply_async((4, 4), link=log.s())\n\n```", "```py\n>>> multiply.apply_async((4, 4), link=log.si(\"Message\"))\n\n```", "```py\n>>> create_user.apply_async((\"John Doe\", password), link=welcome.s())\n\n```", "```py\n>>> multiply.apply_async((4, 4), link=multiply.s(4))\n\n```", "```py\n>>> from celery import group\n>>> sig = group(multiply.s(i, i+5) for i in range(10))\n>>> result = sig.delay()\n>>> result.get()\n[0, 6, 14, 24, 36, 50, 66, 84, 104, 126]\n\n```", "```py\n>>> from celery import chain\n>>> sig = chain(multiply.s(10, 10), multiply.s(4), multiply.s(20))\n# same as above\n>>> sig = (multiply.s(10, 10) | multiply.s(4) | multiply.s(20))\n>>> result = sig.delay()\n>>> result.get()\n8000\n\n```", "```py\n# combining partials in chains\n>>> func = (multiply.s(10) | multiply.s(2))\n>>> result = func.delay(16)\n>>> result.get()\n200\n# chains can be nested\n>>> func = (\n multiply.s(10) | multiply.s(2) | (multiply.s(4) | multiply.s(5))\n)\n>>> result = func.delay(16)\n>>> result.get()\n800\n\n```", "```py\n>>> from celery import chord\n>>> sig = chord(\n group(multiply.s(i, i+5) for i in range(10)),\n log.s()\n)\n>>> result = sig.delay()\n>>> result.get()\n[0, 6, 14, 24, 36, 50, 66, 84, 104, 126]\n\n```", "```py\n# same as above\n>>> sig = (group(multiply.s(i, i+5) for i in range(10)) | log.s())\n>>> result = sig.delay()\n>>> result.get()\n[0, 6, 14, 24, 36, 50, 66, 84, 104, 126]\n\n```", "```py\nimport datetime\n\u2026\n\nCELERYBEAT_SCHEDULE = {\n    'log-every-30-seconds': {\n        'task': 'webapp.tasks.log',\n        'schedule': datetime.timedelta(seconds=30),\n        'args': (\"Message\",)\n    },\n}\n```", "```py\n$ celery -A celery_runner beat\n\n```", "```py\n>>> from celery.schedules import crontab\n# Every midnight\n>>> crontab(minute=0, hour=0)\n# Once a 5AM, then 10AM, then 3PM, then 8PM\n>>> crontab(minute=0, hour=[5, 10, 15, 20])\n# Every half hour\n>>> crontab(minute='*/30')\n# Every Monday at even numbered hours and 1AM\n>>> crontab(day_of_week=1, hour ='*/2, 1')\n\n```", "```py\n$ celery \u2013A celery_runner <command>\n\n```", "```py\n$ pip install flower\n\n```", "```py\n$ celery flower -A celery_runner --loglevel=info\n\n```", "```py\n>>> sig = chord(\n group(multiply.s(i, i+5) for i in xrange(10000)),\n log.s()\n)\n>>> sig.delay()\n\n```", "```py\nclass Reminder(db.Model):\n    id = db.Column(db.Integer(), primary_key=True)\n    date = db.Column(db.DateTime())\n    email = db.Column(db.String())\n    text = db.Column(db.Text())\n\n    def __repr__(self):\n        return \"<Reminder '{}'>\".format(self.text[:20])\n```", "```py\nimport smtplib\nfrom email.mime.text import MIMEText\n\n@celery.task(\n    bind=True,\n    ignore_result=True,\n    default_retry_delay=300,\n    max_retries=5\n)\ndef remind(self, pk):\n    reminder = Reminder.query.get(pk)\n    msg = MIMEText(reminder.text)\n\n    msg['Subject'] = \"Your reminder\"\n    msg['From'] = your_email\n    msg['To'] = reminder.email\n\n    try:\n        smtp_server = smtplib.SMTP('localhost')\n        smtp_server.starttls()\n        smtp_server.login(user, password)\n        smtp_server.sendmail(\n            your_email, \n            [reminder.email],\n            msg.as_string()\n        )\n        smtp_server.close()\n\n        return\n    except Exception, e:\n        self.retry(exc=e)\n```", "```py\ndef on_reminder_save(mapper, connect, self):\n    remind.apply_async(args=(self.id,), eta=self.date)\n```", "```py\nfrom sqlalchemy import event\nfrom .tasks import on_reminder_save\n\ndef create_app(object_name):\n    app = Flask(__name__)\n    app.config.from_object(object_name)\n\n    db.init_app(app)\n    event.listen(Reminder, 'after_insert', on_reminder_save)\n    \u2026\n```", "```py\n@celery.task(\n    bind=True,\n    ignore_result=True,\n    default_retry_delay=300,\n    max_retries=5\n)\ndef digest(self):\n    # find the start and end of this week\n    year, week = datetime.datetime.now().isocalendar()[0:2]\n    date = datetime.date(year, 1, 1)\n    if (date.weekday() > 3):\n        date = date + datetime.timedelta(days=7 - date.weekday())\n    else:\n        date = date - datetime.timedelta(days=date.weekday())\n    delta = datetime.timedelta(days=(week - 1) * 7)\n    start, end = date + delta, date + delta + datetime.timedelta(days=6)\n\n    posts = Post.query.filter(\n        Post.publish_date >= start,\n        Post.publish_date <= end\n    ).all()\n\n    if (len(posts) == 0):\n        return\n\n    msg = MIMEText(\n        render_template(\"digest.html\", posts=posts),\n        'html'\n    )\n\n    msg['Subject'] = \"Weekly Digest\"\n    msg['From'] = your_email\n\n    try:\n        smtp_server = smtplib.SMTP('localhost')\n        smtp_server.starttls()\n        smtp_server.login(user, password)\n        smtp_server.sendmail(\n            your_email,\n            [recipients],\n            msg.as_string()\n        )\n        smtp_server.close()\n\n        return\n    except Exception, e:\n        self.retry(exc=e)\n```", "```py\nCELERYBEAT_SCHEDULE = {\n    'weekly-digest': {\n        'task': 'tasks.digest',\n        'schedule': crontab(day_of_week=6, hour='10')\n    },\n}\n```", "```py\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html >\n    <head>\n        <meta http-equiv=\"Content-Type\"\n              content=\"text/html; charset=UTF-8\" />\n        <meta name=\"viewport\"\n              content=\"width=device-width, initial-scale=1.0\"/>\n        <title>Weekly Digest</title>\n    </head>\n    <body>\n        <table align=\"center\"\n               border=\"0\"\n               cellpadding=\"0\"\n               cellspacing=\"0\"\n               width=\"500px\">\n            <tr>\n                <td style=\"font-size: 32px;\n                           font-family: Helvetica, sans-serif;\n                           color: #444;\n                           text-align: center;\n                           line-height: 1.65\">\n                    Weekly Digest\n                </td>\n            </tr>\n            {% for post in posts %}\n                <tr>\n                    <td style=\"font-size: 24px;\n                               font-family: sans-serif;\n                               color: #444;\n                               text-align: center;\n                               line-height: 1.65\">\n                        {{ post.title }}\n                    </td>\n                </tr>\n                <tr>\n                    <td style=\"font-size: 14px;\n                               font-family: serif;\n                               color: #444;\n                               line-height:1.65\">\n                        {{ post.text | truncate(500) | safe }}\n                    </td>\n                </tr>\n                <tr>\n                    <td style=\"font-size: 12px;\n                               font-family: serif;\n                               color: blue;\n                               margin-bottom: 20px\">\n                        <a href=\"{{ url_for('.post', post_id=post.id) }}\">Read More</a>\n                    </td>\n                </tr>\n            {% endfor %}\n        </table>\n    </body>\n</html>\n```"]