["```py\n$ pip install Flask-Bcrypt\n\n```", "```py\nfrom flask.ext.bcrypt import Bcrypt\nbcrypt = Bcrypt()\n```", "```py\nfrom webapp.extensions import bcrypt\n\ndef create_app(object_name):\n    app = Flask(__name__)\n    app.config.from_object(object_name)\n\n    db.init_app(app)\n    bcrypt.init_app(app)\n```", "```py\nfrom webapp.extensions import bcrypt\n\nclass User(db.Model):\n    id = db.Column(db.Integer(), primary_key=True)\n    username = db.Column(db.String(255))\n    password = db.Column(db.String(255))\n    posts = db.relationship(\n        'Post',\n        backref='user',\n        lazy='dynamic'\n    )\n\n    def __init__(self, username):\n        self.username = username\n\n    def __repr__(self):\n        return '<User {}>'.format(self.username)\n\n    def set_password(self, password):\n        self.password = bcrypt.generate_password_hash(password)\n\n    def check_password(self, password):\n        return bcrypt.check_password_hash(self.password, password)\n```", "```py\nfrom wtforms import (\n    StringField,\n    TextAreaField,\n    PasswordField,\n    BooleanField\n)\nfrom wtforms.validators import DataRequired, Length, EqualTo, URL\n\nclass LoginForm(Form):\n    username = StringField('Username', [\n        DataRequired(), Length(max=255)\n    ])\n    password = PasswordField('Password', [DataRequired()])\n\n   def validate(self):\n        check_validate = super(LoginForm, self).validate()\n\n        # if our validators do not pass\n        if not check_validate:\n            return False\n\n        # Does our the exist\n        user = User.query.filter_by(\n           username=self.username.data\n        ).first()\n        if not user:\n            self.username.errors.append(\n                'Invalid username or password'\n            )\n            return False\n\n        # Do the passwords match\n        if not self.user.check_password(self.password.data):\n            self.username.errors.append(\n                'Invalid username or password'\n            )\n            return False\n\n        return True\n```", "```py\nclass Config(object):\n    SECRET_KEY = 'Key Here'\n    RECAPTCHA_PUBLIC_KEY = \n\"6LdKkQQTAAAAAEH0GFj7NLg5tGicaoOus7G9Q5Uw\"\n    RECAPTCHA_PRIVATE_KEY =\n'6LdKkQQTAAAAAMYroksPTJ7pWhobYb88fTAcxcYn'\n```", "```py\nclass RegisterForm(Form):\n    username = StringField('Username', [\n        DataRequired(),\n        Length(max=255)\n    ])\n    password = PasswordField('Password', [\n        DataRequired(),\n        Length(min=8)\n    ])\n    confirm = PasswordField('Confirm Password', [\n        DataRequired(),\n        EqualTo('password')\n    ])\n    recaptcha = RecaptchaField()\n\n    def validate(self):\n        check_validate = super(RegisterForm, self).validate()\n\n        # if our validators do not pass\n        if not check_validate:\n            return False\n\n        user = User.query.filter_by(\n            username=self.username.data\n        ).first()\n\n        # Is the username already being used\n        if user:\n            self.username.errors.append(\n                \"User with that name already exists\"\n            )\n            return False\n\n        return True\n```", "```py\nclass PostForm(Form):\n    title = StringField('Title', [\n        DataRequired(), \n        Length(max=255)\n    ])\n    text = TextAreaField('Content', [DataRequired()])\n```", "```py\nmain_blueprint = Blueprint(\n    'main',\n    __name__,\n    template_folder='../templates/main'\n)\n\n@main_blueprint.route('/')\ndef index():\n    return redirect(url_for('blog.home'))\n```", "```py\nfrom webapp.forms import LoginForm, RegisterForm\n\n@main_blueprint.route('/login', methods=['GET', 'POST'])\ndef login():\n    form = LoginForm()\n\n    if form.validate_on_submit():\n        flash(\"You have been logged in.\", category=\"success\") \n        return redirect(url_for('blog.home'))\n\n    return render_template('login.html', form=form)\n\n@main_blueprint.route('/logout', methods=['GET', 'POST'])\ndef logout():\n    flash(\"You have been logged out.\", category=\"success\")\n    return redirect(url_for('.home'))\n\n@main_blueprint.route('/register', methods=['GET', 'POST'])\ndef register():\n    form = RegisterForm()\n\n    if form.validate_on_submit():\n        new_user = User()\n        new_user.username = form.username.data\n        new_user.set_password(form.username.data)\n\n        db.session.add(new_user)\n        db.session.commit()\n\n        flash(\n            \"Your user has been created, please login.\", \n            category=\"success\"\n        )\n\n           return redirect(url_for('.login'))\n\n    return render_template('register.html', form=form)\n```", "```py\n<body>\n  <div class=\"container\">\n    <div class=\"jumbotron\">\n      <h1><a href=\"{{ url_for('blog.home') }}\">My Blog</a></h1>\n      <p>Welcome to the blog!</p>\n    </div>\n    {% with messages = get_flashed_messages(with_categories=true) %}\n      {% if messages %}\n        {% for category, message in messages %}\n           <div class=\"alert alert-{{ category }} alert-dismissible\" \n             role=\"alert\">\n           <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n\n           {{ message }}\n          </div>\n        {% endfor %}\n      {% endif %}\n    {% endwith %}\n    {% block body %}\n    {% endblock %}\n  </div>\n  <script \n    src=\"img/jquery.min.js\"> \n    </script>\n  <script \n    src=\"img/bootstrap.min.js\"> \n    </script>\n  {% block js %}\n  {% endblock %}\n</body>\n```", "```py\nfrom webapp.forms import CommentForm, PostForm\n\n@blog_blueprint.route('/new', methods=['GET', 'POST'])\ndef new_post():\n    form = PostForm()\n\n    if form.validate_on_submit():\n        new_post = Post(form.title.data)\n        new_post.text = form.text.data\n        new_post.publish_date = datetime.datetime.now() \n\n        db.session.add(new_post)\n        db.session.commit()\n\n    return render_template('new.html', form=form)\n\n@blog_blueprint.route('/edit/<int:id>', methods=['GET', 'POST'])\ndef edit_post(id):\n\n    post = Post.query.get_or_404(id)\n    form = PostForm()\n\n    if form.validate_on_submit():\n        post.title = form.title.data\n        post.text = form.text.data\n        post.publish_date = datetime.datetime.now()\n\n        db.session.add(post)\n        db.session.commit()\n\n        return redirect(url_for('.post', post_id=post.id))\n\n    form.text.data = post.text\n\n    return render_template('edit.html', form=form, post=post)\n```", "```py\n{% extends \"base.html\" %}\n{% block title %}Post Creation{% endblock %}\n{% block body %}\n<div class=\"row\">\n  <h1 class=\"text-center\">Create A New Post</h1>\n  <form method=\"POST\" action=\"{{ url_for('.new_post') }}\">\n    {{ form.hidden_tag() }}\n    <div class=\"form-group\">\n      {{ form.title.label }}\n      {% if form.title.errors %}\n        {% for e in form.title.errors %}\n          <p class=\"help-block\">{{ e }}</p>\n        {% endfor %}\n      {% endif %}\n      {{ form.title(class_='form-control') }}\n    </div>\n    <div class=\"form-group\">\n      {{ form.text.label }}\n      {% if form.text.errors %}\n        {% for e in form.text.errors %}\n          <p class=\"help-block\">{{ e }}</p>\n        {% endfor %}\n      {% endif %}\n      {{ form.text(id=\"editor\", class_='form-control') }}\n    </div>\n    <input class=\"btn btn-primary\" type=\"submit\" value=\"Submit\">\n  </form>\n</div>\n{% endblock %}\n\n{% block js %}\n<script src=\"img/ckeditor.js\"></script>\n<script>\n    CKEDITOR.replace('editor');\n</script>\n{% endblock %}\n```", "```py\n<form method=\"POST\" action=\"{{ url_for('.edit_post', id=post.id) }}\">\n\u2026\n{{ form.title(class_='form-control', value=post.title) }}\n\u2026\n</form>\n```", "```py\n<div class=\"row\">\n  <div class=\"col-lg-6\">\n    <p>Written By <a href=\"{{ url_for('.user', username=post.user.username) \n      }}\">{{ post.user.username }}</a> on {{ post.publish_date }}</p>\n  </div>\n  \u2026\n  <div class=\"row\">\n    <div class=\"col-lg-2\">\n    <a href=\"{{ url_for('.edit_post', id=post.id) }}\" class=\"btn btn- \n      primary\">Edit</a>\n  </div>\n</div>\n```", "```py\n$ pip install Flask-OpenID\n\n```", "```py\nfrom flask.ext.bcrypt import Bcrypt\nfrom flask.ext.openid import OpenID\nbcrypt = Bcrypt()\noid = OpenID()\n```", "```py\nfrom .models import db\n\ndef create_app(object_name):\n    app = Flask(__name__)\n    app.config.from_object(object_name)\n\n    db.init_app(app)\n    bcrypt.init_app(app)\n    oid.init_app(app)\n```", "```py\nfrom wtforms.validators import DataRequired, Length, EqualTo, URL\n\nclass OpenIDForm(Form):\n    openid = StringField('OpenID URL', [DataRequired(), URL()])\n```", "```py\nfrom webapp.extensions import oid\n\u2026\n\n@main_blueprint.route('/login', methods=['GET', 'POST'])\n@oid.loginhandler\ndef login():\n    form = LoginForm()\n    openid_form = OpenIDForm()\n\n    if openid_form.validate_on_submit():\n        return oid.try_login(\n            openid_form.openid.data,\n            ask_for=['nickname', 'email'],\n            ask_for_optional=['fullname']\n        )\n\n    if form.validate_on_submit():\n        flash(\"You have been logged in.\", category=\"success\")\n        return redirect(url_for('blog.home'))\n\n    openid_errors = oid.fetch_error()\n    if openid_errors:\n        flash(openid_errors, category=\"danger\")\n\n    return render_template(\n       'login.html',\n       form=form,\n       openid_form=openid_form\n    )\n\n@main_blueprint.route('/register', methods=['GET', 'POST'])\n@oid.loginhandler\ndef register():\n    form = RegisterForm()\n    openid_form = OpenIDForm()\n\n    if openid_form.validate_on_submit():\n        return oid.try_login(\n            openid_form.openid.data,\n            ask_for=['nickname', 'email'],\n            ask_for_optional=['fullname']\n        )\n\n    if form.validate_on_submit():\n        new_user = User(form.username.data)\n        new_user.set_password(form.password.data)\n\n        db.session.add(new_user)\n        db.session.commit()\n\n        flash(\n            \"Your user has been created, please login.\", \n            category=\"success\"\n        )\n\n        return redirect(url_for('.login'))\n\n    openid_errors = oid.fetch_error()\n    if openid_errors:\n        flash(openid_errors, category=\"danger\")\n\n    return render_template(\n        'register.html',\n        form=form,\n        openid_form=openid_form\n    )\n```", "```py\n@oid.after_login\ndef create_or_login(resp):\n    from models import db, User\n    username = resp.fullname or resp.nickname or resp.email\n    if not username:\n        flash('Invalid login. Please try again.', 'danger')\n        return redirect(url_for('main.login'))\n\n    user = User.query.filter_by(username=username).first()\n    if user is None:\n        user = User(username)\n        db.session.add(user)\n        db.session.commit()\n\n    # Log the user in here\n    return redirect(url_for('blog.home'))\n```", "```py\n$ pip install Flask-OAuth\n\n```", "```py\nfrom flask_oauth import OAuth\n\nbcrypt = Bcrypt()\noid = OpenID()\noauth = OAuth()\n\n\u2026\n\nfacebook = oauth.remote_app(\n    'facebook',\n    base_url='https://graph.facebook.com/',\n    request_token_url=None,\n    access_token_url='/oauth/access_token',\n    authorize_url='https://www.facebook.com/dialog/oauth',\n    consumer_key=' FACEBOOK_APP_ID',\n    consumer_secret=' FACEBOOK_APP_SECRET',\n    request_token_params={'scope': 'email'}\n)\n@facebook.tokengetter\ndef get_facebook_oauth_token():\n    return session.get('facebook_oauth_token')\n```", "```py\nfrom webapp.extensions import oid, facebook\n\u2026\n\n@main_blueprint.route('/facebook')\ndef facebook_login():\n    return facebook.authorize(\n        callback=url_for(\n            '.facebook_authorized',\n            next=request.referrer or None,\n            _external=True\n        )\n    )\n\n@main_blueprint.route('/facebook/authorized')\n@facebook.authorized_handler\ndef facebook_authorized(resp):\n    if resp is None:\n        return 'Access denied: reason=%s error=%s' % (\n            request.args['error_reason'],\n            request.args['error_description']\n        )\n\n    session['facebook_oauth_token'] = (resp['access_token'], '')\n\n    me = facebook.get('/me')\n    user = User.query.filter_by(\n        username=me.data['first_name'] + \" \" + me.data['last_name']\n    ).first()\n\n    if not user:\n        user = User(me.data['first_name'] + \" \" + me.data['last_name'])\n        db.session.add(user)\n        db.session.commit()\n\n    # Login User here\n    flash(\"You have been logged in.\", category=\"success\")\n\n    return redirect(\n        request.args.get('next') or url_for('blog.home')\n    )\n```", "```py\n<h2 class=\"text-center\">Register With Facebook</h2>\n<a href=\"{{ url_for('.facebook_login') }}\">Login via Facebook</a>\n```", "```py\ntwitter = oauth.remote_app(\n    'twitter',\n    base_url='https://api.twitter.com/1.1/',\n    request_token_url='https://api.twitter.com/oauth/request_token',\n    access_token_url='https://api.twitter.com/oauth/access_token',\n    authorize_url='https://api.twitter.com/oauth/authenticate',\n    consumer_key='',\n    consumer_secret=''\n)\n\n@twitter.tokengetter\ndef get_twitter_oauth_token():\n    return session.get('twitter_oauth_token')\n```", "```py\n@main_blueprint.route('/twitter-login')\ndef twitter_login():\n    return twitter.authorize(\n        callback=url_for(\n            '.twitter_authorized',\n            next=request.referrer or None,\n            _external=True\n        )\n    )\n\n@main_blueprint.route('/twitter-login/authorized')\n@twitter.authorized_handler\ndef twitter_authorized(resp):\n    if resp is None:\n        return 'Access denied: reason: {} error: {}'.format(\n            request.args['error_reason'],\n            request.args['error_description']\n        )\n\n    session['twitter_oauth_token'] = resp['oauth_token'] + \\\n        resp['oauth_token_secret']\n\n    user = User.query.filter_by(\n        username=resp['screen_name']\n    ).first()\n\n    if not user:\n        user = User(resp['screen_name'], '')\n        db.session.add(user)\n        db.session.commit()\n\n    # Login User here\n    flash(\"You have been logged in.\", category=\"success\")\n\n    return redirect(\n        request.args.get('next') or url_for('blog.home')\n    )\n```", "```py\n<h2 class=\"text-center\">Register With Twitter</h2>\n<a href=\"{{ url_for('.twitter_login') }}\">Login</a>\n```", "```py\nsession['key'] = data\n```", "```py\nsession['key']\n```", "```py\n@main_blueprint.route('/login', methods=['GET', 'POST'])\ndef login():\n    form = LoginForm()\n\n    if form.validate_on_submit():\n        # Add the user's name to the cookie\n        session['username'] = form.username.data\n\n    return render_template('login.html', form=form)\n```", "```py\n@main_blueprint.route('/logout', methods=['GET', 'POST'])\ndef logout():\n    # Remove the username from the cookie\n    session.pop('username', None)\n    return redirect(url_for('.login'))\n```", "```py\n@blog_blueprint.route('/new', methods=['GET', 'POST'])\ndef new_post ():\n    if 'username' not in session:\n        return redirect(url_for('main.login'))\n    \u2026\n```", "```py\n@blog_blueprint.before_request\ndef check_user():\n    if 'username' in session:\n        g.current_user = User.query.filter_by(\n            username=session['username']\n        ).one()\n    else:\n        g.current_user = None\n```", "```py\n@blog_blueprint.route('/new', methods=['GET', 'POST'])\ndef new_post():\n    if not g.current_user:\n        return redirect(url_for('main.login'))\n    \u2026\n```", "```py\n{% if g.current_user == post.user %}\n<div class=\"row\">\n  <div class=\"col-lg-2\">\n    <a href=\"{{ url_for('.edit_post', id=post.id) }}\" class=\"btn btn- \n      primary\">Edit</a>\n  </div>\n</div>\n{% endif %}\n```", "```py\n@blog_blueprint.route('/edit/<int:id>', methods=['GET', 'POST'])\ndef edit_post(id):\n    if not g.current_user:\n        return redirect(url_for('main.login'))\n\n    post = Post.query.get_or_404(id)\n\n    if g.current_user != post.user:\n        abort(403)\n    \u2026\n```", "```py\n$ pip install flask-login\n\n```", "```py\nfrom flask.ext.login import LoginManager\n\u2026\nlogin_manager = LoginManager()\n```", "```py\nlogin_manager.login_view = \"main.login\"\nlogin_manager.session_protection = \"strong\"\nlogin_manager.login_message = \"Please login to access this page\"\nlogin_manager.login_message_category = \"info\"\n\n@login_manager.user_loader\ndef load_user(userid):\n    from models import User\n    return User.query.get(userid)\n```", "```py\nfrom flask.ext.login import AnonymousUserMixin\n\u2026\n\nclass User(db.Model):\n    id = db.Column(db.Integer(), primary_key=True)\n    username = db.Column(db.String(255))\n    password = db.Column(db.String(255))\n    posts = db.relationship(\n        'Post',\n        backref='user',\n        lazy='dynamic'\n    )\n\n    def __init__(self, username):\n        self.username = username\n\n    def __repr__(self):\n        return '<User {}>'.format(self.username)\n\n    def set_password(self, password):\n        self.password = bcrypt.generate_password_hash(password)\n\n    def check_password(self, password):\n        return bcrypt.check_password_hash(self.password, password)\n\n    def is_authenticated(self):\n        if isinstance(self, AnonymousUserMixin):\n            return False\n        else:\n            return True\n\n    def is_active(self):\n        return True\n\n    def is_anonymous(self):\n        if isinstance(self, AnonymousUserMixin):\n            return True\n        else:\n            return False\n\n    def get_id(self):\n        return unicode(self.id)\n```", "```py\nlogin_manager.anonymous_user = CustomAnonymousUser\n```", "```py\nfrom flask.ext.login import login_user\nlogin_user(user_object)\n```", "```py\nfrom wtforms import (\n    StringField,\n    TextAreaField,\n    PasswordField,\n    BooleanField\n)\n\nclass LoginForm(Form):\n    username = StringField('Username', [\n        DataRequired(),\n        Length(max=255)\n    ])\n    password = PasswordField('Password', [DataRequired()])\n    remember = BooleanField(\"Remember Me\")\n    \u2026\n```", "```py\nif form.validate_on_submit():\n    user = User.query.filter_by(\n        username=form.username.data\n    ).one()\n    login_user(user, remember=form.remember.data)\n```", "```py\nfrom flask.ext.login import login_user, logout_user\nlogout_user()\n```", "```py\nfrom flask.ext.login import login_required\n\n@blog_blueprint.route('/new', methods=['GET', 'POST'])\n@login_required\ndef new_post():\n    form = PostForm()\n    \u2026\n```", "```py\nroles = db.Table(\n    'role_users',\n    db.Column('user_id', db.Integer, db.ForeignKey('user.id')),\n    db.Column('role_id', db.Integer, db.ForeignKey('role.id'))\n)\n\nclass User(db.Model):\n    id = db.Column(db.Integer(), primary_key=True)\n    username = db.Column(db.String(255), unique=True)\n    password = db.Column(db.String(255))\n    posts = db.relationship(\n        'Post',\n        backref='user',\n        lazy='dynamic'\n    )\n    roles = db.relationship(\n        'Role',\n        secondary=roles,\n        backref=db.backref('users', lazy='dynamic')\n    )\n\n    def __init__(self, username):\n        self.username = username\n\n        default = Role.query.filter_by(name=\"default\").one()\n        self.roles.append(default)\n    \u2026\n\nclass Role(db.Model):\n    id = db.Column(db.Integer(), primary_key=True)\n    name = db.Column(db.String(80), unique=True)\n    description = db.Column(db.String(255))\n\n    def __init__(self, name):\n        self.name = name\n\n    def __repr__(self):\n        return '<Role {}>'.format(self.name)\n```", "```py\nfrom flask.ext.principal import Principal, Permission, RoleNeed\nprincipals = Principal()\nadmin_permission = Permission(RoleNeed('admin'))\nposter_permission = Permission(RoleNeed('poster'))\ndefault_permission = Permission(RoleNeed('default'))\n```", "```py\nfrom flask.ext.principal import identity_loaded, UserNeed, RoleNeed\nfrom extensions import bcrypt, oid, login_manager, principals\ndef create_app(object_name):\n    app = Flask(__name__)\n    app.config.from_object(object_name)\n\n    db.init_app(app)\n    bcrypt.init_app(app)\n    oid.init_app(app)\n    login_manager.init_app(app)\n    principals.init_app(app)\n\n    @identity_loaded.connect_via(app)\n    def on_identity_loaded(sender, identity):\n        # Set the identity user object\n        identity.user = current_user\n\n        # Add the UserNeed to the identity\n        if hasattr(current_user, 'id'):\n            identity.provides.add(UserNeed(current_user.id))\n\n        # Add each role to the identity\n        if hasattr(current_user, 'roles'):\n            for role in current_user.roles:\n                identity.provides.add(RoleNeed(role.name))\n     \u2026\n```", "```py\nfrom flask.ext.principal import (\n    Identity,\n    AnonymousIdentity,\n    identity_changed\n)    \n@main_blueprint.route('/login', methods=['GET', 'POST'])\n@oid.loginhandler\ndef login():\n    \u2026\n\n    if form.validate_on_submit():\n        user = User.query.filter_by(\n            username=form.username.data\n        ).one()\n        login_user(user, remember=form.remember.data)\n\n        identity_changed.send(\n            current_app._get_current_object(),\n            identity=Identity(user.id)\n        )\n\n        flash(\"You have been logged in.\", category=\"success\")\n        return redirect(url_for('blog.home'))\n@main_blueprint.route('/logout', methods=['GET', 'POST'])\ndef logout():\n    logout_user()\n\n    identity_changed.send(\n        current_app._get_current_object(),\n        identity=AnonymousIdentity()\n    )\n\n    flash(\"You have been logged out.\", category=\"success\")\n    return redirect(url_for('.login'))\n```", "```py\nfrom webapp.extensions import poster_permission\n@blog_blueprint.route('/edit/<int:id>', methods=['GET', 'POST'])\n@login_required\n@poster_permission.require(http_exception=403)\ndef edit_post(id):\n    \u2026\n```", "```py\nfrom webapp.extensions import poster_permission, admin_permission\n\n@blog_blueprint.route('/edit/<int:id>', methods=['GET', 'POST'])\n@login_required\n@poster_permission.require(http_exception=403)\ndef edit_post(id):\n    post = Post.query.get_or_404(id)\n    permission = Permission(UserNeed(post.user.id))\n\n    # We want admins to be able to edit any post\n    if permission.can() or admin_permission.can():\n        form = PostForm()\n\n        if form.validate_on_submit():\n            post.title = form.title.data\n            post.text = form.text.data\n            post.publish_date = datetime.datetime.now()\n\n            db.session.add(post)\n            db.session.commit()\n\n            return redirect(url_for('.post', post_id=post.id))\n\n        form.text.data = post.text\n        return render_template('edit.html', form=form, post=post)\n\n    abort(403)\n```"]