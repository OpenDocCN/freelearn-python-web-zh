["```py\n$ sudo apt-get install python-virtualenv\n```", "```py\n$ pip install flask\n```", "```py\nfrom flask import Flask\napp = Flask(__name__)\n@app.route('/')\ndef index():\n  return 'Hello World!'\n```", "```py\n$ export FLASK_APP=hello_world.py\n$ flask run\n* Serving Flask app \"flask_todo.hello_world\"\n* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n```", "```py\n{\n  \"dev\": {\n      \"app_function\": \"hello_world.app\",\n      \"aws_region\": \"ap-south-1\",\n      \"profile_name\": \"default\",\n      \"project_name\": \"flask-todo\",\n      \"runtime\": \"python3.6\",\n      \"s3_bucket\": \"zappa-yrze3w53y\"\n  }\n}\n```", "```py\n$ zappa deploy dev\n```", "```py\npip install -r requirements.txt\n```", "```py\nimport os\nfrom shutil import copyfile\n\nBASE_DIR = os.path.dirname(os.path.dirname(__file__))\n\ndef get_sqlite_uri(db_name):\n    src = os.path.join(BASE_DIR, db_name)\n    dst = \"/tmp/%s\" % db_name\n    copyfile(src, dst)\n    return 'sqlite:///%s' % dst\n\nclass Config(object):\n    SECRET_KEY = os.environ.get('SECRET_KEY') or os.urandom(24)\n    SQLALCHEMY_COMMIT_ON_TEARDOWN = True\n    SQLALCHEMY_RECORD_QUERIES = True\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n\n    @staticmethod\n    def init_app(app):\n        pass\n\nclass DevelopmentConfig(Config):\n    DEBUG = True\n    SQLALCHEMY_DATABASE_URI = get_sqlite_uri('todo-dev.db')\n\nclass ProductionConfig(Config):\n    SQLALCHEMY_DATABASE_URI = get_sqlite_uri('todo-prod.db')\n\nconfig = {\n    'dev': DevelopmentConfig,\n    'production': ProductionConfig,\n}\n```", "```py\nfrom app import db\n\nclass BaseModel:\n    \"\"\"\n    Base Model with common operations.\n    \"\"\"\n\n    def delete(self):\n        db.session.delete(self)\n        db.session.commit()\n\n    def save(self):\n        db.session.add(self)\n        db.session.commit()\n        return self\n```", "```py\nfrom flask_login import LoginManager\napp = Flask(__name__)\nlogin_manager = LoginManager()\nlogin_manager.session_protection = 'strong'\nlogin_manager.login_view = 'auth.login'\nlogin_manager.login_message_category = \"info\"\nlogin_manager.init_app(app)\n```", "```py\nBlueprint instantiation in the auth/__init__.py file:\n```", "```py\nfrom flask import Blueprint\nauth = Blueprint('auth', __name__)\nfrom . import views\n```", "```py\napp/__init__.py file where we are going to create the Flask application instance:\n```", "```py\nfrom .auth import auth as auth_blueprint\nfrom app.config import config\n\napp = Flask(__name__)\napp.config.from_object(config[environment])\n\napp.register_blueprint(auth_blueprint, url_prefix='/auth')\n```", "```py\nimport re\nfrom datetime import datetime\n\nfrom app.config.models import BaseModel\nfrom flask_login.mixins import UserMixin\nfrom sqlalchemy.orm import synonym\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom app import db\nfrom app import login_manager\n\nclass User(UserMixin, BaseModel, db.Model):\n    __tablename__ = 'user'\n    id = db.Column(db.Integer, primary_key=True)\n    _email = db.Column('email', db.String(64), unique=True)\n    password_hash = db.Column(db.String(128))\n\n    def __init__(self, **kwargs):\n        super(User, self).__init__(**kwargs)\n\n    def __repr__(self):\n        return '<User {0}>'.format(self.email)\n\n    @property\n    def email(self):\n        return self._email\n\n    @email.setter\n    def email(self, email):\n        if not len(email) <= 64 or not bool(re.match(r'^\\S+@\\S+\\.\\S+$', email)):\n            raise ValueError('{} is not a valid email address'.format(email))\n        self._email = email\n\n    email = synonym('_email', descriptor=email)\n\n    @property\n    def password(self):\n        raise AttributeError('password is not a readable attribute')\n\n    @password.setter\n    def password(self, password):\n        if not bool(password):\n            raise ValueError('no password given')\n\n        hashed_password = generate_password_hash(password)\n        if not len(hashed_password) <= 128:\n            raise ValueError('not a valid password, hash is too long')\n        self.password_hash = hashed_password\n\n    def verify_password(self, password):\n        return check_password_hash(self.password_hash, password)\n\n    def to_dict(self):\n        return {\n            'email': self.email\n        }\n\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))\n```", "```py\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, SubmitField\nfrom wtforms.validators import Required, Length, Email, EqualTo\n\nclass LoginForm(FlaskForm):\n    email = StringField(\n        'Email', validators=[Required(), Length(1,64), Email()]\n    )\n    password = PasswordField(\n        'Password', validators=[Required()]\n    )\n    submit = SubmitField('Log In')\n\nclass SignupForm(FlaskForm):\n    email = StringField(\n        'Email', validators=[Required(), Length(1,64), Email()]\n    )\n    password = PasswordField(\n        'Password', validators=[\n            Required(),\n            EqualTo('confirm_password', message='Password must match.')]\n    )\n    confirm_password = PasswordField(\n        'Confirm Password', validators=[Required()]\n    )\n    submit = SubmitField('Sign up')\n```", "```py\nfrom flask import render_template, redirect, url_for\nfrom flask_login import login_user, login_required, logout_user\n\nfrom app.auth import auth\nfrom app.auth.forms import LoginForm, SignupForm\nfrom app.auth.models import User\n\n@auth.route('/login', methods=['GET', 'POST'])\ndef login():\n    form = LoginForm()\n    if form.validate_on_submit():\n        user_by_email = User.query.filter_by(email=form.email.data).first()\n        if user_by_email is not None and user_by_email.verify_password(form.password.data):\n            login_user(user_by_email)\n            return redirect(url_for('todo.list'))\n    return render_template('auth/login.html', form=form)\n\n@auth.route('/signup', methods=['GET', 'POST'])\ndef signup():\n    form = SignupForm()\n    if form.validate_on_submit():\n        if not User.query.filter_by(email=form.email.data).scalar():\n            User(\n                email = form.email.data,\n                password = form.password.data\n            ).save()\n            return redirect(url_for('auth.login'))\n        else:\n            form.errors['email'] = 'User already exists.'\n            return render_template('auth/signup.html', form=form)\n    return render_template('auth/signup.html', form=form)\n\n@auth.route('/logout')\n@login_required\ndef logout():\n    logout_user()\n    return redirect(url_for('auth.login'))\n```", "```py\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <meta name=\"csrf-token\" content=\"{{ csrf_token() }}\">\n    <meta name=\"author\" content=\"AbdulWahid AbdulHaque\">\n    <title>Flask Todo App</title>\n\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='bootstrap/css/bootstrap.min.css') }}\">\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='bootstrap/css/bootstrap.min.css.map') }}\">\n    {% block css %}{% endblock %}\n\n    <script type=\"text/javascript\" src=\"img/jquery-3.3.1.min.js')}}\"></script>\n    <script type=\"text/javascript\" src=\"img/bootstrap.min.js')}}\"></script>\n    <script type=\"text/javascript\" src=\"img/popper.min.js')}}\"></script>\n    {% block js %}{% endblock %}\n</head>\n<body>\n    {% include 'navbar.html' %}\n    {% block body %}{% endblock %}\n    <script type=\"text/javascript\">\n        $('.dropdown-toggle').dropdown();\n    </script>\n</body>\n</html>\n```", "```py\nnavbar.html template where we created a navbar using Bootstrap CSS classes.\n```", "```py\n<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n    <a class=\"navbar-brand\" href=\"#\">Todo's</a>\n    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavDropdown\" aria-controls=\"navbarNavDropdown\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span class=\"navbar-toggler-icon\"></span>\n    </button>\n    <div class=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\n        {% if current_user.is_authenticated %}\n        <ul class=\"navbar-nav ml-auto\">\n            <li class=\"nav-item dropdown ml-auto\">\n                <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdownMenuLink\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                    Welcome <i>{{ current_user.email }}</i>\n                </a>\n                <div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdownMenuLink\">\n                    <a class=\"dropdown-item\" href=\"../auth/logout\">Logout</a>\n                </div>\n            </li>\n        </ul>\n        {% endif %}\n    </div>\n  </nav>\n```", "```py\n{% extends \"base.html\" %}\n\n{% block body %}\n<div class=\"container align-middle mx-auto\" style=\"width:30%; margin-top:5%\">\n    <div class=\"card bg-light mb-3\">\n        <div class=\"card-header\"><h3>Sign Up</h3></div>\n        <div class=\"card-body\">\n            <form method=\"post\">\n                {{ form.hidden_tag() }}\n                {% if form.errors %}\n                    {% for error in form.errors.values() %}\n                        <div class=\"alert alert-danger\" role=\"alert\">\n                            {{error}}\n                        </div>\n                    {% endfor %}\n                  {% endif %}\n                <div class=\"form-group\">\n                    <label for=\"exampleInputEmail1\">Email address</label>\n                    {{ form.email(class_=\"form-control\", id=\"exampleInputEmail1\", placeholder=\"Email\", maxlength=128)}}\n                    <small id=\"emailHelp\" class=\"form-text text-muted\">We'll never share your email with anyone else.</small>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"exampleInputPassword1\">Password</label>\n                    {{ form.password(class_=\"form-control\", placeholder=\"Password\") }}\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"exampleInputPassword\">Confirm Password</label>\n                    {{ form.confirm_password(class_=\"form-control\", placeholder=\"Confirm Password\") }}\n                </div>\n                <div class=\"form-group\">\n                    {{ form.submit(class_=\"btn btn-primary btn-lg\") }}\n                    <a class=\"float-right\" href=\"login\">Already have account.</a>\n                </div>\n            </form>\n        </div>\n      </div>\n</div>\n{% endblock %}\n```", "```py\n{% extends \"base.html\" %}\n\n{% block body %}\n<div class=\"container align-middle mx-auto\" style=\"width:30%; margin-top:5%\">\n    <div class=\"card bg-light mb-3\">\n        <div class=\"card-header\"><h3>Login</h3></div>\n        <div class=\"card-body\">\n            <form method=\"post\">\n                {{ form.hidden_tag() }}\n                {% if form.errors %}\n                    <div class=\"has-error\"><strong>Unable to login. Typo?</strong></div>\n                  {% endif %}\n                <div class=\"form-group\">\n                    <label for=\"exampleInputEmail1\">Email address</label>\n                    {{ form.email(class_=\"form-control\", id=\"exampleInputEmail1\", placeholder=\"Email\", maxlength=128)}}\n                    <small id=\"emailHelp\" class=\"form-text text-muted\">We'll never share your email with anyone else.</small>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"exampleInputPassword1\">Password</label>\n                    {{ form.password(class_=\"form-control\", id=\"exampleInputPassword1\", placeholder=\"Password\") }}\n                </div>\n                <div class=\"form-group\">\n                    {{ form.submit(class_=\"btn btn-primary btn-lg\") }}\n                    <a class=\"float-right\" href=\"signup\">New around here? Sign up</a>\n                </div>\n            </form>\n        </div>\n      </div>\n</div>\n{% endblock %}\n```", "```py\ntodo module's blueprint.\n```", "```py\nfrom flask import Blueprint\n\ntodo = Blueprint('todo', __name__)\n\nfrom . import views \n```", "```py\napp/__init__.py, which is where we are going to register\u00a0blueprint:\n```", "```py\nfrom .auth import auth as auth_blueprint\nfrom app.config import config\n\napp = Flask(__name__)\napp.config.from_object(config[environment])\n\napp.register_blueprint(todo_blueprint, url_prefix='/todos')\n```", "```py\nfrom datetime import datetime\nfrom app import db\nfrom app.config.models import BaseModel\n\nclass Todo(db.Model, BaseModel):\n    __tablename__ = 'todo'\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(128))\n    is_completed = db.Column(db.Boolean, default=False)\n    created_by = db.Column(db.String(64), db.ForeignKey('user.email'))\n    user = db.relationship('User', backref=db.backref('todos', lazy=True))\n\n    def __init__(self, title, created_by=None, created_at=None):\n        self.title = title\n        self.created_by = created_by\n        self.created_at = created_at or datetime.utcnow()\n\n    def __repr__(self):\n        return '<{0} Todo: {1} by {2}>'.format(\n            self.status, self.title, self.created_by or 'None')\n\n    @property\n    def status(self):\n        return 'finished' if self.is_completed else 'open'\n\n    def finished(self):\n        self.is_completed = True\n        self.finished_at = datetime.utcnow()\n        self.save()\n\n    def reopen(self):\n        self.is_completed = False\n        self.finished_at = None\n        self.save()\n\n    def to_dict(self):\n        return {\n            'title': self.title,\n            'created_by': self.created_by,\n            'status': self.status,\n        }\n```", "```py\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, SubmitField\nfrom wtforms.validators import Required, Length\n\nclass TodoForm(FlaskForm):\n    title = StringField(\n        'What needs to be done?', validators=[Required(), Length(1, 128)]\n    )\n    submit = SubmitField('Submit')\n```", "```py\nimport json\n\nfrom flask import render_template, redirect, url_for, jsonify, request\nfrom flask_login import login_required, current_user\nfrom app.todo import todo\nfrom app.todo.forms import TodoForm\nfrom app.todo.models import Todo\n\n@todo.route('/', methods=['GET', 'POST'])\n@login_required\ndef list():\n    context = dict()\n    form = TodoForm()\n    if form.validate_on_submit():\n        Todo(form.title.data, created_by=current_user.email).save()\n        return redirect(url_for('todo.list'))\n    context['form'] = form\n    context['todos'] = current_user.todos\n    context['items_left'] = len([todo for todo in current_user.todos if not todo.is_completed])\n    return render_template('todo/list.html', **context)\n\n@todo.route('/<todo_id>', methods=['DELETE'])\n@login_required\ndef remove(todo_id):\n    Todo.query.filter_by(id=int(todo_id)).delete()\n    return jsonify({'message': 'Todo removed successfully'})\n\n@todo.route('/<todo_id>', methods=['PATCH'])\n@login_required\ndef update(todo_id):\n    data = json.loads([k for k in request.form.keys()][0])\n    todo = Todo.query.filter_by(id=int(todo_id)).scalar()\n    if data.get('status'):\n        todo.finished()\n    else:\n        todo.reopen()\n    return jsonify({'message': 'Todo updated successfully'})\n```", "```py\ncurrent_user.todos and filter the data using list compensation. Then, we prepare the context and pass it to the render_template method to display the data in HTML.\n```", "```py\n{% extends \"base.html\" %}\n{% block js %}\n    <script src=\"img/list.js')}}\"></script>\n{% endblock %}\n{% block body %}\n<div class=\"container align-middle mx-auto\" style=\"width:30%; margin-top:5%\">\n    <div class=\"card mb-3\">\n        <div class=\"card-header\" align=\"center\"><h3>todo's</h3></div>\n        <div class=\"card-body\">\n            <form method=\"post\" class=\"form-inline\">\n                {{ form.hidden_tag() }}\n                {% if form.errors %}\n                    <div class=\"has-error\"><strong>Invalid task. Typo?</strong></div>\n                  {% endif %}\n                <div class=\"form-group ml-3\">\n                    {{ form.title(class_=\"form-control\", placeholder=\"What needs to be done?\", maxlength=128)}}\n                </div>\n                <div class=\"form-group\">\n                    {{ form.submit(class_=\"btn btn-primary ml-2\") }}\n                </div>\n            </form>\n            <div class=\"badge badge-pill badge-info ml-3 mt-2\">\n                {{items_left}} items left\n            </div>\n            <ul class=\"list-group list-group-flush mt-3\" id=\"todolist\">\n                {% for todo in todos %}\n                <li class=\"list-group-item\" id=\"{{todo.id}}\">\n                    <input type=\"checkbox\" aria-label=\"Checkbox for following text input\" {% if todo.is_completed %} checked {% endif %}>\n                    {{todo.title}}\n                    <span class=\"badge badge-danger badge-pill float-right\">X</span>\n                </li>\n                {% endfor %}\n            </ul>\n        </div>\n      </div>\n</div>\n\n<script>\n\n</script>\n{% endblock %}\n```", "```py\nvar csrftoken = $('meta[name=csrf-token]').attr('content');\nfunction csrfSafeMethod(method) {\n// these HTTP methods do not require CSRF protection\nreturn (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));\n}\n\n$.ajaxSetup({\n    beforeSend: function(xhr, settings) {\n      if (!csrfSafeMethod(settings.type) && !this.crossDomain) {\n        xhr.setRequestHeader(\"X-CSRFToken\", csrftoken);\n      }\n    }\n  });\n\n$(document).ready(function(){\n\n    // Update todo\n    $('#todolist li>input[type=\"checkbox\"]').on('click', function(e){\n        var todo_id = $(this).parent().closest('li').attr('id');\n        $.ajax({\n            url : todo_id,\n            method : 'PATCH',\n            data : JSON.stringify({status: $(this).prop('checked')}),\n            success : function(response){\n                location.reload();\n            },\n            error : function(error){\n                console.log(error)\n            }\n        })\n    })\n\n    // Remove todo\n    $('#todolist li>span').on('click', function(e){\n        var todo_id = $(this).parent().closest('li').attr('id');\n        $.ajax({\n            url : todo_id,\n            method : 'DELETE',\n            success : function(response){\n                location.reload();\n            },\n            error : function(error){\n                console.log(error)\n            }\n        })\n    })\n})\n```", "```py\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_login import LoginManager\nfrom flask_migrate import Migrate\nfrom flask_wtf.csrf import CSRFProtect\n\nfrom app.config import config\n\ndb = SQLAlchemy()\nmigrate = Migrate()\ncsrf = CSRFProtect()\n\nlogin_manager = LoginManager()\nlogin_manager.session_protection = 'strong'\nlogin_manager.login_view = 'auth.login'\nlogin_manager.login_message_category = \"info\"\n\ndef create_app(environment):\n    app = Flask(__name__)\n    app.config.from_object(config[environment])\n\n    csrf.init_app(app)\n    db.init_app(app)\n    migrate.init_app(app, db=db)\n    login_manager.init_app(app)\n\n    from .auth import auth as auth_blueprint\n    app.register_blueprint(auth_blueprint, url_prefix='/auth')\n\n    from .todo import todo as todo_blueprint\n    app.register_blueprint(todo_blueprint, url_prefix='/todos')\n\n    return app\n```", "```py\nrun.py, where we will be using the create_app method.\n```", "```py\nfrom app import create_app\n\napp = create_app('dev')\n```", "```py\n$ zappa deploy dev\nCalling deploy for stage dev..\nCreating chapter-3-dev-ZappaLambdaExecutionRole IAM Role..\nCreating zappa-permissions policy on chapter-3-dev-ZappaLambdaExecutionRole IAM Role.\nDownloading and installing dependencies..\n - sqlite==python36: Using precompiled lambda package\nPackaging project as zip.\nUploading chapter-3-dev-1529318192.zip (9.4MiB)..\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 9.87M/9.87M [00:05<00:00, 1.89MB/s]\nScheduling..\nScheduled chapter-3-dev-zappa-keep-warm-handler.keep_warm_callback with expression rate(4 minutes)!\nUploading chapter-3-dev-template-1529318886.json (1.6KiB)..\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1.62K/1.62K [00:00<00:00, 4.87KB/s]\nWaiting for stack chapter-3-dev to create (this can take a bit)..\n 50%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 2/4 [00:09<00:10, 5.29s/res]\nDeploying API Gateway..\nDeployment complete!: https://m974nz8zld.execute-api.ap-south-1.amazonaws.com/dev\n```"]