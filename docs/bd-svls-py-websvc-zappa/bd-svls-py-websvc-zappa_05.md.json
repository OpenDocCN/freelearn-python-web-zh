["```py\n$ brew install pipenv\n```", "```py\n$ sudo apt install software-properties-common python-software-properties\n$ sudo add-apt-repository ppa:pypa/ppa\n$ sudo apt update\n$ sudo apt install pipenv\n```", "```py\npip install pipenv\n```", "```py\n$ pipenv --python python3.6\n```", "```py\n$ pipenv --two\n```", "```py\n$ pipenv --three\nPipfile:\n```", "```py\n[[source]]\n\nurl = \"https://pypi.python.org/simple\"\nverify_ssl = true\nname = \"pypi\"\n\n[dev-packages]\n\n[packages]\n\n[requires]\n\npython_version = \"3.6\"\n```", "```py\n pipenv install <package-name>\n```", "```py\n pipenv run python manage.py runserver\n```", "```py\n[[source]]\n\nurl = \"https://pypi.python.org/simple\"\nverify_ssl = true\nname = \"pypi\"\n\n[dev-packages]\n\n[packages]\n\ndjango = \"*\"\npylint = \"*\"\npillow = \"*\"\nzappa = \"*\"\ndjango-storages = \"*\"\n\"boto3\" = \"*\"\nboto = \"*\"\ndjango-imagekit = \"*\"\n\n[requires]\n\npython_version = \"3.6\"\n\n```", "```py\ndjango-admin.py startproject <project_name>\n```", "```py\nfrom django.db import models\nfrom django.utils.translation import gettext as _\nfrom imagekit.models import ImageSpecField\nfrom imagekit.processors import ResizeToFill\n\n# Create your models here.\n\ndef upload_path(instance, filename):\n    return '{}/{}'.format(instance.album.name, filename)\n\nclass PhotoAlbum(models.Model):\n    name = models.CharField(_('album name'), max_length=50)\n    created_at = models.DateTimeField(auto_now_add=True, auto_now=False)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    class Meta:\n        db_table = 'photo_album'\n        verbose_name = 'photo album'\n        verbose_name_plural = 'photo albums'\n\n    def __str__(self):\n        return self.name\n\nclass Photo(models.Model):\n    album = models.ForeignKey(PhotoAlbum, related_name='photos', on_delete=models.CASCADE)\n    image = models.ImageField(_('image'), upload_to=upload_path)\n    image_thumbnail = ImageSpecField(source='image',\n                                      processors=[ResizeToFill(100, 50)],\n                                      format='JPEG',\n                                      options={'quality': 60})\n    created_at = models.DateTimeField(auto_now_add=True, auto_now=False)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    class Meta:\n        db_table = 'photo'\n        verbose_name = 'photo'\n        verbose_name_plural = 'photos'\n\n    def __str__(self):\n        return self.image.name.split('/')[1]\n\n```", "```py\nfrom django.contrib import admin\nfrom django.urls import path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n]\nadmin.py file:\n```", "```py\nfrom django.contrib import admin\nfrom django.utils.html import mark_safe\nfrom gallery.models import PhotoAlbum, Photo\n# Register your models here.\n\nclass PhotoAdminInline(admin.TabularInline):\n    model = Photo\n    extra = 1\n    fields = ( 'image', 'image_tag', )\n    readonly_fields = ('image_tag',)\n\n    def image_tag(self, instance):\n        if instance.image_thumbnail.name:\n            return mark_safe('<img src=\"img/%s\" />' % instance.image_thumbnail.url)\n        return ''\n    image_tag.short_description = 'Image Thumbnail'\n\nclass PhotoAlbumAdmin(admin.ModelAdmin):\n    inlines = [PhotoAdminInline]\n\nadmin.site.register(PhotoAlbum, PhotoAlbumAdmin)\n```", "```py\nfrom django.conf import settings\nfrom storages.backends.s3boto import S3BotoStorage\n\nclass StaticStorage(S3BotoStorage):\n    location = settings.STATICFILES_LOCATION\n\n    @property\n    def connection(self):\n        if self._connection is None:\n            self._connection = self.connection_class(\n                self.access_key, self.secret_key,\n                calling_format=self.calling_format, host='s3-ap-south-1.amazonaws.com')\n        return self._connection\n\nclass MediaStorage(S3BotoStorage):\n    location = settings.MEDIAFILES_LOCATION\n\n    @property\n    def connection(self):\n        if self._connection is None:\n            self._connection = self.connection_class(\n                self.access_key, self.secret_key,\n                calling_format=self.calling_format, host='s3-ap-south-1.amazonaws.com')\n        return self._connection\n```", "```py\nAWS_HEADERS = {\n    'Expires': 'Thu, 31 Dec 2099 20:00:00 GMT',\n    'Cache-Control': 'max-age=94608000',\n}\n\nAWS_STORAGE_BUCKET_NAME = 'chapter-5'\nAWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')\nAWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')\nAWS_CLOUDFRONT_DOMAIN = 'dl76lqo8jmttq.cloudfront.net'\n\nMEDIAFILES_LOCATION = 'media'\nMEDIA_ROOT = '/%s/' % MEDIAFILES_LOCATION\nMEDIA_URL = '/%s/%s/' % (AWS_CLOUDFRONT_DOMAIN, MEDIAFILES_LOCATION)\nDEFAULT_FILE_STORAGE = 'gallery.utils.MediaStorage'\n\nSTATICFILES_LOCATION = 'static'\nSTATIC_ROOT = '/%s/' % STATICFILES_LOCATION\nSTATIC_URL = '/%s/%s/' % (AWS_CLOUDFRONT_DOMAIN, STATICFILES_LOCATION)\nSTATICFILES_STORAGE = 'gallery.utils.StaticStorage'\n```", "```py\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    # ... the rest of your URLconf goes here ...\n] + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)\n  + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n```", "```py\n$ python manage.py collectstatic\n```", "```py\n$ pipenv install zappa\n```", "```py\nzappa_settings.json file:\n```", "```py\n{\n    \"dev\": {\n        \"aws_region\": \"ap-south-1\",\n        \"django_settings\": \"imageGalleryProject.settings\",\n        \"profile_name\": \"default\",\n        \"project_name\": \"imagegallerypro\",\n        \"runtime\": \"python3.6\",\n        \"s3_bucket\": \"chapter-5\",\n        \"remote_env\": \"s3://important-credentials-bucket/environments.json\"\n    }\n}\n```", "```py\nALLOWED_HOSTS = ['localhost', 'cfsla2gds0.execute-api.ap-south-1.amazonaws.com']\n```", "```py\n$ zappa manage dev \"migrate --fake-initial\"\n```"]