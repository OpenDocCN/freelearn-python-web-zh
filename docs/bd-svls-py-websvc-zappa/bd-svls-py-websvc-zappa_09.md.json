["```py\nclient = boto3.client('lambda')\nresponse = client.invoke(\n    FunctionName='string',\n    InvocationType='Event'|'RequestResponse'|'DryRun',\n    LogType='None'|'Tail',\n    ClientContext='string',\n    Payload=b'bytes'|file,\n    Qualifier='string'\n)\n```", "```py\nclient = boto3.client('lambda')\nresponse = client.invoke(\n    FunctionName='MyFunction',\n    InvocationType='Event'\n)\n```", "```py\nfrom flask import Flask\nfrom zappa.async import task\napp = Flask(__name__)\n\n@task\ndef make_pie():\n    \"\"\" This takes a long time! \"\"\"\n    ingredients = get_ingredients()\n    pie = bake(ingredients)\n    deliver(pie)\n\n@app.route('/api/order/pie')\ndef order_pie():\n    \"\"\" This returns immediately! \"\"\"\n    make_pie()\n    return \"Your pie is being made!\"\n```", "```py\ntask_sns decorator binding:\n```", "```py\nfrom zappa.asycn import task_sns\n\n@task_sns\ndef method_to_invoke_from_sns_event():\n    pass\n\n```", "```py\n{\n  \"dev\": {\n    ..\n      \"async_source\": \"sns\",\n      \"async_resources\": true,\n    ..\n    }\n}\n```", "```py\nzappa.async.run method being used:\n```", "```py\nfrom zappa.async import run\n\n# Invoking a method in async mode using Lambda\nrun(method_name_to_invoke, args, kwargs)\n\n# Invoking a method in async mode using SNS\nrun(method_name_to_invoke, args, kwargs, service=\"sns\")\n```", "```py\n@task(remote_aws_lambda_function_name='subscribe-mobile-prod', remote_aws_region='us-east-1')\ndef subscribe_mobile_number(*args, **kwargs):\n   \"\"\" This may take a long time! \"\"\"\n   validate(kwargs.get(\"mobile\"))\n   add_subscription(mobile=kwargs.get(\"mobile\"))\n```", "```py\nclient = boto3.client('sns',\n            aws_access_key_id= os.environ['aws_access_key_id'],\n            aws_secret_access_key= os.environ['aws_secret_access_key'],\n            region_name= 'us-east-1')\n```", "```py\nmodels.py class with along with OTPModel class:\n```", "```py\nimport os\nimport datetime\nfrom shutil import copyfile\nfrom peewee import *\n\n# Copy our working DB to /tmp..\ndb_name = 'quote_database.db'\nsrc = os.path.abspath(db_name)\ndst = \"/tmp/{}\".format(db_name)\ncopyfile(src, dst)\n\ndb = SqliteDatabase(dst)\n\nclass QuoteModel(Model):\n\n    class Meta:\n        database = db\n\n    id = IntegerField(primary_key= True)\n    quote = TextField()\n    author = CharField()\n    category = CharField()\n    created_at = DateTimeField(default= datetime.date.today())\n\nclass OTPModel(Model):\n\n    class Meta:\n        database = db\n\n    id = IntegerField(primary_key= True)\n    mobile_number = CharField()\n    otp = IntegerField()\n    is_verified = BooleanField(default=False)\n    created_at = DateTimeField(default= datetime.date.today())\n\ndb.connect()\ndb.create_tables([QuoteModel, OTPModel])\nQuoteSubscription class.\n```", "```py\nimport os\nimport re\nimport boto3\n\nclass QuoteSubscription:\n\n    def __init__(self):\n        \"\"\"\n        Class constructor to initialize the boto3 configuration with Amazon SNS.\n        \"\"\"\n        self.client = boto3.client(\n            'sns',\n            aws_access_key_id=os.environ['aws_access_key_id'],\n            aws_secret_access_key=os.environ['aws_secret_access_key'],\n            region_name='us-east-1')\n        topic = self.client.create_topic(Name=\"DailyQuoteSubscription\")\n        self.topic_arn = topic['TopicArn']\n\n    def subscribe(self, mobile):\n        \"\"\"\n        This method is used to subscribe a mobile number to the Amazon SNS topic.\n        Required parameters:\n            :param mobile: A mobile number along with country code.\n            Syntax - <country_code><mobile_number>\n            Example - 919028XXXXXX\n        \"\"\"\n        assert(bool(re.match(\"^(\\+\\d{1,3}?)?\\d{10}$\", mobile))), 'Invalid mobile number'\n        self.client.subscribe(\n            TopicArn=self.topic_arn,\n            Protocol='sms',\n            Endpoint=mobile,\n        )\n\n    def unsubscribe(self, mobile):\n        \"\"\"\n        This method is used to unsubscribe a mobile number from the Amazon SNS topic.\n        Required parameters:\n            :param mobile: A mobile number along with country code.\n            Syntax - <country_code><mobile_number>\n            Example - 919028XXXXXX\n        \"\"\"\n        assert(bool(re.match(\"^(\\+\\d{1,3}?)?\\d{10}$\", mobile))), 'Invalid mobile number'\n        try:\n            subscriptions = self.client.list_subscriptions_by_topic(TopicArn=self.topic_arn)\n            subscription = list(filter(lambda x: x['Endpoint']==mobile, subscriptions['Subscriptions']))[0]\n            self.client.unsubscribe(\n                SubscriptionArn= subscription['SubscriptionArn']\n            )\n        except IndexError:\n            raise ValueError('Mobile {} is not subscribed.'.format(mobile))\n\n    def publish(self, message):\n        \"\"\"\n        This method is used to publish a quote message on Amazon SNS topic.\n        Required parameters:\n            :param message: string formated data.\n        \"\"\"\n        self.client.publish(Message=message, TopicArn=self.topic_arn)\n\n    def send_sms(self, mobile_number, message):\n        \"\"\"\n        This method is used to send a SMS to a mobile number.\n        Required parameters:\n            :param mobile_number: string formated data.\n            :param message: string formated data.\n        \"\"\"\n        self.client.publish(\n            PhoneNumber=mobile_number,\n            Message=message\n        )\n```", "```py\nimport random\nfrom zappa.async import task\nfrom sns import QuoteSubscription\nfrom models import OTPModel\n\n@task\ndef async_subscribe(mobile_number):\n    quote_subscription = QuoteSubscription()\n    quote_subscription.subscribe(mobile=mobile_number)\n\n@task\ndef async_unsubscribe(mobile_number):\n    quote_subscription = QuoteSubscription()\n    quote_subscription.unsubscribe(mobile=mobile_number)\n\n@task\ndef async_publish(message):\n    quote_subscription = QuoteSubscription()\n    quote_subscription.publish(message=message)\n\n@task\ndef async_send_otp(mobile_number):\n    otp = None\n    quote_subscription = QuoteSubscription()\n    data = OTPModel.select().where(OTPModel.mobile_number == mobile_number, OTPModel.is_verified == False)\n    if data.exists():\n        data = data.get()\n        otp = data.otp\n    else:\n        otp = random.randint(1000,9999)\n        OTPModel.create(**{'mobile_number': mobile_number, 'otp': otp})\n    message = \"One Time Password (OTP) is {} to verify the Daily Quote subscription.\".format(otp)\n    quote_subscription.send_sms(mobile_number=mobile_number, message=message)\n```", "```py\nimport os\nimport re\nimport datetime\nimport requests\nimport falcon\nimport boto3\n\nfrom models import QuoteModel, OTPModel\nfrom mashape import fetch_quote\nfrom async import async_subscribe, async_unsubscribe, async_send_otp\n\nclass DailyQuoteResource:\n    def on_get(self, req, resp):\n        \"\"\"Handles GET requests\"\"\"\n        try:\n            data = QuoteModel.select().where(QuoteModel.created_at == datetime.date.today())\n            if data.exists():\n                data = data.get()\n                resp.media = {'quote': data.quote, 'author': data.author, 'category': data.category}\n            else:\n                quote = fetch_quote()\n                QuoteModel.create(**quote)\n                resp.media = quote\n        except Exception as e:\n            raise falcon.HTTPError(falcon.HTTP_500, str(e))\n\nclass SubscribeQuoteResource:\n    def on_get(self, req, resp):\n        \"\"\"Handles GET requests\"\"\"\n        try:\n            mobile_number = '+{}'.format(req.get_param('mobile'))\n            otp = req.get_param('otp')\n            otp_data = OTPModel.select().where(OTPModel.mobile_number == mobile_number, OTPModel.otp == otp, OTPModel.is_verified == False)\n            if mobile_number and otp_data.exists():\n                otp_data = otp_data.get()\n                otp_data.is_verified = True\n                otp_data.save()\n                async_subscribe(mobile_number)\n                resp.media = {\"message\": \"Congratulations!!! You have successfully subscribed for daily famous quote.\"}\n            elif mobile_number and not otp_data.exists():\n                async_send_otp(mobile_number)\n                resp.media = {\"message\": \"An OTP verification has been sent on mobile {0}. To complete the subscription, Use OTP with this URL pattern https://quote-api.abdulwahid.info/subscribe?mobile={0}&otp=xxxx.\".format(mobile_number)}\n            else:\n                raise falcon.HTTPError(falcon.HTTP_500, 'Require a valid mobile number as a query parameter. e.g https://<API_ENDPOINT>/subscribe?mobile=XXXXXXX')\n        except Exception as e:\n            raise falcon.HTTPError(falcon.HTTP_500, str(e))\n\nclass UnSubscribeQuoteResource:\n    def on_get(self, req, resp):\n        \"\"\"Handles GET requests\"\"\"\n        try:\n            mobile_number = '+{}'.format(req.get_param('mobile'))\n            if mobile_number:\n                async_unsubscribe(mobile_number)\n                resp.media = {\"message\": \"You have successfully unsubscribed from daily famous quote. See you again.\"}\n        except Exception as e:\n            raise falcon.HTTPError(falcon.HTTP_500, str(e))\n\napi = falcon.API()\napi.add_route('/daily', DailyQuoteResource())\napi.add_route('/subscribe', SubscribeQuoteResource())\napi.add_route('/unsubscribe', UnSubscribeQuoteResource())\n```", "```py\nSubscribeQuoteResource and UnSubscribeQuoteResource classes are using async methods to perform the mobile number subscription and unsubscription operations. This would all be executed in asynchronous mode on AWS Lamda.\n```", "```py\n{\n...\n\"project_name\": \"chapter-9\"\n...\n}\n```", "```py\n{\n    \"Mashape_API_Endpoint\" : \"https://XXXXXXXXXXXXXX\",\n    \"X_Mashape_Key\": \"XXXXXXXXXXXXXXXXXXXXXXXXX\",\n    \"aws_access_key_id\" : \"XXXXXXXXXXXXX\",\n    \"aws_secret_access_key\" :\"XXXXXXXXXXXXXXXXXXXXXXXXXXXx\"\n}\n```", "```py\n{\n...\n\"remote_env\": \"s3://book-configs/chapter-9-config.json\",\n...\n}\n```", "```py\n{\n    ...\n    \"domain\": \"quote-api.abdulwahid.info\",\n    ...\n}\n```", "```py\n{\n    ...\n    \"domain\": \"quote-api.abdulwahid.info\",\n    \"certificate_arn\":\"arn:aws:acm:us-east-1:042373950390:certificate/af0796fa-3a46-49ae-97d8-90a6b5ff6784\"\n    ...\n}\n```", "```py\n$ zappa certify\nCalling certify for stage dev..\nAre you sure you want to certify? [y/n] y\nCertifying domain quote-api.abdulwahid.info..\nCreated a new domain name with supplied certificate. Please note that it can take up to 40 minutes for this domain to be created and propagated through AWS, but it requires no further work on your part.\nCertificate updated!\n```", "```py\nschedulers.py:\n```", "```py\nfrom models import QuoteModel\nfrom mashape import fetch_quote\nfrom sns import QuoteSubscription\nfrom async import async_publish\n\ndef set_quote_of_the_day(event, context):\n    QuoteModel.create(**fetch_quote())\n\ndef publish_quote_of_the_day(event, context):\n    quote = fetch_quote()\n    async_publish(message=quote['quote'])\n```", "```py\nzappa_settings.json file:\n```", "```py\n{\n    ...\n    \"events\": [\n       ...,\n       {\n \"function\": \"schedulers.publish_quote_of_the_day\",\n \"expression\": \"cron(0 12 * * ? *)\"\n }],\n    ...\n}\n```", "```py\nzappa_settings.json file:\n```", "```py\n{\n    \"dev\": {\n        \"app_function\": \"resources.api\",\n        \"aws_region\": \"ap-south-1\",\n        \"profile_name\": \"default\",\n        \"project_name\": \"chapter-9\",\n        \"runtime\": \"python3.6\",\n        \"s3_bucket\": \"zappa-0edixmwpd\",\n        \"remote_env\": \"s3://book-configs/chapter-9-config.json\",\n        \"cache_cluster_enabled\": false,\n        \"cache_cluster_size\": 0.5,\n        \"cache_cluster_ttl\": 300,\n        \"cache_cluster_encrypted\": false,\n        \"events\": [{\n           \"function\": \"schedulers.set_quote_of_the_day\",\n           \"expression\": \"cron(0 12 * * ? *)\"\n       },\n       {\n        \"function\": \"schedulers.publish_quote_of_the_day\",\n        \"expression\": \"cron(0 2 * * ? *)\"\n        }],\n       \"domain\": \"quote-api.abdulwahid.info\",\n       \"certificate_arn\":\"arn:aws:acm:us-east-1:042373950390:certificate/af0796fa-3a46-49ae-97d8-90a6b5ff6784\"\n    }\n}\n```", "```py\nzappa update command:\n```", "```py\n$ zappa update dev\nImportant! A new version of Zappa is available!\nUpgrade with: pip install zappa --upgrade\nVisit the project page on GitHub to see the latest changes: https://github.com/Miserlou/Zappa\nCalling update for stage dev..\nDownloading and installing dependencies..\n - sqlite==python36: Using precompiled lambda package\nPackaging project as zip.\nUploading chapter-9-dev-1528709561.zip (5.9MiB)..\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6.17M/6.17M [00:02<00:00, 2.21MB/s]\nUpdating Lambda function code..\nUpdating Lambda function configuration..\nUploading chapter-9-dev-template-1528709612.json (1.6KiB)..\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1.62K/1.62K [00:00<00:00, 17.0KB/s]\nDeploying API Gateway..\nScheduling..\nUnscheduled chapter-9-dev-schedulers.set_quote_of_the_day.\nUnscheduled chapter-9-dev-zappa-keep-warm-handler.keep_warm_callback.\nScheduled chapter-9-dev-schedulers.set_quote_of_the_day with expression cron(0 12 * * ? *)!\nScheduled chapter-9-dev-zappa-keep-warm-handler.keep_warm_callback with expression rate(4 minutes)!\nYour updated Zappa deployment is live!: https://quote-api.abdulwahid.info (https://5ldrsesbc4.execute-api.ap-south-1.amazonaws.com/dev)\n```", "```py\ncurl command execution:\n```", "```py\n$ curl https://quote-api.abdulwahid.info/daily\n{\"quote\": \"May the Force be with you.\", \"author\": \"Star Wars\", \"category\": \"Movies\"}\n```", "```py\n$ curl https://quote-api.abdulwahid.info/subscribe?mobile=919028XXXXXX\n{\"message\": \"An OTP verification has been sent on mobile +919028XXXXXX. To complete the subscription, Use OTP with this URL pattern https://quote-api.abdulwahid.info/subscribe?mobile=+919028XXXXXX&otp=XXXX.\"}\n\n$ curl https://quote-api.abdulwahid.info/subscribe?mobile=919028XXXXXX&otp=XXXX\n{\"message\": \"Congratulations!!! You have successfully subscribed for daily famous quote.\"}\n```", "```py\n/unsubscribe API being executed:\n```", "```py\n$ curl https://quote-api.abdulwahid.info/unsubscribe?mobile=919028XXXXxx\n{\"message\": \"You have successfully unsubscribed from daily famous quote. See you again.\"}\n```"]