["```py\n    updatetweets(tweets){ \n        let updatelist = tweets.map(tweet => { \n         tweet.updatedate = moment(tweet.timestamp).fromNow(); \n         return tweet; \n       }); \n   }\n\n```", "```py\n$ npm install flux --save\n\n```", "```py\n   export default{ \n    getAllTweets(){ \n    //API calls to get tweets. \n    } \n   } \n\n```", "```py\n    import API from \"../API\" \n     export default{ \n      getAllTweets(){ \n       console.log(1, \"Tactions for tweets\"); \n        API.getAllTweets(); \n      }, \n    } \n\n```", "```py\n    export default{ \n      getAllTweets(){ \n       console.log(2, \"API get tweets\"); \n       $.getJSON('/api/v2/tweets', function(tweetModels) { \n          var t = tweetModels \n        // We need to push the tweets to Server actions to dispatch \n        further to stores. \n       }); \n      } \n\n```", "```py\n    export default{ \n      receivedTweets(rawTweets){ \n       console.log(3, \"received tweets\"); \n      //define dispatcher.     \n     } \n   } \n\n```", "```py\n    import Flux from 'flux'; \n\n    export default new Flux.Dispatcher();   \n\n```", "```py\n    import AppDispatcher from '../dispatcher'; \n    receivedTweets(rawTweets){ \n      console.log(3, \"received tweets\"); \n      AppDispatcher.dispatch({ \n        actionType: \"RECEIVED_TWEETS\", \n         rawTweets \n      }) \n     } \n\n```", "```py\n   import SActions from './actions/SActions'; \n\n   getAllTweets(){ \n     console.log(2, \"API get tweets\"); \n     $.getJSON('/api/v2/tweets', function(tweetModels) { \n        var t = tweetModels \n        SActions.receivedTweets(t) \n    }); \n\n```", "```py\n    import AppDispatcher from \"../dispatcher\"; \n\n    AppDispatcher.register(action =>{ \n     switch (action.actionType) { \n     Case \"RECEIVED_TWEETS\" : \n    console.log(4, \"Tstore for tweets\"); \n     break; \n      default: \n    } \n  }); \n\n```", "```py\n    import { EventEmitter } from \"events\"; \n\n    let _tweets = [] \n     const CHANGE_EVENT = \"CHANGE\"; \n\n     class TweetEventEmitter extends EventEmitter{ \n     getAll(){ \n       let updatelist = _tweets.map(tweet => { \n          tweet.updatedate = moment(tweet.timestamp).fromNow(); \n         return tweet; \n        }); \n     return _tweets; \n     } \n     emitChange(){ \n       this.emit(CHANGE_EVENT); \n     } \n\n     addChangeListener(callback){ \n      this.on(CHANGE_EVENT, callback); \n     } \n     removeChangeListener(callback){ \n       this.removeListener(CHANGE_EVENT, callback); \n    } \n   } \n   let TStore = new TweetEventEmitter(); \n\n   AppDispatcher.register(action =>{ \n    switch (action.actionType) { \n      case ActionTypes.RECEIVED_TWEETS: \n        console.log(4, \"Tstore for tweets\"); \n        _tweets = action.rawTweets; \n        TStore.emitChange(); \n      break; \n     } \n     }); \n    export default TStore; \n\n```", "```py\n   import { EventEmitter } from \"events\"; \n\n```", "```py\n   getAll(){ \n     let updatelist = _tweets.map(tweet => { \n         tweet.updatedate = moment(tweet.timestamp).fromNow(); \n         return tweet; \n       }); \n     return _tweets; \n   }\n\n```", "```py\n\n    addChangeListener(callback){ \n      this.on(CHANGE_EVENT, callback); \n    } \n    removeChangeListener(callback){ \n     this.removeListener(CHANGE_EVENT, callback); \n    } \n\n```", "```py\n    let getAppState = () =>{ \n      return { tweetslist: TStore.getAll()}; \n    } \n\n```", "```py\n   import TStore from \"./stores/TStore\"; \n\n   class Main extends React.Component{ \n     constructor(props){ \n      super(props); \n      this.state= getAppState(); \n      this._onChange = this._onChange.bind(this); \n      //defining the state of component. \n     } \n   // function to pull tweets \n     componentDidMount() { \n     TStore.addChangeListener(this._onChange); \n    } \n   componentWillUnMount() { \n     TStore.removeChangeListener(this._onChange); \n    } \n\n   _onChange(){ \n    this.setState(getAppState()); \n    } \n\n```", "```py\n    render(){ \n      return ( \n       <div> \n       <Tweet sendTweet={this.addTweet.bind(this)}/> \n          <TweetList tweet={this.state.tweetslist}/> \n       </div> \n       ); \n      } \n\n```", "```py\n    <Tweet sendTweet={this.addTweet.bind(this)}/> \n\n```", "```py\n    <Tweet /> \n\n```", "```py\n    import TActions from \"../actions/Tactions\" \n    export default class Tweet extends React.Component { \n     sendTweet(event){ \n      event.preventDefault(); \n      // this.props.sendTweet(this.refs.tweetTextArea.value); \n      TActions.sendTweet(this.refs.tweetTextArea.value); \n      this.refs.tweetTextArea.value = ''; \n     } \n\n    } \n\n```", "```py\n   import API from \"../API\" \n\n  export default{ \n    getAllTweets(){ \n     console.log(1, \"Tactions for tweets\"); \n     API.getAllTweets(); \n    }, \n    sendTweet(body){ \n      API.addTweet(body); \n     } \n   } \n\n```", "```py\n   addTweet(body){ \n      $.ajax({ \n          url: '/api/v2/tweets', \n          contentType: 'application/json', \n          type: 'POST', \n          data: JSON.stringify({ \n         'username': \"Pardisturn\", \n         'body': body, \n          }), \n       success: function() { \n            rawTweet => SActions.receivedTweet({ tweetedby:\n            \"Pardisturn\",body: tweet, timestamp: Date.now}) \n        }, \n        error: function() { \n               return console.log(\"Failed\"); \n         } \n      }); \n     } \n\n```", "```py\n    receivedTweet(rawTweet){ \n      AppDispatcher.dispatch({ \n        actionType: ActionTypes.RECEIVED_TWEET, \n        rawTweet \n       }) \n     } \n\n```", "```py\n   AppDispatcher.register(action =>{ \n    switch (action.actionType) { \n         case ActionTypes.RECEIVED_TWEETS: \n         console.log(4, \"Tstore for tweets\"); \n         _tweets = action.rawTweets; \n         TStore.emitChange(); \n          break; \n        case ActionTypes.RECEIVED_TWEET: \n          _tweets.unshift(action.rawTweet); \n          TStore.emitChange(); \n          break; \n       default: \n\n      } \n    }); \n\n```"]