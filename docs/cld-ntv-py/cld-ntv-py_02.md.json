["```py\n    #myprogram.py \n    ### EXAMPLE PYTHON MODULE\n    # Define some variables:\n    numberone = 1\n    age = 78\n\n    # define some functions\n    def printhello():\n     print \"hello\"\n\n    def timesfour(input):\n     print input * 4\n\n    # define a class\n    class house:\n     def __init__(self):\n         self.type = raw_input(\"What type of house? \")\n         self.height = raw_input(\"What height (in feet)? \")\n         self.price = raw_input(\"How much did it cost? \")\n         self.age = raw_input(\"How old is it (in years)? \")\n\n     def print_details(self):\n         print \"This house is a/an \" + self.height + \" foot\",\n         print self.type, \"house, \" + self.age, \"years old and costing\\\n         \" + self.price + \" dollars.\" \n\n```", "```py\n# import myprogram\n\n```", "```py\n    # function \n    def  functionname(): \n      do something \n      return \n\n```", "```py\n    def display ( name ): \n    #This prints a passed string into this function \n      print (\"Hello\" + name) \n      return;\n\n```", "```py\n    display(\"Manish\") \n    display(\"Mohit\") \n\n```", "```py\n$ mkdir Cloud-Native-Python  # Creating the directory\n$ cd Cloud-Native-Python  # Changing the path to working directory\n$ git init . # Initialising the local directory\n$ echo \"Cloud-Native-Python\" > README.md  # Adding description of repository\n$ git add README.md  # Adding README.md\n$ git commit -am \"Initial commit\"  # Committing the changes\n$ git remote add origin https://github.com/PacktPublishing/Cloud-Native-Python.git  # Adding to local repository\n$ git push -u origin master  # Pushing changes to remote repository.\n\n```", "```py\n$ apt-get install sqlite3 libsqlite3-dev -y\n\n```", "```py\n$ pip install virtualenv\n\n```", "```py\n$ virtualenv env --no-site-packages --python=python3\n$ source env/bin/activate\n\n```", "```py\n$ echo \"Flask==0.10.1\" >>  requirements.txt\n\n```", "```py\n$ pip install -r requirements.txt\n\n```", "```py\n    from flask import Flask \n\n    app = Flask(__name__) \n\n    if __name__ == \"__main__\": \n     app.run(host='0.0.0.0', port=5000, debug=True) \n\n```", "```py\n$ python app.py\n\n```", "```py\nCREATE TABLE apirelease(\nbuildtime date,\nversion varchar(30) primary key,\nlinks varchar2(30), methods varchar2(30));\n\n```", "```py\nInsert into apirelease values ('2017-01-01 10:00:00', \"v1\", \"/api/v1/users\", \"get, post, put, delete\");\n\n```", "```py\n    from flask import jsonify \n    import json \n    import sqlite3 \n    @app.route(\"/api/v1/info\") \n    def home_index(): \n      conn = sqlite3.connect('mydb.db') \n      print (\"Opened database successfully\"); \n      api_list=[] \n      cursor = conn.execute(\"SELECT buildtime, version,\n      methods, links   from apirelease\") \n    for row in cursor: \n        a_dict = {} \n        a_dict['version'] = row[0] \n        a_dict['buildtime'] = row[1] \n        a_dict['methods'] = row[2] \n        a_dict['links'] = row[3] \n        api_list.append(a_dict) \n    conn.close() \n    return jsonify({'api_version': api_list}), 200 \n\n```", "```py\nCREATE TABLE users( \nusername varchar2(30), \nemailid varchar2(30), \npassword varchar2(30), full_name varchar(30), \nid integer primary key autoincrement); \n\n```", "```py\napp.py:\n```", "```py\n    @app.route('/api/v1/users', methods=['GET']) \n    def get_users(): \n      return list_users() \n\n```", "```py\n    def list_users():\n    conn = sqlite3.connect('mydb.db')\n    print (\"Opened database successfully\");\n    api_list=[]\n    cursor = conn.execute(\"SELECT username, full_name,\n    email, password, id from users\")\n    for row in cursor:\n    a_dict = {}\n    a_dict['username'] = row[0]\n    a_dict['name'] = row[1]\n    a_dict['email'] = row[2]\n    a_dict['password'] = row[3]\n    a_dict['id'] = row[4]\n    api_list.append(a_dict)\n    conn.close()\n      return jsonify({'user_list': api_list}) \n\n```", "```py\n   @app.route('/api/v1/users/<int:user_id>', methods=['GET']) \n   def get_user(user_id): \n     return list_user(user_id) \n\n```", "```py\n    def list_user(user_id): \n      conn = sqlite3.connect('mydb.db') \n      print (\"Opened database successfully\"); \n      api_list=[] \n      cursor=conn.cursor() \n      cursor.execute(\"SELECT * from users where id=?\",(user_id,)) \n      data = cursor.fetchall() \n      if len(data) != 0: \n         user = {} \n               user['username'] = data[0][0] \n         user['name'] = data[0][1] \n         user['email'] = data[0][2] \n         user['password'] = data[0][3] \n         user['id'] = data[0][4] \n            conn.close() \n            return jsonify(a_dict) \n\n```", "```py\n    from flask import make_response \n\n    @app.errorhandler(404) \n    def resource_not_found(error): \n      return make_response(jsonify({'error':\n      'Resource not found!'}),  404) \n\n```", "```py\ncurl -i -H \"Content-Type: application/json\" -X POST -d {\"field1\":\"value\"} resource_url \n\n```", "```py\ncurl -i -H \"Content-Type: application/json\" -X POST resource_url?field1=val1&field2=val2 \n\n```", "```py\n    @app.route('/api/v1/users', methods=['POST']) \n    def create_user(): \n      if not request.json or not 'username' in request.json or not\n      'email' in request.json or not 'password' in request.json: \n        abort(400) \n     user = { \n        'username': request.json['username'], \n        'email': request.json['email'], \n        'name': request.json.get('name',\"\"), \n        'password': request.json['password'] \n     } \n      return jsonify({'status': add_user(user)}), 201 \n\n```", "```py\n    @app.errorhandler(400) \n    def invalid_request(error): \n       return make_response(jsonify({'error': 'Bad Request'}), 400) \n\n```", "```py\n    def add_user(new_user): \n     conn = sqlite3.connect('mydb.db') \n     print (\"Opened database successfully\"); \n     api_list=[] \n     cursor=conn.cursor() \n     cursor.execute(\"SELECT * from users where username=? or\n      emailid=?\",(new_user['username'],new_user['email'])) \n    data = cursor.fetchall() \n    if len(data) != 0: \n        abort(409) \n    else: \n       cursor.execute(\"insert into users (username, emailid, password,\n   full_name) values(?,?,?,?)\",(new_user['username'],new_user['email'],\n    new_user['password'], new_user['name'])) \n       conn.commit() \n       return \"Success\" \n    conn.close() \n    return jsonify(a_dict) \n\n```", "```py\ncurl -i -H \"Content-Type: application/json\" -X POST -d '{\n\"username\":\"mahesh@rocks\", \"email\": \"mahesh99@gmail.com\",\n\"password\": \"mahesh123\", \"name\":\"Mahesh\" }' \nhttp://localhost:5000/api/v1/users\n\n```", "```py\napp.py for the DELETE method for users:\n```", "```py\n    @app.route('/api/v1/users', methods=['DELETE']) \n    def delete_user(): \n     if not request.json or not 'username' in request.json: \n        abort(400) \n     user=request.json['username'] \n      return jsonify({'status': del_user(user)}), 200 \n\ndel_user, which deletes the user record specified by username after validating whether it exists or not:\n```", "```py\n    def del_user(del_user): \n      conn = sqlite3.connect('mydb.db') \n      print (\"Opened database successfully\"); \n      cursor=conn.cursor() \n      cursor.execute(\"SELECT * from users where username=? \",\n      (del_user,)) \n      data = cursor.fetchall() \n      print (\"Data\" ,data) \n      if len(data) == 0: \n        abort(404) \n      else: \n       cursor.execute(\"delete from users where username==?\",\n       (del_user,)) \n       conn.commit() \n         return \"Success\" \n\n```", "```py\n    curl -i -H \"Content-Type: application/json\" -X delete -d '{ \n\"username\":\"manish123\" }' http://localhost:5000/api/v1/users\n\n```", "```py\n    @app.route('/api/v1/users/<int:user_id>', methods=['PUT']) \n    def update_user(user_id): \n     user = {} \n     if not request.json: \n         abort(400) \n     user['id']=user_id \n     key_list = request.json.keys() \n     for i in key_list: \n        user[i] = request.json[i] \n     print (user) \n     return jsonify({'status': upd_user(user)}), 200 \n\n```", "```py\n    def upd_user(user): \n      conn = sqlite3.connect('mydb.db') \n      print (\"Opened database successfully\"); \n      cursor=conn.cursor() \n      cursor.execute(\"SELECT * from users where id=? \",(user['id'],)) \n      data = cursor.fetchall() \n      print (data) \n      if len(data) == 0: \n        abort(404) \n      else: \n        key_list=user.keys() \n        for i in key_list: \n            if i != \"id\": \n                print (user, i) \n                # cursor.execute(\"UPDATE users set {0}=? where id=? \",\n                 (i, user[i], user['id'])) \n                cursor.execute(\"\"\"UPDATE users SET {0} = ? WHERE id =\n                ?\"\"\".format(i), (user[i], user['id'])) \n                conn.commit() \n        return \"Success\" \n\n```", "```py\nCREATE TABLE tweets( \nid integer primary key autoincrement, \nusername varchar2(30), \nbody varchar2(30), \ntweet_time date); \n\n```", "```py\n    @app.route('/api/v2/tweets', methods=['GET']) \n    def get_tweets(): \n      return list_tweets() \n    Let's define list_tweets() function which connects to database and\n    get us all the tweets and respond back with tweets list \n\n   def list_tweets(): \n     conn = sqlite3.connect('mydb.db') \n     print (\"Opened database successfully\"); \n     api_list=[] \n     cursor = conn.execute(\"SELECT username, body, tweet_time, id from \n     tweets\") \n    data = cursor.fetchall() \n    if data != 0: \n        for row in cursor: \n            tweets = {} \n            tweets['Tweet By'] = row[0] \n            tweets['Body'] = row[1] \n            tweets['Timestamp'] = row[2] \n    tweets['id'] = row[3] \n            api_list.append(tweets) \n    else: \n        return api_list \n    conn.close() \n    return jsonify({'tweets_list': api_list}) \n\n```", "```py\n    @app.route('/api/v2/tweets', methods=['POST']) \n    def add_tweets(): \n      user_tweet = {} \n      if not request.json or not 'username' in request.json or not \n     'body' in request.json: \n        abort(400) \n    user_tweet['username'] = request.json['username'] \n    user_tweet['body'] = request.json['body'] \n    user_tweet['created_at']=strftime(\"%Y-%m-%dT%H:%M:%SZ\", gmtime()) \n    print (user_tweet) \n    return  jsonify({'status': add_tweet(user_tweet)}), 200 \n\n```", "```py\n    def add_tweet(new_tweets): \n      conn = sqlite3.connect('mydb.db') \n      print (\"Opened database successfully\"); \n      cursor=conn.cursor() \n      cursor.execute(\"SELECT * from users where username=? \",\n   (new_tweets['username'],)) \n    data = cursor.fetchall() \n\n    if len(data) == 0: \n        abort(404) \n    else: \n       cursor.execute(\"INSERT into tweets (username, body, tweet_time)\n    values(?,?,?)\",(new_tweets['username'],new_tweets['body'], \n    new_tweets['created_at'])) \n       conn.commit() \n       return \"Success\" \n\n```", "```py\ncurl -i -H \"Content-Type: application/json\" -X POST -d '{\n\"username\":\"mahesh@rocks\",\"body\": \"It works\" }' \nhttp://localhost:5000/api/v2/tweets  \n\n```", "```py\ncurl http://localhost:5000/api/v2/tweets -v\n\n```", "```py\n    @app.route('/api/v2/tweets/<int:id>', methods=['GET']) \n    def get_tweet(id): \n      return list_tweet(id) \n\n```", "```py\n     def list_tweet(user_id): \n       print (user_id) \n       conn = sqlite3.connect('mydb.db') \n       print (\"Opened database successfully\"); \n       api_list=[] \n      cursor=conn.cursor() \n      cursor.execute(\"SELECT * from tweets  where id=?\",(user_id,)) \n      data = cursor.fetchall() \n      print (data) \n      if len(data) == 0: \n        abort(404) \n     else: \n\n        user = {} \n        user['id'] = data[0][0] \n        user['username'] = data[0][1] \n        user['body'] = data[0][2] \n        user['tweet_time'] = data[0][3] \n\n    conn.close() \n    return jsonify(user) \n\n```", "```py\ncurl http://localhost:5000/api/v2/tweets/2\n\n```", "```py\n$ pip install nose \n\n```", "```py\n$ pip install -r requirements.txt\n\n```", "```py\n    from app import app \n    import unittest \n\n   class FlaskappTests(unittest.TestCase): \n     def setUp(self): \n        # creates a test client \n        self.app = app.test_client() \n        # propagate the exceptions to the test client \n        self.app.testing = True \n\n```", "```py\n    def test_users_status_code(self): \n        # sends HTTP GET request to the application \n        result = self.app.get('/api/v1/users') \n        # assert the status code of the response \n        self.assertEqual(result.status_code, 200) \n\n```", "```py\n$ nosetests\n\n```", "```py\n    def test_tweets_status_code(self): \n        # sends HTTP GET request to the application \n        result = self.app.get('/api/v2/tweets') \n        # assert the status code of the response \n        self.assertEqual(result.status_code, 200) \n\n```", "```py\n    def test_tweets_status_code(self): \n        # sends HTTP GET request to the application \n        result = self.app.get('/api/v1/info') \n        # assert the status code of the response \n        self.assertEqual(result.status_code, 200) \n\n```", "```py\n    def test_addusers_status_code(self): \n        # sends HTTP POST request to the application \n        result = self.app.post('/api/v1/users', data='{\"username\":\n   \"manish21\", \"email\":\"manishtest@gmail.com\", \"password\": \"test123\"}',\n   content_type='application/json') \n        print (result) \n        # assert the status code of the response \n        self.assertEquals(result.status_code, 201) \n\n```", "```py\n    def test_updusers_status_code(self): \n        # sends HTTP PUT request to the application \n        # on the specified path \n        result = self.app.put('/api/v1/users/4', data='{\"password\": \n   \"testing123\"}', content_type='application/json') \n        # assert the status code of the response \n        self.assertEquals(result.status_code, 200) \n\n```", "```py\n    def test_addtweets_status_code(self): \n        # sends HTTP GET request to the application \n        # on the specified path \n        result = self.app.post('/api/v2/tweets', data='{\"username\": \n   \"mahesh@rocks\", \"body\":\"Wow! Is it working #testing\"}', \n   content_type='application/json') \n\n        # assert the status code of the response \n        self.assertEqual(result.status_code, 201) \n\n```", "```py\n    def test_delusers_status_code(self): \n        # sends HTTP Delete request to the application \n        result = self.app.delete('/api/v1/users', data='{\"username\": \n   \"manish21\"}', content_type='application/json') \n        # assert the status code of the response \n        self.assertEquals(result.status_code, 200) \n\n```"]