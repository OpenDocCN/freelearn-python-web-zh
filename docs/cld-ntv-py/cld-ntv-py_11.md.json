["```py\n     { \n       \"Version\": \"2012-10-17\", \n       \"Statement\": [ \n            { \n              \"Effect\": \"Allow\", \n              \"NotAction\": [ \n                \"iam:*\", \n                \"organizations:*\" \n              ], \n              \"Resource\": \"*\" \n            }, \n            { \n              \"Effect\": \"Allow\", \n                \"Action\": \"organizations:DescribeOrganization\", \n                \"Resource\": \"*\" \n            } \n          ] \n      } \n\n```", "```py\n    # Specify the provider and access details \n        provider \"aws\" { \n          region = \"${var.aws_region}\" \n          access_key = \"${var.aws_access_key}\" \n          secret_key = \"${var.aws_secret_key}\" \n     } \n\n```", "```py\n     variable \"aws_access_key\" { \n          description = \"AWS access key\" \n          default = \"\"                    # Access key \n      } \n\n     variable \"aws_secret_key\" { \n         description = \"AWS secret access key\" \n         default = \"\"                          # Secret key \n      } \n\n      variable \"aws_region\" { \n          description = \"AWS region to launch servers.\" \n          default = \"us-east-1\" \n      } \n\n```", "```py\n      # Create a VPC to launch our instances into \n        resource \"aws_vpc\" \"default\" { \n          cidr_block = \"${var.vpc_cidr}\" \n          enable_dns_hostnames = true \n          tags { \n            Name = \"ms-cloud-native-app\" \n          } \n      } \n\n```", "```py\n       variable \"vpc_cidr\"{ \n          default = \"10.127.0.0/16\"             # user defined \n       } \n\n```", "```py\n        # Create a subnet to launch our instances into \n        resource \"aws_subnet\" \"default\" { \n          vpc_id                  = \"${aws_vpc.default.id}\" \n          cidr_block              = \"${var.subnet_cidr}\" \n          map_public_ip_on_launch = true \n        } \n\n      Now, define the variable we have used in above code in \n      variables.tf \n      variable \"subnet_cidr\"{ \n       default = \"10.127.0.0/24\" \n      } \n\n```", "```py\n     # Create an internet gateway to give our subnet access to the\n     outside world \n     resource \"aws_internet_gateway\" \"default\" { \n     vpc_id = \"${aws_vpc.default.id}\" \n      } \n\n     # Grant the VPC internet access on its main route table \n     resource \"aws_route\" \"internet_access\" { \n     route_table_id         = \"${aws_vpc.default.main_route_table_id}\" \n     destination_cidr_block = \"0.0.0.0/0\" \n     gateway_id             = \"${aws_internet_gateway.default.id}\" \n\n```", "```py\n     # Create a subnet to launch our instances into \n     resource \"aws_subnet\" \"default\" { \n       vpc_id                  = \"${aws_vpc.default.id}\" \n       cidr_block              = \"${var.subnet_cidr}\" \n       map_public_ip_on_launch = true \n     } \n\n```", "```py\n    # the instances over SSH and HTTP \n    resource \"aws_security_group\" \"default\" { \n    name        = \"cna-sg-ec2\" \n    description = \"Security group of app servers\" \n    vpc_id      = \"${aws_vpc.default.id}\" \n\n    # SSH access from anywhere \n    ingress { \n     from_port   = 22 \n     to_port     = 22 \n     protocol    = \"tcp\" \n     cidr_blocks = [\"0.0.0.0/0\"] \n    } \n\n    # HTTP access from the VPC \n    ingress { \n      from_port   = 5000 \n      to_port     = 5000 \n      protocol    = \"tcp\" \n      cidr_blocks = [\"${var.vpc_cidr}\"] \n     } \n\n     # outbound internet access \n     egress { \n      from_port   = 0 \n      to_port     = 0 \n      protocol    = \"-1\" \n      cidr_blocks = [\"0.0.0.0/0\"] \n    } \n   } \n\n```", "```py\n   resource \"aws_key_pair\" \"auth\" { \n     key_name   = \"${var.key_name}\" \n      public_key = \"${file(var.public_key_path)}\" \n   }   \n\n```", "```py\n    variable \"public_key_path\" { \n      default = \"ms-cna.pub\" \n    } \n\n```", "```py\n    resource \"aws_instance\" \"web\" { \n     # The connection block tells our provisioner how to \n     # communicate with the resource (instance) \n      connection { \n       # The default username for our AMI \n        user = \"ubuntu\" \n        key_file = \"${var.key_file_path}\" \n        timeout = \"5m\" \n      } \n     # Tags for machine \n     tags {Name = \"cna-web\"} \n     instance_type = \"t2.micro\" \n     # Number of EC2 to spin up \n      count = \"1\" \n      ami = \"${lookup(var.aws_amis, var.aws_region)}\" \n      iam_instance_profile = \"CodeDeploy-Instance-Role\" \n      # The name of our SSH keypair we created above. \n      key_name = \"${aws_key_pair.auth.id}\" \n\n     # Our Security group to allow HTTP and SSH access \n     vpc_security_group_ids = [\"${aws_security_group.default.id}\"] \n     subnet_id = \"${aws_subnet.default.id}\" \n    } \n\n```", "```py\n    variable \"key_name\" { \n      description = \"Desired name of AWS key pair\" \n      default = \"ms-cna\" \n    } \n\n   variable \"key_file_path\" { \n      description = \"Private Key Location\" \n      default = \"~/.ssh/ms-cna\" \n   } \n\n    # Ubuntu Precise 12.04 LTS (x64) \n     variable \"aws_amis\" { \n       default = { \n        eu-west-1 = \"ami-b1cf19c6\" \n        us-east-1 = \"ami-0a92db1d\" \n        #us-east-1 = \"ami-e881c6ff\" \n        us-west-1 = \"ami-3f75767a\" \n        us-west-2 = \"ami-21f78e11\" \n     } \n   } \n\n```", "```py\n    resource \"aws_security_group\" \"mongodb\" { \n     name        = \"cna-sg-mongodb\" \n     description = \"Security group of mongodb server\" \n     vpc_id      = \"${aws_vpc.default.id}\" \n\n    # SSH access from anywhere \n    ingress { \n      from_port   = 22 \n      to_port     = 22 \n      protocol    = \"tcp\" \n      cidr_blocks = [\"0.0.0.0/0\"] \n     } \n\n    # HTTP access from the VPC \n    ingress { \n      from_port   = 27017 \n      to_port     = 27017 \n      protocol    = \"tcp\" \n      cidr_blocks = [\"${var.vpc_cidr}\"] \n     } \n    # HTTP access from the VPC \n     ingress { \n      from_port   = 28017 \n      to_port     = 28017 \n      protocol    = \"tcp\" \n      cidr_blocks = [\"${var.vpc_cidr}\"] \n      } \n\n    # outbound internet access \n    egress { \n      from_port   = 0 \n      to_port     = 0 \n      protocol    = \"-1\" \n      cidr_blocks = [\"0.0.0.0/0\"] \n     } \n   } \n\n```", "```py\n    resource \"aws_instance\" \"mongodb\" { \n    # The connection block tells our provisioner how to \n    # communicate with the resource (instance) \n    connection { \n     # The default username for our AMI \n     user = \"ubuntu\" \n     private_key = \"${file(var.key_file_path)}\" \n     timeout = \"5m\" \n     # The connection will use the local SSH agent for authentication. \n     } \n    # Tags for machine \n    tags {Name = \"cna-web-mongodb\"} \n    instance_type = \"t2.micro\" \n    # Number of EC2 to spin up \n    count = \"1\" \n    # Lookup the correct AMI based on the region \n    # we specified \n    ami = \"${lookup(var.aws_amis, var.aws_region)}\" \n    iam_instance_profile = \"CodeDeploy-Instance-Role\" \n    # The name of our SSH keypair we created above. \n     key_name = \"${aws_key_pair.auth.id}\" \n\n     # Our Security group to allow HTTP and SSH access \n     vpc_security_group_ids = [\"${aws_security_group.mongodb.id}\"] \n\n     subnet_id = \"${aws_subnet.default.id}\" \n     provisioner \"remote-exec\" { \n      inline = [ \n        \"sudo echo -ne '\\n' | apt-key adv --keyserver \n         hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10\", \n       \"echo 'deb http://repo.mongodb.org/apt/ubuntu trusty/mongodb- \n        org/3.2 multiverse' | sudo tee /etc/apt/sources.list.d/mongodb-\n         org-3.2.list\", \n       \"sudo apt-get update -y && sudo apt-get install mongodb-org --\n       force-yes -y\", \n       ] \n     } \n   } \n\n```", "```py\n    # A security group for the ELB so it is accessible via the web \n     resource \"aws_security_group\" \"elb\" { \n     name        = \"cna_sg_elb\" \n     description = \"Security_group_elb\" \n     vpc_id      = \"${aws_vpc.default.id}\" \n\n    # HTTP access from anywhere \n    ingress { \n      from_port   = 5000 \n      to_port     = 5000 \n      protocol    = \"tcp\" \n      cidr_blocks = [\"0.0.0.0/0\"] \n     } \n\n    # outbound internet access \n    egress { \n      from_port   = 0 \n      to_port     = 0 \n      protocol    = \"-1\" \n      cidr_blocks = [\"0.0.0.0/0\"] \n     } \n\n```", "```py\n    resource \"aws_elb\" \"web\" { \n    name = \"cna-elb\" \n\n     subnets         = [\"${aws_subnet.default.id}\"] \n     security_groups = [\"${aws_security_group.elb.id}\"] \n     instances       = [\"${aws_instance.web.*.id}\"] \n     listener { \n       instance_port = 5000 \n       instance_protocol = \"http\" \n       lb_port = 80 \n       lb_protocol = \"http\" \n      } \n     } \n\n```", "```py\n$ terraform plan\n\n```", "```py\n$ terraform apply\n\n```", "```py\n    resource \"aws_route53_record\" \"www\" { \n      zone_id = \"${var.zone_id}\" \n      name = \"www.domain.com\" \n      type = \"A\" \n      alias { \n       name = \"${aws_elb.web.dns_name}\" \n       zone_id = \"${aws_elb.web.zone_id}\" \n       evaluate_target_health = true \n      } \n    } \n\n```", "```py\n\"Resources\" : { \n\n   \"VPC\" : { \n     \"Type\" : \"AWS::EC2::VPC\", \n     \"Properties\" : { \n       \"CidrBlock\" : \"172.31.0.0/16\", \n       \"Tags\" : [ \n         {\"Key\" : \"Application\", \"Value\" : { \"Ref\" : \"AWS::StackName\"} }, \n         {\"Key\" : \"Network\", \"Value\" : \"Public\" } \n       ] \n     } \n   }, \n\"PublicSubnet\" : { \n     \"Type\" : \"AWS::EC2::Subnet\", \n     \"Properties\" : { \n       \"VpcId\" : { \"Ref\" : \"VPC\" }, \n       \"CidrBlock\" : \"172.31.16.0/20\", \n       \"AvailabilityZone\" : { \"Fn::Select\": [ \"0\", {\"Fn::GetAZs\": {\"Ref\": \"AWS::Region\"}} ]}, \n       \"Tags\" : [ \n         {\"Key\" : \"Application\", \"Value\" : { \"Ref\" : \"AWS::StackName\"} }, \n         {\"Key\" : \"Network\", \"Value\" : \"Public\" } \n       ] \n     } \n   }, \n   \"PrivateSubnet\" : { \n     \"Type\" : \"AWS::EC2::Subnet\", \n     \"Properties\" : { \n       \"VpcId\" : { \"Ref\" : \"VPC\" }, \n       \"CidrBlock\" : \"172.31.0.0/20\", \n       \"AvailabilityZone\" : { \"Fn::Select\": [ \"0\", {\"Fn::GetAZs\": {\"Ref\": \"AWS::Region\"}} ]}, \n       \"Tags\" : [ \n         {\"Key\" : \"Application\", \"Value\" : { \"Ref\" : \"AWS::StackName\"} }, \n         {\"Key\" : \"Network\", \"Value\" : \"Public\" } \n       ] \n     } \n   }, \n\n```", "```py\n\"PublicRouteTable\" : { \n     \"Type\" : \"AWS::EC2::RouteTable\", \n     \"Properties\" : { \n       \"VpcId\" : {\"Ref\" : \"VPC\"}, \n       \"Tags\" : [ \n         {\"Key\" : \"Application\", \"Value\" : { \"Ref\" : \"AWS::StackName\"} }, \n         {\"Key\" : \"Network\", \"Value\" : \"Public\" } \n       ] \n     } \n   }, \n\n   \"PublicRoute\" : { \n     \"Type\" : \"AWS::EC2::Route\", \n     \"Properties\" : { \n       \"RouteTableId\" : { \"Ref\" : \"PublicRouteTable\" }, \n       \"DestinationCidrBlock\" : \"0.0.0.0/0\", \n       \"GatewayId\" : { \"Ref\" : \"InternetGateway\" } \n     } \n   }, \n\n   \"PublicSubnetRouteTableAssociation\" : { \n     \"Type\" : \"AWS::EC2::SubnetRouteTableAssociation\", \n     \"Properties\" : { \n       \"SubnetId\" : { \"Ref\" : \"PublicSubnet\" }, \n       \"RouteTableId\" : { \"Ref\" : \"PublicRouteTable\" } \n     } \n   } \n }, \n\n```"]