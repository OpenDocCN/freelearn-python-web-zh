["```py\n$ sudo apt-get install python-software-properties\n$ curl -sL https://deb.nodesource.com/setup_7.x | sudo -E bash -\n\n```", "```py\n$ apt-get install nodejs \n\n```", "```py\n$ npm -v\n 4.1.2 \n$ node -v\n  V7.7.4 \n\n```", "```py\n    \"Name\" - lowercase.\n    \"version\"  - in the form of x.x.x\n\n    For example:\n\n    {\n      \"name\": \"my-twitter-package\",\n      \"version\": \"1.0.0\"\n    } \n\n```", "```py\n$ npm init              # in your workspace  \n\n```", "```py\n$npm init --yes\n\n```", "```py\n    { \n      \"name\": \"twitter\", \n      \"version\": \"1.0.0\", \n      \"description\": \"Twitter App\", \n      \"main\": \"index.js\", \n      \"dependencies\": { \n        \"babel-loader\": \"^6.4.1\", \n        \"fbjs\": \"^0.8.11\", \n        \"object-assign\": \"^4.1.1\", \n        \"react\": \"^15.4.2\", \n        \"react-dev\": \"0.0.1\", \n        \"react-dom\": \"^0.14.7\", \n        \"requirejs\": \"^2.3.3\" \n      }, \n     \"devDependencies\": { \n       \"babel-core\": \"^6.4.5\", \n       \"babel-loader\": \"^6.2.1\", \n       \"babel-preset-es2015\": \"^6.3.13\", \n       \"babel-preset-react\": \"^6.3.13\", \n       \"webpack\": \"^1.12.12\" \n      }, \n    \"scripts\": { \n      \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\" \n     }, \n    \"author\": \"Manish Sethi\", \n    \"license\": \"ISC\" \n   } \n\n```", "```py\n$ npm install \n\n```", "```py\n    <!DOCTYPE html> \n    <html> \n     <head lang=\"en\"> \n      <meta charset=\"UTF-8\"> \n      <title>Flask react</title> \n    </head> \n   <body> \n     <div class=\"container\"> \n       <h1></h1> \n       <br> \n       <div id=\"react\"></div> \n\n    </div> \n\n   <!-- scripts --> \n    <script src=\"img/jquery-2.1.1.min.js\"></script> \n    <script src=\"img/\n      react/15.1.0/react.min.js\"></script> \n    <script src=\"img/react-\n      router@2.8.1/umd/ReactRouter.min.js\"></script> \n    <script src=\"img/\n      libs/react/15.1.0/react-dom.min.js\"></script> \n    <script src=\"img/\n      react/0.13.3/JSXTransformer.js\"></script> \n\n    </body> \n   </html> \n\n```", "```py\n    import Tweet from \"./components/Tweet\"; \n    class Main extends React.Component{ \n    render(){ \n      return ( \n      <div> \n        <h1>Welcome to cloud-native-app!</h1> \n      </div> \n      ); \n    } \n   } \n\n   let documentReady =() =>{ \n    ReactDOM.render( \n    <Main />, \n     document.getElementById('react') \n    ); \n  }; \n\n  $(documentReady); \n\n```", "```py\n    module.exports = { \n      entry: \"./static/main.js\", \n      output: { \n        path: __dirname + \"/static/build/\", \n        filename: \"bundle.js\" \n      }, \n     resolve: { \n       extensions: ['', '.js', '.jsx'] \n     }, \n     module: { \n        loaders: [ \n            { test: /\\.js$/, exclude: /node_modules/, loader: \"babel-\n        loader\", query:{presets:['react','es2015']} } \n        ] \n     } \n   }; \n\n```", "```py\n$ webpack -d  \n\n```", "```py\n$ webpack -d -w\n\n```", "```py\n    @app.route('/index') \n    def index(): \n     return render_template('index.html') \n\n```", "```py\n    export default class Tweet extends React.Component { \n\n    render(){ \n     return( \n        <div className=\"row\"> \n                </nav> \n        <form > \n          <div > \n            <textarea ref=\"tweetTextArea\" /> \n            <label>How you doing?</label> \n              <button >Tweet now</button> \n          </div> \n         </form> \n        </div> \n        ); \n      } \n   } \n\n```", "```py\n    import Tweet from \"./components/Tweet\"; \n    render(){ \n      return ( \n      <div> \n        <Tweet /> \n      </div> \n     ); \n    } \n\n```", "```py\n    <link rel=\"stylesheet\"  \n      href=\"https://cdnjs.cloudflare.com/ajax/libs/\n      materialize/0.98.1/css/materialize.min.css\"> \n   <script src=\"img/\n     materialize/0.98.1/js/materialize.min.js\"></script> \n\n   Also, we need to update Tweet.js as follows \n\n   render(){ \n    return( \n        <div className=\"row\"> \n         <form > \n          <div className=\"input-field\"> \n            <textarea ref=\"tweetTextArea\" className=\"materialize-\n             textarea\" /> \n            <label>How you doing?</label> \n              <button className=\"btn waves-effect waves-light\n               right\">Tweet now <i className=\"material-icons \n               right\">send</i></button> \n          </div> \n         </form> \n       </div> \n      ); \n    } \n\n```", "```py\n    constructor(props){ \n     super(props); \n     this.state =  { userId: cookie.load('session') }; \n     this.state={tweets:[{'id': 1, 'name': 'guest', 'body': '\"Listen to \n     your heart. It knows all things.\" - Paulo Coelho #Motivation' }]} \n    } \n\n```", "```py\n    render(){ \n      return ( \n      <div> \n         <TweetList tweets={this.state.tweets}/> \n      </div> \n      ); \n     } \n    } \n\n```", "```py\n    export default class TweetList extends React.Component { \n     render(){ \n        return( \n        <div> \n          <ul className=\"collection\"> \n           <li className=\"collection-item avatar\"> \n           <i className=\"material-icons circle red\">play_arrow</i> \n           <span className=\"title\">{this.props.tweetedby}</span> \n          <p>{this.props.body}</p> \n          <p>{this.props.timestamp}</p> \n          </li> \n         </ul> \n        </div> \n       ); \n      } \n     } \n\n```", "```py\n    <script type=\"text/javascript\" src=\"img/bundle.js\">\n     </script> \n\n```", "```py\n    sendTweet(event){ \n      event.preventDefault(); \n      this.props.sendTweet(this.refs.tweetTextArea.value); \n      this.refs.tweetTextArea.value = ''; \n     } \n\n```", "```py\n    <form onSubmit={this.sendTweet.bind(this)}> \n\n```", "```py\n    <Tweet sendTweet={this.addTweet.bind(this)}/> \n\n```", "```py\n    addTweet(tweet): \n     let newTweet = this.state.tweets; \n     newTweet.unshift({{'id': Date.now(), 'name': 'guest','body':\n      tweet}) \n     this.setState({tweets: newTweet}) \n\n```", "```py\nmain.js to pull our entire tweet list:\n```", "```py\n    componentDidMount() { \n      var self=this; \n      $.ajax({url: `/api/v2/tweets/`, \n      success: function(data) { \n        self.setState({tweets: data['tweets_list']}); \n        alert(self.state.tweets); \n        return console.log(\"success\"); \n       }, \n     error: function() { \n      return console.log(\"Failed\"); \n      } \n    }); \n\n```", "```py\n   addTweet(tweet){ \n     var self = this; \n     $.ajax({ \n       url: '/api/v2/tweets/', \n       contentType: 'application/json', \n       type: 'POST', \n       data: JSON.stringify({ \n         'username': \"Agnsur\", \n      'body': tweet, \n       }), \n       success: function(data) { \n            return console.log(\"success\"); \n       }, \n       error: function() { \n         return console.log(\"Failed\"); \n       } \n     }); \n    } \n\n```", "```py\n    export default class Tweettemplate extends React.Component { \n     render(props){ \n      return( \n      <li className=\"collection-item avatar\"> \n        <i className=\"material-icons circle red\">play_arrow</i> \n        <span className=\"title\">{this.props.tweetedby}</span> \n        <p>{this.props.body}</p> \n        <p>{this.props.timestamp}</p> \n      </li> \n\n      ); \n     } \n    } \n\n```", "```py\n    import Tweettemplate from './templatetweet' \n\n    export default class TweetList extends React.Component { \n    render(){ \n     let tweetlist = this.props.tweets.map(tweet => <Tweettemplate key=\n     {tweet.id} {...tweet} />); \n    return( \n        <div> \n          <ul className=\"collection\"> \n            {tweetlist} \n          </ul> \n        </div> \n      ); \n     } \n    } \n\n```", "```py\n    <form action=\"/login\" method=\"POST\"> \n     <div class=\"login\"> \n     <div class=\"login-screen\"> \n     <div class=\"app-title\"> \n      <h1>Login</h1> \n     </div> \n\n     <div class=\"login-form\"> \n     <div class=\"control-group\"> \n\n      <input type=\"text\" class=\"login-field\" value=\"\" \n       placeholder=\"username\" name=\"username\"> \n      <label class=\"login-field-icon fui-user\" for=\"login-name\">\n      </label> \n     </div> \n\n    <div class=\"control-group\"> \n      <input type=\"password\" class=\"login-field\" value=\"\"\n       placeholder=\"password\" name=\"password\"> \n      <label class=\"login-field-icon fui-lock\" for=\"login-pass\">\n      </label> \n    </div> \n     <input type=\"submit\" value=\"Log in\" class=\"btn btn-primary btn-\n     large btn-block\" ><br> \n     Don't have an account? <a href=\"{{ url_for('signup') }}\">Sign up\n     here</a>. \n   </div> \n\n```", "```py\n   @app.route('/') \n   def home(): \n     if not session.get('logged_in'): \n        return render_template('login.html') \n     else: \n        return render_template('index.html', session =   \n     session['username']) \n\n```", "```py\n    @app.route('/login', methods=['POST']) \n    def do_admin_login(): \n      users = mongo.db.users \n      api_list=[] \n      login_user = users.find({'username': request.form['username']}) \n      for i in login_user: \n        api_list.append(i) \n      print (api_list) \n      if api_list != []: \n         if api_list[0]['password'].decode('utf-8') == \n         bcrypt.hashpw(request.form['password'].encode('utf-8'), \n         api_list[0]['password']).decode('utf-8'): \n            session['logged_in'] = api_list[0]['username'] \n            return redirect(url_for('index')) \n        return 'Invalid username/password!' \n      else: \n        flash(\"Invalid Authentication\") \n\n    return 'Invalid User!' \n\n```", "```py\n     <div class=\"container\"> \n      <div class=\"row\"> \n        <center><h2>Sign up</h2></center> \n          <div class=\"col-md-4 col-md-offset-4\"> \n              <form method=POST action=\"{{ url_for('signup') }}\"> \n                  <div class=\"form-group\"> \n                      <label >Username</label> \n                      <input type=\"text\" class=\"form-control\"\n                        name=\"username\" placeholder=\"Username\"> \n                  </div> \n                  <div class=\"form-group\"> \n                      <label >Password</label> \n                      <input type=\"password\" class=\"form-control\" \n                      name=\"pass\" placeholder=\"Password\"> \n                  </div> \n                  <div class=\"form-group\"> \n                      <label >Email</label> \n                      <input type=\"email\" class=\"form-control\" \n                     name=\"email\" placeholder=\"email\"> \n                  </div> \n                  <div class=\"form-group\"> \n                      <label >Full Name</label> \n                      <input type=\"text\" class=\"form-control\" \n                      name=\"name\" placeholder=\"name\"> \n                  </div> \n                  <button type=\"submit\" class=\"btn btn-primary btn-\n                     block\">Signup</button> \n               </form> \n               <br> \n            </div> \n          </div> \n      </div> \n\n```", "```py\napp.py:\n```", "```py\n    @app.route('/signup', methods=['GET', 'POST']) \n    def signup(): \n      if request.method=='POST': \n        users = mongo.db.users \n        api_list=[] \n        existing_user = users.find({'$or':  \n        [{\"username\":request.form['username']} ,\n         {\"email\":request.form['email']}]}) \n            for i in existing_user: \n              api_list.append(str(i)) \n            if api_list == []: \n              users.insert({ \n              \"email\": request.form['email'], \n              \"id\": random.randint(1,1000), \n              \"name\": request.form['name'], \n              \"password\": bcrypt.hashpw(request.form['pass'].\n                encode('utf-8'), bcrypt.gensalt()), \n              \"username\": request.form['username'] \n            }) \n            session['username'] = request.form['username'] \n            return redirect(url_for('home')) \n\n          return 'That user already exists' \n      else : \n        return render_template('signup.html') \n\n```", "```py\n     <div class=\"container\"> \n      <div class=\"row\"> \n        <center><h2>Profile</h2></center> \n          <div class=\"col-md-4 col-md-offset-4\"> \n              <form method=POST action=\"{{ url_for('profile') }}\"> \n                  <div class=\"form-group\"> \n                      <label >Username</label> \n                      <input type=\"text\" class=\"form-control\"\n                       name=\"username\" value='{{username}}'> \n                  </div> \n                  <div class=\"form-group\"> \n                      <label >Password</label> \n                      <input type=\"password\" class=\"form-control\"\n                      name=\"pass\" value='{{password}}'> \n                  </div> \n                  <div class=\"form-group\"> \n                      <label >Email</label> \n                      <input type=\"email\" class=\"form-control\" \n                      name=\"email\" value={{email}}> \n                  </div> \n                  <div class=\"form-group\"> \n                      <label >Full Name</label> \n                      <input type=\"text\" class=\"form-control\" \n                      name=\"name\" value={{name}}> \n                  </div> \n                  <button type=\"submit\" class=\"btn btn-primary btn-\n                   block\">Update</button> \n                </form> \n              <br> \n           </div> \n       </div> \n     </div> \n\n```", "```py\napp.py:\n```", "```py\n    def profile(): \n       if request.method=='POST': \n         users = mongo.db.users \n         api_list=[] \n         existing_users = users.find({\"username\":session['username']}) \n         for i in existing_users: \n            api_list.append(str(i)) \n         user = {} \n         print (api_list) \n         if api_list != []: \n            print (request.form['email']) \n            user['email']=request.form['email'] \n            user['name']= request.form['name'] \n            user['password']=request.form['pass'] \n            users.update({'username':session['username']},{'$set':\n          user} ) \n        else: \n            return 'User not found!' \n        return redirect(url_for('index')) \n      if request.method=='GET': \n        users = mongo.db.users \n        user=[] \n        print (session['username']) \n        existing_user = users.find({\"username\":session['username']}) \n        for i in existing_user: \n            user.append(i) \n        return render_template('profile.html', name=user[0]['name'], \n        username=user[0]['username'], password=user[0]['password'], \n        email=user[0]['email']) \n\n```", "```py\n      <li><a href=\"/profile\">Profile</a></li> \n      <li><a href=\"/logout\">Logout</a></li> \n\n```", "```py\napp.py:\n```", "```py\n    @app.route(\"/logout\") \n    def logout(): \n      session['logged_in'] = False \n      return redirect(url_for('home')) \n\n```"]