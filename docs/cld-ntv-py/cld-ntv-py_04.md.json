["```py\n    {  \n       _id : ObjectId(58ccdd1a19b08311417b14ee),  \n       body : 'New blog post,Launch your app with the AWS Startup Kit!  \n       #AWS', \n       timestamp : \"2017-03-11T06:39:40Z\", \n       id : 18, \n       tweetedby : \"eric.strom\" \n   } \n\n```", "```py\n$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927\n\n```", "```py\n$ echo \"deb http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.2 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.2.list\n\n```", "```py\n$ sudo apt-get update  \n\n```", "```py\n$ sudo apt-get install -y mongodb-org\n\n```", "```py\n$ sudo service mongodb status\n\n```", "```py\n$ sudo service mongodb start\n\n```", "```py\n$echo \"pymongo==3.4.0\" >> requirements.txt\n$ pip install -r requirements.txt\n\n```", "```py\nfrom pymongo import MongoClient\n\n```", "```py\n    connection = MongoClient(\"mongodb://localhost:27017/\") \n    def create_mongodatabase(): \n    try: \n       dbnames = connection.database_names() \n       if 'cloud_native' not in dbnames: \n           db = connection.cloud_native.users \n           db_tweets = connection.cloud_native.tweets \n           db_api = connection.cloud_native.apirelease \n\n           db.insert({ \n           \"email\": \"eric.strom@google.com\", \n           \"id\": 33, \n           \"name\": \"Eric stromberg\", \n           \"password\": \"eric@123\", \n           \"username\": \"eric.strom\" \n           }) \n\n           db_tweets.insert({ \n           \"body\": \"New blog post,Launch your app with the AWS Startup\n           Kit! #AWS\", \n           \"id\": 18, \n           \"timestamp\": \"2017-03-11T06:39:40Z\", \n           \"tweetedby\": \"eric.strom\" \n           }) \n\n           db_api.insert( { \n             \"buildtime\": \"2017-01-01 10:00:00\", \n             \"links\": \"/api/v1/users\", \n             \"methods\": \"get, post, put, delete\", \n             \"version\": \"v1\" \n           }) \n           db_api.insert( { \n             \"buildtime\": \"2017-02-11 10:00:00\", \n             \"links\": \"api/v2/tweets\", \n             \"methods\": \"get, post\", \n             \"version\": \"2017-01-10 10:00:00\" \n           }) \n           print (\"Database Initialize completed!\") \n       else: \n           print (\"Database already Initialized!\")\n       except: \n           print (\"Database creation failed!!\") \n\n```", "```py\n   if __name__ == '__main__': \n     create_mongodatabase() \n     app.run(host='0.0.0.0', port=5000, debug=True) \n\n```", "```py\n    @app.route(\"/api/v1/info\") \n    def home_index(): \n     api_list=[] \n     db = connection.cloud_native.apirelease \n     for row in db.find(): \n       api_list.append(str(row)) \n     return jsonify({'api_version': api_list}), 200 \n\n```", "```py\n    def list_users(): \n     api_list=[] \n     db = connection.cloud_native.users \n     for row in db.find(): \n       api_list.append(str(row)) \n     return jsonify({'user_list': api_list}) \n\n```", "```py\n    def list_user(user_id): \n     api_list=[] \n     db = connection.cloud_native.users \n     for i in db.find({'id':user_id}): \n       api_list.append(str(i)) \n\n     if api_list == []: \n       abort(404) \n     return jsonify({'user_details':api_list} \n\n```", "```py\n    def add_user(new_user): \n     api_list=[] \n     print (new_user) \n     db = connection.cloud_native.users \n     user = db.find({'$or':[{\"username\":new_user['username']}     ,  \n    {\"email\":new_user['email']}]}) \n     for i in user: \n       print (str(i)) \n       api_list.append(str(i)) \n\n     if api_list == []: \n       db.insert(new_user) \n       return \"Success\" \n     else : \n       abort(409) \n\n```", "```py\n    def create_user(): \n     if not request.json or not 'username' in request.json or not \n    'email' in request.json or not 'password' in request.json: \n       abort(400) \n     user = { \n       'username': request.json['username'], \n       'email': request.json['email'], \n       'name': request.json.get('name',\"\"), \n       'password': request.json['password'], \n       'id': random.randint(1,1000) \n     } \n\n```", "```py\n    def upd_user(user): \n     api_list=[] \n     print (user) \n     db_user = connection.cloud_native.users \n     users = db_user.find_one({\"id\":user['id']}) \n     for i in users: \n       api_list.append(str(i)) \n      if api_list == []: \n       abort(409) \n      else: \n       db_user.update({'id':user['id']},{'$set': user}, upsert=False ) \n       return \"Success\" \n\n```", "```py\n    def del_user(del_user): \n     db = connection.cloud_native.users \n    api_list = [] \n    for i in db.find({'username':del_user}): \n       api_list.append(str(i)) \n\n     if api_list == []: \n       abort(404) \n    else: \n      db.remove({\"username\":del_user}) \n      return \"Success\" \n\n```", "```py\ndef list_tweets(): \n   api_list=[] \n   db = connection.cloud_native.tweet \n   for row in db.find(): \n       api_list.append(str(row)) \n   return jsonify({'tweets_list': api_list}) \n\n```", "```py\n    def list_tweet(user_id): \n     db = connection.cloud_native.tweets \n     api_list=[] \n     tweet = db.find({'id':user_id}) \n     for i in tweet: \n       api_list.append(str(i)) \n    if api_list == []: \n       abort(404) \n    return jsonify({'tweet': api_list}) \n\n```", "```py\n    def add_tweet(new_tweet): \n     api_list=[] \n     print (new_tweet) \n     db_user = connection.cloud_native.users \n     db_tweet = connection.cloud_native.tweets \n     user = db_user.find({\"username\":new_tweet['tweetedby']}) \n     for i in user: \n       api_list.append(str(i)) \n     if api_list == []: \n      abort(404) \n     else: \n       db_tweet.insert(new_tweet) \n       return \"Success\" \n\n```"]