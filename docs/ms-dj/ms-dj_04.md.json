["```py\nfrom django.shortcuts import render \nimport MySQLdb \n\ndef book_list(request): \n    db = MySQLdb.connect(user='me', db='mydb',  passwd='secret', host='localhost') \n    cursor = db.cursor() \n    cursor.execute('SELECT name FROM books ORDER BY name') \n    names = [row[0] for row in cursor.fetchall()] \n    db.close() \n    return render(request, 'book_list.html', {'names': names}) \n\n```", "```py\n# Database \n#  \nDATABASES = { \n    'default': { \n        'ENGINE': 'django.db.backends.sqlite3', \n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'), \n    } \n} \n\n```", "```py\npython manage.py startapp books\n\n```", "```py\nbooks/ \n    /migrations \n    __init__.py \n    admin.py \n    models.py \n    tests.py \n    views.py \n\n```", "```py\nfrom django.db import models \n\nclass Publisher(models.Model): \n    name = models.CharField(max_length=30) \n    address = models.CharField(max_length=50) \n    city = models.CharField(max_length=60) \n    state_province = models.CharField(max_length=30) \n    country = models.CharField(max_length=50) \n    website = models.URLField() \n\nclass Author(models.Model): \n    first_name = models.CharField(max_length=30) \n    last_name = models.CharField(max_length=40) \n    email = models.EmailField() \n\nclass Book(models.Model): \n    title = models.CharField(max_length=100) \n    authors = models.ManyToManyField(Author) \n    publisher = models.ForeignKey(Publisher) \n    publication_date = models.DateField() \n\n```", "```py\nCREATE TABLE \"books_publisher\" ( \n    \"id\" serial NOT NULL PRIMARY KEY, \n    \"name\" varchar(30) NOT NULL, \n    \"address\" varchar(50) NOT NULL, \n    \"city\" varchar(60) NOT NULL, \n    \"state_province\" varchar(30) NOT NULL, \n    \"country\" varchar(50) NOT NULL, \n    \"website\" varchar(200) NOT NULL \n); \n\n```", "```py\nINSTALLED_APPS = ( \n'django.contrib.admin', \n'django.contrib.auth', \n'django.contrib.contenttypes', \n'django.contrib.sessions', \n'django.contrib.messages', \n'django.contrib.staticfiles', \n) \n\n```", "```py\nINSTALLED_APPS = ( \n'django.contrib.admin', \n'django.contrib.auth', \n'django.contrib.contenttypes', \n'django.contrib.sessions', \n'django.contrib.messages', \n'django.contrib.staticfiles', \n'books', \n) \n\n```", "```py\npython manage.py check\n\n```", "```py\npython manage.py makemigrations books \n\n```", "```py\nMigrations for 'books': \n  0001_initial.py: \n   -Create model Author \n   -Create model Book \n   -Create model Publisher \n   -Add field publisher to book \n\n```", "```py\npython manage.py sqlmigrate books 0001\n\n```", "```py\nBEGIN; \n\nCREATE TABLE \"books_author\" ( \n    \"id\" integer NOT NULL PRIMARY KEY AUTOINCREMENT, \n    \"first_name\" varchar(30) NOT NULL, \n    \"last_name\" varchar(40) NOT NULL, \n    \"email\" varchar(254) NOT NULL \n); \nCREATE TABLE \"books_book\" ( \n    \"id\" integer NOT NULL PRIMARY KEY AUTOINCREMENT, \n    \"title\" varchar(100) NOT NULL, \n    \"publication_date\" date NOT NULL \n); \nCREATE TABLE \"books_book_authors\" ( \n    \"id\" integer NOT NULL PRIMARY KEY AUTOINCREMENT, \n    \"book_id\" integer NOT NULL REFERENCES \"books_book\" (\"id\"), \n    \"author_id\" integer NOT NULL REFERENCES \"books_author\" (\"id\"), \n    UNIQUE (\"book_id\", \"author_id\") \n); \nCREATE TABLE \"books_publisher\" ( \n    \"id\" integer NOT NULL PRIMARY KEY AUTOINCREMENT, \n    \"name\" varchar(30) NOT NULL, \n    \"address\" varchar(50) NOT NULL, \n    \"city\" varchar(60) NOT NULL, \n    \"state_province\" varchar(30) NOT NULL, \n    \"country\" varchar(50) NOT NULL, \n    \"website\" varchar(200) NOT NULL \n); \nCREATE TABLE \"books_book__new\" ( \n    \"id\" integer NOT NULL PRIMARY KEY AUTOINCREMENT, \n    \"title\" varchar(100) NOT NULL, \n    \"publication_date\" date NOT NULL, \n    \"publisher_id\" integer NOT NULL REFERENCES \n    \"books_publisher\" (\"id\") \n); \n\nINSERT INTO \"books_book__new\" (\"id\", \"publisher_id\", \"title\", \n\"publication_date\") SELECT \"id\", NULL, \"title\", \"publication_date\" FROM \n\"books_book\"; \n\nDROP TABLE \"books_book\"; \n\nALTER TABLE \"books_book__new\" RENAME TO \"books_book\"; \n\nCREATE INDEX \"books_book_2604cbea\" ON \"books_book\" (\"publisher_id\"); \n\nCOMMIT; \n\n```", "```py\npython manage.py migrate\n\n```", "```py\nOperations to perform:\n Apply all migrations: books\nRunning migrations:\n Rendering model states... DONE\n # ...\n Applying books.0001_initial... OK\n # ...\n\n```", "```py\n>>> from books.models import Publisher \n>>> p1 = Publisher(name='Apress', address='2855 Telegraph Avenue', \n...     city='Berkeley', state_province='CA', country='U.S.A.', \n...     website='http://www.apress.com/') \n>>> p1.save() \n>>> p2 = Publisher(name=\"O'Reilly\", address='10 Fawcett St.', \n...     city='Cambridge', state_province='MA', country='U.S.A.', \n...     website='http://www.oreilly.com/') \n>>> p2.save() \n>>> publisher_list = Publisher.objects.all() \n>>> publisher_list \n[<Publisher: Publisher object>, <Publisher: Publisher object>] \n\n```", "```py\np1 = Publisher(...) \n# At this point, p1 is not saved to the database yet! \np1.save() \n# Now it is. \n\n```", "```py\n>>> p1 = Publisher.objects.create(name='Apress', \n...     address='2855 Telegraph Avenue', \n...     city='Berkeley', state_province='CA', country='U.S.A.', \n...     website='http://www.apress.com/') \n>>> p2 = Publisher.objects.create(name=\"O'Reilly\", \n...     address='10 Fawcett St.', city='Cambridge', \n...     state_province='MA', country='U.S.A.', \n...     website='http://www.oreilly.com/') \n>>> publisher_list = Publisher.objects.all() \n>>> publisher_list \n[<Publisher: Publisher object>, <Publisher: Publisher object>] \n\n```", "```py\n[<Publisher: Publisher object>, <Publisher: Publisher object>] \n\n```", "```py\nfrom django.db import models \n\nclass Publisher(models.Model): \n    name = models.CharField(max_length=30) \n    address = models.CharField(max_length=50) \n    city = models.CharField(max_length=60) \n    state_province = models.CharField(max_length=30) \n    country = models.CharField(max_length=50) \n    website = models.URLField() \n\n def __str__(self): \n return self.name \n\nclass Author(models.Model): \n    first_name = models.CharField(max_length=30) \n    last_name = models.CharField(max_length=40) \n    email = models.EmailField() \n\n def __str__(self):\n return u'%s %s' % \n                                (self.first_name, self.last_name) \n\nclass Book(models.Model): \n    title = models.CharField(max_length=100) \n    authors = models.ManyToManyField(Author) \n    publisher = models.ForeignKey(Publisher) \n    publication_date = models.DateField() \n\n def __str__(self):\n return self.title\n\n```", "```py\nTypeError: __str__ returned non-string (type int). \n\n```", "```py\n>>> from books.models import Publisher \n>>> publisher_list = Publisher.objects.all() \n>>> publisher_list \n[<Publisher: Apress>, <Publisher: O'Reilly>] \n\n```", "```py\n>>> p = Publisher(name='Apress', \n...         address='2855 Telegraph Ave.', \n...         city='Berkeley', \n...         state_province='CA', \n...         country='U.S.A.', \n...         website='http://www.apress.com/') \n\n```", "```py\n>>> p.save() \n\n```", "```py\nINSERT INTO books_publisher \n    (name, address, city, state_province, country, website) \nVALUES \n    ('Apress', '2855 Telegraph Ave.', 'Berkeley', 'CA', \n     'U.S.A.', 'http://www.apress.com/'); \n\n```", "```py\n>>> p.id \n52    # this will differ based on your own data \n\n```", "```py\n>>> p.name = 'Apress Publishing' \n>>> p.save() \n\n```", "```py\nUPDATE books_publisher SET \n    name = 'Apress Publishing', \n    address = '2855 Telegraph Ave.', \n    city = 'Berkeley', \n    state_province = 'CA', \n    country = 'U.S.A.', \n    website = 'http://www.apress.com' \nWHERE id = 52; \n\n```", "```py\nUPDATE books_publisher SET \n    name = 'Apress Publishing' \nWHERE id=52; \n\n```", "```py\n>>> Publisher.objects.all() \n[<Publisher: Apress>, <Publisher: O'Reilly>] \n\n```", "```py\nSELECT id, name, address, city, state_province, country, website \nFROM books_publisher; \n\n```", "```py\n>>> Publisher.objects.filter(name='Apress') \n[<Publisher: Apress>] \n\n```", "```py\nSELECT id, name, address, city, state_province, country, website \nFROM books_publisher \nWHERE name = 'Apress'; \n\n```", "```py\n>>> Publisher.objects.filter(country=\"U.S.A.\", state_province=\"CA\") \n[<Publisher: Apress>] \n\n```", "```py\nSELECT id, name, address, city, state_province, country, website \nFROM books_publisher \nWHERE country = 'U.S.A.' \nAND state_province = 'CA'; \n\n```", "```py\n>>> Publisher.objects.filter(name__contains=\"press\") \n[<Publisher: Apress>] \n\n```", "```py\nSELECT id, name, address, city, state_province, country, website \nFROM books_publisher \nWHERE name LIKE '%press%'; \n\n```", "```py\n>>> Publisher.objects.get(name=\"Apress\") \n<Publisher: Apress> \n\n```", "```py\n>>> Publisher.objects.get(country=\"U.S.A.\") \nTraceback (most recent call last): \n    ... \nMultipleObjectsReturned: get() returned more than one Publisher -- it returned 2! Lookup parameters were {'country': 'U.S.A.'} \n\n```", "```py\n>>> Publisher.objects.get(name=\"Penguin\") \nTraceback (most recent call last): \n    ... \nDoesNotExist: Publisher matching query does not exist. \n\n```", "```py\ntry: \n    p = Publisher.objects.get(name='Apress') \nexcept Publisher.DoesNotExist: \n    print (\"Apress isn't in the database yet.\") \nelse: \n    print (\"Apress is in the database.\") \n\n```", "```py\n>>> Publisher.objects.order_by(\"name\") \n[<Publisher: Apress>, <Publisher: O'Reilly>] \n\n```", "```py\nSELECT id, name, address, city, state_province, country, website \nFROM books_publisher \nORDER BY name; \n\n```", "```py\n>>> Publisher.objects.order_by(\"address\") \n [<Publisher: O'Reilly>, <Publisher: Apress>] \n\n>>> Publisher.objects.order_by(\"state_province\") \n [<Publisher: Apress>, <Publisher: O'Reilly>] \n\n```", "```py\n>>> Publisher.objects.order_by(\"state_province\", \"address\") \n [<Publisher: Apress>, <Publisher: O'Reilly>] \n\n```", "```py\n>>> Publisher.objects.order_by(\"-name\") \n[<Publisher: O'Reilly>, <Publisher: Apress>] \n\n```", "```py\nclass Publisher(models.Model): \n    name = models.CharField(max_length=30) \n    address = models.CharField(max_length=50) \n    city = models.CharField(max_length=60) \n    state_province = models.CharField(max_length=30) \n    country = models.CharField(max_length=50) \n    website = models.URLField() \n\n    def __str__(self): \n        return self.name \n\n    class Meta:\n ordering = ['name']\n\n```", "```py\n>>> Publisher.objects.filter(country=\"U.S.A.\").order_by(\"-name\") \n[<Publisher: O'Reilly>, <Publisher: Apress>] \n\n```", "```py\nSELECT id, name, address, city, state_province, country, website \nFROM books_publisher \nWHERE country = 'U.S.A' \nORDER BY name DESC; \n\n```", "```py\n>>> Publisher.objects.order_by('name')[0] \n<Publisher: Apress> \n\n```", "```py\nSELECT id, name, address, city, state_province, country, website \nFROM books_publisher \nORDER BY name \nLIMIT 1; \n\n```", "```py\n>>> Publisher.objects.order_by('name')[0:2] \n\n```", "```py\nSELECT id, name, address, city, state_province, country, website \nFROM books_publisher \nORDER BY name \nOFFSET 0 LIMIT 2; \n\n```", "```py\n>>> Publisher.objects.order_by('name')[-1] \nTraceback (most recent call last): \n  ... \nAssertionError: Negative indexing is not supported. \n\n```", "```py\n>>> Publisher.objects.order_by('-name')[0] \n\n```", "```py\n>>> p = Publisher.objects.get(name='Apress') \n>>> p.name = 'Apress Publishing' \n>>> p.save() \n\n```", "```py\nSELECT id, name, address, city, state_province, country, website \nFROM books_publisher \nWHERE name = 'Apress'; \n\nUPDATE books_publisher SET \n    name = 'Apress Publishing', \n    address = '2855 Telegraph Ave.', \n    city = 'Berkeley', \n    state_province = 'CA', \n    country = 'U.S.A.', \n    website = 'http://www.apress.com' \nWHERE id = 52; \n\n```", "```py\n>>> Publisher.objects.filter(id=52).update(name='Apress Publishing') \n\n```", "```py\nUPDATE books_publisher \nSET name = 'Apress Publishing' \nWHERE id = 52; \n\n```", "```py\n>>> Publisher.objects.all().update(country='USA') \n2 \n\n```", "```py\n>>> p = Publisher.objects.get(name=\"O'Reilly\") \n>>> p.delete() \n>>> Publisher.objects.all() \n[<Publisher: Apress Publishing>] \n\n```", "```py\n>>> Publisher.objects.filter(country='USA').delete() \n>>> Publisher.objects.all().delete() \n>>> Publisher.objects.all() \n[] \n\n```", "```py\n>>> Publisher.objects.delete() \nTraceback (most recent call last): \n  File \"\", line 1, in  \nAttributeError: 'Manager' object has no attribute 'delete' \n\n```", "```py\n>>> Publisher.objects.all().delete() \n\n```", "```py\n>>> Publisher.objects.filter(country='USA').delete() \n\n```"]