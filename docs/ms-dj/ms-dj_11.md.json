["```py\npython manage.py createsuperuser -username=joe -email=joe@example.com \n\n```", "```py\n>>> from Django.contrib.auth.models import User \n>>> user = User.objects.create_user('john', 'lennon@thebeatles.com', 'johnpassword') \n\n# At this point, user is a User object that has already been saved \n# to the database. You can continue to change its attributes \n# if you want to change other fields. \n>>> user.last_name = 'Lennon' \n>>> user.save() \n\n```", "```py\n        >>> from Django.contrib.auth.models import User \n        >>> u = User.objects.get(username='john') \n        >>> u.set_password('new password') \n        >>> u.save() \n\n```", "```py\nfrom books.models import BookReview \nfrom Django.contrib.auth.models import Group, Permission \nfrom Django.contrib.contenttypes.models import ContentType \n\ncontent_type = ContentType.objects.get_for_model(BookReview) \npermission = Permission.objects.create(codename='can_publish', \n                                       name='Can Publish Reviews', \n                                       content_type=content_type) \n\n```", "```py\nfrom Django.contrib.auth.models import Permission, User \nfrom Django.shortcuts import get_object_or_404 \n\ndef user_gains_perms(request, user_id): \n    user = get_object_or_404(User, pk=user_id) \n    # any permission check will cache the current set of permissions \n    user.has_perm('books.change_bar') \n\n    permission = Permission.objects.get(codename='change_bar') \n    user.user_permissions.add(permission) \n\n    # Checking the cached permission set \n    user.has_perm('books.change_bar')  # False \n\n    # Request new instance of User \n    user = get_object_or_404(User, pk=user_id) \n\n    # Permission cache is repopulated from the database \n    user.has_perm('books.change_bar')  # True \n\n    # ... \n\n```", "```py\nif request.user.is_authenticated(): \n    # Do something for authenticated users. \nelse: \n    # Do something for anonymous users. \n\n```", "```py\nfrom Django.contrib.auth import authenticate, login \n\ndef my_view(request): \n    username = request.POST['username'] \n    password = request.POST['password'] \n    user = authenticate(username=username, password=password) \n    if user is not None: \n        if user.is_active: \n            login(request, user) \n            # Redirect to a success page. \n        else: \n            # Return a 'disabled account' error message \n    else: \n        # Return an 'invalid login' error message. \n\n```", "```py\nfrom Django.contrib.auth import logout \n\ndef logout_view(request): \n    logout(request) \n    # Redirect to a success page. \n\n```", "```py\nfrom Django.shortcuts import redirect \n\ndef my_view(request): \n    if not request.user.is_authenticated(): \n        return redirect('/login/?next=%s' % request.path) \n    # ... \n\n```", "```py\nfrom Django.shortcuts import render \n\ndef my_view(request): \n    if not request.user.is_authenticated(): \n        return render(request, 'books/login_error.html') \n    # ... \n\n```", "```py\nfrom Django.contrib.auth.decorators import login_required \n\n@login_required \ndef my_view(request): \n    ... \n\n```", "```py\nfrom Django.contrib.auth.decorators import login_required \n\n@login_required(redirect_field_name='my_redirect_field') \ndef my_view(request): \n    ... \n\n```", "```py\nfrom Django.contrib.auth.decorators import login_required \n\n@login_required(login_url='/accounts/login/') \ndef my_view(request): \n    ... \n\n```", "```py\nfrom Django.contrib.auth import views as auth_views \n\nurl(r'^accounts/login/$', auth_views.login), \n\n```", "```py\ndef my_view(request): \n    if not request.user.email.endswith('@example.com'): \n        return HttpResponse(\"You can't leave a review for this book.\") \n    # ... \n\n```", "```py\nfrom Django.contrib.auth.decorators import user_passes_test \n\ndef email_check(user): \n    return user.email.endswith('@example.com') \n\n@user_passes_test(email_check) \ndef my_view(request): \n    ... \n\n```", "```py\n@user_passes_test(email_check, login_url='/login/') \ndef my_view(request): \n    ... \n\n```", "```py\nfrom Django.contrib.auth.decorators import permission_required \n\n@permission_required('reviews.can_vote') \ndef my_view(request): \n    ... \n\n```", "```py\nfrom Django.contrib.auth.decorators import permission_required \n\n@permission_required('reviews.can_vote', login_url='/loginpage/') \ndef my_view(request): \n    ... \n\n```", "```py\nDjango.contrib.auth.decorators.update_session_auth_hash (request, user) \n\n```", "```py\nfrom Django.contrib.auth import update_session_auth_hash \n\ndef password_change(request): \n    if request.method == 'POST': \n        form = PasswordChangeForm(user=request.user, data=request.POST) \n        if form.is_valid(): \n            form.save() \n            update_session_auth_hash(request, form.user) \n    else: \n        ... \n\n```", "```py\nurlpatterns = [url('^', include('Django.contrib.auth.urls'))] \n\n```", "```py\nSomeone asked for password reset for email {{ email }}. Follow the link below: \n{{ protocol}}://{{ domain }}{% url 'password_reset_confirm' uidb64=uid token=token %} \n\n```", "```py\n{% if user.is_authenticated %} \n    <p>Welcome, {{ user.username }}. Thanks for logging in.</p> \n{% else %} \n    <p>Welcome, new user. Please log in.</p> \n{% endif %} \n\n```", "```py\n{{ perms.foo }} \n\n```", "```py\n{{ perms.foo.can_vote }} \n\n```", "```py\n{% if perms.foo %} \n    <p>You have permission to do something in the foo app.</p> \n    {% if perms.foo.can_vote %} \n        <p>You can vote!</p> \n    {% endif %} \n    {% if perms.foo.can_drive %} \n        <p>You can drive!</p> \n    {% endif %} \n{% else %} \n    <p>You don't have permission to do anything in the foo app.</p> \n{% endif %} \n\n```", "```py\n{% if 'foo' in perms %} \n    {% if 'foo.can_vote' in perms %} \n        <p>In lookup works, too.</p> \n    {% endif %} \n{% endif %} \n\n```", "```py\n<algorithm>$<iterations>$<salt>$<hash> \n\n```", "```py\nPASSWORD_HASHERS = [\n'Django.contrib.auth.hashers.PBKDF2PasswordHasher',\n'Django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',\n'Django.contrib.auth.hashers.BCryptSHA256PasswordHasher',\n'Django.contrib.auth.hashers.BCryptPasswordHasher',\n'Django.contrib.auth.hashers.SHA1PasswordHasher',\n'Django.contrib.auth.hashers.MD5PasswordHasher',\n'Django.contrib.auth.hashers.CryptPasswordHasher',\n]\n```", "```py\n    PASSWORD_HASHERS = [ \n        'Django.contrib.auth.hashers.BCryptSHA256PasswordHasher', \n        'Django.contrib.auth.hashers.BCryptPasswordHasher', \n        'Django.contrib.auth.hashers.PBKDF2PasswordHasher', \n        'Django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher', \n        'Django.contrib.auth.hashers.SHA1PasswordHasher', \n        'Django.contrib.auth.hashers.MD5PasswordHasher', \n        'Django.contrib.auth.hashers.CryptPasswordHasher', \n] \n\n```", "```py\n        from Django.contrib.auth.hashers\n            import PBKDF2PasswordHasher \n\n        class MyPBKDF2PasswordHasher(PBKDF2PasswordHasher):  \n            iterations = PBKDF2PasswordHasher.iterations * 100 \n\n    ```", "```py\n    PASSWORD_HASHERS = [ \n      'myproject.hashers.MyPBKDF2PasswordHasher', \n      'Django.contrib.auth.hashers.PBKDF2PasswordHasher', \n\n      # ... # \n      ] \n\n```", "```py\n['Django.contrib.auth.backends.ModelBackend'] \n\n```", "```py\nclass MyBackend(object): \n    def authenticate(self, username=None, password=None): \n        # Check the username/password and return a User. \n        ... \n\n```", "```py\nclass MyBackend(object): \n    def authenticate(self, token=None): \n        # Check the token and return a User. \n        ... \n\n```", "```py\nfrom Django.conf import settings \nfrom Django.contrib.auth.models import User, check_password \n\nclass SettingsBackend(object): \n    \"\"\" \n    Authenticate against the settings ADMIN_LOGIN and ADMIN_PASSWORD. \n\n    Use the login name, and a hash of the password. For example: \n\n    ADMIN_LOGIN = 'admin' \n    ADMIN_PASSWORD = 'sha1$4e987$afbcf42e21bd417fb71db8c66b321e9fc33051de' \n    \"\"\" \n\n    def authenticate(self, username=None, password=None): \n        login_valid = (settings.ADMIN_LOGIN == username) \n        pwd_valid = check_password(password, settings.ADMIN_PASSWORD) \n        if login_valid and pwd_valid: \n            try: \n                user = User.objects.get(username=username) \n            except User.DoesNotExist: \n                # Create a new user. Note that we can set password \n                # to anything, because it won't be checked; the password \n                # from settings.py will. \n                user = User(username=username, password='password') \n                user.is_staff = True \n                user.is_superuser = True \n                user.save() \n            return user \n        return None \n\n    def get_user(self, user_id): \n        try: \n            return User.objects.get(pk=user_id) \n        except User.DoesNotExist: \n            return None \n\n```", "```py\nclass SettingsBackend(object): \n    ... \n    def has_perm(self, user_obj, perm, obj=None): \n        if user_obj.username == settings.ADMIN_LOGIN: \n            return True \n        else: \n            return False \n\n```", "```py\nclass Task(models.Model): \n    ... \n    class Meta: \n        permissions = ( \n            (\"view_task\", \"Can see available tasks\"), \n            (\"change_task_status\", \"Can change the status of tasks\"), \n            (\"close_task\", \"Can remove a task by setting its status as   \n              closed\"), \n        ) \n\n```", "```py\nuser.has_perm('app.view_task') \n\n```", "```py\nfrom Django.contrib.auth.models import User \n\nclass Employee(models.Model): \n    user = models.OneToOneField(User) \n    department = models.CharField(max_length=100) \n\n```", "```py\n>>> u = User.objects.get(username='fsmith') \n>>> freds_department = u.employee.department \n\n```", "```py\nfrom Django.contrib import admin \nfrom Django.contrib.auth.admin import UserAdmin \nfrom Django.contrib.auth.models import User \n\nfrom my_user_profile_app.models import Employee \n\n# Define an inline admin descriptor for Employee model \n# which acts a bit like a singleton \nclass EmployeeInline(admin.StackedInline): \n    model = Employee \n    can_delete = False \n    verbose_name_plural = 'employee' \n\n# Define a new User admin \nclass UserAdmin(UserAdmin): \n    inlines = (EmployeeInline, ) \n\n# Re-register UserAdmin \nadmin.site.unregister(User) \nadmin.site.register(User, UserAdmin)\n```", "```py\nAUTH_USER_MODEL = 'books.MyUser' \n\n```"]