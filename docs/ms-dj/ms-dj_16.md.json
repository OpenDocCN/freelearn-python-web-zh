["```py\ngiven a URL, try finding that page in the cache \nif the page is in the cache: \n    return the cached page \nelse: \n    generate the page \n    save the generated page in the cache (for next time) \n    return the generated page \n\n```", "```py\nCACHES = { \n    'default': { \n        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache', \n        'LOCATION': '127.0.0.1:11211', \n    } \n} \n\n```", "```py\nCACHES = { \n    'default': { \n        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache', \n        'LOCATION': 'unix:/tmp/memcached.sock', \n    } \n} \n\n```", "```py\nCACHES = { \n    'default': { \n        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache', \n        'LOCATION': [ \n            '172.19.26.240:11211', \n            '172.19.26.242:11211', \n        ] \n    } \n} \n\n```", "```py\nCACHES = { \n    'default': { \n        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache', \n        'LOCATION': [ \n            '172.19.26.240:11211', \n            '172.19.26.242:11212', \n            '172.19.26.244:11213', \n        ] \n    } \n} \n\n```", "```py\nCACHES = { \n    'default': { \n        'BACKEND': 'django.core.cache.backends.db.DatabaseCache', \n        'LOCATION': 'my_cache_table', \n    } \n} \n\n```", "```py\npython manage.py createcachetable \n\n```", "```py\nclass CacheRouter(object): \n    \"\"\"A router to control all database cache operations\"\"\" \n\n    def db_for_read(self, model, **hints): \n        # All cache read operations go to the replica \n        if model._meta.app_label in ('django_cache',): \n            return 'cache_replica' \n        return None \n\n    def db_for_write(self, model, **hints): \n        # All cache write operations go to primary \n        if model._meta.app_label in ('django_cache',): \n            return 'cache_primary' \n        return None \n\n    def allow_migrate(self, db, model): \n        # Only install the cache model on primary \n        if model._meta.app_label in ('django_cache',): \n            return db == 'cache_primary' \n        return None \n\n```", "```py\nCACHES = { \n    'default': { \n        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache', \n        'LOCATION': '/var/tmp/django_cache', \n    } \n} \n\n```", "```py\nCACHES = { \n    'default': { \n        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache', \n        'LOCATION': 'c:/foo/bar', \n    } \n} \n\n```", "```py\nCACHES = { \n    'default': { \n        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache', \n        'LOCATION': 'unique-snowflake' \n    } \n} \n\n```", "```py\nCACHES = { \n    'default': { \n        'BACKEND': 'django.core.cache.backends.dummy.DummyCache', \n    } \n} \n\n```", "```py\nCACHES = { \n    'default': { \n        'BACKEND': 'path.to.backend', \n    } \n} \n\n```", "```py\nCACHES = { \n    'default': { \n        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache', \n        'LOCATION': '/var/tmp/django_cache', \n        'TIMEOUT': 60, \n        'OPTIONS': {'MAX_ENTRIES': 1000} \n    } \n} \n\n```", "```py\nMIDDLEWARE_CLASSES = [ \n    'django.middleware.cache.UpdateCacheMiddleware', \n    'django.middleware.common.CommonMiddleware', \n    'django.middleware.cache.FetchFromCacheMiddleware', \n] \n\n```", "```py\nfrom django.views.decorators.cache import cache_page \n\n@cache_page(60 * 15) \ndef my_view(request): \n    ... \n\n```", "```py\nurlpatterns = [ \n    url(r'^foo/([0-9]{1,2})/$', my_view), \n] \n\n```", "```py\n@cache_page(60 * 15, cache=\"special_cache\") \ndef my_view(request): \n    ... \n\n```", "```py\n@cache_page(60 * 15, key_prefix=\"site1\") \ndef my_view(request): \n    ... \n\n```", "```py\nurlpatterns = [ \n    url(r'^foo/([0-9]{1,2})/$', my_view), \n] \n\n```", "```py\nfrom django.views.decorators.cache import cache_page \n\nurlpatterns = [ \n    url(r'^foo/([0-9]{1,2})/$', cache_page(60 * 15)(my_view)), \n] \n\n```", "```py\n{% load cache %} \n{% cache 500 sidebar %} \n    .. sidebar .. \n{% endcache %} \n\n```", "```py\n{% load cache %} \n{% cache 500 sidebar request.user.username %} \n    .. sidebar for logged in user .. \n{% endcache %} \n\n```", "```py\n{% load i18n %} \n{% load cache %} \n\n{% get_current_language as LANGUAGE_CODE %} \n\n{% cache 600 welcome LANGUAGE_CODE %} \n    {% trans \"Welcome to example.com\" %} \n{% endcache %} \n\n```", "```py\n{% cache 600 sidebar %} ... {% endcache %} \n{% cache my_timeout sidebar %} ... {% endcache %} \n\n```", "```py\n{% cache 300 local-thing ...  using=\"localcache\" %} \n\n```", "```py\n>>> from django.core.cache import cache \n>>> from django.core.cache.utils import make_template_fragment_key \n# cache key for {% cache 500 sidebar username %} \n>>> key = make_template_fragment_key('sidebar', [username]) \n>>> cache.delete(key) # invalidates cached template fragment \n\n```", "```py\n>>> from django.core.cache import caches \n>>> cache1 = caches['myalias'] \n>>> cache2 = caches['myalias'] \n>>> cache1 is cache2 \nTrue \n\n```", "```py\n>>> from django.core.cache import cache \n\n```", "```py\n>>> cache.set('my_key', 'hello, world!', 30) \n>>> cache.get('my_key') \n'hello, world!' \n\n```", "```py\n# Wait 30 seconds for 'my_key' to expire... \n\n>>> cache.get('my_key') \nNone \n\n```", "```py\n>>> cache.get('my_key', 'has expired') \n'has expired' \n\n```", "```py\n>>> cache.set('add_key', 'Initial value') \n>>> cache.add('add_key', 'New value') \n>>> cache.get('add_key') \n'Initial value' \n\n```", "```py\n>>> cache.set('a', 1) \n>>> cache.set('b', 2) \n>>> cache.set('c', 3) \n>>> cache.get_many(['a', 'b', 'c']) \n{'a': 1, 'b': 2, 'c': 3} \n\n```", "```py\n>>> cache.set_many({'a': 1, 'b': 2, 'c': 3}) \n>>> cache.get_many(['a', 'b', 'c']) \n{'a': 1, 'b': 2, 'c': 3} \n\n```", "```py\n>>> cache.delete('a') \n\n```", "```py\n>>> cache.delete_many(['a', 'b', 'c']) \n\n```", "```py\n>>> cache.clear() \n\n```", "```py\n>>> cache.set('num', 1) \n>>> cache.incr('num') \n2 \n>>> cache.incr('num', 10) \n12 \n>>> cache.decr('num') \n11 \n>>> cache.decr('num', 5) \n6 \n\n```", "```py\n>>> cache.close() \n\n```", "```py\n# Set version 2 of a cache key \n>>> cache.set('my_key', 'hello world!', version=2) \n# Get the default version (assuming version=1) \n>>> cache.get('my_key') \nNone \n# Get version 2 of the same key \n>>> cache.get('my_key', version=2) \n'hello world!' \n\n```", "```py\n# Increment the version of 'my_key' \n>>> cache.incr_version('my_key') \n# The default version still isn't available \n>>> cache.get('my_key') \nNone \n# Version 2 isn't available, either \n>>> cache.get('my_key', version=2) \nNone \n# But version 3 *is* available \n>>> cache.get('my_key', version=3) \n'hello world!' \n\n```", "```py\ndef make_key(key, key_prefix, version): \n    return ':'.join([key_prefix, str(version), key]) \n\n```", "```py\nimport warnings \n\nfrom django.core.cache import CacheKeyWarning \n\nwarnings.simplefilter(\"ignore\", CacheKeyWarning) \n\n```", "```py\nfrom django.core.cache.backends.locmem import LocMemCache \n\nclass CustomLocMemCache(LocMemCache): \n    def validate_key(self, key): \n        # Custom validation, raising exceptions or warnings as needed. \n        # ... \n\n```", "```py\nfrom django.views.decorators.vary import vary_on_headers \n\n@vary_on_headers('User-Agent') \ndef my_view(request): \n    # ... \n\n```", "```py\n@vary_on_headers('User-Agent', 'Cookie') \ndef my_view(request): \n    # ... \n\n```", "```py\n@vary_on_cookie \ndef my_view(request): \n    # ... \n\n@vary_on_headers('Cookie') \ndef my_view(request): \n    # ... \n\n```", "```py\nfrom django.utils.cache import patch_vary_headers \n\ndef my_view(request): \n    # ... \n    response = render_to_response('template_name', context) \n    patch_vary_headers(response, ['Cookie']) \n    return response \n\n```", "```py\nfrom django.views.decorators.cache import cache_control \n\n@cache_control(private=True) \ndef my_view(request): \n    # ... \n\n```", "```py\nfrom django.views.decorators.cache import patch_cache_control \nfrom django.views.decorators.vary import vary_on_cookie \n\n@vary_on_cookie \ndef list_blog_entries_view(request): \n    if request.user.is_anonymous(): \n        response = render_only_public_entries() \n        patch_cache_control(response, public=True) \n    else: \n        response = render_private_and_public_entries(request.user) \n        patch_cache_control(response, private=True) \n\n    return response \n\n```", "```py\nfrom django.views.decorators.cache import cache_control \n\n@cache_control(must_revalidate=True, max_age=3600) \ndef my_view(request): \n    # ... \n\n```", "```py\nfrom django.views.decorators.cache import never_cache \n\n@never_cache \ndef myview(request): \n    # ... \n\n```"]