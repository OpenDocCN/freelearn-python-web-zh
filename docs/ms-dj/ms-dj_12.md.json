["```py\nimport datetime \nfrom django.utils import timezone \n\nfrom django.db import models \n\n# ... # \n\nclass Book(models.Model): \n    title = models.CharField(max_length=100) \n    authors = models.ManyToManyField(Author) \n    publisher = models.ForeignKey(Publisher) \n    publication_date = models.DateField() \n\n    def recent_publication(self): \n        return self.publication_date >= timezone.now().date() \ndatetime.timedelta(weeks=8) \n\n    # ... # \n\n```", "```py\npython manage.py shell \n\n>>> from books.models import Book \n>>> import datetime \n>>> from django.utils import timezone \n>>> book = Book.objects.get(id=1) \n>>> book.title \n'Mastering Django: Core' \n>>> book.publication_date \ndatetime.date(2016, 5, 1) \n>>>book.publication_date >= timezone.now().date()-datetime.timedelta(weeks=8) \nTrue \n\n```", "```py\n>>> book.publication_date \ndatetime.date(2016, 9, 1) \n>>>book.publication_date >= timezone.now().date()-datetime.timedelta(weeks=8) \nTrue \n\n```", "```py\nimport datetime \nfrom django.utils import timezone \nfrom django.test import TestCase \nfrom .models import Book \n\nclass BookMethodTests(TestCase): \n\n    def test_recent_pub(self): \n\"\"\" \n        recent_publication() should return False for future publication  \n        dates. \n        \"\"\" \n\n        futuredate = timezone.now().date() + datetime.timedelta(days=5) \n        future_pub = Book(publication_date=futuredate) \n        self.assertEqual(future_pub.recent_publication(), False) \n\n```", "```py\npython manage.py test books \n\n```", "```py\nCreating test database for alias 'default'... \nF \n====================================================================== \nFAIL: test_recent_pub (books.tests.BookMethodTests) \n---------------------------------------------------------------------- \nTraceback (most recent call last): \n  File \"C:\\Users\\Nigel\\ ... mysite\\books\\tests.py\", line 25, in test_recent_pub \n    self.assertEqual(future_pub.recent_publication(), False) \nAssertionError: True != False \n\n---------------------------------------------------------------------- \nRan 1 test in 0.000s \n\nFAILED (failures=1) \nDestroying test database for alias 'default'... \n\n```", "```py\nimport unittest \nfrom django.test import Client \n\nclass SimpleTest(unittest.TestCase): \n    def test_details(self): \n        client = Client() \n        response = client.get('/customer/details/') \n        self.assertEqual(response.status_code, 200) \n\n    def test_index(self): \n        client = Client() \n        response = client.get('/customer/index/') \n        self.assertEqual(response.status_code, 200) \n\n```", "```py\nfrom django.test import TestCase \n\nclass SimpleTest(TestCase): \n    def test_details(self): \n        response = self.client.get('/customer/details/') \n        self.assertEqual(response.status_code, 200) \n\n    def test_index(self): \n        response = self.client.get('/customer/index/') \n        self.assertEqual(response.status_code, 200) \n\n```", "```py\nfrom django.test import TestCase \nfrom myapp.models import Animal \n\nclass AnimalTestCase(TestCase): \n    fixtures = ['mammals.json', 'birds'] \n\n    def setUp(self): \n        # Test definitions as before. \n        call_setup_methods() \n\n    def testFluffyAnimals(self): \n        # A test that uses the fixtures. \n        call_some_test_code() \n\n```", "```py\nfrom django.test import TestCase \n\nclass LoginTestCase(TestCase): \n\n    def test_login(self): \n\n        # First check for the default behavior \n        response = self.client.get('/sekrit/') \n        self.assertRedirects(response, '/accounts/login/?next=/sekrit/') \n\n        # Then override the LOGIN_URL setting \n        with self.settings(LOGIN_URL='/other/login/'): \n            response = self.client.get('/sekrit/') \n            self.assertRedirects(response, '/other/login/?next=/sekrit/') \n\n```", "```py\nfrom django.test import TestCase \n\nclass MiddlewareTestCase(TestCase): \n\n    def test_cache_middleware(self): \n        with self.modify_settings(MIDDLEWARE_CLASSES={ \n'append': 'django.middleware.cache.FetchFromCacheMiddleware', \n'prepend': 'django.middleware.cache.UpdateCacheMiddleware', \n'remove': [ \n 'django.contrib.sessions.middleware.SessionMiddleware', \n 'django.contrib.auth.middleware.AuthenticationMiddleware',  \n 'django.contrib.messages.middleware.MessageMiddleware', \n            ], \n        }): \n            response = self.client.get('/') \n            # ... \n\n```", "```py\nfrom django.test import TestCase, override_settings \n\nclass LoginTestCase(TestCase): \n\n    @override_settings(LOGIN_URL='/other/login/') \n    def test_login(self): \n        response = self.client.get('/sekrit/') \n        self.assertRedirects(response, '/other/login/?next=/sekrit/') \n\n```", "```py\nfrom django.test import TestCase, override_settings \n\n@override_settings(LOGIN_URL='/other/login/') \nclass LoginTestCase(TestCase): \n\n    def test_login(self): \n        response = self.client.get('/sekrit/') \n        self.assertRedirects(response, '/other/login/?next=/sekrit/') \n\n```", "```py\nfrom django.test import TestCase, modify_settings \n\nclass MiddlewareTestCase(TestCase): \n\n    @modify_settings(MIDDLEWARE_CLASSES={ \n'append': 'django.middleware.cache.FetchFromCacheMiddleware', \n'prepend': 'django.middleware.cache.UpdateCacheMiddleware', \n    }) \n    def test_cache_middleware(self): \n        response = self.client.get('/') \n        # ... \n\n```", "```py\nfrom django.test import TestCase, modify_settings \n\n@modify_settings(MIDDLEWARE_CLASSES={ \n'append': 'django.middleware.cache.FetchFromCacheMiddleware', \n'prepend': 'django.middleware.cache.UpdateCacheMiddleware', \n}) \nclass MiddlewareTestCase(TestCase): \n\n    def test_cache_middleware(self): \n        response = self.client.get('/') \n        # ... \n\n```", "```py\nfrom django.core import mail \nfrom django.test import TestCase \n\nclass EmailTest(TestCase): \n    def test_send_email(self): \n        # Send message. \n        mail.send_mail('Subject here', 'Here is the message.', \n'from@example.com', ['to@example.com'], \n            fail_silently=False) \n\n        # Test that one message has been sent. \n        self.assertEqual(len(mail.outbox), 1) \n\n        # Verify that the subject of the first message is correct. \n        self.assertEqual(mail.outbox[0].subject, 'Subject here') \n\n```", "```py\nfrom django.core import mail \n\n# Empty the test outbox \nmail.outbox = [] \n\n```", "```py\nfrom django.core.management import call_command \nfrom django.test import TestCase \nfrom django.utils.six import StringIO \n\nclass ClosepollTest(TestCase): \n    def test_command_output(self): \n        out = StringIO() \n        call_command('closepoll', stdout=out) \n        self.assertIn('Expected output', out.getvalue()) \n\n```"]