["```py\n<style class={{ var }}>...</style> \n\n```", "```py\n            <form action=\".\" method=\"post\">{% csrf_token %} \n\n    ```", "```py\n            from django.shortcuts import render_to_response \n            from django.template.context_processors import csrf \n\n            def my_view(request): \n                c = {} \n                c.update(csrf(request)) \n                # ... view code here \n                return render_to_response(\"a_template.html\", c) \n\n    ```", "```py\n// using jQuery \nfunction getCookie(name) { \n    var cookieValue = null; \n    if (document.cookie && document.cookie != '') { \n        var cookies = document.cookie.split(';'); \n        for (var i = 0; i < cookies.length; i++) { \n            var cookie = jQuery.trim(cookies[i]); \n            // Does this cookie string begin with the name we want? \n            if (cookie.substring(0, name.length + 1) == (name + '=')) { \n                cookieValue =  decodeURIComponent(cookie.substring(name.length + 1)); \n                break; \n            } \n        } \n    } \n    return cookieValue; \n} \nvar csrftoken = getCookie('csrftoken'); \n\n```", "```py\nvar csrftoken = $.cookie('csrftoken'); \n\n```", "```py\nfunction csrfSafeMethod(method) { \n    // these HTTP methods do not require CSRF protection \n    return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method)); \n} \n$.ajaxSetup({ \n    beforeSend: function(xhr, settings) { \n        if (!csrfSafeMethod(settings.type) && !this.crossDomain) { \n            xhr.setRequestHeader(\"X-CSRFToken\", csrftoken); \n        } \n    } \n}); \n\n```", "```py\n<div style=\"display:none\"> \n    <input type=\"hidden\" name=\"csrfmiddlewaretoken\" value=\"{{ csrf_token }}\"> \n</div> \n\n```", "```py\nfrom django.views.decorators.csrf import csrf_protect \nfrom django.shortcuts import render \n\n@csrf_protect \ndef my_view(request): \n    c = {} \n    # ... \n    return render(request, \"a_template.html\", c) \n\n```", "```py\nfrom django.views.decorators.cache import cache_page \nfrom django.views.decorators.csrf import csrf_protect \n\n@cache_page(60 * 15) \n@csrf_protect \ndef my_view(request): \n    ... \n\n```", "```py\n>>> from django.test import Client \n>>> csrf_client = Client(enforce_csrf_checks=True) \n\n```", "```py\nfrom django.views.decorators.csrf import csrf_exempt \nfrom django.http import HttpResponse \n\n@csrf_exempt \ndef my_view(request): \n    return HttpResponse('Hello world') \n\n```", "```py\nfrom django.views.decorators.csrf import requires_csrf_token \nfrom django.shortcuts import render \n\n@requires_csrf_token \ndef my_view(request): \n    c = {} \n    # ... \n    return render(request, \"a_template.html\", c) \n\n```", "```py\nfrom django.views.decorators.csrf import csrf_exempt, csrf_protect \n\n@csrf_exempt \ndef my_view(request): \n\n    @csrf_protect \n    def protected_path(request): \n        do_something() \n\n    if some_condition(): \n       return protected_path(request) \n    else: \n       do_something_else() \n\n```", "```py\nMIDDLEWARE_CLASSES = [ \n    # ... \n    'django.middleware.clickjacking.XFrameOptionsMiddleware', \n    # ... \n] \n\n```", "```py\nX_FRAME_OPTIONS = 'DENY' \n\n```", "```py\nfrom django.http import HttpResponse \nfrom django.views.decorators.clickjacking import xframe_options_exempt \n\n@xframe_options_exempt \ndef ok_to_load_in_a_frame(request): \n    return HttpResponse(\"This page is safe to load in a frame on any site.\") \n\n```", "```py\nfrom django.http import HttpResponse \nfrom django.views.decorators.clickjacking import xframe_options_deny \nfrom django.views.decorators.clickjacking import  xframe_options_sameorigin \n\n@xframe_options_deny \ndef view_one(request): \n    return HttpResponse(\"I won't display in any frame!\") \n\n@xframe_options_sameorigin \ndef view_two(request): \n    return HttpResponse(\"Display in a frame if it's from the same    \n      origin as me.\") \n\n```", "```py\n>>> from django.core.signing import Signer\n>>> signer = Signer()\n>>> value = signer.sign('My string')\n>>> value\n'My string:GdMGD6HNQ_qdgxYP8yBZAdAIV1w'\n```", "```py\n>>> original = signer.unsign(value)\n>>> original\n'My string'\n```", "```py\n>>> from django.core import signing\n>>> value += 'm'\n>>> try:\n\u00a0 \u00a0... original = signer.unsign(value)\n  \u00a0... except signing.BadSignature:\n\u00a0 \u00a0... print(\"Tampering detected!\")\n```", "```py\n>>> signer = Signer('my-other-secret')\n>>> value = signer.sign('My string')\n>>> value\n'My string:EkfQJafvGyiofrdGnuthdxImIJw'\n```", "```py\n>>> signer = Signer()\n>>> signer.sign('My string')\n'My string:GdMGD6HNQ_qdgxYP8yBZAdAIV1w'\n>>> signer = Signer(salt='extra')\n>>> signer.sign('My string')\n'My string:Ee7vGi-ING6n02gkcJ-QLHg6vFw'\n>>> signer.unsign('My string:Ee7vGi-ING6n02gkcJ-QLHg6vFw')\n'My string'\n```", "```py\n>>> from datetime import timedelta\n>>> from django.core.signing import TimestampSigner\n>>> signer = TimestampSigner()\n>>> value = signer.sign('hello')\n>>> value 'hello:1NMg5H:oPVuCqlJWmChm1rA2lyTUtelC-c'\n>>> signer.unsign(value)\n'hello'\n>>> signer.unsign(value, max_age=10)\n...\nSignatureExpired: Signature age 15.5289158821 > 10 seconds\n>>> signer.unsign(value, max_age=20)\n'hello'\n>>> signer.unsign(value, max_age=timedelta(seconds=20))\n'hello'\n```", "```py\n>>> from django.core import signing\n>>> value = signing.dumps({\"foo\": \"bar\"})\n>>> value 'eyJmb28iOiJiYXIifQ:1NMg1b:zGcDE4-TCkaeGzLeW9UQwZesciI'\n>>> signing.loads(value) {'foo': 'bar'}\n```", "```py\n>>> from django.core import signing\n>>> value = signing.dumps(('a','b','c'))\n>>> signing.loads(value)\n['a', 'b', 'c']\n```"]