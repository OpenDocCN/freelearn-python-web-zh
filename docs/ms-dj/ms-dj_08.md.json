["```py\n        {% if is_logged_in %} \n            Thanks for logging in! \n        {% else %} \n            Please log in. \n        {% endif %} \n\n```", "```py\nfrom django.template import loader, Context \n\ndef view_1(request): \n    # ... \n    t = loader.get_template('template1.html') \n    c = Context({ \n        'app': 'My app', \n        'user': request.user, \n        'ip_address': request.META['REMOTE_ADDR'], \n        'message': 'I am view 1.' \n    }) \n    return t.render(c) \n\ndef view_2(request): \n    # ... \n    t = loader.get_template('template2.html') \n    c = Context({ \n        'app': 'My app', \n        'user': request.user, \n        'ip_address': request.META['REMOTE_ADDR'], \n        'message': 'I am the second view.' \n    }) \n    return t.render(c) \n\n```", "```py\nfrom django.template import loader, RequestContext \n\ndef custom_proc(request): \n    # A context processor that provides 'app', 'user' and 'ip_address'. \n    return { \n        'app': 'My app', \n        'user': request.user, \n        'ip_address': request.META['REMOTE_ADDR'] \n    } \n\ndef view_1(request): \n    # ... \n    t = loader.get_template('template1.html') \n    c = RequestContext(request,  \n                       {'message': 'I am view 1.'},   \n                       processors=[custom_proc]) \n    return t.render(c) \n\ndef view_2(request): \n    # ... \n    t = loader.get_template('template2.html') \n    c = RequestContext(request,  \n                       {'message': 'I am the second view.'},   \n                       processors=[custom_proc]) \n    return t.render(c) \n\n```", "```py\nfrom django.shortcuts import render \nfrom django.template import RequestContext \n\ndef custom_proc(request): \n    # A context processor that provides 'app', 'user' and 'ip_address'. \n    return { \n        'app': 'My app', \n        'user': request.user, \n        'ip_address': request.META['REMOTE_ADDR'] \n    } \n\ndef view_1(request): \n    # ... \n    return render(request, 'template1.html', \n                  {'message': 'I am view 1.'}, \n                  context_instance=RequestContext( \n                  request, processors=[custom_proc] \n                  ) \n    ) \n\ndef view_2(request): \n    # ... \n    return render(request, 'template2.html',                  {'message': 'I am the second view.'}, \n                  context_instance=RequestContext( \n                  request, processors=[custom_proc] \n                  ) \n) \n\n```", "```py\n'context_processors': [ \n            'django.template.context_processors.debug', \n            'django.template.context_processors.request', \n            'django.contrib.auth.context_processors.auth', \n'django.contrib.messages.context_processors.messages', \n        ], \n\n```", "```py\nHello, {{ name }}. \n\n```", "```py\n<script>alert('hello')</script> \n\n```", "```py\nHello, <script>alert('hello')</script> \n\n```", "```py\n<b>username \n\n```", "```py\nHello, <b>username \n\n```", "```py\nThis will be escaped: {{ data }} \nThis will not be escaped: {{ data|safe }} \n\n```", "```py\nThis will be escaped: &lt;b&gt; \nThis will not be escaped: <b> \n\n```", "```py\n{% autoescape off %} \n    Hello {{ name }} \n{% endautoescape %} \n\n```", "```py\nAuto-escaping is on by default. Hello {{ name }} \n\n{% autoescape off %} \n    This will not be auto-escaped: {{ data }}. \n\n    Nor this: {{ other_data }} \n    {% autoescape on %} \n        Auto-escaping applies again: {{ name }} \n    {% endautoescape %} \n{% endautoescape %} \n\n```", "```py\n# base.html \n\n{% autoescape off %} \n<h1>{% block title %}{% endblock %}</h1> \n{% block content %} \n{% endblock %} \n{% endautoescape %} \n\n# child.html \n\n{% extends \"base.html\" %} \n{% block title %}This & that{% endblock %} \n{% block content %}{{ greeting }}{% endblock %} \n\n```", "```py\n<h1>This & that</h1> \n<b>Hello!</b> \n\n```", "```py\n{{ data|default:\"This is a string literal.\" }} \n\n```", "```py\n{{ data|default:\"3 &lt; 2\" }} \n\n```", "```py\n{{ data|default:\"3 < 2\" }} <== Bad! Don't do this. \n\n```", "```py\nTEMPLATES = [ \n    { \n        'BACKEND': 'django.template.backends.django.DjangoTemplates', \n        'DIRS': [ \n            '/home/html/templates/lawrence.com', \n            '/home/html/templates/default', \n        ], \n    }, \n] \n\n```", "```py\nTEMPLATES = [{ \n    'BACKEND': 'django.template.backends.django.DjangoTemplates', \n    'DIRS': [os.path.join(BASE_DIR, 'templates')], \n}] \n\n```", "```py\nINSTALLED_APPS = ['myproject.reviews', 'myproject.music'] \n\n```", "```py\nTEMPLATES = [{ \n    'BACKEND': 'django.template.backends.django.DjangoTemplates', \n    'APP_DIRS': True, \n}] \n\n```", "```py\nreviews/ \n    __init__.py \n    models.py \n    templatetags/ \n        __init__.py \n        review_extras.py \n    views.py \n\n```", "```py\n{% load review_extras %} \n\n```", "```py\n        books/\n        __init__.py\n        models.py\n        templatetags/\n        views.py\n```", "```py\n{% load review_extras %} \n\n```", "```py\nfrom django import template \nregister = template.Library() \n\n```", "```py\ndef cut(value, arg): \n    \"\"\"Removes all values of arg from the given string\"\"\" \n    return value.replace(arg, '') \n\n```", "```py\n{{ somevariable|cut:\"0\" }} \n\n```", "```py\ndef lower(value): # Only one argument. \n    \"\"\"Converts a string into all lowercase\"\"\" \n    return value.lower() \n\n```", "```py\nregister.filter('cut', cut) \nregister.filter('lower', lower) \n\n```", "```py\n@register.filter(name='cut') \ndef cut(value, arg): \n    return value.replace(arg, '') \n\n@register.filter \ndef lower(value): \n    return value.lower() \n\n```", "```py\nfrom django import template \nfrom django.template.defaultfilters import stringfilter \n\nregister = template.Library() \n\n@register.filter \n@stringfilter \ndef lower(value): \n    return value.lower() \n\n```", "```py\n        # Do something with the \"safe\" string.\n        ...\n```", "```py\n@register.filter(is_safe=True)\ndef myfilter(value):\n    return value\n\n```", "```py\n@register.filter(is_safe=True) \ndef add_xx(value): \n    return '%sxx' % value \n\n```", "```py\nfrom django import template \nfrom django.utils.html import conditional_escape \nfrom django.utils.safestring import mark_safe \n\nregister = template.Library() \n\n@register.filter(needs_autoescape=True) \ndef initial_letter_filter(text, autoescape=None): \n    first, other = text[0], text[1:] \n    if autoescape: \n        esc = conditional_escape \n    else: \n        esc = lambda x: x \n    result = '<strong>%s</strong>%s' % (esc(first), esc(other)) \n    return mark_safe(result) \n\n```", "```py\n@register.filter(expects_localtime=True) \ndef businesshours(value): \n    try: \n        return 9 <= value.hour < 17 \n    except AttributeError: \n        return '' \n\n```", "```py\nimport datetime \nfrom django import template \n\nregister = template.Library() \n\n@register.simple_tag \ndef current_time(format_string): \n    return datetime.datetime.now().strftime(format_string) \n\n```", "```py\n@register.simple_tag(takes_context=True) \ndef current_time(context, format_string): \n    timezone = context['timezone'] \n    return your_get_current_time_method(timezone, format_string) \n\n```", "```py\nregister.simple_tag(lambda x: x-1, name='minusone') \n\n@register.simple_tag(name='minustwo') \ndef some_function(value): \n    return value-2 \n\n```", "```py\n@register.simple_tag \ndef my_tag(a, b, *args, **kwargs): \n    warning = kwargs['warning'] \n    profile = kwargs['profile'] \n    ... \n    return ... \n\n```", "```py\n{% my_tag 123 \"abcd\" book.title warning=message|lower profile=user.profile %} \n\n```", "```py\n{% books_for_author author %} \n\n```", "```py\n<ul> \n    <li>The Cat In The Hat</li> \n    <li>Hop On Pop</li> \n    <li>Green Eggs And Ham</li> \n</ul> \n\n```", "```py\ndef books_for_author(author): \n    books = Book.objects.filter(authors__id=author.id) \n    return {'books': books} \n\n```", "```py\n<ul> \n{% for book in books %}<li>{{ book.title }}</li> \n{% endfor %} \n</ul> \n\n```", "```py\n# Here, register is a django.template.Library instance, as before \n@register.inclusion_tag('book_snippet.html') \ndef show_reviews(review): \n    ... \n\n```", "```py\nfrom django.template.loader import get_template \nt = get_template('book_snippet.html') \nregister.inclusion_tag(t)(show_reviews) \n\n```", "```py\n@register.inclusion_tag('link.html', takes_context=True) \ndef jump_link(context): \n    return { \n        'link': context['home_link'], \n        'title': context['home_title'], \n    } \n\n```", "```py\nJump directly to <a href=\"{{ link }}\">{{ title }}</a>. \n\n```", "```py\n{% jump_link %} \n\n```", "```py\n@register.assignment_tag \ndef get_current_time(format_string): \n    return datetime.datetime.now().strftime(format_string) \n\n```", "```py\n{% get_current_time \"%Y-%m-%d %I:%M %p\" as the_time %} \n<p>The time is {{ the_time }}.</p> \n\n```", "```py\n<p>The time is {% current_time \"%Y-%m-%d %I:%M %p\" %}.</p> \n\n```", "```py\nfrom django import template \n\ndef do_current_time(parser, token): \n    try: \n\n      tag_name, format_string = token.split_contents() \n\n    except ValueError: \n\n      raise template.TemplateSyntaxError(\"%r tag requires a single  argument\" % token.contents.split()[0]) \n\n   if not (format_string[0] == format_string[-1] and format_string[0]  in ('\"', \"'\")): \n        raise template.TemplateSyntaxError(\"%r tag's argument should  be in quotes\" % tag_name) \n   return CurrentTimeNode(format_string[1:-1]) \n\n```", "```py\nimport datetime \nfrom django import template \n\nclass CurrentTimeNode(template.Node): \n    def __init__(self, format_string): \n        self.format_string = format_string \n\n    def render(self, context): \n        return datetime.datetime.now().strftime(self.format_string) \n\n```", "```py\nfrom django.template import Context \n\ndef render(self, context): \n    # ... \n    new_context = Context({'var': obj}, autoescape=context.autoescape) \n    # ... Do something with new_context ... \n\n```", "```py\ndef render(self, context): \n    t = context.template.engine.get_template('small_fragment.html') \n    return t.render(Context({'var': obj}, autoescape=context.autoescape)) \n\n```", "```py\n{% for o in some_list %} \n    <tr class=\"{% cycle 'row1' 'row2' %}> \n        ... \n    </tr> \n{% endfor %} \n\n```", "```py\nimport itertools \nfrom django import template \n\nclass CycleNode(template.Node): \n    def __init__(self, cyclevars): \n        self.cycle_iter = itertools.cycle(cyclevars) \n\n    def render(self, context): \n        return next(self.cycle_iter) \n\nThread 1 performs its first loop iteration, `CycleNode.render()` returns 'row1'Thread 2 performs its first loop iteration, `CycleNode.render()` returns 'row2'Thread 1 performs its second loop iteration, `CycleNode.render()` returns 'row1'Thread 2 performs its second loop iteration, `CycleNode.render()` returns 'row2'\n```", "```py\nclass CycleNode(template.Node): \n    def __init__(self, cyclevars): \n        self.cyclevars = cyclevars \n\n    def render(self, context): \n        if self not in context.render_context: \n            context.render_context[self] =  itertools.cycle(self.cyclevars) \n        cycle_iter = context.render_context[self] \n        return next(cycle_iter) \n\n```", "```py\nregister.tag('current_time', do_current_time) \n\n```", "```py\n@register.tag(name=\"current_time\") \ndef do_current_time(parser, token): \n    ... \n\n@register.tag \ndef shout(parser, token): \n    ... \n\n```", "```py\n<p>This post was last updated at {% format_time blog_entry.date_updated \"%Y-%m-%d %I:%M %p\" %}.</p> \n\n```", "```py\nfrom django import template \n\ndef do_format_time(parser, token): \n    try: \n        # split_contents() knows not to split quoted strings. \n        tag_name, date_to_be_formatted, format_string =    \n        token.split_contents() \n    except ValueError: \n        raise template.TemplateSyntaxError(\"%r tag requires exactly  \n          two arguments\" % token.contents.split()[0]) \n    if not (format_string[0] == format_string[-1] and   \n          format_string[0] in ('\"', \"'\")): \n        raise template.TemplateSyntaxError(\"%r tag's argument should  \n          be in quotes\" % tag_name) \n    return FormatTimeNode(date_to_be_formatted, format_string[1:-1]) \n\n```", "```py\nclass FormatTimeNode(template.Node): \n    def __init__(self, date_to_be_formatted, format_string): \n        self.date_to_be_formatted =   \n          template.Variable(date_to_be_formatted) \n        self.format_string = format_string \n\n    def render(self, context): \n        try: \n            actual_date = self.date_to_be_formatted.resolve(context) \n            return actual_date.strftime(self.format_string) \n        except template.VariableDoesNotExist: \n            return '' \n\n```", "```py\nimport datetime \nfrom django import template \n\nclass CurrentTimeNode2(template.Node): \n    def __init__(self, format_string): \n        self.format_string = format_string \n    def render(self, context): \n        context['current_time'] = \n datetime.datetime.now().strftime(self.format_string)\n return ''\n\n```", "```py\n{% current_time \"%Y-%M-%d %I:%M %p\" %} \n<p>The time is {{ current_time }}.</p> \n\n```", "```py\n{% current_time \"%Y-%M-%d %I:%M %p\" as my_current_time %} \n<p>The current time is {{ my_current_time }}.</p> \n\n```", "```py\nimport re \n\nclass CurrentTimeNode3(template.Node): \n    def __init__(self, format_string, var_name): \n        self.format_string = format_string \n        self.var_name = var_name \n    def render(self, context): \n        context[self.var_name] =    \n          datetime.datetime.now().strftime(self.format_string) \n        return '' \n\ndef do_current_time(parser, token): \n    # This version uses a regular expression to parse tag contents. \n    try: \n        # Splitting by None == splitting by spaces. \n        tag_name, arg = token.contents.split(None, 1) \n    except ValueError: \n        raise template.TemplateSyntaxError(\"%r tag requires arguments\"    \n          % token.contents.split()[0]) \n    m = re.search(r'(.*?) as (\\w+)', arg) \n    if not m: \n        raise template.TemplateSyntaxError\n          (\"%r tag had invalid arguments\"% tag_name) \n    format_string, var_name = m.groups() \n    if not (format_string[0] == format_string[-1] and format_string[0]   \n       in ('\"', \"'\")): \n        raise template.TemplateSyntaxError(\"%r tag's argument should be  \n            in quotes\" % tag_name) \n    return CurrentTimeNode3(format_string[1:-1], var_name) \n\n```", "```py\ndef do_comment(parser, token): \n    nodelist = parser.parse(('endcomment',)) \n    parser.delete_first_token() \n    return CommentNode() \n\nclass CommentNode(template.Node): \n    def render(self, context): \n        return '' \n\n```", "```py\n{% upper %}This will appear in uppercase, {{ your_name }}.{% endupper %} \n\n```", "```py\ndef do_upper(parser, token): \n    nodelist = parser.parse(('endupper',)) \n    parser.delete_first_token() \n    return UpperNode(nodelist) \n\nclass UpperNode(template.Node): \n    def __init__(self, nodelist): \n        self.nodelist = nodelist \n    def render(self, context): \n        output = self.nodelist.render(context) \n        return output.upper() \n\n```"]