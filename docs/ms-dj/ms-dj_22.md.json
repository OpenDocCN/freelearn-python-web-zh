["```py\n            class Example(models.Model): \n            pass = models.IntegerField() # 'pass' is a reserved word! \n\n    ```", "```py\n        class Example(models.Model): \n            # 'foo__bar' has two underscores! \n            foo__bar = models.IntegerField()  \n\n```", "```py\nnum_pages = models.IntegerField(blank=True, null=True) \n\n```", "```py\ntitle = models.CharField(max_length=100) \n\n```", "```py\nfrom django.core.files import File \n# Open an existing file using Python's built-in open() \nf = open('/tmp/hello.world') \nmyfile = File(f) \n\n```", "```py\nfrom django.core.files.base import ContentFile \nmyfile = ContentFile(\"hello world\") \n\n```", "```py\nfrom django.db import models \n\nclass Car(models.Model): \n    manufacturer = models.ForeignKey('Manufacturer') \n    # ... \n\nclass Manufacturer(models.Model): \n    # ... \n    pass \n\n```", "```py\nclass Car(models.Model): \n    manufacturer = models.ForeignKey('production.Manufacturer') \n\n```", "```py\nstaff_member = models.ForeignKey(User, limit_choices_to={'is_staff': True}) \n\n```", "```py\ndef limit_pub_date_choices(): \n    return {'pub_date__lte': datetime.date.utcnow()} \nlimit_choices_to = limit_pub_date_choices \n\n```", "```py\nuser = models.ForeignKey(User, related_name='+') \n\n```", "```py\n# Declare the ForeignKey with related_query_name \nclass Tag(models.Model): \n    article = models.ForeignKey(Article, related_name=\"tags\",\n      related_query_name=\"tag\") \n    name = models.CharField(max_length=255) \n\n# That's now the name of the reverse filter \nArticle.objects.filter(tag__name=\"important\") \n\n```", "```py\nuser = models.ForeignKey(User, blank=True, null=True, on_delete=models.SET_NULL) \n\n```", "```py\nfrom django.db import models \n\nclass Person(models.Model): \n    friends = models.ManyToManyField(\"self\") \n\n```", "```py\nfrom django.conf import settings \nfrom django.db import models \n\nclass MySpecialUser(models.Model): \n    user = models.OneToOneField(settings.AUTH_USER_MODEL) \n    supervisor = models.OneToOneField(settings.AUTH_USER_MODEL, \n      related_name='supervisor_of') \n\n```", "```py\n>>> user = User.objects.get(pk=1)\n>>> hasattr(user, 'myspecialuser')\nTrue\n>>> hasattr(user, 'supervisor_of')\nTrue\n\n```", "```py\n>>> user.supervisor_of\nTraceback (most recent call last):\n ...\nDoesNotExist: User matching query does not exist.\n\n```"]