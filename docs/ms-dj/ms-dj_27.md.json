["```py\nif request.method == 'GET':\n     do_something() elif request.method == 'POST':\n     do_something_else() \n\n```", "```py\nif request.user.is_authenticated():\n     # Do something for logged-in users. else:\n     # Do something for anonymous users. \n\n```", "```py\nclass MultipleProxyMiddleware(object):\n     FORWARDED_FOR_FIELDS = [\n         'HTTP_X_FORWARDED_FOR',\n         'HTTP_X_FORWARDED_HOST',\n         'HTTP_X_FORWARDED_SERVER',\n     ]\n     def process_request(self, request):\n         \"\"\"\n         Rewrites the proxy headers so that only the most\n         recent proxy is used.\n         \"\"\"\n         for field in self.FORWARDED_FOR_FIELDS:\n             if field in request.META:\n                 if ',' in request.META[field]:\n                     parts = request.META[field].split(',')\n                     request.META[field] = parts[-1].strip() \n\n```", "```py\n>>> request.get_signed_cookie('name') \n'Tony' \n>>> request.get_signed_cookie('name', salt='name-salt') \n'Tony' # assuming cookie was set using the same salt \n>>> request.get_signed_cookie('non-existing-cookie') \n...\nKeyError: 'non-existing-cookie' \n>>> request.get_signed_cookie('non-existing-cookie', False) \nFalse \n>>> request.get_signed_cookie('cookie-that-was-tampered-with') \n... \nBadSignature: ... \n>>> request.get_signed_cookie('name', max_age=60)\n...\nSignatureExpired: Signature age 1677.3839159 > 60 seconds \n>>> request.get_signed_cookie('name', False, max_age=60) \nFalse\n\n```", "```py\nimport xml.etree.ElementTree as ET \nfor element in ET.iterparse(request):\n     process(element) \n\n```", "```py\n>>> QueryDict('a=1&a=2&c=3') \n<QueryDict: {'a': ['1', '2'], 'c': ['3']}>\n\n```", "```py\n>>> q = QueryDict('a=1', mutable=True) \n>>> q.update({'a': '2'}) \n>>> q.getlist('a')\n['1', '2'] \n>>> q['a'] # returns the last \n['2']\n\n```", "```py\n>>> q = QueryDict('a=1&a=2&a=3') \n>>> q.items() \n[('a', '3')]\n\n```", "```py\n>>> q = QueryDict('a=1&a=2&a=3') \n>>> q.values() \n['3']\n\n```", "```py\n>>> q = QueryDict('a=1&a=2&a=3') \n>>> q.lists() \n[('a', ['1', '2', '3'])]\n\n```", "```py\n>>> q = QueryDict('a=1&a=2&a=3', mutable=True) \n>>> q.pop('a') \n['1', '2', '3']\n\n```", "```py\n>>> q = QueryDict('a=1&a=2&a=3', mutable=True) \n>>> q.popitem() \n('a', ['1', '2', '3'])\n\n```", "```py\n>>> q = QueryDict('a=1&a=3&a=5') \n>>> q.dict() \n{'a': '5'}\n\n```", "```py\n>>> q = QueryDict('a=2&b=3&b=5') \n>>> q.urlencode() \n'a=2&b=3&b=5'\n\n```", "```py\n>>> q = QueryDict(mutable=True) \n>>> q['next'] = '/a&b/' \n>>> q.urlencode(safe='/') \n'next=/a%26b/'\n\n```", "```py\n>>> from django.http import HttpResponse \n>>> response = HttpResponse(\"Here's the text of the Web page.\") \n>>> response = HttpResponse(\"Text only, please.\",\n   content_type=\"text/plain\")\n\n```", "```py\n>>> response = HttpResponse() \n>>> response.write(\"<p>Here's the text of the Web page.</p>\") \n>>> response.write(\"<p>Here's another paragraph.</p>\")\n\n```", "```py\n>>> response = HttpResponse() \n>>> response['Age'] = 120 \n>>> del response['Age']\n\n```", "```py\n>>> response = HttpResponse\n  (my_data, content_type='application/vnd.ms-excel') \n>>> response['Content-Disposition'] = 'attachment; filename=\"foo.xls\"'\n\n```", "```py\nHttpResponse.__init__(content='', \n  content_type=None, status=200, reason=None, charset=None) \n\n```", "```py\nHttpResponse.set_cookie(key, value='', \n  max_age=None, expires=None, path='/', \n  domain=None, secure=None, httponly=False) \n\n```", "```py\nclass JsonResponse(data, encoder=DjangoJSONEncoder, safe=True, **kwargs) \n\n```", "```py\n>>> from django.http import JsonResponse >>> response = JsonResponse({'foo': 'bar'}) >>> response.content '{\"foo\": \"bar\"}'\n\n```", "```py\nresponse = JsonResponse([1, 2, 3], safe=False) \n\n```", "```py\nresponse = JsonResponse(data, encoder=MyJSONEncoder) \n\n```", "```py\n>>> from django.http import FileResponse \n>>> response = FileResponse(open('myfile.png', 'rb'))\n\n```", "```py\nfrom django.core.exceptions import PermissionDenied\n\ndef edit(request, pk):\n     if not request.user.is_staff:\n         raise PermissionDenied\n     # ... \n\n```", "```py\nhandler404 = 'mysite.views.my_custom_page_not_found_view' \n\n```", "```py\nhandler500 = 'mysite.views.my_custom_error_view' \n\n```", "```py\nhandler403 = 'mysite.views.my_custom_permission_denied_view' \n\n```", "```py\nhandler400 = 'mysite.views.my_custom_bad_request_view' \n\n```"]