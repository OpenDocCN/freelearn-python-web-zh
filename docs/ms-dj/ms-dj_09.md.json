["```py\nfrom django.db import models \n\nclass Publisher(models.Model): \n    name = models.CharField(max_length=30) \n    address = models.CharField(max_length=50) \n    city = models.CharField(max_length=60) \n    state_province = models.CharField(max_length=30) \n    country = models.CharField(max_length=50) \n    website = models.URLField() \n\n    def __str__(self): \n        return self.name \n\nclass Author(models.Model): \n    first_name = models.CharField(max_length=30) \n    last_name = models.CharField(max_length=40) \n    email = models.EmailField() \n\n    def __str__(self): \n        return '%s %s' % (self.first_name, self.last_name) \n\nclass Book(models.Model): \n    title = models.CharField(max_length=100) \n    authors = models.ManyToManyField(Author) \n    publisher = models.ForeignKey(Publisher) \n    publication_date = models.DateField() \n\n    def __str__(self): \n        return self.title \n\n```", "```py\n>>> from mysite.books.models import Book \n>>> b = Book.objects.get(id=50) \n>>> b.title \n'The Django Book' \n\n```", "```py\n>>> b = Book.objects.get(id=50) \n>>> b.publisher \n<Publisher: Apress Publishing> \n>>> b.publisher.website \n'http://www.apress.com/' \n\n```", "```py\n>>> p = Publisher.objects.get(name='Apress Publishing') \n>>> p.book_set.all() \n[<Book: The Django Book>, <Book: Dive Into Python>, ...] \n\n```", "```py\n>>> p = Publisher.objects.get(name='Apress Publishing') \n>>> p.book_set.filter(title__icontains='django') \n[<Book: The Django Book>, <Book: Pro Django>] \n\n```", "```py\n>>> b = Book.objects.get(id=50) \n>>> b.authors.all() \n[<Author: Adrian Holovaty>, <Author: Jacob Kaplan-Moss>] \n>>> b.authors.filter(first_name='Adrian') \n[<Author: Adrian Holovaty>] \n>>> b.authors.filter(first_name='Adam') \n[] \n\n```", "```py\n>>> a = Author.objects.get(first_name='Adrian', last_name='Holovaty') \n>>> a.book_set.all() \n[<Book: The Django Book>, <Book: Adrian's Other Book>] \n\n```", "```py\n# models.py \n\nfrom django.db import models \n\n# ... Author and Publisher models here ... \n\nclass BookManager(models.Manager): \n    def title_count(self, keyword): \n        return self.filter(title__icontains=keyword).count() \n\nclass Book(models.Model): \n    title = models.CharField(max_length=100) \n    authors = models.ManyToManyField(Author) \n    publisher = models.ForeignKey(Publisher) \n    publication_date = models.DateField() \n    num_pages = models.IntegerField(blank=True, null=True) \n    objects = BookManager() \n\n    def __str__(self): \n        return self.title \n\n```", "```py\n>>> Book.objects.title_count('django') \n4 \n>>> Book.objects.title_count('python') \n18 \n\n```", "```py\nfrom django.db import models \n\n# First, define the Manager subclass. \nclass DahlBookManager(models.Manager): \n    def get_queryset(self): \n        return super(DahlBookManager, self).get_queryset().filter(author='Roald Dahl') \n\n# Then hook it into the Book model explicitly. \nclass Book(models.Model): \n    title = models.CharField(max_length=100) \n    author = models.CharField(max_length=50) \n    # ... \n\n    objects = models.Manager() # The default manager. \n    dahl_objects = DahlBookManager() # The Dahl-specific manager. \n\n```", "```py\nBook.dahl_objects.all() \nBook.dahl_objects.filter(title='Matilda') \nBook.dahl_objects.count() \n\n```", "```py\nclass MaleManager(models.Manager): \n    def get_queryset(self): \n        return super(MaleManager, self).get_queryset().filter(sex='M') \n\nclass FemaleManager(models.Manager): \n    def get_queryset(self): \n        return super(FemaleManager, self).get_queryset().filter(sex='F') \n\nclass Person(models.Model): \n    first_name = models.CharField(max_length=50) \n    last_name = models.CharField(max_length=50) \n    sex = models.CharField(max_length=1,  \n                           choices=( \n                                    ('M', 'Male'),   \n                                    ('F', 'Female') \n                           ) \n                           ) \n    people = models.Manager() \n    men = MaleManager() \n    women = FemaleManager() \n\n```", "```py\nfrom django.db import models \n\nclass Person(models.Model): \n    first_name = models.CharField(max_length=50) \n    last_name = models.CharField(max_length=50) \n    birth_date = models.DateField() \n\n    def baby_boomer_status(self): \n        # Returns the person's baby-boomer status. \n        import datetime \n        if self.birth_date < datetime.date(1945, 8, 1): \n            return \"Pre-boomer\" \n        elif self.birth_date < datetime.date(1965, 1, 1): \n            return \"Baby boomer\" \n        else: \n            return \"Post-boomer\" \n\n    def _get_full_name(self): \n        # Returns the person's full name.\" \n        return '%s %s' % (self.first_name, self.last_name) \n    full_name = property(_get_full_name) \n\n```", "```py\nfrom django.db import models \n\nclass Blog(models.Model): \n    name = models.CharField(max_length=100) \n    tagline = models.TextField() \n\n    def save(self, *args, **kwargs): \n        do_something() \n        super(Blog, self).save(*args, **kwargs) # Call the \"real\" save() method. \n        do_something_else() \n\n```", "```py\nfrom django.db import models \n\nclass Blog(models.Model): \n    name = models.CharField(max_length=100) \n    tagline = models.TextField() \n\n    def save(self, *args, **kwargs): \n        if self.name == \"Yoko Ono's blog\": \n            return # Yoko shall never have her own blog! \n        else: \n            super(Blog, self).save(*args, **kwargs) # Call the \"real\" save() method. \n\n```", "```py\nManager.raw(raw_query, params=None, translations=None)\n```", "```py\nclass Person(models.Model): \n    first_name = models.CharField(...) \n    last_name = models.CharField(...) \n    birth_date = models.DateField(...) \n\n```", "```py\n>>> for p in Person.objects.raw('SELECT * FROM myapp_person'): \n...     print(p) \nJohn Smith \nJane Jones \n\n```", "```py\n>>> Person.objects.raw('SELECT id, first_name, last_name, birth_date FROM myapp_person') \n... \n>>> Person.objects.raw('SELECT last_name, birth_date, first_name, id FROM myapp_person') \n... \n\n```", "```py\n>>> Person.objects.raw('''SELECT first AS first_name, \n...                              last AS last_name, \n...                              bd AS birth_date, \n...                              pk AS id, \n...                       FROM some_other_table''') \n\n```", "```py\n>>> name_map = {'first': 'first_name', 'last': 'last_name', 'bd': 'birth_date', 'pk': 'id'} \n>>> Person.objects.raw('SELECT * FROM some_other_table', translations=name_map) \n\n```", "```py\n>>> first_person = Person.objects.raw('SELECT * FROM myapp_person')[0] \n\n```", "```py\n>>> first_person = Person.objects.raw('SELECT * FROM myapp_person LIMIT 1')[0] \n\n```", "```py\n>>> people = Person.objects.raw('SELECT id, first_name FROM myapp_person') \n\n```", "```py\n>>> for p in Person.objects.raw('SELECT id, first_name FROM myapp_person'): \n...     print(p.first_name, # This will be retrieved by the original query \n...           p.last_name) # This will be retrieved on demand \n... \nJohn Smith \nJane Jones \n\n```", "```py\n>>> people = Person.objects.raw('SELECT *, age(birth_date) AS age FROM myapp_person') \n>>> for p in people: \n...     print(\"%s is %s.\" % (p.first_name, p.age)) \nJohn is 37\\. \nJane is 42\\. \n... \n\n```", "```py\n>>> lname = 'Doe' \n>>> Person.objects.raw('SELECT * FROM myapp_person WHERE last_name = %s', [lname]) \n\n```", "```py\nfrom django.db import connection \n\ndef my_custom_sql(self): \n    cursor = connection.cursor() \n    cursor.execute(\"UPDATE bar SET foo = 1 WHERE baz = %s\", [self.baz]) \n    cursor.execute(\"SELECT foo FROM bar WHERE baz = %s\", [self.baz]) \n    row = cursor.fetchone() \n\n    return row \n\n```", "```py\ncursor.execute(\"SELECT foo FROM bar WHERE baz = '30%'\") \ncursor.execute(\"SELECT foo FROM bar WHERE baz = '30%%' AND  \n  id = %s\", [self.id]) \n\n```", "```py\nfrom django.db import connections \ncursor = connections['my_db_alias'].cursor() \n# Your code here... \n\n```", "```py\ndef dictfetchall(cursor): \n    # Returns all rows from a cursor as a dict \n    desc = cursor.description \n    return [ \n        dict(zip([col[0] for col in desc], row)) \n        for row in cursor.fetchall() \n    ] \n\n```", "```py\n>>> cursor.execute(\"SELECT id, parent_id FROM test LIMIT 2\"); \n>>> cursor.fetchall() \n((54360982L, None), (54360880L, None)) \n\n>>> cursor.execute(\"SELECT id, parent_id FROM test LIMIT 2\"); \n>>> dictfetchall(cursor) \n[{'parent_id': None, 'id': 54360982L}, {'parent_id': None, 'id': 54360880L}] \n\n```", "```py\nwith connection.cursor() as c: \n    c.execute(...) \n\n```", "```py\nc = connection.cursor() \ntry: \n    c.execute(...) \nfinally: \n    c.close() \n\n```", "```py\nfrom django.db import models \n\nclass PollManager(models.Manager): \n    def with_counts(self): \n        from django.db import connection \n        cursor = connection.cursor() \n        cursor.execute(\"\"\" \n            SELECT p.id, p.question, p.poll_date, COUNT(*) \n            FROM polls_opinionpoll p, polls_response r \n            WHERE p.id = r.poll_id \n            GROUP BY p.id, p.question, p.poll_date \n            ORDER BY p.poll_date DESC\"\"\") \n        result_list = [] \n        for row in cursor.fetchall(): \n            p = self.model(id=row[0], question=row[1], poll_date=row[2]) \n            p.num_responses = row[3] \n            result_list.append(p) \n        return result_list \n\nclass OpinionPoll(models.Model): \n    question = models.CharField(max_length=200) \n    poll_date = models.DateField() \n    objects = PollManager() \n\nclass Response(models.Model): \n    poll = models.ForeignKey(OpinionPoll) \n    person_name = models.CharField(max_length=50) \n    response = models.TextField() \n\n```"]