["```py\nfrom django.utils.translation import ugettext as _ \nfrom django.http import HttpResponse \n\ndef my_view(request): \n    output = _(\"Welcome to my site.\") \n    return HttpResponse(output) \n\n```", "```py\nfrom django.utils.translation import ugettext \nfrom django.http import HttpResponse \n\ndef my_view(request): \n    output = ugettext(\"Welcome to my site.\") \n    return HttpResponse(output) \n\n```", "```py\ndef my_view(request): \n    words = ['Welcome', 'to', 'my', 'site.'] \n    output = _(' '.join(words)) \n    return HttpResponse(output) \n\n```", "```py\ndef my_view(request): \n    sentence = 'Welcome to my site.' \n    output = _(sentence) \n    return HttpResponse(output) \n\n```", "```py\ndef my_view(request, m, d): \n    output = _('Today is %(month)s %(day)s.') % {'month': m, 'day': d} \n    return HttpResponse(output) \n\n```", "```py\ndef my_view(request): \n    # Translators: This message appears on the home page only \n    output = ugettext(\"Welcome to my site.\") \n\n```", "```py\n#. Translators: This message appears on the home page only \n# path/to/python/file.py:123 \nmsgid \"Welcome to my site.\" \nmsgstr \"\" \n\n```", "```py\nfrom django.utils.translation import ungettext \nfrom django.http import HttpResponse \n\ndef hello_world(request, count): \n    page = ungettext( \n        'there is %(count)d object', \n        'there are %(count)d objects', \n    count) % { \n        'count': count, \n    } \n    return HttpResponse(page) \n\n```", "```py\nfrom django.utils.translation import ungettext \nfrom myapp.models import Report \n\ncount = Report.objects.count() \nif count == 1: \n    name = Report._meta.verbose_name \nelse: \n    name = Report._meta.verbose_name_plural \n\ntext = ungettext( \n    'There is %(count)d %(name)s available.', \n    'There are %(count)d %(name)s available.', \n    count \n    ) % { \n      'count': count, \n      'name': name \n    } \n\n```", "```py\ntext = ungettext( \n    'There is %(count)d %(name)s object available.', \n    'There are %(count)d %(name)s objects available.', \n    count \n    ) % { \n      'count': count, \n      'name': Report._meta.verbose_name, \n    } \n\n```", "```py\ntext = ungettext( \n    'There is %(count)d %(name)s available.', \n    'There are %(count)d %(plural_name)s available.', \n    count \n    ) % { \n      'count': Report.objects.count(), \n      'name': Report._meta.verbose_name, \n      'plural_name': Report._meta.verbose_name_plural \n    } \n\n```", "```py\na format specification for argument 'name', as in 'msgstr[0]', doesn't exist in 'msgid' \n\n```", "```py\nfrom django.utils.translation import pgettext \n\nmonth = pgettext(\"month name\", \"May\") \n\n```", "```py\nfrom django.db import models \nfrom django.utils.translation import pgettext_lazy \n\nclass MyThing(models.Model): \n    name = models.CharField(help_text=pgettext_lazy( \n        'help text for MyThing model', 'This is the help text')) \n\n```", "```py\nmsgctxt \"month name\" \nmsgid \"May\" \nmsgstr \"\" \n\n```", "```py\nfrom django.db import models \nfrom django.utils.translation import ugettext_lazy as _ \n\nclass MyThing(models.Model): \n    name = models.CharField(help_text=_('This is the help text')) \n\n```", "```py\nclass MyThing(models.Model): \n    kind = models.ForeignKey(ThingKind, related_name='kinds',  verbose_name=_('kind')) \n\n```", "```py\nfrom django.db import models \nfrom django.utils.translation import ugettext_lazy as _ \n\nclass MyThing(models.Model): \n    name = models.CharField(_('name'), help_text=_('This is the help  text')) \n\n    class Meta: \n        verbose_name = _('my thing') \n        verbose_name_plural = _('my things') \n\n```", "```py\nfrom django.db import models \nfrom django.utils.translation import ugettext_lazy as _ \n\nclass MyThing(models.Model): \n    kind = models.ForeignKey(ThingKind, related_name='kinds', \n                             verbose_name=_('kind')) \n\n    def is_mouse(self): \n        return self.kind.type == MOUSE_TYPE \n        is_mouse.short_description = _('Is it a mouse?') \n\n```", "```py\n# This is fine: putting a unicode proxy into a unicode string. \n\"Hello %s\" % ugettext_lazy(\"people\") \n\n# This will not work, since you cannot insert a unicode object \n# into a bytestring (nor can you insert our unicode proxy there) \nb\"Hello %s\" % ugettext_lazy(\"people\") \n\n```", "```py\nfrom django.db import models \nfrom django.utils.translation import ugettext_lazy as _ \n\nclass MyThing(models.Model): \n    name = models.CharField(help_text=_('This is the help text')) \n\n```", "```py\nfrom django import forms \nfrom django.utils.translation import ugettext_lazy \n\nclass MyForm(forms.Form): \n    error_message = ungettext_lazy(\"You only provided %(num)d    \n      argument\", \"You only provided %(num)d arguments\", 'num') \n\n    def clean(self): \n        # ... \n        if error: \n            raise forms.ValidationError(self.error_message %  \n              {'num': number}) \n\n```", "```py\nclass MyForm(forms.Form): \n    error_message = ungettext_lazy(\"You provided %d argument\", \n        \"You provided %d arguments\") \n\n    def clean(self): \n        # ... \n        if error: \n            raise forms.ValidationError(self.error_message % number) \n\n```", "```py\nfrom django.utils.translation import string_concat \nfrom django.utils.translation import ugettext_lazy \n# ... \nname = ugettext_lazy('John Lennon') \ninstrument = ugettext_lazy('guitar') \nresult = string_concat(name, ': ', instrument) \n\n```", "```py\nfrom django.utils import six  # Python 3 compatibility \nfrom django.utils.functional import lazy \nfrom django.utils.safestring import mark_safe \nfrom django.utils.translation import ugettext_lazy as _ \n\nmark_safe_lazy = lazy(mark_safe, six.text_type) \n\n```", "```py\nlazy_string = mark_safe_lazy(_(\"<p>My <strong>string!</strong></p>\")) \n\n```", "```py\n>>> from django.utils.translation import get_language_info \n>>> li = get_language_info('de') \n>>> print(li['name'], li['name_local'], li['bidi']) \nGerman Deutsch False \n\n```", "```py\n<title>{% trans \"This is the title.\" %}</title> \n<title>{% trans myvar %}</title> \n\n```", "```py\n<title>{% trans \"myvar\" noop %}</title> \n\n```", "```py\n{% trans \"This is the title\" as the_title %} \n\n```", "```py\n{% trans \"starting point\" as start %} \n{% trans \"end point\" as end %} \n{% trans \"La Grande Boucle\" as race %} \n\n<h1> \n  <a href=\"/\" >{{ race }}</a> \n</h1> \n<p> \n{% for stage in tour_stages %} \n    {% cycle start end %}: {{ stage }}{% if forloop.counter|divisibleby:2 %}<br />{% else %}, {% endif %} \n{% endfor %} \n</p> \n\n```", "```py\n{% trans \"May\" context \"month name\" %} \n\n```", "```py\n{% blocktrans %}This string will have {{ value }} inside.{% endblocktrans %} \n\n```", "```py\n{% blocktrans with amount=article.price %} \nThat will cost $ {{ amount }}. \n{% endblocktrans %} \n\n{% blocktrans with myvar=value|filter %} \nThis will have {{ myvar }} inside. \n{% endblocktrans %} \n\n```", "```py\n{% blocktrans with book_t=book|title author_t=author|title %} \nThis is {{ book_t }} by {{ author_t }} \n{% endblocktrans %} \n\n```", "```py\n{% blocktrans count counter=list|length %} \nThere is only one {{ name }} object. \n{% plural %} \nThere are {{ counter }} {{ name }} objects. \n{% endblocktrans %} \n\n```", "```py\n{% blocktrans with amount=article.price count years=i.length %} \nThat will cost $ {{ amount }} per year. \n{% plural %} \nThat will cost $ {{ amount }} per {{ years }} years. \n{% endblocktrans %} \n\n```", "```py\n{% url 'path.to.view' arg arg2 as the_url %} \n{% blocktrans %} \nThis is a URL: {{ the_url }} \n{% endblocktrans %} \n\n```", "```py\n{% blocktrans with name=user.username context \"greeting\" %} \nHi {{ name }}{% endblocktrans %} \n\n```", "```py\n{% blocktrans trimmed %} \n  First sentence. \n  Second paragraph. \n{% endblocktrans %} \n\n```", "```py\n{% some_tag _(\"Page not found\") value|yesno:_(\"yes,no\") %} \n\n```", "```py\n{% comment %}Translators: View verb{% endcomment %} \n{% trans \"View\" %} \n\n{% comment %}Translators: Short intro blurb{% endcomment %} \n<p>{% blocktrans %} \n    A multiline translatable literal. \n   {% endblocktrans %} \n</p> \n\n```", "```py\n{# Translators: Label of a button that triggers search #} \n<button type=\"submit\">{% trans \"Go\" %}</button> \n\n{# Translators: This is a text of the base template #} \n{% blocktrans %}Ambiguous translatable block of text{% endblocktrans %} \n\n```", "```py\n#. Translators: View verb \n# path/to/template/file.html:10 \nmsgid \"View\" \nmsgstr \"\" \n\n#. Translators: Short intro blurb \n# path/to/template/file.html:13 \nmsgid \"\" \n\"A multiline translatable\" \n\"literal.\" \nmsgstr \"\" \n\n# ... \n\n#. Translators: Label of a button that triggers search \n# path/to/template/file.html:100 \nmsgid \"Go\" \nmsgstr \"\" \n\n#. Translators: This is a text of the base template \n# path/to/template/file.html:103 \nmsgid \"Ambiguous translatable block of text\" \nmsgstr \"\" \n\n```", "```py\n{% load i18n %} \n\n{% get_current_language as LANGUAGE_CODE %} \n<!-- Current language: {{ LANGUAGE_CODE }} --> \n<p>{% trans \"Welcome to our page\" %}</p> \n\n{% language 'en' %} \n\n    {% get_current_language as LANGUAGE_CODE %} \n    <!-- Current language: {{ LANGUAGE_CODE }} --> \n    <p>{% trans \"Welcome to our page\" %}</p> \n\n{% endlanguage %} \n\n```", "```py\n{% get_language_info for LANGUAGE_CODE as lang %} \n{% get_language_info for \"pl\" as lang %} \n\n```", "```py\nLanguage code: {{ lang.code }}<br /> \nName of language: {{ lang.name_local }}<br /> \nName in English: {{ lang.name }}<br /> \nBi-directional: {{ lang.bidi }} \n\n```", "```py\ncontext = {'available_languages': ['en', 'es', 'fr']} \nreturn render(request, 'mytemplate.html', context) \n\n```", "```py\n{% get_language_info_list for available_languages as langs %} \n{% for lang in langs %} ... {% endfor %} \n\n```", "```py\nfrom django.views.i18n import javascript_catalog \n\njs_info_dict = { \n    'packages': ('your.app.package',), \n} \n\nurlpatterns = [ \n    url(r'^jsi18n/$', javascript_catalog, js_info_dict), \n] \n\n```", "```py\nurlpatterns = [ \n    url(r'^jsi18n/(?P<packages>\\S+?)/$', javascript_catalog), \n] \n\n```", "```py\n<script type=\"text/javascript\" src=\"img/{% url  'django.views.i18n.javascript_catalog' %}\"></script> \n\n```", "```py\ndocument.write(gettext('this is to be translated')); \n\n```", "```py\nvar object_cnt = 1 // or 0, or 2, or 3, ... \ns = ngettext('literal for the singular case', \n      'literal for the plural case', object_cnt); \n\n```", "```py\nfunction interpolate(fmt, obj, named); \n\n```", "```py\n        fmts = ngettext('There is %s object. Remaining: %s', \n                 'There are %s objects. Remaining: %s', 11); \n        s = interpolate(fmts, [11, 20]); \n        // s is 'There are 11 objects. Remaining: 20' \n\n```", "```py\n        d = { \n            count: 10, \n            total: 50 \n        }; \n\n        fmts = ngettext('Total: %(total)s, there is %(count)s  \n          object', \n          'there are %(count)s of a total of %(total)s objects', \n            d.count); \n        s = interpolate(fmts, d, true); \n\n```", "```py\nfrom django.views.decorators.cache import cache_page \nfrom django.views.i18n import javascript_catalog \n\n# The value returned by get_version() must change when translations change. \n@cache_page(86400, key_prefix='js18n-%s' % get_version()) \ndef cached_javascript_catalog(request, domain='djangojs', packages=None): \n    return javascript_catalog(request, domain, packages) \n\n```", "```py\nfrom django.utils import timezone \nfrom django.views.decorators.http import last_modified \nfrom django.views.i18n import javascript_catalog \n\nlast_modified_date = timezone.now() \n\n@last_modified(lambda req, **kw: last_modified_date) \ndef cached_javascript_catalog(request, domain='djangojs', packages=None): \n    return javascript_catalog(request, domain, packages) \n\n```", "```py\nfrom django.conf.urls import include, url \nfrom django.conf.urls.i18n import i18n_patterns \nfrom about import views as about_views \nfrom news import views as news_views \nfrom sitemap.views import sitemap \n\nurlpatterns = [ \n    url(r'^sitemap\\.xml$', sitemap, name='sitemap_xml'), \n] \n\nnews_patterns = [ \n    url(r'^$', news_views.index, name='index'), \n    url(r'^category/(?P<slug>[\\w-]+)/$',  \n        news_views.category, \n        name='category'), \n    url(r'^(?P<slug>[\\w-]+)/$', news_views.details, name='detail'), \n] \n\nurlpatterns += i18n_patterns( \n    url(r'^about/$', about_views.main, name='about'), \n    url(r'^news/', include(news_patterns, namespace='news')), \n) \n\n```", "```py\nfrom django.core.urlresolvers import reverse \nfrom django.utils.translation import activate \n\n>>> activate('en') \n>>> reverse('sitemap_xml') \n'/sitemap.xml' \n>>> reverse('news:index') \n'/en/news/' \n\n>>> activate('nl') \n>>> reverse('news:detail', kwargs={'slug': 'news-slug'}) \n'/nl/news/news-slug/' \n\n```", "```py\nfrom django.conf.urls import include, url \nfrom django.conf.urls.i18n import i18n_patterns \nfrom django.utils.translation import ugettext_lazy as _ \n\nfrom about import views as about_views \nfrom news import views as news_views \nfrom sitemaps.views import sitemap \n\nurlpatterns = [ \n    url(r'^sitemap\\.xml$', sitemap, name='sitemap_xml'), \n] \n\nnews_patterns = [ \n    url(r'^$', news_views.index, name='index'), \n    url(_(r'^category/(?P<slug>[\\w-]+)/$'),  \n        news_views.category, \n        name='category'), \n    url(r'^(?P<slug>[\\w-]+)/$', news_views.details, name='detail'), \n] \n\nurlpatterns += i18n_patterns( \n    url(_(r'^about/$'), about_views.main, name='about'), \n    url(_(r'^news/'), include(news_patterns, namespace='news')), \n) \n\n```", "```py\n>>> from django.core.urlresolvers import reverse \n>>> from django.utils.translation import activate \n\n>>> activate('en') \n>>> reverse('news:category', kwargs={'slug': 'recent'}) \n'/en/news/category/recent/' \n\n>>> activate('nl') \n>>> reverse('news:category', kwargs={'slug': 'recent'}) \n'/nl/nieuws/categorie/recent/' \n\n```", "```py\n{% load i18n %} \n\n{% get_available_languages as languages %} \n\n{% trans \"View this category in:\" %} \n{% for lang_code, lang_name in languages %} \n    {% language lang_code %} \n    <a href=\"{% url 'category' slug=category.slug %}\">{{ lang_name }}</a> \n    {% endlanguage %} \n{% endfor %} \n\n```", "```py\ndjango-admin makemessages -l de \n\n```", "```py\ndjango-admin makemessages -l de -e txt \n\n```", "```py\ndjango-admin makemessages -l de -e html,txt -e xml \n\n```", "```py\n_(\"Welcome to my site.\") \n\n```", "```py\n#: path/to/python/module.py:23 \nmsgid \"Welcome to my site.\" \nmsgstr \"\" \n\n```", "```py\ndjango-admin makemessages -a \n\n```", "```py\ndjango-admin compilemessages \n\n```", "```py\ndjango-admin makemessages -d djangojs -l de \n\n```", "```py\nfrom django.core.management.commands import makemessages \n\nclass Command(makemessages.Command): \n    xgettext_options = makemessages.Command.xgettext_options +  \n      ['-keyword=mytrans'] \n\n```", "```py\nfrom django.core.management.commands import makemessages \n\nclass Command(makemessages.Command): \n\n    def add_arguments(self, parser): \n        super(Command, self).add_arguments(parser) \n        parser.add_argument('-extra-keyword', \n                            dest='xgettext_keywords',  \n                            action='append') \n\n    def handle(self, *args, **options): \n        xgettext_keywords = options.pop('xgettext_keywords') \n        if xgettext_keywords: \n            self.xgettext_options = ( \n                makemessages.Command.xgettext_options[:] + \n                ['-keyword=%s' % kwd for kwd in xgettext_keywords] \n            ) \n        super(Command, self).handle(*args, **options) \n\n```", "```py\nfrom django.utils import translation \nuser_language = 'fr' \ntranslation.activate(user_language) \nrequest.session[translation.LANGUAGE_SESSION_KEY] = user_language \n\n```", "```py\nfrom django.utils import translation \nfrom django import http \nfrom django.conf import settings \nuser_language = 'fr' \ntranslation.activate(user_language) \nresponse = http.HttpResponse(...) \nresponse.set_cookie(settings.LANGUAGE_COOKIE_NAME, user_language) \n\n```", "```py\nfrom django.utils import translation \ndef welcome_translated(language): \n    cur_language = translation.get_language() \n    try: \n        translation.activate(language) \n        text = translation.ugettext('welcome') \n    finally: \n        translation.activate(cur_language) \n    return text \n\n```", "```py\nMIDDLEWARE_CLASSES = [ \n   'django.contrib.sessions.middleware.SessionMiddleware', \n   'django.middleware.locale.LocaleMiddleware', \n   'django.middleware.common.CommonMiddleware', \n] \n\n```", "```py\n\n        LANGUAGES = [ \n          ('de', _('German')), \n          ('en', _('English')), \n        ] \n\n```", "```py\nfrom django.utils.translation import ugettext_lazy as _ \n\nLANGUAGES = [ \n    ('de', _('German')), \n    ('en', _('English')), \n] \n\n```", "```py\nfrom django.http import HttpResponse \n\ndef hello_world(request, count): \n    if request.LANGUAGE_CODE == 'de-at': \n        return HttpResponse(\"You prefer to read Austrian German.\") \n    else: \n        return HttpResponse(\"You prefer to read another language.\") \n\n```"]