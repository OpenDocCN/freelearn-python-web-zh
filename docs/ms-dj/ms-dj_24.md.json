["```py\nfrom django.conf.urls import url \n\n    from myapp.views import HomePageView \n\n    urlpatterns = [ \n        url(r'^$', HomePageView.as_view(), name='home'), \n    ] \n\n```", "```py\nfrom django.views.generic.base import TemplateView \nfrom articles.models import Article \n\nclass HomePageView(TemplateView): \n\n    template_name = \"home.html\" \n\n    def get_context_data(self, **kwargs): \n        context = super(HomePageView, self).get_context_data(**kwargs) \n        context['latest_articles'] = Article.objects.all()[:5] \n        return context \n\n```", "```py\nfrom django.shortcuts import get_object_or_404 \n\nfrom django.views.generic.base import RedirectView \n\nfrom articles.models import Article \n\nclass ArticleCounterRedirectView(RedirectView): \n\n    permanent = False \n    query_string = True \n    pattern_name = 'article-detail' \n\n    def get_redirect_url(self, *args, **kwargs): \n        article = get_object_or_404(Article, pk=kwargs['pk']) \n        article.update_counter() \n        return super(ArticleCounterRedirectView,  \n                     self).get_redirect_url(*args, **kwargs) \n\n```", "```py\nfrom django.conf.urls import url \nfrom django.views.generic.base import RedirectView \n\nfrom article.views import ArticleCounterRedirectView, ArticleDetail \n\nurlpatterns = [ \n    url(r'^counter/(?P<pk>[0-9]+)/$',  \n        ArticleCounterRedirectView.as_view(),  \n        name='article-counter'), \n    url(r'^details/(?P<pk>[0-9]+)/$',  \n        ArticleDetail.as_view(), \n        name='article-detail'), \n    url(r'^go-to-django/$',  \n        RedirectView.as_view(url='http://djangoproject.com'),  \n        name='go-to-django'), \n] \n\n```", "```py\ndjango.views.generic.list.ListView \n\n```", "```py\nfrom django.views.generic.list import ListView \nfrom django.utils import timezone \n\nfrom articles.models import Article \n\nclass ArticleListView(ListView): \n\n    model = Article \n\n    def get_context_data(self, **kwargs): \n        context = super(ArticleListView, self).get_context_data(**kwargs) \n        context['now'] = timezone.now() \n        return context \n\n```", "```py\nfrom django.conf.urls import url \n\nfrom article.views import ArticleListView \n\nurlpatterns = [ \n    url(r'^$', ArticleListView.as_view(), name='article-list'), \n] \n\n```", "```py\n<h1>Articles</h1> \n<ul> \n{% for article in object_list %} \n    <li>{{ article.pub_date|date }}-{{ article.headline }}</li> \n{% empty %} \n    <li>No articles yet.</li> \n{% endfor %} \n</ul> \n\n```", "```py\nfrom django.views.generic.detail import DetailView \nfrom django.utils import timezone \n\nfrom articles.models import Article \n\nclass ArticleDetailView(DetailView): \n\n    model = Article \n\n    def get_context_data(self, **kwargs): \n        context = super(ArticleDetailView,  \n                        self).get_context_data(**kwargs) \n        context['now'] = timezone.now() \n        return context \n\n```", "```py\nfrom django.conf.urls import url \n\nfrom article.views import ArticleDetailView \n\nurlpatterns = [ \n    url(r'^(?P<slug>[-_\\w]+)/$',  \n        ArticleDetailView.as_view(),  \n        name='article-detail'), \n] \n\n```", "```py\n<h1>{{ object.headline }}</h1> \n<p>{{ object.content }}</p> \n<p>Reporter: {{ object.reporter }}</p> \n<p>Published: {{ object.pub_date|date }}</p> \n<p>Date: {{ now|date }}</p> \n\n```", "```py\nExample myapp/urls.py: \nfrom django.conf.urls import url \nfrom django.views.generic.dates import ArchiveIndexView \n\nfrom myapp.models import Article \n\nurlpatterns = [ \n    url(r'^archive/$', \n        ArchiveIndexView.as_view(model=Article, date_field=\"pub_date\"), \n        name=\"article_archive\"), \n] \n\n```", "```py\n<ul> \n    {% for article in latest %} \n        <li>{{ article.pub_date }}: {{ article.title }}</li> \n    {% endfor %} \n</ul> \n\n```", "```py\nfrom django.views.generic.dates import YearArchiveView \n\nfrom myapp.models import Article \n\nclass ArticleYearArchiveView(YearArchiveView): \n    queryset = Article.objects.all() \n    date_field = \"pub_date\" \n    make_object_list = True \n    allow_future = True \n\n```", "```py\nfrom django.conf.urls import url \n\nfrom myapp.views import ArticleYearArchiveView \n\nurlpatterns = [ \n    url(r'^(?P<year>[0-9]{4})/$', \n        ArticleYearArchiveView.as_view(), \n        name=\"article_year_archive\"), \n] \n\n```", "```py\n<ul> \n    {% for date in date_list %} \n        <li>{{ date|date }}</li> \n    {% endfor %} \n</ul> \n<div> \n    <h1>All Articles for {{ year|date:\"Y\" }}</h1> \n    {% for obj in object_list %} \n        <p> \n            {{ obj.title }}-{{ obj.pub_date|date:\"F j, Y\" }} \n        </p> \n    {% endfor %} \n</div> \n\n```", "```py\nfrom django.views.generic.dates import MonthArchiveView \n\nfrom myapp.models import Article \n\nclass ArticleMonthArchiveView(MonthArchiveView): \n    queryset = Article.objects.all() \n    date_field = \"pub_date\" \n    make_object_list = True \n    allow_future = True \n\n```", "```py\nfrom django.conf.urls import url \n\nfrom myapp.views import ArticleMonthArchiveView \n\nurlpatterns = [ \n    # Example: /2012/aug/ \n    url(r'^(?P<year>[0-9]{4})/(?P<month>[-\\w]+)/$', \n        ArticleMonthArchiveView.as_view(), \n        name=\"archive_month\"), \n    # Example: /2012/08/ \n    url(r'^(?P<year>[0-9]{4})/(?P<month>[0-9]+)/$', \n        ArticleMonthArchiveView.as_view(month_format='%m'), \n        name=\"archive_month_numeric\"), \n] \n\n```", "```py\n<ul> \n    {% for article in object_list %} \n        <li>{{ article.pub_date|date:\"F j, Y\" }}:  \n            {{ article.title }} \n        </li> \n    {% endfor %} \n</ul> \n\n<p> \n    {% if previous_month %} \n        Previous Month: {{ previous_month|date:\"F Y\" }} \n    {% endif %} \n    {% if next_month %} \n        Next Month: {{ next_month|date:\"F Y\" }} \n    {% endif %} \n</p> \n\n```", "```py\nfrom django.views.generic.dates import WeekArchiveView \n\nfrom myapp.models import Article \n\nclass ArticleWeekArchiveView(WeekArchiveView): \n    queryset = Article.objects.all() \n    date_field = \"pub_date\" \n    make_object_list = True \n    week_format = \"%W\" \n    allow_future = True \n\n```", "```py\nfrom django.conf.urls import url \n\nfrom myapp.views import ArticleWeekArchiveView \n\nurlpatterns = [ \n    # Example: /2012/week/23/ \n    url(r'^(?P<year>[0-9]{4})/week/(?P<week>[0-9]+)/$', \n        ArticleWeekArchiveView.as_view(), \n        name=\"archive_week\"), \n] \n\n```", "```py\n<h1>Week {{ week|date:'W' }}</h1> \n\n<ul> \n    {% for article in object_list %} \n        <li>{{ article.pub_date|date:\"F j, Y\" }}: {{ article.title }}</li> \n    {% endfor %} \n</ul> \n\n<p> \n    {% if previous_week %} \n        Previous Week: {{ previous_week|date:\"F Y\" }} \n    {% endif %} \n    {% if previous_week and next_week %}--{% endif %} \n    {% if next_week %} \n        Next week: {{ next_week|date:\"F Y\" }} \n    {% endif %} \n</p> \n\n```", "```py\nfrom django.views.generic.dates import DayArchiveView \n\nfrom myapp.models import Article \n\nclass ArticleDayArchiveView(DayArchiveView): \n    queryset = Article.objects.all() \n    date_field = \"pub_date\" \n    make_object_list = True \n    allow_future = True \n\n```", "```py\nfrom django.conf.urls import url \n\nfrom myapp.views import ArticleDayArchiveView \n\nurlpatterns = [ \n    # Example: /2012/nov/10/ \n    url(r'^(?P<year>[0-9]{4})/(?P<month>[-\\w]+)/(?P<day>[0-9]+)/$', \n        ArticleDayArchiveView.as_view(), \n        name=\"archive_day\"), \n] \n\n```", "```py\n<h1>{{ day }}</h1> \n\n<ul> \n    {% for article in object_list %} \n        <li> \n        {{ article.pub_date|date:\"F j, Y\" }}: {{ article.title }} \n        </li> \n    {% endfor %} \n</ul> \n\n<p> \n    {% if previous_day %} \n        Previous Day: {{ previous_day }} \n    {% endif %} \n    {% if previous_day and next_day %}--{% endif %} \n    {% if next_day %} \n        Next Day: {{ next_day }} \n    {% endif %} \n</p> \n\n```", "```py\nfrom django.views.generic.dates import TodayArchiveView \n\nfrom myapp.models import Article \n\nclass ArticleTodayArchiveView(TodayArchiveView): \n    queryset = Article.objects.all() \n    date_field = \"pub_date\" \n    make_object_list = True \n    allow_future = True \n\n```", "```py\nfrom django.conf.urls import url \n\nfrom myapp.views import ArticleTodayArchiveView \n\nurlpatterns = [ \n    url(r'^today/$', \n        ArticleTodayArchiveView.as_view(), \n        name=\"archive_today\"), \n] \n\n```", "```py\nExample myapp/urls.py: \nfrom django.conf.urls import url \nfrom django.views.generic.dates import DateDetailView \n\nurlpatterns = [ \n    url(r'^(?P<year>[0-9]+)/(?P<month>[-\\w]+)/(?P<day>[0-9]+)/ \n      (?P<pk>[0-9]+)/$', \n        DateDetailView.as_view(model=Article, date_field=\"pub_date\"), \n        name=\"archive_date_detail\"), \n] \n\n```", "```py\n<h1>{{ object.title }}</h1> \n\n```", "```py\n# forms.py \n\nfrom django import forms \n\nclass ContactForm(forms.Form): \n   name = forms.CharField() \n   message = forms.CharField(widget=forms.Textarea) \n\n   def send_email(self): \n       # send email using the self.cleaned_data dictionary \n       pass \n\n```", "```py\n# views.py \n\nfrom myapp.forms import ContactForm \nfrom django.views.generic.edit import FormView \n\nclass ContactView(FormView): \n   template_name = 'contact.html' \n   form_class = ContactForm \n   success_url = '/thanks/' \n\n   def form_valid(self, form): \n       # This method is called when valid form data has been POSTed. \n       # It should return an HttpResponse. \n       form.send_email() \n       return super(ContactView, self).form_valid(form) \n\n```", "```py\n# models.py \n\nfrom django.core.urlresolvers import reverse \nfrom django.db import models \n\nclass Author(models.Model): \n    name = models.CharField(max_length=200) \n\n    def get_absolute_url(self): \n        return reverse('author-detail', kwargs={'pk': self.pk}) \n\n```", "```py\n# views.py \n\nfrom django.views.generic.edit import CreateView, UpdateView, DeleteView \nfrom django.core.urlresolvers import reverse_lazy \nfrom myapp.models import Author \n\nclass AuthorCreate(CreateView): \n    model = Author \n    fields = ['name'] \n\nclass AuthorUpdate(UpdateView): \n    model = Author \n    fields = ['name'] \n\nclass AuthorDelete(DeleteView): \n    model = Author \n    success_url = reverse_lazy('author-list') \n\n```", "```py\n# urls.py \n\nfrom django.conf.urls import url \nfrom myapp.views import AuthorCreate, AuthorUpdate, AuthorDelete \n\nurlpatterns = [ \n    # ... \n    url(r'author/add/$', AuthorCreate.as_view(), name='author_add'), \n    url(r'author/(?P<pk>[0-9]+)/$', AuthorUpdate.as_view(),   \n        name='author_update'), \n    url(r'author/(?P<pk>[0-9]+)/delete/$', AuthorDelete.as_view(),  \n        name='author_delete'), \n] \n\n```", "```py\n# models.py \n\nfrom django.contrib.auth.models import User \nfrom django.db import models \n\nclass Author(models.Model): \n    name = models.CharField(max_length=200) \n    created_by = models.ForeignKey(User) \n\n    # ... \n\n```", "```py\n# views.py \n\nfrom django.views.generic.edit import CreateView \nfrom myapp.models import Author \n\nclass AuthorCreate(CreateView): \n    model = Author \n    fields = ['name'] \n\n    def form_valid(self, form): \n        form.instance.created_by = self.request.user \n        return super(AuthorCreate, self).form_valid(form) \n\n```", "```py\nfrom django.http import JsonResponse \nfrom django.views.generic.edit import CreateView \nfrom myapp.models import Author \n\nclass AjaxableResponseMixin(object): \n    def form_invalid(self, form): \n        response = super(AjaxableResponseMixin, self).form_invalid(form) \n        if self.request.is_ajax(): \n            return JsonResponse(form.errors, status=400) \n        else: \n            return response \n\n    def form_valid(self, form): \n        # We make sure to call the parent's form_valid() method because \n        # it might do some processing (in the case of CreateView, it will \n        # call form.save() for example). \n        response = super(AjaxableResponseMixin, self).form_valid(form) \n        if self.request.is_ajax(): \n            data = { \n                'pk': self.object.pk, \n            } \n            return JsonResponse(data) \n        else: \n            return response \n\nclass AuthorCreate(AjaxableResponseMixin, CreateView): \n    model = Author \n    fields = ['name'] \n\n```"]