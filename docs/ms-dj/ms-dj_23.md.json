["```py\nfrom django.db import models \n\nclass Blog(models.Model): \n    name = models.CharField(max_length=100) \n    tagline = models.TextField() \n\n    def __str__(self): \n        return self.name \n\nclass Author(models.Model): \n    name = models.CharField(max_length=50) \n    email = models.EmailField() \n\n    def __str__(self): \n        return self.name \n\nclass Entry(models.Model): \n    blog = models.ForeignKey(Blog) \n    headline = models.CharField(max_length=255) \n    body_text = models.TextField() \n    pub_date = models.DateField() \n    mod_date = models.DateField() \n    authors = models.ManyToManyField(Author) \n    n_comments = models.IntegerField() \n    n_pingbacks = models.IntegerField() \n    rating = models.IntegerField() \n\n    def __str__(self):        \n        return self.headline \n\n```", "```py\n>>> from blog.models import Blog\n>>> b = Blog(name='Beatles Blog', tagline='All the latest Beatles news.')\n>>> b.save()\n\n```", "```py\n>>> b5.name = 'New name'\n>>> b5.save()\n\n```", "```py\n>>> from blog.models import Entry\n>>> entry = Entry.objects.get(pk=1)\n>>> cheese_blog = Blog.objects.get(name=\"Cheddar Talk\")\n>>> entry.blog = cheese_blog\n>>> entry.save()\n\n```", "```py\n>>> from blog.models import Author\n>>> joe = Author.objects.create(name=\"Joe\")\n>>> entry.authors.add(joe)\n\n```", "```py\n>>> john = Author.objects.create(name=\"John\")\n>>> paul = Author.objects.create(name=\"Paul\")\n>>> george = Author.objects.create(name=\"George\")\n>>> ringo = Author.objects.create(name=\"Ringo\")\n>>> entry.authors.add(john, paul, george, ringo)\n\n```", "```py\n>>> Blog.objects\n<django.db.models.manager.Manager object at ...>\n>>> b = Blog(name='Foo', tagline='Bar')\n>>> b.objects\nTraceback:\n ...\nAttributeError: \"Manager isn't accessible via Blog instances.\"\n\n```", "```py\n>>> all_entries = Entry.objects.all()\n\n```", "```py\n>>> Entry.objects.filter(\n...     headline__startswith='What'\n... ).exclude(\n...     pub_date__gte=datetime.date.today()\n... ).filter(pub_date__gte=datetime(2005, 1, 30)\n... )\n\n```", "```py\n>>> q1 = Entry.objects.filter(headline__startswith=\"What\")\n>>> q2 = q1.exclude(pub_date__gte=datetime.date.today())\n>>> q3 = q1.filter(pub_date__gte=datetime.date.today())\n\n```", "```py\n>>> q = Entry.objects.filter(headline__startswith=\"What\")\n>>> q = q.filter(pub_date__lte=datetime.date.today())\n>>> q = q.exclude(body_text__icontains=\"food\")\n>>> print(q)\n\n```", "```py\n>>> one_entry = Entry.objects.get(pk=1)\n\n```", "```py\n>>> Entry.objects.all()[:5]\n\n```", "```py\n>>> Entry.objects.all()[5:10]\n\n```", "```py\n>>> Entry.objects.all()[:10:2]\n\n```", "```py\n>>> Entry.objects.order_by('headline')[0]\n\n```", "```py\n>>> Entry.objects.order_by('headline')[0:1].get()\n\n```", "```py\n>>> Entry.objects.filter(pub_date__lte='2006-01-01')\n\n```", "```py\nSELECT * FROM blog_entry WHERE pub_date <= '2006-01-01';\n\n```", "```py\n>>> Entry.objects.filter(blog_id=4)\n\n```", "```py\n>>> Entry.objects.filter(blog__name='Beatles Blog')\n\n```", "```py\n>>> Blog.objects.filter(entry__headline__contains='Lennon')\n\n```", "```py\nBlog.objects.filter(entry__authors__name='Lennon') \n\n```", "```py\nBlog.objects.filter(entry__authors__name__isnull=True) \n\n```", "```py\nBlog.objects.filter(entry__authors__isnull=False, \n        entry__authors__name__isnull=True) \n\n```", "```py\nBlog.objects.filter(entry__headline__contains='Lennon',\n        entry__pub_date__year=2008) \n\n```", "```py\nBlog.objects.filter(entry__headline__contains='Lennon').filter(\n        entry__pub_date__year=2008) \n\n```", "```py\n>>> from django.db.models import F\n>>> Entry.objects.filter(n_comments__gt=F('n_pingbacks'))\n\n```", "```py\n>>> Entry.objects.filter(n_comments__gt=F('n_pingbacks') * 2)\n\n```", "```py\n>>> Entry.objects.filter(rating__lt=F('n_comments') + F('n_pingbacks'))\n\n```", "```py\n>>> Entry.objects.filter(authors__name=F('blog__name'))\n\n```", "```py\n>>> from datetime import timedelta\n>>> Entry.objects.filter(mod_date__gt=F('pub_date') + timedelta(days=3))\n\n```", "```py\n>>> F('somefield').bitand(16)\n\n```", "```py\n>>> Blog.objects.get(id__exact=14) # Explicit form\n>>> Blog.objects.get(id=14) # __exact is implied\n>>> Blog.objects.get(pk=14) # pk implies id__exact\n\n```", "```py\n# Get blogs entries with id 1, 4 and 7\n>>> Blog.objects.filter(pk__in=[1,4,7])\n# Get all blog entries with id > 14\n>>> Blog.objects.filter(pk__gt=14)\n\n```", "```py\n>>> Entry.objects.filter(blog__id__exact=3) # Explicit form\n>>> Entry.objects.filter(blog__id=3)        # __exact is implied\n>>> Entry.objects.filter(blog__pk=3)        # __pk implies __id__exact\n\n```", "```py\n>>> Entry.objects.filter(headline__contains='%')\n\n```", "```py\nSELECT ... WHERE headline LIKE '%\\%%';\n\n```", "```py\n>>> print([e.headline for e in Entry.objects.all()])\n>>> print([e.pub_date for e in Entry.objects.all()])\n\n```", "```py\n>>> queryset = Entry.objects.all()\n>>> print([p.headline for p in queryset]) # Evaluate the query set.\n>>> print([p.pub_date for p in queryset]) # Re-use the cache from the evaluation.\n\n```", "```py\n>>> queryset = Entry.objects.all()\n>>> print queryset[5] # Queries the database\n>>> print queryset[5] # Queries the database again\n\n```", "```py\n>>> queryset = Entry.objects.all()\n>>> [entry for entry in queryset] # Queries the database\n>>> print queryset[5] # Uses cache\n>>> print queryset[5] # Uses cache\n\n```", "```py\n>>> [entry for entry in queryset]\n>>> bool(queryset)\n>>> entry in queryset\n>>> list(queryset)\n\n```", "```py\nfrom django.db.models import Q \nQ(question__startswith='What') \n\n```", "```py\nQ(question__startswith='Who') | Q(question__startswith='What') \n\n```", "```py\nWHERE question LIKE 'Who%' OR question LIKE 'What%'\n\n```", "```py\nQ(question__startswith='Who') | ~Q(pub_date__year=2005) \n\n```", "```py\nPoll.objects.get( \n    Q(question__startswith='Who'), \n    Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6)) \n) \n\n```", "```py\nSELECT * from polls WHERE question LIKE 'Who%'\n AND (pub_date = '2005-05-02' OR pub_date = '2005-05-06')\n\n```", "```py\nPoll.objects.get( \n    Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6)), \n    question__startswith='Who') \n\n```", "```py\n# INVALID QUERY \nPoll.objects.get( \n    question__startswith='Who', \n    Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6))) \n\n```", "```py\n>>> some_entry == other_entry\n>>> some_entry.id == other_entry.id\n\n```", "```py\n>>> some_obj == other_obj\n>>> some_obj.name == other_obj.name\n\n```", "```py\ne.delete() \n\n```", "```py\nEntry.objects.filter(pub_date__year=2005).delete() \n\n```", "```py\nb = Blog.objects.get(pk=1) \n# This will delete the Blog and all of its Entry objects. \nb.delete() \n\n```", "```py\nEntry.objects.all().delete() \n\n```", "```py\nblog = Blog(name='My blog', tagline='Blogging is easy') \nblog.save() # blog.pk == 1 \n\nblog.pk = None \nblog.save() # blog.pk == 2 \n\n```", "```py\nclass ThemeBlog(Blog): \n    theme = models.CharField(max_length=200) \n\ndjango_blog = ThemeBlog(name='Django', tagline='Django is easy',\n  theme='python') \ndjango_blog.save() # django_blog.pk == 3 \n\n```", "```py\ndjango_blog.pk = None \ndjango_blog.id = None \ndjango_blog.save() # django_blog.pk == 4 \n\n```", "```py\nentry = Entry.objects.all()[0] # some previous entry \nold_authors = entry.authors.all() \nentry.pk = None \nentry.save() \nentry.authors = old_authors # saves new many2many relations \n\n```", "```py\n# Update all the headlines with pub_date in 2007.\nEntry.objects.filter(pub_date__year=2007).update(headline='Everything is the same')\n\n```", "```py\n>>> b = Blog.objects.get(pk=1)\n# Change every Entry so that it belongs to this Blog.\n>>> Entry.objects.all().update(blog=b)\n\n```", "```py\n>>> b = Blog.objects.get(pk=1)\n# Update all the headlines belonging to this Blog.\n>>> Entry.objects.select_related().filter(blog=b).update\n(headline='Everything is the same')\n\n```", "```py\nfor item in my_queryset: \n    item.save() \n\n```", "```py\n>>> Entry.objects.all().update(n_pingbacks=F('n_pingbacks') + 1)\n\n```", "```py\n# THIS WILL RAISE A FieldError\n>>> Entry.objects.update(headline=F('blog__name'))\n\n```", "```py\n>>> e = Entry.objects.get(id=2)\n>>> e.blog # Returns the related Blog object.\n\n```", "```py\n>>> e = Entry.objects.get(id=2)\n>>> e.blog = some_blog\n>>> e.save()\n\n```", "```py\n>>> e = Entry.objects.get(id=2)\n>>> e.blog = None\n>>> e.save() # \"UPDATE blog_entry SET blog_id = NULL ...;\"\n\n```", "```py\n>>> e = Entry.objects.get(id=2)\n>>> print(e.blog)  # Hits the database to retrieve the associated Blog.\n>>> print(e.blog)  # Doesn't hit the database; uses cached version.\n\n```", "```py\n>>> e = Entry.objects.select_related().get(id=2)\n>>> print(e.blog)  # Doesn't hit the database; uses cached version.\n>>> print(e.blog)  # Doesn't hit the database; uses cached version.\n\n```", "```py\n>>> b = Blog.objects.get(id=1)\n>>> b.entry_set.all() # Returns all Entry objects related to Blog.\n# b.entry_set is a Manager that returns QuerySets.\n>>> b.entry_set.filter(headline__contains='Lennon')\n>>> b.entry_set.count()\n\n```", "```py\n>>> b = Blog.objects.get(id=1)\n>>> b.entries.all() # Returns all Entry objects related to Blog.\n# b.entries is a Manager that returns QuerySets.\n>>> b.entries.filter(headline__contains='Lennon')\n>>> b.entries.count()\n\n```", "```py\nfrom django.db import models \n\nclass Entry(models.Model): \n    #... \n    objects = models.Manager()  # Default Manager \n    entries = EntryManager()    # Custom Manager \n\nb = Blog.objects.get(id=1) \nb.entry_set(manager='entries').all() \n\n```", "```py\nb.entry_set(manager='entries').is_published() \n\n```", "```py\nb = Blog.objects.get(id=1) \nb.entry_set = [e1, e2] \n\n```", "```py\ne = Entry.objects.get(id=3) \ne.authors.all() # Returns all Author objects for this Entry. \ne.authors.count() \ne.authors.filter(name__contains='John') \n\na = Author.objects.get(id=5) \na.entry_set.all() # Returns all Entry objects for this Author. \n\n```", "```py\nclass EntryDetail(models.Model): \n    entry = models.OneToOneField(Entry) \n    details = models.TextField() \n\ned = EntryDetail.objects.get(id=2) \ned.entry # Returns the related Entry object. \n\n```", "```py\ne = Entry.objects.get(id=2) \ne.entrydetail # returns the related EntryDetail object \n\n```", "```py\ne.entrydetail = ed \n\n```", "```py\nEntry.objects.filter(blog=b) # Query using object instance \nEntry.objects.filter(blog=b.id) # Query using id from instance \nEntry.objects.filter(blog=5) # Query using id directly \n\n```"]