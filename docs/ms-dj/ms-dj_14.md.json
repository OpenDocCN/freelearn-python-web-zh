["```py\nfrom django.http import HttpResponse \n\ndef my_image(request): \n    image_data = open(\"/path/to/my/image.png\", \"rb\").read() \n    return HttpResponse(image_data, content_type=\"image/png\") \n\n```", "```py\nimport csv \nfrom django.http import HttpResponse \n\ndef some_view(request): \n    # Create the HttpResponse object with the appropriate CSV header. \n    response = HttpResponse(content_type='text/csv') \n    response['Content-Disposition'] = 'attachment; \n      filename=\"somefilename.csv\"' \n\n    writer = csv.writer(response) \n    writer.writerow(['First row', 'Foo', 'Bar', 'Baz']) \n    writer.writerow(['Second row', 'A', 'B', 'C', '\"Testing\"']) \n\n    return response \n\n```", "```py\nimport csv \n\nfrom django.utils.six.moves import range \nfrom django.http import StreamingHttpResponse \n\nclass Echo(object): \n    \"\"\"An object that implements just the write method of the file-like \n    interface. \n    \"\"\" \n    def write(self, value): \n        \"\"\"Write the value by returning it, instead of storing in a buffer.\"\"\" \n        return value \n\ndef some_streaming_csv_view(request): \n    \"\"\"A view that streams a large CSV file.\"\"\" \n    # Generate a sequence of rows. The range is based on the maximum number of \n    # rows that can be handled by a single sheet in most spreadsheet \n    # applications. \n    rows = ([\"Row {}\".format(idx), str(idx)] for idx in range(65536)) \n    pseudo_buffer = Echo() \n    writer = csv.writer(pseudo_buffer) \n    response = StreamingHttpResponse((writer.writerow(row)  \n      for row in rows), content_type=\"text/csv\") \n    response['Content-Disposition'] = 'attachment;    \n      filename=\"somefilename.csv\"' \n    return response \n\n```", "```py\nfrom django.http import HttpResponse \nfrom django.template import loader, Context \n\ndef some_view(request): \n    # Create the HttpResponse object with the appropriate CSV header. \n    response = HttpResponse(content_type='text/csv') \n    response['Content-Disposition'] = 'attachment;    \n      filename=\"somefilename.csv\"' \n\n    # The data is hard-coded here, but you could load it  \n    # from a database or some other source. \n    csv_data = ( \n        ('First row', 'Foo', 'Bar', 'Baz'), \n        ('Second row', 'A', 'B', 'C', '\"Testing\"', \"Here's a quote\"), \n    ) \n\n    t = loader.get_template('my_template_name.txt') \n    c = Context({'data': csv_data,}) \n    response.write(t.render(c)) \n    return response \n\n```", "```py\n{% for row in data %} \n            \"{{ row.0|addslashes }}\", \n            \"{{ row.1|addslashes }}\", \n            \"{{ row.2|addslashes }}\", \n            \"{{ row.3|addslashes }}\", \n            \"{{ row.4|addslashes }}\" \n{% endfor %} \n\n```", "```py\n$ pip install reportlab \n\n```", "```py\n>>> import reportlab \n\n```", "```py\nfrom reportlab.pdfgen import canvas \nfrom django.http import HttpResponse \n\ndef some_view(request): \n    # Create the HttpResponse object with the appropriate PDF headers. \n    response = HttpResponse(content_type='application/pdf') \n    response['Content-Disposition'] = 'attachment;    \n      filename=\"somefilename.pdf\"' \n\n    # Create the PDF object, using the response object as its \"file.\" \n    p = canvas.Canvas(response) \n\n    # Draw things on the PDF. Here's where the PDF generation happens. \n    # See the ReportLab documentation for the full list of functionality. \n    p.drawString(100, 100, \"Hello world.\") \n\n    # Close the PDF object cleanly, and we're done. \n    p.showPage() \n    p.save() \n    return response \n\n```", "```py\n        response['Content-Disposition'] = 'filename=\"somefilename.pdf\"'\n```", "```py\nfrom io import BytesIO \nfrom reportlab.pdfgen import canvas \nfrom django.http import HttpResponse \n\ndef some_view(request): \n    # Create the HttpResponse object with the appropriate PDF headers. \n    response = HttpResponse(content_type='application/pdf') \n    response['Content-Disposition'] = 'attachment;   \n      filename=\"somefilename.pdf\"' \n\n    buffer = BytesIO() \n\n    # Create the PDF object, using the BytesIO object as its \"file.\" \n    p = canvas.Canvas(buffer) \n\n    # Draw things on the PDF. Here's where the PDF generation happens. \n    # See the ReportLab documentation for the full list of functionality. \n    p.drawString(100, 100, \"Hello world.\") \n\n    # Close the PDF object cleanly. \n    p.showPage() \n    p.save() \n\n    # Get the value of the BytesIO buffer and write it to the response. \n    pdf = buffer.getvalue() \n    buffer.close() \n    response.write(pdf) \n    return response \n\n```", "```py\nfrom django.contrib.syndication.views import Feed \nfrom django.core.urlresolvers import reverse \nfrom policebeat.models import NewsItem \n\nclass LatestEntriesFeed(Feed): \n    title = \"Police beat site news\" \n    link = \"/sitenews/\" \n    description = \"Updates on changes and additions to police beat central.\" \n\n    def items(self): \n        return NewsItem.objects.order_by('-pub_date')[:5] \n\n    def item_title(self, item): \n        return item.title \n\n    def item_description(self, item): \n        return item.description \n\n    # item_link is only needed if NewsItem has no get_absolute_url method. \n    def item_link(self, item): \n        return reverse('news-item', args=[item.pk]) \n\n```", "```py\nfrom django.conf.urls import url \nfrom myproject.feeds import LatestEntriesFeed \n\nurlpatterns = [ \n    # ... \n    url(r'^latest/feed/$', LatestEntriesFeed()), \n    # ... \n] \n\n```", "```py\nfrom mysite.models import Article \nfrom django.contrib.syndication.views import Feed \n\nclass ArticlesFeed(Feed): \n    title = \"My articles\" \n    description_template = \"feeds/articles.html\" \n\n    def items(self): \n        return Article.objects.order_by('-pub_date')[:5] \n\n    def get_context_data(self, **kwargs): \n        context = super(ArticlesFeed, self).get_context_data(**kwargs) \n        context['foo'] = 'bar' \n        return context \n\n```", "```py\nSomething about {{ foo }}: {{ obj.description }} \n\n```", "```py\nurl(r'^beats/(?P[0-9]+)/rss/$', BeatFeed()), \n\n```", "```py\nfrom django.contrib.syndication.views import FeedDoesNotExist \nfrom django.shortcuts import get_object_or_404 \n\nclass BeatFeed(Feed): \n    description_template = 'feeds/beat_description.html' \n\n    def get_object(self, request, beat_id): \n        return get_object_or_404(Beat, pk=beat_id) \n\n    def title(self, obj): \n        return \"Police beat central: Crimes for beat %s\" % obj.beat \n\n    def link(self, obj): \n        return obj.get_absolute_url() \n\n    def description(self, obj): \n        return \"Crimes recently reported in police beat %s\" % obj.beat \n\n    def items(self, obj): \n        return Crime.objects.filter(beat=obj).order_by(  \n          '-crime_date')[:30] \n\n```", "```py\n{{ obj.description }} \n\n```", "```py\nfrom django.utils.feedgenerator import Atom1Feed \n\nclass MyFeed(Feed): \n    feed_type = Atom1Feed \n\n```", "```py\nfrom django.contrib.syndication.views import Feed \nfrom policebeat.models import NewsItem \nfrom django.utils.feedgenerator import Atom1Feed \n\nclass RssSiteNewsFeed(Feed): \n    title = \"Police beat site news\" \n    link = \"/sitenews/\" \n    description = \"Updates on changes and additions to police beat central.\" \n\n    def items(self): \n        return NewsItem.objects.order_by('-pub_date')[:5] \n\nclass AtomSiteNewsFeed(RssSiteNewsFeed): \n    feed_type = Atom1Feed \n    subtitle = RssSiteNewsFeed.description \n\n```", "```py\nfrom django.conf.urls import url \nfrom myproject.feeds import RssSiteNewsFeed, AtomSiteNewsFeed \n\nurlpatterns = [ \n    # ... \n    url(r'^sitenews/rss/$', RssSiteNewsFeed()), \n    url(r'^sitenews/atom/$', AtomSiteNewsFeed()), \n    # ... \n] \n\n```", "```py\n>>> from django.utils import feedgenerator \n>>> from datetime import datetime \n>>> f = feedgenerator.Atom1Feed( \n...     , \n...     link=\"http://www.example.com/\", \n...     description=\"In which I write about what I ate today.\", \n...     language=\"en\", \n...     author_name=\"Myself\", \n...     feed_url=\"http://example.com/atom.xml\") \n>>> f.add_item(, \n...     link=\"http://www.example.com/entries/1/\", \n...     pubdate=datetime.now(), \n...     description=\"<p>Today I had a Vienna Beef hot dog. It was pink, plump and perfect.</p>\") \n>>> print(f.writeString('UTF-8')) \n<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n<feed  xml:lang=\"en\"> \n... \n</feed> \n\n```", "```py\nclass iTunesFeed(Rss201rev2Feed): \n    def root_attributes(self): \n        attrs = super(iTunesFeed, self).root_attributes() \n        attrs['xmlns:itunes'] =  \n          'http://www.itunes.com/dtds/podcast-1.0.dtd' \n        return attrs \n\n    def add_root_elements(self, handler): \n        super(iTunesFeed, self).add_root_elements(handler) \n        handler.addQuickElement('itunes:explicit', 'clean') \n\n```", "```py\nfrom django.contrib.sitemaps.views import sitemap \n\nurl(r'^sitemap\\.xml$', sitemap, {'sitemaps': sitemaps}, \n    name='django.contrib.sitemaps.views.sitemap') \n\n```", "```py\nfrom django.contrib.sitemaps import Sitemap \nfrom blog.models import Entry \n\nclass BlogSitemap(Sitemap): \n    changefreq = \"never\" \n    priority = 0.5 \n\n    def items(self): \n        return Entry.objects.filter(is_draft=False) \n\n    def lastmod(self, obj): \n        return obj.pub_date \n\n```", "```py\nfrom django.conf.urls import url \nfrom django.contrib.sitemaps import GenericSitemap \nfrom django.contrib.sitemaps.views import sitemap \nfrom blog.models import Entry \n\ninfo_dict = { \n    'queryset': Entry.objects.all(), \n    'date_field': 'pub_date', \n} \n\nurlpatterns = [ \n    # some generic view using info_dict \n    # ... \n\n    # the sitemap \n    url(r'^sitemap\\.xml$', sitemap, \n        {'sitemaps': {'blog': GenericSitemap(info_dict, priority=0.6)}},  \n        name='django.contrib.sitemaps.views.sitemap'), \n] \n\n```", "```py\n# sitemaps.py \nfrom django.contrib import sitemaps \nfrom django.core.urlresolvers import reverse \n\nclass StaticViewSitemap(sitemaps.Sitemap): \n    priority = 0.5 \n    changefreq = 'daily' \n\n    def items(self): \n        return ['main', 'about', 'license'] \n\n    def location(self, item): \n        return reverse(item) \n\n# urls.py \nfrom django.conf.urls import url \nfrom django.contrib.sitemaps.views import sitemap \n\nfrom .sitemaps import StaticViewSitemap \nfrom . import views \n\nsitemaps = { \n    'static': StaticViewSitemap, \n} \n\nurlpatterns = [ \n    url(r'^$', views.main, name='main'), \n    url(r'^about/$', views.about, name='about'), \n    url(r'^license/$', views.license, name='license'), \n    # ... \n    url(r'^sitemap\\.xml$', sitemap, {'sitemaps': sitemaps}, \n        name='django.contrib.sitemaps.views.sitemap') \n] \n\n```", "```py\nfrom django.contrib.sitemaps import views \n\nurlpatterns = [ \n    url(r'^sitemap\\.xml$', views.index, {'sitemaps': sitemaps}), \n    url(r'^sitemap-(?P<section>.+)\\.xml$', views.sitemap,  \n        {'sitemaps': sitemaps}), \n] \n\n```", "```py\nfrom django.contrib.sitemaps import views as sitemaps_views \nfrom django.views.decorators.cache import cache_page \n\nurlpatterns = [ \n    url(r'^sitemap\\.xml$', \n        cache_page(86400)(sitemaps_views.index), \n        {'sitemaps': sitemaps, 'sitemap_url_name': 'sitemaps'}), \n    url(r'^sitemap-(?P<section>.+)\\.xml$', \n        cache_page(86400)(sitemaps_views.sitemap), \n        {'sitemaps': sitemaps}, name='sitemaps'), \n] \n\n```", "```py\nfrom django.contrib.sitemaps import views \n\nurlpatterns = [ \n    url(r'^custom-sitemap\\.xml$', views.index, { \n        'sitemaps': sitemaps, \n        'template_name': 'custom_sitemap.html' \n    }), \n    url(r'^custom-sitemap-(?P<section>.+)\\.xml$', views.sitemap, { \n    'sitemaps': sitemaps, \n    'template_name': 'custom_sitemap.html' \n}), \n] \n\n```", "```py\n{% spaceless %} \n{% for url in urlset %} \n    {{ url.location }} \n    {% if url.lastmod %}{{ url.lastmod|date:\"Y-m-d\" }}{% endif %} \n    {% if url.changefreq %}{{ url.changefreq }}{% endif %} \n    {% if url.priority %}{{ url.priority }}{% endif %} \n\n      {% if url.item.publication_date %}{{ url.item.publication_date|date:\"Y-m-d\" }}{% endif %} \n      {% if url.item.tags %}{{ url.item.tags }}{% endif %} \n\n{% endfor %} \n{% endspaceless %} \n\n```", "```py\nfrom django.contrib.sitemaps import ping_google \n\nclass Entry(models.Model): \n    # ... \n    def save(self, force_insert=False, force_update=False): \n        super(Entry, self).save(force_insert, force_update) \n        try: \n            ping_google() \n        except Exception: \n            # Bare 'except' because we could get a variety \n            # of HTTP-related exceptions. \n            pass \n\n```", "```py\npython manage.py ping_google [/sitemap.xml] \n\n```"]