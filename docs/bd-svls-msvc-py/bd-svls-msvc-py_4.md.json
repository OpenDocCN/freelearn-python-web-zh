["```py\nimport unittest\nimport json\n\nclass TestIndexGetMethod(unittest.TestCase):\n    def setUp(self):\n        self.validJsonDataNoStartDate = json.loads('{\"httpMethod\": \n        \"GET\",\"path\": \"/path/to/resource/324\",\"headers\": ' \\ 'null} ')\n        self.validJsonDataStartDate = \n        json.loads('{\"queryStringParameters\": {\"startDate\":      \n        \"20171013\"},' \\ '\"httpMethod\": \"GET\",\"path\": \"/path/to/resource\n        /324\",\"headers\": ' \\ 'null} ')\n        self.invalidJsonUserIdData =   \n        json.loads('{\"queryStringParameters\": {\"startDate\": \n        \"20171013\"},' \\ '\"httpMethod\": \"GET\",\"path\": \"/path/to/resource\n        /324f\",\"headers\": ' \\ 'null} ')\n        self.invalidJsonData = \"{ invalid JSON request!} \"\n    def tearDown(self):\n        pass\n```", "```py\n    def test_validparameters_parseparameters_pass(self):\n        parameters = lambda_query_dynamo.HttpUtils.parse_parameters(\n                     self.validJsonDataStartDate)\n        assert parameters['parsedParams']['startDate'] == u'20171013'\n        assert parameters['parsedParams']['resource_id'] == u'324'     \n\n    def test_emptybody_parsebody_nonebody(self):\n        body = lambda_query_dynamo.HttpUtils.parse_body(\n               self.validJsonDataStartDate)         \n        assert body['body'] is None\n\n    def test_invalidjson_getrecord_notfound404(self):\n        result = lambda_query_dynamo.Controller.get_dynamodb_records(\n                 self.invalidJsonData)\n        assert result['statusCode'] == '404'\n\n    def test_invaliduserid_getrecord_invalididerror(self):            \n        result = lambda_query_dynamo.Controller.get_dynamodb_records(\n                 self.invalidJsonUserIdData)\n        assert result['statusCode'] == '404'\n        assert json.loads(result['body'])['message'] == \n             \"resource_id not a number\" \n```", "```py\nfrom unittest import mock\n\n     mock.patch.object(lambda_query_dynamo.DynamoRepository,\n                      \"query_by_partition_key\",\n                       return_value=['item'])\n     def test_validid_checkstatus_status200(self, \n         mock_query_by_partition_key):\n        result = lambda_query_dynamo.Controller.get_dynamodb_records(\n                 self.validJsonDataNoStartDate)\n        assert result['statusCode'] == '200'\n\n    @mock.patch.object(lambda_query_dynamo.DynamoRepository,\n                       \"query_by_partition_key\",\n                        return_value=['item'])\n     def test_validid_getrecord_validparamcall(self, \n         mock_query_by_partition_key):         \nlambda_query_dynamo.Controller.get_dynamodb_records(\nself.validJsonDataNoStartDate)         mock_query_by_partition_key.assert_called_with(\n     partition_key='EventId',                                                                      \n     partition_value=u'324')\n\n    @mock.patch.object(lambda_query_dynamo.DynamoRepository,\n                       \"query_by_partition_and_sort_key\",\n                        return_value=['item'])\n    def test_validid_getrecorddate_validparamcall(self, \n        mock_query_by_partition_and_sort_key):\n           lambda_query_dynamo.Controller.get_dynamodb_records(\n               self.validJsonDataStartDate)\n          mock_query_by_partition_and_sort_key.assert_called_with(partition_key='   \n    EventId',                                                                      \n    partition_value=u'324',                                                                 \n    sort_key='EventDay',                                                                 \n    sort_value=20171013)\n```", "```py\n$ python3 -m unittest discover test \n```", "```py\n#!/bin/sh (cd ../..; python3 -m unittest discover test) \n```", "```py\n$ nosetests test/test_dynamo_get.py --with-coverage --cover-package lambda_dynamo_read -v\n$ nose2 --with-coverage \n```", "```py\nEventId,EventDay,EventCount\n324,20171010,2\n324,20171012,10\n324,20171013,10\n324,20171014,6\n324,20171016,6\n324,20171017,2\n300,20171011,1\n300,20171013,3\n300,20171014,30 \n```", "```py\nfrom boto3 import resource\n\nclass DynamoRepository:\n    def __init__(self, target_dynamo_table, region='eu-west-1'):\n        self.dynamodb = resource(service_name='dynamodb', region_name=region)\n        self.target_dynamo_table = target_dynamo_table\n        self.table = self.dynamodb.Table(self.target_dynamo_table)     \n\n    def update_dynamo_event_counter(self, event_name, \n        event_datetime, event_count=1):\n        response = self.table.update_item(\n            Key={\n                'EventId': str(event_name),\n                'EventDay': int(event_datetime)\n            },\n            ExpressionAttributeValues={\":eventCount\": \n                int(event_count)},\n            UpdateExpression=\"ADD EventCount :eventCount\")\n        return response \n```", "```py\n import csv\ntable_name = 'user-visits-sam'\ninput_data_path = '../sample_data/dynamodb-sample-data.txt'\ndynamo_repo = DynamoRepository(table_name)\nwith open(input_data_path, 'r') as sample_file:\n    csv_reader = csv.DictReader(sample_file)\n    for row in csv_reader:\n        response = dynamo_repo.update_dynamo_event_counter(row['EventId'],                                                            row['EventDay'],                                                            row['EventCount'])\n        print(response) \n```", "```py\n{\n  \"body\": \"{\\\"test\\\":\\\"body\\\"}\",\n  \"resource\": \"/{proxy+}\",\n  \"requestContext\": {\n    \"resourceId\": \"123456\",\n    \"apiId\": \"1234567890\",\n    \"resourcePath\": \"/{proxy+}\",\n    \"httpMethod\": \"GET\",\n    \"requestId\": \"c6af9ac6-7b61-11e6-9a41-93e8deadbeef\",\n    \"accountId\": \"123456789012\",\n    \"identity\": {\n      \"apiKey\": null,\n      \"userArn\": null,\n      \"cognitoAuthenticationType\": null,\n      \"caller\": null,\n      \"userAgent\": \"Custom User Agent String\",\n      \"user\": null,\n      \"cognitoIdentityPoolId\": null,\n      \"cognitoIdentityId\": null,\n      \"cognitoAuthenticationProvider\": null,\n      \"sourceIp\": \"127.0.0.1\",\n      \"accountId\": null\n    },\n    \"stage\": \"prod\"\n  },\n  \"queryStringParameters\": {\n    \"foo\": \"bar\"\n  },\n  \"headers\": {\n    \"Via\": \"1.1 08f323deadbeefa7af34d5feb414ce27.cloudfront.net \n            (CloudFront)\",\n    \"Accept-Language\": \"en-US,en;q=0.8\",\n    \"CloudFront-Is-Desktop-Viewer\": \"true\",\n    \"CloudFront-Is-SmartTV-Viewer\": \"false\",\n    \"CloudFront-Is-Mobile-Viewer\": \"false\", \n    \"X-Forwarded-For\": \"127.0.0.1, 127.0.0.2\",\n    \"CloudFront-Viewer-Country\": \"US\",\n    \"Accept\": \"text/html,application/xhtml+xml,application/xml;\n               q=0.9,image/webp,*/*;q=0.8\",\n    \"Upgrade-Insecure-Requests\": \"1\",\n    \"X-Forwarded-Port\": \"443\",\n    \"Host\": \"1234567890.execute-api.us-east-1.amazonaws.com\",\n    \"X-Forwarded-Proto\": \"https\",\n    \"X-Amz-Cf-Id\": \"cDehVQoZnx43VYQb9j2-nvCh-\n                    9z396Uhbp027Y2JvkCPNLmGJHqlaA==\",\n    \"CloudFront-Is-Tablet-Viewer\": \"false\",\n    \"Cache-Control\": \"max-age=0\",\n    \"User-Agent\": \"Custom User Agent String\",     \n    \"CloudFront-Forwarded-Proto\": \"https\",\n    \"Accept-Encoding\": \"gzip, deflate, sdch\"\n  },\n  \"pathParameters\":{\n    \"proxy\": \"path/to/resource\"\n  },\n  \"httpMethod\": \"GET\",\n  \"stageVariables\": {\n    \"baz\": \"qux\"\n  },\n  \"path\": \"/path/to/resource/324\"\n} \n```", "```py\nimport json\n\nfrom lambda_dynamo_read import lambda_return_dynamo_records as lambda_query_dynamo\n\nwith open('../sample_data/request-api-gateway-valid-date.json', 'r') as sample_file:\n     event = json.loads(sample_file.read())\nprint(\"lambda_query_dynamo\\nUsing data: %s\" % event)\nprint(sample_file.name.split('/')[-1]) response = lambda_query_dynamo.lambda_handler(event, None)\nprint('Response: %s\\n' % json.dumps(response)) \n```", "```py\nResponse: {\"statusCode\": \"200\", \"body\": \"[{\\\"EventCount\\\": 3, \\\"EventDay\\\": 20171001, \\\"EventId\\\": \\\"324\\\"}, {\\\"EventCount\\\": 5, \\\"EventDay\\\": 20171002, \\\"EventId\\\": \\\"324\\\"}, {\\\"EventCount\\\": 4, \\\"EventDay\\\": 20171010, \\\"EventId\\\": \\\"324\\\"}, {\\\"EventCount\\\": 20, \\\"EventDay\\\": 20171012, \\\"EventId\\\": \\\"324\\\"}, {\\\"EventCount\\\": 10, \\\"EventDay\\\": 20171013, \\\"EventId\\\": \\\"324\\\"}, {\\\"EventCount\\\": 6, \\\"EventDay\\\": 20171014, \\\"EventId\\\": \\\"324\\\"}, {\\\"EventCount\\\": 6, \\\"EventDay\\\": 20171016, \\\"EventId\\\": \\\"324\\\"}, {\\\"EventCount\\\": 2, \\\"EventDay\\\": 20171017, \\\"EventId\\\": \\\"324\\\"}]\", \"headers\": {\"Content-Type\": \"application/json\", \"Access-Control-Allow-Origin\": \"*\"}} \n```", "```py\n$ sudo pip3 sudo install awscli \n$ aws configure \n```", "```py\n$ cd ./serverless-microservice-data-api/bash/apigateway-lambda-dynamodb\n$ ./build-package-deploy-lambda-dynamo-data-api.sh\n```", "```py\n$ aws lambda invoke --invocation-type Event \\\n --function-name lambda-dynamo-data-api-sam  --region eu-west-1 \\\n --payload file://../../sample_data/request-api-gateway-get-valid.json \\ outputfile.tmp \n```", "```py\n#!/bin/sh\n. ./common-variables.sh\nrm outputfile.tmp\nstatus_code=$(aws lambda invoke --invocation-type RequestResponse \\\n    --function-name ${template}-sam --region ${region} \\\n    --payload file://../../sample_data/request-api-gateway-get-valid.json \\\n    outputfile.tmp --profile ${profile})\necho \"$status_code\"\nif echo \"$status_code\" | grep -q \"200\";\nthen\n    cat outputfile.tmp\n    if grep -q error outputfile.tmp;\n    then\n        echo \"\\nerror in response\"\n        exit 1\n    else\n        echo \"\\npass\"\n        exit 0\n    fi\nelse\n    echo \"\\nerror status not 200\"\n    exit 1\nfi \n```", "```py\nimport argparse\nimport logging\n\nimport boto3\nlogging.getLogger('botocore').setLevel(logging.CRITICAL)\n\nlogger = logging.getLogger(__name__)\nlogging.basicConfig(format='%(asctime)s %(levelname)s %(name)-15s: %(lineno)d %(message)s',\n                    level=logging.INFO) logger.setLevel(logging.INFO) \n\ndef get_apigateway_names(endpoint_name):\n    client = boto3.client(service_name='apigateway', \n                          region_name='eu-west-1')\n    apis = client.get_rest_apis()\n    for api in apis['items']:\n        if api['name'] == endpoint_name:\n            api_id = api['id']\n            region = 'eu-west-1'\n            stage = 'Prod'\n            resource = 'visits/324'\n            #return F\"https://{api_id}.execute-api.\n             {region}.amazonaws.com/{stage}/{resource}\"\n            return \"https://%s.execute-api.%s.amazonaws.com/%s/%s\" \n                % (api_id, region, stage, resource)\n    return None\n\ndef main():\n    endpoint_name = \"lambda-dynamo-xray\"\n\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-e\", \"--endpointname\", type=str, \n        required=False, help=\"Path to the endpoint_name\")\n    args = parser.parse_args()\n\n    if (args.endpointname is not None): endpoint_name = \n        args.endpointname\n\n    apigateway_endpoint = get_apigateway_names(endpoint_name)\n    if apigateway_endpoint is not None:\n        print(apigateway_endpoint)\n        return 0\n    else:\n        return 1\n\nif __name__ == '__main__':\n    main()\n```", "```py\n. ./common-variables.sh\nendpoint=\"$(python get_apigateway_endpoint.py -e ${template})\"\necho ${endpoint}\nstatus_code=$(curl -i -H \\\"Accept: application/json\\\" -H \\\"Content-Type: application/json\\\" -X GET ${endpoint})\necho \"$status_code\"\nif echo \"$status_code\" | grep -q \"HTTP/1.1 200 OK\";\nthen\n    echo \"pass\"\n    exit 0\nelse\n    exit 1\nfi \n```", "```py\n$sudo pip install --user aws-sam-cli \n```", "```py\n$ sam init --runtime python3.6\n$ docker pull lambci/lambda-base:build\n$ docker pull lambci/lambda:python3.6 \n```", "```py\n$ cd sam-app\n$ sam local invoke \"HelloWorldFunction\" -e event.json --region eu-west-1 \n```", "```py\nDuration: 8 ms Billed Duration: 100 ms Memory Size: 128 MB Max Memory Used: 19 MB\n{\"statusCode\": 200, \"body\": \"{\\\"message\\\": \\\"hello world\\\"}\"} \n```", "```py\n$ sam local start-lambda --region eu-west-1\n# in new shell window\n$ aws lambda invoke --function-name \"HelloWorldFunction\" \\\n --endpoint-url \"http://127.0.0.1:3001\" --no-verify-ssl out.txt \n```", "```py\n$ sam local start-api --region eu-west-1\n# in new shell window\n$ curl -i -H \\\"Accept: application/json\\\" -H \\\"Content-Type: application/json\\\" -X GET http://127.0.0.1:3000/hello \n```", "```py\n$ sam local generate-event apigateway aws-proxy \n```", "```py\n$ sam package \\\n --template-file $template.yaml \\\n --output-template-file ../../package/$template-output.yaml \\\n --s3-bucket\n$bucket $ sam deploy \\\n --template-file ../../package/$template-output.yaml \\\n --stack-name $template \\\n --capabilities CAPABILITY_IAM\n```", "```py\n$ aws cloudformation package \\\n --template-file $template.yaml \\\n --output-template-file ../../package/$template-output.yaml \\\n --s3-bucket $bucket \\\n --s3-prefix $prefix\n$ aws cloudformation deploy \\\n --template-file ../../package/$template-output.yaml \\\n --stack-name $template \\\n --capabilities CAPABILITY_IAM\n```", "```py\n$ sudo pip3 install locustio \n```", "```py\nimport random\nfrom locust import HttpLocust, TaskSet, task\n\npaths = [\"/Prod/visits/324?startDate=20171014\",\n         \"/Prod/visits/324\",\n         \"/Prod/visits/320\"]\n\nclass SimpleLocustTest(TaskSet):\n\n    @task\n    def get_something(self):\n        index = random.randint(0, len(paths) - 1)\n        self.client.get(paths[index])\n\nclass LocustTests(HttpLocust):\n    task_set = SimpleLocustTest\n```", "```py\nimport argparse\nimport logging\n\nimport boto3\nlogging.getLogger('botocore').setLevel(logging.CRITICAL)\n\nlogger = logging.getLogger(__name__)\nlogging.basicConfig(format='%(asctime)s %(levelname)s %(name)-15s: %(lineno)d %(message)s',\n                    level=logging.INFO)\nlogger.setLevel(logging.INFO)\n\ndef get_apigateway_id(endpoint_name):\n    client = boto3.client(service_name='apigateway', \n             region_name='eu-west-1')\n    apis = client.get_rest_apis()\n    for api in apis['items']:\n        if api['name'] == endpoint_name:\n            return api['id']\n    return None\n\ndef main():\n    endpoint_name = \"lambda-dynamo-xray\"\n\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-e\", \"--endpointname\", type=str, \n                        required=False, help=\"Path to the endpoint_id\")\n    args = parser.parse_args()\n\n    if (args.endpointname is not None): endpoint_name = args.endpointname\n\n    apigateway_id = get_apigateway_id(endpoint_name)\n    if apigateway_id is not None:\n        print(apigateway_id)\n        return 0\n    else:\n        return 1\n\nif __name__ == '__main__':\n    main() \n```", "```py\n$ . ./common-variables.sh\n$ apiid=\"$(python3 get_apigateway_id.py -e ${template})\"\n$ locust -f ../../test/locust_test_api.py --host=https://${apiid}.execute-api.${region}.amazonaws.com \n```", "```py\n#!/bin/sh\n. ./common-variables.sh\napiid=\"$(python3 get_apigateway_id.py -e ${template})\"\nlocust -f ../../test/locust_test_api.py --host=https://${apiid}.execute-api.${region}.amazonaws.com \n```", "```py\nAWSTemplateFormatVersion: '2010-09-09'\nTransform: 'AWS::Serverless-2016-10-31'\nDescription: >-\n  This Lambda is invoked by API Gateway and queries DynamoDB.\nParameters:\n    AccountId:\n        Type: String\n\nResources:\n  lambdadynamodataapi:\n    Type: AWS::Serverless::Function\n    Properties:\n      Handler: lambda_return_dynamo_records.lambda_handler\n      Runtime: python3.6\n      CodeUri: ../../package/lambda-dynamo-data-api.zip\n      FunctionName: lambda-dynamo-data-api-sam\n      Description: >-\n        This Lambda is invoked by API Gateway and queries DynamoDB.\n      MemorySize: 128\n      Timeout: 3\n      Role: !Sub 'arn:aws:iam::${AccountId}:role/\n                  lambda-dynamo-data-api'\n      Environment:\n        Variables:\n          environment: dev\n      Events:\n        CatchAll:\n          Type: Api\n          Properties:\n            Path: /visits/{resourceId}\n           Method: GET\n  DynamoDBTable:\n    Type: AWS::DynamoDB::Table \n    Properties:\n      TableName: user-visits-sam\n      SSESpecification:\n        SSEEnabled: True\n      AttributeDefinitions:\n        - AttributeName: EventId\n          AttributeType: S\n        - AttributeName: EventDay\n          AttributeType: N\n      KeySchema:\n        - AttributeName: EventId\n          KeyType: HASH\n        - AttributeName: EventDay\n          KeyType: RANGE\n      ProvisionedThroughput:\n        ReadCapacityUnits: 500\n        WriteCapacityUnits: 1\n```", "```py\n#!/usr/bin/env bash\n. ./common-variables.sh\naws cloudformation delete-stack --stack-name $template --region $region --profile $profile \n```"]