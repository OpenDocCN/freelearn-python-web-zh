["```py\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"age\": 27,\n  \"address\": {\n    \"city\": \"New York\",\n    \"postalCode\": \"10021\"\n  },\n  \"phoneNumbers\": [\n    {\n      \"type\": \"home\",\n      \"number\": \"212 555-1234\"\n    },\n    {\n      \"type\": \"mobile\",\n      \"number\": \"123 456-7890\"\n    }\n  ]\n}\n```", "```py\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": {\n        \"Effect\": \"Allow\",\n        \"Action\": [  \n                \"dynamodb:GetItem\",\n                \"dynamodb:Scan\",\n                \"dynamodb:Query\"],\n        \"Resource\": \"arn:aws:dynamodb:eu-west-\n                     1:123456789012:table/Books\",\n        \"Condition\": {\n            \"IpAddress\": {\n                \"aws: SourceIp\": \"10.70.112.23/16\"\n            }\n        }\n    }\n}\n```", "```py\n      {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n              {\n                 \"Effect\": \"Allow\",\n                 \"Action\": [\n                     \"dynamodb:BatchGetItem\",\n                     \"dynamodb:DescribeTable\",\n                     \"dynamodb:GetItem\",\n                     \"dynamodb:Query\",\n                     \"dynamodb:Scan\"\n                 ],\n                  \"Resource\": [\n                     \"arn:aws:dynamodb:<your-region>:<your-aws-\n                      accountid>:table/user-visits\"                 \n                 ]\n             }\n         ]\n     }\n```", "```py\n     {\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [\n          {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n             \"logs:CreateLogGroup\",\n             \"logs:CreateLogStream\",\n             \"logs:PutLogEvents\",\n             \"logs:DescribeLogStreams\"\n          ],\n            \"Resource\": [\n              \"arn:aws:logs:*:*:*\"\n         ]\n        },\n       {\n           \"Effect\": \"Allow\",\n           \"Action\": [\n             \"cloudwatch:PutMetricData\"\n           ],\n           \"Resource\": \"*\"\n         }\n      ]\n     }\n```", "```py\nimport boto3\n\ndef create_dynamo_table(table_name_value, enable_streams=False,\n                        read_capacity=1,\n                        write_capacity=1,\n                        region='eu-west-1'):\n    table_name = table_name_value\n    print('creating table: ' + table_name)\n    try:\n        client = boto3.client(service_name='dynamodb', \n                              region_name=region)\n        print(client.create_table(TableName=table_name,\n                                  AttributeDefinitions=[{'AttributeName': 'EventId',\n                                                         'AttributeType': 'S'},\n                                                        {'AttributeName': 'EventDay',\n                                                         'AttributeType': 'N'}],\n                                  KeySchema=[{'AttributeName': 'EventId',\n                                              'KeyType': 'HASH'},\n                                             {'AttributeName': 'EventDay',\n                                              'KeyType': 'RANGE'},\n                                             ],\n                                  ProvisionedThroughput={'ReadCapacityUnits': read_capacity,\n                                                         'WriteCapacityUnits': write_capacity}))\n    except Exception as e:\n        print(str(type(e)))\n        print(e.__doc__)\n\ndef main():\n    table_name = 'user-visits'\n    create_dynamo_table(table_name, False, 1, 1)\n\nif __name__ == '__main__':\n    main()\n```", "```py\nfrom boto3 import resource\n\nclass DynamoRepository:\n    def __init__(self, target_dynamo_table, region='eu-west-1'):\n        self.dynamodb = resource(service_name='dynamodb', \n                        region_name=region)\n        self.target_dynamo_table = target_dynamo_table\n        self.table = self.dynamodb.Table(self.target_dynamo_table)\n\n    def update_dynamo_event_counter(self, event_name, \n                event_datetime, event_count=1):\n        return self.table.update_item(\n            Key={\n                'EventId': event_name,\n                'EventDay': event_datetime\n            },\n            ExpressionAttributeValues={\":eventCount\": event_count},\n            UpdateExpression=\"ADD EventCount :eventCount\")\n\ndef main():\n    table_name = 'user-visits'\n    dynamo_repo = DynamoRepository(table_name)\n    print(dynamo_repo.update_dynamo_event_counter('324', 20171001))\n    print(dynamo_repo.update_dynamo_event_counter('324', 20171001, 2))\n    print(dynamo_repo.update_dynamo_event_counter('324', 20171002, 5))\n\nif __name__ == '__main__':\n    main()\n```", "```py\nimport decimal\nimport json\n\nfrom boto3 import resource\nfrom boto3.dynamodb.conditions import Key\n\nclass DecimalEncoder(json.JSONEncoder):\n    \"\"\"Helper class to convert a DynamoDB item to JSON\n    \"\"\"\n    def default(self, o):\n        if isinstance(o, decimal.Decimal):\n            if o % 1 > 0:\n                return float(o)\n            else:\n                return int(o)\n        return super(DecimalEncoder, self).default(o)\n\nclass DynamoRepository:\n    def __init__(self, target_dynamo_table, region='eu-west-1'):\n        self.dynamodb = resource(service_name='dynamodb', region_name=region)\n        self.dynamo_table = target_dynamo_table\n        self.table = self.dynamodb.Table(self.dynamo_table)\n\n    def query_dynamo_record_by_parition(self, parition_key, \n        parition_value):\n        try:\n            response = self.table.query(\n                KeyConditionExpression=\n                Key(parition_key).eq(parition_value))\n            for record in response.get('Items'):\n                print(json.dumps(record, cls=DecimalEncoder))\n            return\n\n        except Exception as e:\n            print('Exception %s type' % str(type(e)))\n            print('Exception message: %s ' % str(e))\n\n    def query_dynamo_record_by_parition_sort_key(self, \n          partition_key, partition_value, sort_key, sort_value):\n        try:\n            response = self.table.query(\n                KeyConditionExpression=Key(partition_key)\n                .eq(partition_value)\n                & Key(sort_key).gte(sort_value))\n            for record in response.get('Items'):\n                print(json.dumps(record, cls=DecimalEncoder))\n            return\n\n        except Exception as e:\n            print('Exception %s type' % str(type(e)))\n            print('Exception message: %s ' % str(e))\ndef main():\n    table_name = 'user-visits'\n    partition_key = 'EventId'\n    partition_value = '324'\n    sort_key = 'EventDay'\n    sort_value = 20171001\n\n    dynamo_repo = DynamoRepository(table_name)\n    print('Reading all data for partition_key:%s' % partition_value)\n    dynamo_repo.query_dynamo_record_by_parition(partition_key, \n        partition_value)\n\n    print('Reading all data for partition_key:%s with date > %d' \n           % (partition_value, sort_value))\n    dynamo_repo.query_dynamo_record_by_parition_sort_key(partition_key,                                                         \n          partition_value, sort_key, sort_value)\nif __name__ == '__main__':\n    main()\n```", "```py\n      import json\n      import decimal\n\n      from boto3 import resource\n      from boto3.dynamodb.conditions import Key\n\n      class HttpUtils: \n        def init(self):\n         pass\n\n      @staticmethod\n      def parse_parameters(event):\n          try:\n              return_parameters = \n              event['queryStringParameters'].copy()\n          except Exception:\n              return_parameters = {}\n          try:\n              resource_id = event.get('path', '').split('/')[-1]\n              if resource_id.isdigit():\n                  return_parameters['resource_id'] = resource_id\n              else:\n                  return {\"parsedParams\": None, \"err\":\n                      Exception(\"resource_id not a number\")}\n          except Exception as e:\n              return {\"parsedParams\": None, \"err\": e}  \n              # Generally bad idea to expose exceptions\n          return {\"parsedParams\": return_parameters, \"err\": None}\n\n      @staticmethod\n      def respond(err=None, err_code=400, res=None):\n          return {\n              'statusCode': str(err_code) if err else '200',\n              'body': '{\"message\":%s}' % json.dumps(str(err)) \n                  if err else\n              json.dumps(res, cls=DecimalEncoder),\n              'headers': {\n                  'Content-Type': 'application/json',\n                  'Access-Control-Allow-Origin': '*'\n              },\n          }\n\n      @staticmethod\n      def parse_body(event):\n          try:\n              return {\"body\": json.loads(event['body']), \n                      \"err\": None}\n          except Exception as e:\n              return {\"body\": None, \"err\": e}\n\n      class DecimalEncoder(json.JSONEncoder): def default(self, o): \n      if isinstance(o, decimal.Decimal): if o % 1 > 0: \n          return float(o) \n      else: return int(o) return super(DecimalEncoder, \n          self).default(o)\n\n      class DynamoRepository: def init(self, table_name): \n      self.dynamo_client = resource(service_name='dynamodb',\n      region_name='eu-west-1') self.table_name = \n          table_name self.db_table =        \n      self.dynamo_client.Table(table_name)\n\n      def query_by_partition_and_sort_key(self, \n          partition_key, partition_value,\n          sort_key, sort_value):\n          response = self.db_table.query(KeyConditionExpression=                                      \n                     Key(partition_key).eq(partition_value)\n                     & Key(sort_key).gte(sort_value))\n\n          return response.get('Items')\n\n      def query_by_partition_key(self, partition_key, \n          partition_value):\n          response = self.db_table.query(KeyConditionExpression=                                   \n              Key(partition_key).eq(partition_value))\n          return response.get('Items')\n\n      def print_exception(e): try: print('Exception %s type' % \n      str(type(e))) print('Exception message: %s ' \n                          % str(e)) except Exception: pass\n\n      class Controller(): def init(self): pass\n\n      @staticmethod\n      def get_dynamodb_records(event):\n          try:\n              validation_result = HttpUtils.parse_parameters(event)\n              if validation_result.get(\n              'parsedParams', None) is None:\n                  return HttpUtils.respond(\n                      err=validation_result['err'], err_code=404)\n              resource_id = str(validation_result['parsedParams']\n                            [\"resource_id\"])\n              if validation_result['parsedParams']\n                  .get(\"startDate\") is None:\n                  result = repo.query_by_partition_key(\n                           partition_key=\"EventId\", \n                           partition_value=resource_id)\n              else:\n                  start_date = int(validation_result['parsedParams']\n                               [\"startDate\"])\n                  result = repo.query_by_partition_and_sort_key(\n                            partition_key=\"EventId\", \n                            partition_value=resource_id,\n                            sort_key=\"EventDay\", \n                            sort_value=start_date)\n                            return HttpUtils.respond(res=result)\n\n                  except Exception as e:\n                  print_exception(e)\n              return HttpUtils.respond(err=Exception('Not found'), \n                  err_code=404)\n\n      table_name = 'user-visits' repo = \n                    DynamoRepository(table_name=table_name)\n\n      def lambda_handler(event, context): response = \n      Controller.get_dynamodb_records(event) return response\n```", "```py\n      {\n       \"body\": \"{\"test\":\"body\"}\",\n       \"resource\": \"/{proxy+}\",\n       \"requestContext\": {\n         \"resourceId\": \"123456\",\n         \"apiId\": \"1234567890\",\n         \"resourcePath\": \"/{proxy+}\",\n         \"httpMethod\": \"GET\",\n         \"requestId\": \"c6af9ac6-7b61-11e6-9a41-93e8deadbeef\",\n         \"accountId\": \"123456789012\",\n         \"identity\": {\n           \"apiKey\": null,\n           \"userArn\": null,\n           \"cognitoAuthenticationType\": null,\n           \"caller\": null,\n           \"userAgent\": \"Custom User Agent String\",\n           \"user\": null, \"cognitoIdentityPoolId\": null,\n           \"cognitoIdentityId\": null,\n           \"cognitoAuthenticationProvider\": null,\n           \"sourceIp\": \"127.0.0.1\",\n           \"accountId\": null\n         },\n         \"stage\": \"prod\"\n       },\n       \"queryStringParameters\": {\n         \"StartDate\": \"20171009\"\n       },\n       \"headers\": {\n         \"Via\": \"1.1 08f323deadbeefa7af34e5feb414ce27\n                 .cloudfront.net (CloudFront)\",\n         \"Accept-Language\": \"en-US,en;q=0.8\",\n         \"CloudFront-Is-Desktop-Viewer\": \"true\",\n         \"CloudFront-Is-SmartTV-Viewer\": \"false\", \n         \"CloudFront-Is-Mobile-Viewer\": \"false\",\n         \"X-Forwarded-For\": \"127.0.0.1, 127.0.0.2\",\n         \"CloudFront-Viewer-Country\": \"US\", \"Accept\":        \n         \"text/html,application/xhtml+xml,application/xml;q=0.9,\n              image/webp,*/*;q=0.8\",\n         \"Upgrade-Insecure-Requests\": \"1\",\n         \"X-Forwarded-Port\": \"443\", \"Host\": \"1234567890\n              .execute-api.us-east-1.amazonaws.com\",\n         \"X-Forwarded-Proto\": \"https\",\n         \"X-Amz-Cf-Id\": \"cDehVQoZnx43VYQb9j2-nvCh-\n              9z396Uhbp027Y2JvkCPNLmGJHqlaA==\",\n         \"CloudFront-Is-Tablet-Viewer\": \"false\",\n         \"Cache-Control\": \"max-age=0\",\n         \"User-Agent\": \"Custom User Agent String\",\n         \"CloudFront-Forwarded-Proto\": \"https\", \"Accept-Encoding\": \n              \"gzip, deflate, sdch\"\n       },\n       \"pathParameters\": {\n         \"proxy\": \"path/to/resource\"\n       },\n       \"httpMethod\": \"GET\",\n       \"stageVariables\": {\n         \"baz\": \"qux\"\n       },\n       \"path\": \"/path/to/resource/324\"\n      }\n```", "```py\n{\n  \"statusCode\": \"200\",\n  \"body\": \"[{\"EventCount\": 3, \"EventDay\": 20171001, \"EventId\": \n          \"324\"}]\",\n  \"headers\": { \"Content-Type\": \"application/json\", \"Access-Control-\n              Allow-Origin\": \"*\"\n }\n}\n```", "```py\n[ \n   {\n     \"EventCount\": 3,\n     \"EventDay\": 20171001,\n     \"EventId\": \"324\"\n   },\n   {\n     \"EventCount\": 5,\n     \"EventDay\": 20171002,\n     \"EventId\": \"324\"\n   }\n]\n```", "```py\n      [{\n           \"EventCount\": 3,\n           \"EventDay\": 20171001,\n           \"EventId\": \"324\"\n      },\n      {\n           \"EventCount\": 5,\n           \"EventDay\": 20171002,\n           \"EventId\": \"324\"\n      }]\n```", "```py\n      [{\"EventCount\": 5, \"EventDay\": 20171002, \"EventId\": \"324\"}]\n```"]