["```py\n$ aws configure --profile demo\n```", "```py\n $ vi ~/.aws/credentials\n      [default]\n      aws_access_key_id =\n      AAAAAAAAAAAAAAAAAAAA\n      aws_secret_access_key =\n      1111111111111111111111111111111111111111\n\n      [demo]\n      aws_access_key_id =\n      AAAAAAAAAAAAAAAAAAAA\n      aws_secret_access_key =\n      1111111111111111111111111111111111111111\n```", "```py\n$ aws s3api create-bucket --bucket <you-bucket-name> --profile demo --create-bucket-configuration LocationConstraint=<your-aws-region> --region <your-aws-region>\n```", "```py\n#!/bin/sh\nexport profile=\"demo\"\nexport region=\"<your-aws-region>\"\nexport aws_account_id=$(aws sts get-caller-identity --query 'Account' --profile $profile | tr -d '\\\"')\n# export aws_account_id=\"<your-aws-accountid>\"\nexport template=\"lambda-dynamo-data-api\"\nexport bucket=\"<you-bucket-name>\"\nexport prefix=\"tmp/sam\"\n\n# Lambda settings\nexport zip_file=\"lambda-dynamo-data-api.zip\"\nexport files=\"lambda_return_dynamo_records.py\"\n\n```", "```py\n$ find ./ -type f -exec sed -i '' -e 's/000000000000/111111111111/' {} \\;\n```", "```py\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"dynamodb:BatchGetItem\",\n                \"dynamodb:DescribeTable\",\n                \"dynamodb:GetItem\",\n                \"dynamodb:Query\",\n                \"dynamodb:Scan\"\n            ],\n            \"Resource\": [\n                \"arn:aws:dynamodb:eu-west-1:000000000000:\n                 table/user-visits\",\n                \"arn:aws:dynamodb:eu-west-1:000000000000:\n                 table/user-visits-sam\"         \n            ]\n        }\n    ]\n}\n```", "```py\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"logs:CreateLogGroup\",\n        \"logs:CreateLogStream\",\n        \"logs:PutLogEvents\",\n        \"logs:DescribeLogStreams\"\n    ],\n      \"Resource\": [\n        \"arn:aws:logs:*:*:*\"\n    ]\n  },\n  {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"cloudwatch:PutMetricData\"\n      ],\n      \"Resource\": \"*\"\n    }\n ]\n}\n```", "```py\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": \"lambda.amazonaws.com\"\n      },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\n```", "```py\n#!/bin/sh\n#This Script creates a Lambda role and attaches the policies\n\n#import environment variables\n. ./common-variables.sh\n\n#Setup Lambda Role\nrole_name=lambda-dynamo-data-api\naws iam create-role --role-name ${role_name} \\\n    --assume-role-policy-document file://../../IAM/assume-role-lambda.json \\\n    --profile $profile || true\n\nsleep 1\n#Add and attach DynamoDB Policy\ndynamo_policy=dynamo-readonly-user-visits\naws iam create-policy --policy-name $dynamo_policy \\\n    --policy-document file://../../IAM/$dynamo_policy.json \\\n    --profile $profile || true\n\nrole_policy_arn=\"arn:aws:iam::$aws_account_id:policy/$dynamo_policy\"\naws iam attach-role-policy \\\n    --role-name \"${role_name}\" \\\n    --policy-arn \"${role_policy_arn}\"  --profile ${profile} || true\n\n#Add and attach cloudwatch_policy\ncloudwatch_policy=lambda-cloud-write\naws iam create-policy --policy-name $cloudwatch_policy \\\n    --policy-document file://../../IAM/$cloudwatch_policy.json \\\n    --profile $profile || true\n\nrole_policy_arn=\"arn:aws:iam::$aws_account_id:policy/$cloudwatch_policy\"\naws iam attach-role-policy \\\n    --role-name \"${role_name}\" \\\n    --policy-arn \"${role_policy_arn}\"  --profile ${profile} || true\n```", "```py\n#!/bin/sh\n#setup environment variables\n. ./common-variables.sh\n\n#Create Lambda package and exclude the tests to reduce package size\n(cd ../../lambda_dynamo_read;\nmkdir -p ../package/\nzip -FSr ../package/\"${zip_file}\" ${files} -x *tests/*)\n```", "```py\nAWSTemplateFormatVersion: '2010-09-09'\nTransform: 'AWS::Serverless-2016-10-31'\nDescription: >-\n  This Lambda is invoked by API Gateway and queries DynamoDB.\nParameters:\n    AccountId:\n        Type: String\nResources:\n  lambdadynamodataapi:\n    Type: AWS::Serverless::Function\n    Properties:\n      Handler: lambda_return_dynamo_records.lambda_handler\n      Runtime: python3.6\n      CodeUri: ../../package/lambda-dynamo-data-api.zip\n      FunctionName: lambda-dynamo-data-api-sam\n      Description: >-\n        This Lambda is invoked by API Gateway and queries DynamoDB.\n      MemorySize: 128\n      Timeout: 3  \n      Role: !Sub 'arn:aws:iam::${AccountId}:\n                  role/lambda-dynamo-data-api'\n      Environment:\n        Variables:\n          environment: dev\n      Events:\n        CatchAll:\n          Type: Api\n          Properties:\n            Path: /visits/{resourceId}\n            Method: GET\n  DynamoDBTable:\n    Type: AWS::DynamoDB::Table\n    Properties:\n      TableName: user-visits-sam\n      SSESpecification:\n        SSEEnabled: True\n      AttributeDefinitions:\n        - AttributeName: EventId\n          AttributeType: S\n        - AttributeName: EventDay\n          AttributeType: N\n      KeySchema:\n        - AttributeName: EventId\n          KeyType: HASH\n        - AttributeName: EventDay\n          KeyType: RANGE\n      ProvisionedThroughput:\n        ReadCapacityUnits: 1\n        WriteCapacityUnits: 1\n```", "```py\n$ aws cloudformation package --template-file $template.yaml \\\n    --output-template-file ../../package/$template-output.yaml \\\n    --s3-bucket $bucket --s3-prefix backend \\\n    --region $region --profile $profile\n\nSuccessfully packaged artifacts and wrote output template to file ../../package/lambda-dynamo-data-api-output.yaml.\nExecute the following command to deploy the packaged template\naws cloudformation deploy --template-file /mnt/c/serverless-microservice-data-api/package/lambda-dynamo-data-api-output.yaml --stack-name <YOUR STACK NAME>\n```", "```py\n$ aws cloudformation deploy --template-file ../../package/$template-output.yaml \\\n    --stack-name $template --capabilities CAPABILITY_IAM \\\n    --parameter-overrides AccountId=${aws_account_id} \\\n    --region $region --profile $profile\n\nWaiting for changeset to be created..\nWaiting for stack create/update to complete\nSuccessfully created/updated stack - lambda-dynamo-data-api\n```", "```py\n#!/usr/bin/env bash\n\n# Variables\n. ./common-variables.sh\n\n#Create Zip file of your Lambda code (works on Windows and Linux)\n./create-lambda-package.sh\n\n#Package your Serverless Stack using SAM + Cloudformation\naws cloudformation package --template-file $template.yaml \\\n    --output-template-file ../../package/$template-output.yaml \\\n    --s3-bucket $bucket --s3-prefix backend \\\n    --region $region --profile $profile\n\n#Deploy your Serverless Stack using SAM + Cloudformation\naws cloudformation deploy --template-file ../../package/$template-output.yaml \\\n    --stack-name $template --capabilities CAPABILITY_IAM \\\n    --parameter-overrides AccountId=${aws_account_id} \\\n    --region $region --profile $profile\n```", "```py\nfrom boto3 import resource\n\nclass DynamoRepository:\n    def __init__(self, target_dynamo_table, region='eu-west-1'):\n        self.dynamodb = resource(service_name='dynamodb', region_name=region)\n        self.target_dynamo_table = target_dynamo_table\n        self.table = self.dynamodb.Table(self.target_dynamo_table)\n\n    def update_dynamo_event_counter(self, event_name, \n            event_datetime, event_count=1):\n        return self.table.update_item(\n            Key={\n                'EventId': event_name,\n                'EventDay': event_datetime\n            },\n            ExpressionAttributeValues={\":eventCount\": event_count},\n            UpdateExpression=\"ADD EventCount :eventCount\")\n\ndef main():\n    table_name = 'user-visits-sam'\n    dynamo_repo = DynamoRepository(table_name)\n    print(dynamo_repo.update_dynamo_event_counter('324', 20171001))\n    print(dynamo_repo.update_dynamo_event_counter('324', 20171001, 2))\n    print(dynamo_repo.update_dynamo_event_counter('324', 20171002, 5))\n\nif __name__ == '__main__':\n    main()\n```", "```py\n[{\"EventCount\": 3, \"EventDay\": 20171001, \"EventId\": \"324\"}, {\"EventCount\": 5, \"EventDay\": 20171002, \"EventId\": \"324\"}]\n```", "```py\n[{\"EventCount\": 5, \"EventDay\": 20171002, \"EventId\": \"324\"}]\n```", "```py\n      Resources:\n        lambdadynamodataapi:\n          Type: AWS::Serverless::Function\n          Properties:\n            Handler: lambda_return_dynamo_records.lambda_handler\n            Runtime: python3.7\n```", "```py\n#!/usr/bin/env bash\n. ./common-variables.sh\naws cloudformation delete-stack --stack-name $template --region $region --profile $profile\n```"]