["```py\nimport antigravity\n```", "```py\n    from flask import Flask\n\n    app = Flask(__name__)\n\n    @app.route('/')\n    def hello():\n        return 'Hello, world!'\n\n    if __name__ == '__main__':\n        app.run()\n    ```", "```py\n    $ python hello.py\n    ```", "```py\napp = Flask(__name__)\n```", "```py\n@app.route('/')\ndef hello():\n  return 'Hello, world!'\n```", "```py\nif __name__ == '__main__':\n  app.run()\n```", "```py\nmanage.py\nrequirements.txt\nsched/\n  app.py\n  config.py\n  filters.py\n  forms.py\n  __init__.py\n  models.py\n  static/\n  templates/\n```", "```py\napp.run('0.0.0.0')\n```", "```py\napp.run('0.0.0.0', 8080)\n```", "```py\napp.run(debug=True)\n```", "```py\nfrom flask.ext.script import Manager\nfrom sched.app import app\n\nmanager = Manager(app)\napp.config['DEBUG'] = True # Ensure debugger will load.\n\nif __name__ == '__main__':\n  manager.run()\n```", "```py\nFlask\nFlask-Script\n```", "```py\n$ python manage.py runserver \u2013t 0.0.0.0 \u2013p 8080\n\n```", "```py\n    @app.route('/appointments/')\n    def appointment_list():\n      return 'Listing of all appointments we have.'\n\n    @app.route('/appointments/<int:appointment_id>/')\n    def appointment_detail(appointment_id):\n      return 'Detail of appointment     #{}.'.format(appointment_id)\n\n    @app.route( \n      '/appointments/<int:appointment_id>/edit/',\n      methods=['GET', 'POST'])\n\n    @app.route(...) and def appointment_edit(...).\n\n    def appointment_edit(appointment_id):\n      return 'Form to edit appointment #.'.format(appointment_id)\n\n    @app.route(\n      '/appointments/create/', \n      methods=['GET', 'POST'])\n    def appointment_create():\n      return 'Form to create a new appointment.'\n\n    @app.route(\n      '/appointments/<int:appointment_id>/delete/,\n      methods=['DELETE'])\n    def appointment_delete(appointment_id):\n        raise NotImplementedError('DELETE')\n    ```", "```py\n    from flask import url_for\n\n    @app.route('/appointments/<int:appointment_id>/')\n    def appointment_detail(appointment_id):\n      edit_url = url_for('appointment_edit',\n        appointment_id=appointment_id)\n      # Return the URL string just for demonstration.\n      return edit_url\n    ```", "```py\n    @app.route(\n      '/appointments/<int:appointment_id>/',\n      endpoint='some_name')\n    def appointment_detail(appointment_id):\n      # Use url_for('some_name', appointment_id=x)\n      # to build a URL for this.\n      return 'Just to demonstrate...'\n    ```", "```py\n@app.route('/', subdomain='<spam_eggs>')\ndef subdomain_example(spam_eggs):\n  return '...'\n```", "```py\n127.0.0.1    localhost local.example.com foo.local.example.com\n```", "```py\nlocal.example.com A 127.0.0.1\n*.local.example.com A 127.0.0.1\n```", "```py\n    from flask import Flask, make_response\n\n    app = Flask(__name__)\n\n    @app.route('/string/')\n    def return_string():\n      return 'Hello, world!'\n\n    @app.route('/object/')\n    def return_object():\n      headers = {'Content-Type': 'text/plain'}\n      return make_response('Hello, world!', status=200,\n        headers=headers)\n\n    @app.route('/tuple/')\n    def return_tuple():\n      return 'Hello, world!', 200, {'Content-Type':\n        'text/plain'}\n    ```", "```py\n    from flask import request\n\n    def dump_request_detail(request):\n      request_detail = \"\"\"\n    # Before Request #\n    request.endpoint: {request.endpoint}\n    request.method: {request.method}\n    request.view_args: {request.view_args}\n    request.args: {request.args}\n    request.form: {request.form}\n    request.user_agent: {request.user_agent}\n    request.files: {request.files}\n    request.is_xhr: {request.is_xhr}\n\n    ## request.headers ##\n    {request.headers}\n      \"\"\".format(request=request).strip()\n      return request_detail\n\n    @app.before_request\n    def callme_before_every_request():\n      # Demo only: the before_request hook.\n      app.logger.debug(dump_request_detail(request))\n\n    @app.after_request\n    def callme_after_every_response(response):\n      # Demo only: the after_request hook.\n      app.logger.debug('# After Request #\\n' + repr(response))\n      return response\n    ```", "```py\nimport random\n\nfrom flask import g\n\n@app.before_request\ndef set_on_g_object():\n  x = random.randint(0, 9)\n  app.logger.debug('before request: g.x is {x}'.format(x=x))\n  g.x = x\n\n@app.after_request\ndef get_on_g_object(response):\n  app.logger.debug(\n    'after request: g.x is {g.x}'.format(g=g))\n  return response\n```", "```py\napp.add_url_rule('/attachments/<path:filename>', endpoint='attachments', build_only=True)\n```", "```py\nimport os.path\nfrom flask import Flask, send_from_directory\n\n# Setting static_folder=None disables built-in static handler.\napp = Flask(__name__, static_folder=None)\n# Use folder called 'assets' sitting next to app.py module.\nassets_folder = os.path.join(app.root_path, 'assets')\n\n@app.route('/assets/<path:filename>')\ndef assets(filename):\n  # Add custom handling here.\n  # Send a file download response.\n  return send_from_directory(assets_folder, filename)\n```", "```py\napp = Flask(__name__, static_folder='foldername')\n```", "```py\napp = Flask(__name__, static_url_path='/assets')\n```", "```py\napp.config['SEND_FILE_MAX_AGE_DEFAULT'] = 2592000\n```", "```py\napp = Flask(__name__, static_url_path='/static/v2')\n```", "```py\nFlask\nFlask-Script\nFlask-SQLAlchemy\n```", "```py\n$ pip install -r requirements.txt\n\n```", "```py\nfrom datetime import datetime\n\nfrom sqlalchemy import Boolean, Column\nfrom sqlalchemy import DateTime, Integer, String, Text\nfrom sqlalchemy.ext.declarative import declarative_base\nBase = declarative_base()\n\nclass Appointment(Base):\n  \"\"\"An appointment on the calendar.\"\"\"\n  __tablename__ = 'appointment'\n\n  id = Column(Integer, primary_key=True)\n  created = Column(DateTime, default=datetime.now)\n  modified = Column(DateTime, default=datetime.now,\n    onupdate=datetime.now)\n\n  title = Column(String(255))\n  start = Column(DateTime, nullable=False)\n  end = Column(DateTime, nullable=False)\n  allday = Column(Boolean, default=False)\n  location = Column(String(255))\n  description = Column(Text)\n```", "```py\nfrom flask import Flask\nfrom flask.ext.sqlalchemy import SQLAlchemy\n\nfrom sched.models import Base\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///sched.db'\n\n# Use Flask-SQLAlchemy for its engine and session\n# configuration. Load the extension, giving it the app object,\n# and override its default Model class with the pure\n# SQLAlchemy declarative Base class.\ndb = SQLAlchemy(app)\ndb.Model = Base\n```", "```py\n  @property\n  def duration(self):\n    delta = self.end - self.start\n      return delta.days * 24 * 60 * 60 + delta.seconds\n\n  def __repr__(self):\n    return (u'<{self.__class__.__name__}: {self.id}>'\n      .format(self=self))\n```", "```py\n$ python models.py\n\n```", "```py\nfrom datetime import timedelta\n\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\nengine = create_engine('sqlite:///sched.db', echo=True)\n```", "```py\nBase.metadata.create_all(engine)\nSession = sessionmaker(bind=engine)\nsession = Session()\n```", "```py\nnow = datetime.now()\n\nsession.add(Appointment(\n  title='Important Meeting',\n  start=now + timedelta(days=3),\n  end=now + timedelta(days=3, seconds=3600),\n  allday=False,\n  location='The Office'))\nsession.commit()\n\nsession.add(Appointment(\n  title='Past Meeting',\n  start=now - timedelta(days=3),\n  end=now - timedelta(days=3, seconds=3600),\n  allday=False,\n  location='The Office'))\nsession.commit()\n\nsession.add(Appointment(\n  title='Follow Up',\n  start=now + timedelta(days=4),\n  end=now + timedelta(days=4, seconds=3600),\n  allday=False,\n  location='The Office'))\nsession.commit()\n\nsession.add(Appointment(\n  title='Day Off',\n  start=now + timedelta(days=5),\n  end=now + timedelta(days=5),\n  allday=True))\nsession.commit()\n```", "```py\n# Create. Add a new model instance to the session.\nappt = Appointment(\n  title='My Appointment',\n  start=now,\n  end=now + timedelta(seconds=1800),\n  allday=False)\n\nsession.add(appt)\nsession.commit()\n\n# Update. Update the object in place, then commit.\nappt.title = 'Your Appointment'\nsession.commit()\n\n# Delete. Tell the session to delete the object.\nsession.delete(appt)\nsession.commit()\n```", "```py\n# Get an appointment by ID.\nappt = session.query(Appointment).get(1)\n\n# Get all appointments.\nappts = session.query(Appointment).all()\n\n# Get all appointments before right now, after right now.\nappts = session.query(Appointment).filter(Appointment.start < datetime.now()).all()\nappts = session.query(Appointment).filter(Appointment.start >= datetime.now()).all()\n\n# Get all appointments before a certain date.\nappts = session.query(Appointment).filter(Appointment.start <= datetime(2013, 5, 1)).all()\n\n# Get the first appointment matching the filter query.\nappt = session.query(Appointment).filter(Appointment.start <= datetime(2013, 5, 1)).first()\n```", "```py\n    Flask\n    Flask-Script\n    Flask-SQLAlchemy\n    WTForms\n    ```", "```py\n    $ pip install -r requirements.txt\n\n    ```", "```py\n    from wtforms import Form, BooleanField, DateTimeField\n    from wtforms import TextAreaField, TextField\n    from wtforms.validators import Length, required\n\n    class AppointmentForm(Form):\n      title = TextField('Title', [Length(max=255)])\n      start = DateTimeField('Start', [required()])\n      end = DateTimeField('End')\n      allday = BooleanField('All Day')\n      location = TextField('Location', [Length(max=255)])\n      description = TextAreaField('Description')\n    ```", "```py\nfrom __future__ import print_function\n```", "```py\n# Demonstration of a WTForms form by itself.\nform = AppointmentForm()\nprint('Here is how a form field displays:')\nprint(form.title.label)\nprint(form.title)\n```", "```py\nHere is how a form field displays:\n<label for=\"title\">Title</label>\n<input id=\"title\" name=\"title\" type=\"text\" value=\"\">\n```", "```py\n# Give it some data.\nfrom werkzeug.datastructures import \\\n  ImmutableMultiDict as multidict\n\ndata = multidict([('title', 'Hello, form!')])\nform = AppointmentForm(data)\nprint('Here is validation...')\nprint('Does it validate: {}'.format(form.validate()))\nprint('There is an error attached to the field...')\nprint('form.start.errors: {}'.format(form.start.errors))\n```", "```py\nHere is validation...\nDoes it validate: False\nThere is an error attached to the field...\nform.start.errors: [u'This field is required.']\n```", "```py\n<form method=post enctype=multipart/form-data>\n  <input type=file name=file>\n  <input type=submit value=Attach>\n</form>\n```", "```py\nimport os\n\nfrom flask import request\nfrom werkzeug import secure_filename\n\n# '...' here and below need to be set according to your project.\n# In your configuration, set a root folder for file uploads.\nFILE_FOLDER = '...'\n\n@app.route('...', methods=['POST'])\ndef file_attach():\n  # Match name from <input type=file name=file>: 'file'.\n  filestorage = request.files['file']\n  # Do not allow '..' in the filename.\n  filename = secure_filename(filestorage.filename)\n  dest = os.path.join(FILE_FOLDER, filename)\n  filestorage.save(dest)\n  return 'Put your response here.'\n```", "```py\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <title>{% block title %}{% endblock title %}</title>\n  <link rel=\"shortcut icon\" type=\"image/x-icon\"\n    href=\"{{ url_for('static', filename='img/favicon.ico') }}\"/>\n  <link href=\"... bootstrap css ...\" rel=\"stylesheet\">\n  <link href=\"... responsive css ...\" rel=\"stylesheet\">\n  <script src=\"img/... jQuery js ...\"></script>\n  <script src=\"img/... bootstrap js ...\"></script>\n  {# Link any other .css or .js found in app static folder. #}\n  <style>\n    {# Add simple CSS style tweaks here. #}\n  </style>\n  <script>\n    $(function() {\n      {# Add page-load JavaScript here. #}\n    });\n  </script>\n  {% block extra_head %}{% endblock extra_head %}\n</head>\n<body>\n  <div id=\"main\">\n    <div class=\"utility-nav navbar navbar-fixed-top\">\n    <div class=\"navbar-inner\">\n    <div class=\"container\">\n      {# Navbar goes here. #}\n    </div>\n   </div>\n  </div>\n  <div class=\"content container\">\n    {% block main %}{% endblock main %}\n  </div>\n  </div>\n</body>\n</html>\n```", "```py\n{% extends 'base.html' %}\n{% block title %}Page Title{% endblock title %}\n{% block main %}\n  <h2>This is a child template.</h2>\n{% endblock main %}\n```", "```py\nfrom flask import render_template\n#...\n@app.route('/')\ndef index():\n  return render_template('index.html')\n```", "```py\n    from flask import abort, jsonify, redirect, render_template\n    from flask import request, url_for\n    from sched.forms import AppointmentForm\n    from sched.models import Appointment\n\n    # ... skipping ahead. Keep previous code from app.py here.\n\n    @app.route('/appointments/create/', methods=['GET', 'POST'])\n    def appointment_create():\n      \"\"\"Provide HTML form to create a new appointment.\"\"\"\n      form = AppointmentForm(request.form)\n      if request.method == 'POST' and form.validate():\n        appt = Appointment()\n        form.populate_obj(appt)\n        db.session.add(appt)\n        db.session.commit()\n        # Success. Send user back to full appointment list.\n        return redirect(url_for('appointment_list'))\n      # Either first load or validation error at this point.\n      return render_template('appointment/edit.html', form=form)\n    ```", "```py\n    {% macro edit_field(field, catch_kwargs=true) %}\n      <div class=\"control-group{% if field.errors %} error{% endif %}\">\n        {{ field.label(class=\"control-label\") }}\n      <div class=\"controls\">\n        {{ field(**kwargs) }}\n        {% for error in field.errors %}\n         <span class=\"help-inline\">{{ error }}</span>\n        {% endfor %}\n      </div>\n      </div>\n    {% endmacro %}\n    ```", "```py\n    {% extends 'base.html' %}\n\n    {% from 'appointment/common.html' import edit_field %}\n\n    {% set title = 'Add Appointment' %}\n\n    {% block title %}{{ title }}{% endblock title %}\n\n    {% block main %}\n    <div class=\"row\">\n      <div class=\"appointment-edit well offset2 span8\">\n      <form method=\"post\" class=\"form-horizontal\">\n        <legend>{{ title }}</legend>\n        {{ edit_field(form.title, maxlength=255, class=\"span3\",\n          placeholder=\"Important Meeting\") }}\n        {{ edit_field(form.start, class=\"span3\", type=\"datetime\",\n          placeholder=\"yyyy-mm-dd hh:mm:ss\") }}\n        {{ edit_field(form.end, class=\"span3\", type=\"datetime\",\n          placeholder=\"yyyy-mm-dd hh:mm:ss\") }}\n        {{ edit_field(form.allday) }}\n        {{ edit_field(form.location, maxlength=255, class=\"span3\",\n          placeholder=\"The Office\") }}\n        {{ edit_field(form.description, rows=\"5\", class=\"span5\",\n          placeholder=\"Bring a sharpened #2 pencil.\") }}\n        <div class=\"form-actions\">\n        <button type=\"submit\" class=\"btn\">Save</button>\n        or <a href=\"{{ url_for('appointment_list') }}\">Cancel</a>\n        </div>\n      </form>\n      </div>\n    </div>\n    {% endblock main %}\n    ```", "```py\n    # Note the import statements from the previous section.\n\n    @app.route('/appointments/<int:appointment_id>/')\n    def appointment_detail(appointment_id):\n      \"\"\"Provide HTML page with a given appointment.\"\"\"\n      # Query: get Appointment object by ID.\n      appt = db.session.query(Appointment).get(appointment_id)\n      if appt is None:\n        # Abort with Not Found.\n        abort(404)\n      return render_template('appointment/detail.html',\n        appt=appt)\n    ```", "```py\n    {% macro detail(appt,\n      link_title=false,\n      show_edit=true,\n      show_description=true) %}\n    <div class=\"appointment-detail\">\n      {% if link_title %}\n        <h3>\n          <a href=\"{{ url_for('appointment_detail',\n            appointment_id=appt.id) }}\">\n            {{ appt.title }}</a>\n        </h3>\n      {% else %}\n        <h3>{{ appt.title }}</h3>\n      {% endif %}\n      {% if appt.location %}\n        <p><i class=\"icon-home\"></i> {{ appt.location }}</p>\n      {% endif %}\n      {% if appt.allday %}\n        <p><i class=\"icon-calendar\"></i> {{ appt.start | date }}</p>\n      {% else %}\n        <p><i class=\"icon-calendar\"></i> {{ appt.start | datetime }}\n          for {{ appt.duration | duration }}</p>\n      {% endif %}\n      {% if show_edit %}\n      <div class=\"edit-controls\">\n        <i class=\"icon-pencil\"></i>\n        <a href=\"{{ url_for('appointment_edit',\n          appointment_id=appt.id) }}\">Edit</a>\n        <span class=\"inline-pad\"></span>\n        <i class=\"icon-trash\"></i>\n        <a class=\"appointment-delete-link\" href=\"#\"\n          data-delete-url=\"{{ url_for('appointment_delete',\n          appointment_id=appt.id) }}\">Delete</a>\n      </div>\n      {% endif %}\n      {% if show_description and appt.description %}\n      <div class=\"row\">\n        <p class=\"span5\">{{ appt.description | nl2br }}</p>\n      </div>\n      {% endif %}\n    </div>\n    {% endmacro %}\n    ```", "```py\n    {% extends 'base.html' %}\n\n    {% from 'appointment/common.html' import detail %}\n\n    {% block title %}\n      {{ appt.title }}\n    {% endblock title %}\n\n    {% block main %}\n    <div class=\"row\">\n      <div class=\"span12\">\n        {{ detail(appt) }}\n      </div>\n    </div>\n    {% endblock main %}\n    ```", "```py\n    @app.route('/appointments/\n      <int:appointment_id>/edit/,\n      methods=['GET', 'POST'])\n\n    def appointment_edit(appointment_id):\n      \"\"\"Provide HTML form to edit a given appointment.\"\"\"\n      appt = db.session.query(Appointment).get(appointment_id)\n      if appt is None:\n        abort(404)\n      form = AppointmentForm(request.form, appt)\n      if request.method == 'POST' and form.validate():\n        form.populate_obj(appt)\n        db.session.commit()\n        # Success. Send the user back to the detail view.\n        return redirect(url_for('appointment_detail',\n          appointment_id=appt.id))\n        return render_template('appointment/edit.html', form=form)\n    ```", "```py\n    {% if request.endpoint.endswith('edit') %}\n      {% set title = 'Edit Appointment' %}\n    {% else %}\n      {% set title = 'Add Appointment' %}\n    {% endif %}\n    ```", "```py\n    @app.route('/appointments/')\n    def appointment_list():\n      \"\"\"Provide HTML listing of all appointments.\"\"\"\n      # Query: Get all Appointment objects, sorted by date.\n      appts = (db.session.query(Appointment)\n        .order_by(Appointment.start.asc()).all())\n      return render_template('appointment/index.html',\n        appts=appts)\n    ```", "```py\n    {% extends 'base.html' %}\n\n    {% from 'appointment/common.html' import detail %}\n\n    {% block title %}Appointments{% endblock title %}\n\n    {% block main %}\n    <div class=\"row\">\n      {% for appt in appts %}\n        <div class=\"span12\">\n        {{ detail(appt,\n          link_title=true,\n          show_edit=false,\n          show_description=false) }}\n        </div>\n      {% else %}\n        <h3 class=\"span12\">No appointments.</h3>\n      {% endfor %}\n    </div>\n    {% endblock main %}\n    ```", "```py\n    @app.route('/appointments/\n      <int:appointment_id>/delete/',\n      methods=['DELETE'])\n\n    def appointment_delete(appointment_id):\n      \"\"\"Delete record using HTTP DELETE, respond with JSON.\"\"\"\n      appt = db.session.query(Appointment).get(appointment_id)\n      if appt is None:\n        # Abort with Not Found, but with simple JSON response.\n        response = jsonify({'status': 'Not Found'})\n        response.status = 404\n        return response\n      db.session.delete(appt)\n      db.session.commit()\n      return jsonify({'status': 'OK'})\n    ```", "```py\n    <script>\n     $(function() {\n      $(\".appointment-delete-link\").on(\"click\", function() {\n        var delete_url = $(this).attr('data-delete-url');\n        $.ajax({\n          url: delete_url,\n          type: 'DELETE',\n          success: function(response) {\n            if (response.status == 'OK') {\n              window.location = {{ url_for('appointment_list') }};\n            } else {\n            alert('Delete failed.')\n          }\n        }\n        });\n        return false;\n      });\n    });\n    </script>\n    ```", "```py\n    def do_datetime(dt, format=None):\n      \"\"\"Jinja template filter to format a datetime object.\"\"\"\n      if dt is None:\n        # By default, render an empty string.\n        return ''\n      if format is None:\n        # No format is given in the template call.\n        # Use a default format.\n        #\n        # Format time in its own strftime call in order to:\n        # 1\\. Left-strip leading 0 in hour display.\n        # 2\\. Use 'am'/'pm' (lower case) instead of 'AM'/'PM'.\n        formatted_date = dt.strftime('%Y-%m-%d - %A')\n        formatted_time =\\\n          dt.strftime('%I:%M%p').lstrip('0').lower()\n        formatted = '%s at %s' %\\\n          (formatted_date, formatted_time)\n      else:\n        formatted = dt.strftime(format)\n      return formatted\n    ```", "```py\n    def init_app(app):\n      \"\"\"Initialize a Flask application with custom filters.\"\"\"\n      app.jinja_env.filters['datetime'] = do_datetime\n    ```", "```py\n    from sched import filters\n    filters.init_app(app)\n    ```", "```py\n    @app.errorhandler(404)\n    def error_not_found(error):\n      return render_template('error/not_found.html'), 404\n    ```", "```py\n    {% extends 'base.html' %}\n\n    {% block title %}Not Found{% endblock title %}\n\n    {% block main %}\n    <h2>Not Found</h2>\n    {% endblock main %}\n    ```", "```py\nclass SchedulingException(Exception):\n  \"\"\"Some application-specific error has occurred.\"\"\"\n  pass\n\n@app.errorhandler(SchedulingException)\ndef scheduling_exception_handler(error):\n  return 'Just a demo of app.errorhandler...', 500\n\n@app.route('/test_error/')\ndef test_error():\n  raise SchedulingException('Use my custom error handler.')\n```", "```py\napp = Flask(__name__)\napp.config['DEBUG'] = True\n```", "```py\n1/0 # Divide by zero to get an exception.\nraise Exception(\"Don't Panic!\")\n```", "```py\n    from datetime import datetime\n\n    from sqlalchemy import Column\n    from sqlalchemy import Boolean, DateTime, Integer, String\n    from sqlalchemy.orm import synonym\n    from sqlalchemy.ext.declarative import declarative_base\n    from werkzeug import check_password_hash\n    from werkzeug import generate_password_hash\n\n    Base = declarative_base()\n\n    class User(Base):\n      \"\"\"A user login, with credentials and authentication.\"\"\"\n      __tablename__ = 'user'\n\n      id = Column(Integer, primary_key=True)\n      created = Column(DateTime, default=datetime.now)\n      modified = Column(DateTime, default=datetime.now,\n        onupdate=datetime.now)\n\n      name = Column('name', String(200))\n      email = Column(String(100), unique=True, nullable=False)\n      active = Column(Boolean, default=True)\n    ```", "```py\n      _password = Column('password', String(100))\n\n      def _get_password(self):\n        return self._password\n\n      def _set_password(self, password):\n        if password:\n          password = password.strip()\n        self._password = generate_password_hash(password)\n\n      password_descriptor = property(_get_password,\n        _set_password)\n      password = synonym('_password',\n        descriptor=password_descriptor)\n    ```", "```py\n      def check_password(self, password):\n        if self.password is None:\n          return False\n        password = password.strip()\n        if not password:\n          return False\n        return check_password_hash(self.password, password)\n\n      @classmethod\n      def authenticate(cls, query, email, password):\n        email = email.strip().lower()\n        user = query(cls).filter(cls.email==email).first()\n        if user is None:\n          return None, False\n        if not user.active:\n          return user, False\n        return user, user.check_password(password)\n    ```", "```py\nclass Appointment(Base):\n  # ... existing code.\n  user_id = Column(Integer,\n    ForeignKey('user.id'), nullable=False)\n  user = relationship(User, lazy='joined', join_depth=1)\n  # ... existing code.\n```", "```py\nappt = Appointment(user_id=current_user.id)\n```", "```py\nif appt.user_id != current_user.id:\n  abort(403)\n```", "```py\n    from flask import session\n    # ... in a request ...\n    session['spam'] = 'eggs'\n    # ... in another request ...\n    spam = session.get('spam') # 'eggs'\n    ```", "```py\n    Flask\n    Flask-Login\n    Flask-Script\n    Flask-SQLAlchemy\n    WTForms\n    ```", "```py\n    $ pip install -r requirements.txt\n\n    ```", "```py\n    from flask.ext.login import LoginManager, current_user\n    from flask.ext.login import login_user, logout_user\n    from sched.models import User\n\n    # Use Flask-Login to track current user in Flask's session.\n    login_manager = LoginManager()\n    login_manager.setup_app(app)\n    login_manager.login_view = 'login'\n\n    @login_manager.user_loader\n    def load_user(user_id):\n      \"\"\"Flask-Login hook to load a User instance from ID.\"\"\"\n      return db.session.query(User).get(user_id)\n    ```", "```py\n      def get_id(self):\n        return str(self.id)\n\n      def is_active(self):\n        return True\n\n      def is_anonymous(self):\n        return False\n\n      def is_authenticated(self):\n        return True\n    ```", "```py\n    @app.route('/login/', methods=['GET', 'POST'])\n    def login():\n      if current_user.is_authenticated():\n        return redirect(url_for('appointment_list'))\n      form = LoginForm(request.form)\n      error = None\n      if request.method == 'POST' and form.validate():\n        email = form.username.data.lower().strip()\n        password = form.password.data.lower().strip()\n        user, authenticated = \\\n          User.authenticate(db.session.query, email,\n            password)\n        if authenticated:\n          login_user(user)\n          return redirect(url_for('appointment_list'))\n        else:\n          error = 'Incorrect username or password.'\n        return render_template('user/login.html',\n          form=form, error=error)\n\n    @app.route('/logout/')\n    def logout():\n      logout_user()\n      return redirect(url_for('login'))\n    ```", "```py\n    from flask.ext.login import login_required\n    @app.route('/appointments/')\n    @login_required\n    def appointment_list():\n      # ...\n    ```", "```py\nfrom flask import flash\nflash('Sucessfully did that thing.', 'success')\n\n```", "```py\n{% for cat, m in get_flashed_messages(with_categories=true) %}\n <div class=\"alert\">{{ m }}</div>\n{% endfor %}\n```", "```py\n    $ sudo apt-get update && sudo apt-get install nginx\n    $ # Load config into /etc/nginx/sites-available/default\n    $ sudo service nginx restart\n    $ pip install gunicorn\n    $ gunicorn --access-logfile - -b 127.0.0.1:5000 sched.app:app\n\n    ```", "```py\n    server {\n      listen 80;\n      server_name localhost;\n      access_log  /var/log/nginx/access.log;\n      error_log  /var/log/nginx/error.log;\n      location / {\n        proxy_pass http://127.0.0.1:5000/;\n        proxy_redirect off;\n        proxy_set_header Host            $host;\n        proxy_set_header X-Real-IP       $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      }\n    }\n    ```", "```py\nserver {\n  listen 80;\n  server_name localhost;\n  access_log  /var/log/nginx/access.log;\n  error_log  /var/log/nginx/error.log;\n  location  /static/ {\n    # /static/ is appended to root path on the request.\n    root /var/www/myproject/sched/;\n  }\n  location / {\n    proxy_pass http://127.0.0.1:5000/;\n    proxy_redirect off;\n    proxy_set_header Host            $host;\n    proxy_set_header X-Real-IP       $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n  }\n}\n```", "```py\nfrom cherrypy.wsgiserver import CherryPyWSGIServer\nfrom sched.app import app\nserver = CherryPyWSGIServer(('127.0.0.1', 5000), app)\nserver.start()\n```"]